{"version":3,"sources":["../../../src/local/modchooser/itemchooser.js"],"names":["tabMode","_tabMode","courseId","caller","dataset","sectionid","then","tabList","getPopulatedTab","activitiesTab","resourcesTab","name","filterFunction","item","archetype","visibleFunction","items","length","titleIdentifier","titleComponent","classes","data","JSON","parse","stringify","content_items","forEach","module","sectionId","link","sectionReturnId","Promise","resolve","ItemChooser"],"mappings":"+PAuBA,uD,q9FASA,sBAAgB,MAAhB,CAAwB,CACpB,YADoB,CAEpB,uBAFoB,CAGpB,WAHoB,CAAxB,E,yEAiBgBA,C,CAAS,CACjB,KAAKC,QAAL,CAAgBD,CACnB,C,mBAOa,CACV,MAAO,MAAKC,QACf,C,IAOD,WAAYC,CAAZ,CAAsB,iBAClB,eAEA,EAAKA,QAAL,CAAgBA,CAAhB,CAHkB,QAIrB,C,wCAOe,OACZ,iBAAO,KAAKC,MAAZ,qBAAO,EAAaC,OAAb,CAAqBC,SAC/B,C,yCAQmB,CAChB,MAAO,iBAAU,uBAAV,CAAmC,MAAnC,CACV,C,mCASa,YACV,MAAO,kCAAcC,IAAd,4CAAmB,WAAMC,CAAN,uGAEfA,CAFe,gBAGG,CAAA,CAAI,CAACC,eAAL,CAAqB,CAAI,CAACC,aAA1B,CAHH,mCAIE,CAAA,CAAI,CAACD,eAAL,CAAqB,CAAI,CAACE,YAA1B,CAJF,0BAGlBD,aAHkB,MAIlBC,YAJkB,mGAAnB,wDAOV,C,oCAOc,CACX,GAAoB,GAAhB,OAAKV,OAAT,CAAyB,CAErB,MAAO,CACH,cADG,CAEH,gBAFG,CAGH,aAHG,CAIH,eAJG,CAKH,cALG,CAOV,CAED,GAAoB,GAAhB,OAAKA,OAAT,CAAyB,CAErB,MAAO,CACH,cADG,CAEH,gBAFG,CAGH,aAHG,CAKV,CAGD,MAAO,CACH,cADG,CAEH,gBAFG,CAGH,eAHG,CAIH,cAJG,CAMV,C,yCAOmB,CAChB,MAAO,CACHW,IAAI,CAAE,YADH,CAEHC,cAAc,CAAE,wBAAAC,CAAI,QAAIA,CAAAA,CAAI,CAACC,SAAL,IAAJ,CAFjB,CAGHC,eAAe,CAAE,+BAAEC,CAAAA,CAAF,GAAEA,KAAF,OAAa,CAAC,CAACA,CAAK,CAACC,MAArB,CAHd,CAIHC,eAAe,CAAE,YAJd,CAKHC,cAAc,CAAE,MALb,CAOV,C,wCAOkB,CACf,MAAO,CACHR,IAAI,CAAE,WADH,CAEHC,cAAc,CAAE,wBAAAC,CAAI,QAAIA,CAAAA,CAAI,CAACC,SAAL,GA/HnB,CA+He,CAFjB,CAGHC,eAAe,CAAE,+BAAEC,CAAAA,CAAF,GAAEA,KAAF,OAAa,CAAC,CAACA,CAAK,CAACC,MAArB,CAHd,CAIHC,eAAe,CAAE,WAJd,CAKHC,cAAc,CAAE,MALb,CAOV,C,kDAO4B,CACzB,MAAO,CACHC,OAAO,CAAE,YADN,CAGV,C,sCAOgB,YACb,MAAO,qCAAiBd,IAAjB,CAAsB,SAAAe,CAAI,QAAIC,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,CAAf,CAAX,CAAJ,CAA1B,EACNf,IADM,CACD,SAAAe,CAAI,CAAI,CACVA,CAAI,CAACI,aAAL,CAAmBC,OAAnB,CAA2B,SAAAC,CAAM,CAAI,OACjC,GAAI,CAAI,CAACC,SAAT,CAAoB,CAChBD,CAAM,CAACE,IAAP,qBAA2B,CAAI,CAACD,SAAhC,CACH,CAEDD,CAAM,CAACE,IAAP,0BAAsB,CAAI,CAACC,eAA3B,gBAA8C,CAA9C,CACH,CAND,EAQA,MAAOT,CAAAA,CAAI,CAACI,aACf,CAXM,CAYV,C,gCAOU,CACP,MAAO,sBAAc,KAAKvB,QAAnB,CACV,C,yCAOmB,CAChB,GAAI,KAAK0B,SAAT,CAAoB,CAChB,MAAO,sBAAgB,KAAK1B,QAArB,CAA+B,KAAK0B,SAApC,CACV,CACD,MAAOG,CAAAA,OAAO,CAACC,OAAR,CAAgB,EAAhB,CACV,C,cAtLwBC,S","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of itemchooser used as for choosing modules in a course.\n *\n * @module     core_course/local/modchooser/itemchooser\n * @copyright  2021 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ItemChooser from 'core/itemchooser';\nimport {get_string as getString} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\nimport {\n    activityModules as getModuleData,\n    fetchFooterData,\n} from 'core_course/local/activitychooser/repository';\n\n// Prefetch the strings.\nprefetchStrings('core', [\n    'activities',\n    'addresourceoractivity',\n    'resources',\n]);\n\n// Module types.\nconst ACTIVITY = 0;\nconst RESOURCE = 1;\n\nexport default class extends ItemChooser {\n\n    /**\n     * Set the tab mode.\n     *\n     * @param {number} tabMode\n     */\n    set tabMode(tabMode) {\n        this._tabMode = tabMode;\n    }\n\n    /**\n     * Get the tab mode.\n     *\n     * @return {number}\n     */\n    get tabMode() {\n        return this._tabMode;\n    }\n\n    /**\n     * Constructor to configure the chooser.\n     *\n     * @param {Number} courseId\n     */\n    constructor(courseId) {\n        super();\n\n        this.courseId = courseId;\n    }\n\n    /**\n     * Get the id of the section.\n     *\n     * @return {null|number}\n     */\n    get sectionId() {\n        return this.caller?.dataset.sectionid;\n    }\n\n\n    /**\n     * Get the title for the item chooser dialogue.\n     *\n     * @returns {Promise<string>}\n     */\n    get dialogueTitle() {\n        return getString('addresourceoractivity', 'core');\n    }\n\n    /**\n     * Get a list of named tabs for this chooser, which match the tab order.\n     *\n     * To be extended by the child class.\n     *\n     * @returns {Promise<tabConfig>}\n     */\n    get tabList() {\n        return super.tabList.then(async tabList => {\n            return {\n                ...tabList,\n                activitiesTab: await this.getPopulatedTab(this.activitiesTab),\n                resourcesTab: await this.getPopulatedTab(this.resourcesTab),\n            };\n        });\n    }\n\n    /**\n     * Get the tab order.\n     *\n     * @returns {string[]}\n     */\n    get tabOrder() {\n        if (this.tabMode == \"0\") {\n            // Favourites, Recommended, All, Activities only, Resources only.\n            return [\n                'favouriteTab',\n                'recommendedTab',\n                'allItemsTab',\n                'activitiesTab',\n                'resourcesTab',\n            ];\n        }\n\n        if (this.tabMode == \"1\") {\n            // Favourites, Recommended, All, Activities only, Resources only.\n            return [\n                'favouriteTab',\n                'recommendedTab',\n                'allItemsTab',\n            ];\n        }\n\n        // Favourites, Recommended, All, Activities only, Resources only.\n        return [\n            'favouriteTab',\n            'recommendedTab',\n            'activitiesTab',\n            'resourcesTab',\n        ];\n    }\n\n    /**\n     * Get the data for the recommended items tab.\n     *\n     * @returns {tabConfig}\n     */\n    get activitiesTab() {\n        return {\n            name: 'activities',\n            filterFunction: item => item.archetype === ACTIVITY,\n            visibleFunction: ({items}) => !!items.length,\n            titleIdentifier: 'activities',\n            titleComponent: 'core',\n        };\n    }\n\n    /**\n     * Get the data for the recommended items tab.\n     *\n     * @returns {tabConfig}\n     */\n    get resourcesTab() {\n        return {\n            name: 'resources',\n            filterFunction: item => item.archetype === RESOURCE,\n            visibleFunction: ({items}) => !!items.length,\n            titleIdentifier: 'resources',\n            titleComponent: 'core',\n        };\n    }\n\n    /**\n     * Get any context data for the dialogue.\n     *\n     * @returns {object}\n     */\n    get chooserTemplateContext() {\n        return {\n            classes: 'modchooser',\n        };\n    }\n\n    /**\n     * Fetch the cached data.\n     *\n     * @returns {Promise<object>}\n     */\n    get cachedData() {\n        return super.cachedData.then(data => JSON.parse(JSON.stringify(data)))\n        .then(data => {\n            data.content_items.forEach(module => {\n                if (this.sectionId) {\n                    module.link += `&section=${this.sectionId}`;\n                }\n\n                module.link += `&sr=${this.sectionReturnId ?? 0}`;\n            });\n\n            return data.content_items;\n        });\n    }\n\n    /**\n     * Fetch the data to display.\n     *\n     * @returns {Promise<object>}\n     */\n    get data() {\n        return getModuleData(this.courseId);\n    }\n\n    /**\n     * Get the Chooser footer.\n     *\n     * @returns {Promise<string>}\n     */\n    get chooserFooter() {\n        if (this.sectionId) {\n            return fetchFooterData(this.courseId, this.sectionId);\n        }\n        return Promise.resolve('');\n    }\n}\n"],"file":"itemchooser.min.js"}