{"version":3,"sources":["../src/itemchooser.js"],"names":["courseId","sectionId","currentSectionId","show","itemData","data","favouriteTab","getPopulatedTab","recommendedTab","allItemsTab","activitiesTab","resourcesTab","chooserConfig","tabMode","name","filterFunction","item","isRecommended","visibleFunction","tabConfig","items","length","archetype","classes","cachedData","newData","JSON","parse","stringify","content_items","forEach","module","link","currentSectionReturnId","Repository","activityModules","fetchFooterData","ItemChooser"],"mappings":"8OAuBA,OACA,uD,2+EAKA,sBAAgB,MAAhB,CAAwB,CACpB,uBADoB,CAAxB,E,8BAeI,WAAYA,CAAZ,CAAsB,iBAClB,EAAKA,QAAL,CAAgBA,CAAhB,CADkB,WAErB,C,yDA0IcC,C,CAAW,CACtB,KAAKC,gBAAL,CAAwBD,CAAxB,CAEA,KAAKE,IAAL,EACH,C,yCAvImB,CAChB,MAAO,iBAAU,uBAAV,CACV,C,mCASa,IACJC,CAAAA,CAAQ,CAAG,KAAKC,IADZ,CAEJC,CAAY,CAAG,KAAKC,eAAL,CAAqB,KAAKD,YAA1B,CAAwCF,CAAxC,CAFX,CAGJI,CAAc,CAAG,KAAKD,eAAL,CAAqB,KAAKC,cAA1B,CAA0CJ,CAA1C,CAHb,CAIJK,CAAW,CAAG,KAAKF,eAAL,CAAqB,KAAKE,WAA1B,CAAuCL,CAAvC,CAJV,CAKJM,CAAa,CAAG,KAAKH,eAAL,CAAqB,KAAKE,WAA1B,CAAuCL,CAAvC,CALZ,CAMJO,CAAY,CAAG,KAAKJ,eAAL,CAAqB,KAAKE,WAA1B,CAAuCL,CAAvC,CANX,CAQV,OAAQ,KAAKQ,aAAL,CAAmBC,OAA3B,EAEI,IAAK,EAAL,CACI,MAAO,CACHP,CADG,CAEHE,CAFG,CAGHC,CAHG,CAIHC,CAJG,CAKHC,CALG,CAAP,CAQJ,IAAK,EAAL,CACI,MAAO,CACHL,CADG,CAEHE,CAFG,CAGHC,CAHG,CAAP,CAZR,CAoBA,MAAO,CACHH,CADG,CAEHE,CAFG,CAGHE,CAHG,CAIHC,CAJG,CAMV,C,0CAOoB,CACjB,MAAO,CACHG,IAAI,CAAE,aADH,CAEHC,cAAc,CAAE,wBAAAC,CAAI,QAAIA,CAAAA,CAAI,CAACC,aAAT,CAFjB,CAGHC,eAAe,CAAE,yBAAAC,CAAS,QAAIA,CAAAA,CAAS,CAACC,KAAV,CAAgBC,MAApB,CAHvB,CAKV,C,yCAOmB,CAChB,MAAO,CACHP,IAAI,CAAE,YADH,CAEHC,cAAc,CAAE,wBAAAC,CAAI,QAAIA,CAAAA,CAAI,CAACM,SAAL,IAAJ,CAFjB,CAGHJ,eAAe,CAAE,yBAAAC,CAAS,QAAIA,CAAAA,CAAS,CAACC,KAAV,CAAgBC,MAApB,CAHvB,CAKV,C,wCAOkB,CACf,MAAO,CACHP,IAAI,CAAE,WADH,CAEHC,cAAc,CAAE,wBAAAC,CAAI,QAAIA,CAAAA,CAAI,CAACM,SAAL,GAnGnB,CAmGe,CAFjB,CAGHJ,eAAe,CAAE,yBAAAC,CAAS,QAAIA,CAAAA,CAAS,CAACC,KAAV,CAAgBC,MAApB,CAHvB,CAKV,C,kDAO4B,CACzB,MAAO,CACHE,OAAO,CAAE,YADN,CAGV,C,gCAOU,YACDC,CAAU,8CADT,CAGDC,CAAO,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,CAAf,CAAX,CAHT,CAIPC,CAAO,CAACI,aAAR,CAAsBC,OAAtB,CAA8B,SAAAC,CAAM,CAAI,OACpCA,CAAM,CAACC,IAAP,qBAA2B,CAAI,CAAC9B,gBAAhC,0BAAuD,CAAI,CAAC+B,sBAA5D,gBAAsF,CAAtF,CACH,CAFD,EAIA,MAAOR,CAAAA,CACV,C,sCAOgB,CACb,MAAOS,CAAAA,CAAU,CAACC,eAAX,CAA2B,KAAKnC,QAAhC,CACV,C,yCAOmB,CAChB,MAAOkC,CAAAA,CAAU,CAACE,eAAX,CAA2B,KAAKpC,QAAhC,CAA0C,KAAKC,SAA/C,CACV,C,cAjJwBoC,S","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_course/activitychooser\n * @copyright  2021 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Repository from 'core_course/local/activitychooser/repository';\nimport ItemChooser from 'core/itemchooser';\nimport {get_string as getString} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\n\n// Prefetch the strings.\nprefetchStrings('core', [\n    'addresourceoractivity',\n]);\n\n// Module types.\nconst ACTIVITY = 0;\nconst RESOURCE = 1;\n\nexport default class extends ItemChooser {\n\n    /**\n     * Constructor to configure the chooser.\n     *\n     * @param {Number} courseId\n     */\n    constructor(courseId) {\n        this.courseId = courseId;\n    }\n\n    /**\n     * Get the title for the item chooser dialogue.\n     *\n     * @returns {Promise<string>}\n     */\n    get dialogueTitle() {\n        return getString('addresourceoractivity');\n    }\n\n    /**\n     * Get an ordered list of tabs for this chooser.\n     *\n     * To be extended by the child class.\n     *\n     * @returns {tabConfig[]}\n     */\n    get tabList() {\n        const itemData = this.data;\n        const favouriteTab = this.getPopulatedTab(this.favouriteTab, itemData);\n        const recommendedTab = this.getPopulatedTab(this.recommendedTab, itemData);\n        const allItemsTab = this.getPopulatedTab(this.allItemsTab, itemData);\n        const activitiesTab = this.getPopulatedTab(this.allItemsTab, itemData);\n        const resourcesTab = this.getPopulatedTab(this.allItemsTab, itemData);\n\n        switch (this.chooserConfig.tabMode) {\n            // Favourites, Recommended, All, Activities only, Resources only.\n            case 0:\n                return [\n                    favouriteTab,\n                    recommendedTab,\n                    allItemsTab,\n                    activitiesTab,\n                    resourcesTab,\n                ];\n            // Favourites, Recommended, All, Activities only, Resources only.\n            case 1:\n                return [\n                    favouriteTab,\n                    recommendedTab,\n                    allItemsTab,\n                ];\n        }\n\n        // Favourites, Recommended, All, Activities only, Resources only.\n        return [\n            favouriteTab,\n            recommendedTab,\n            activitiesTab,\n            resourcesTab,\n        ];\n    }\n\n    /**\n     * Get the data for the recommended items tab.\n     *\n     * @returns {tabConfig}\n     */\n    get recommendedTab() {\n        return {\n            name: 'recommended',\n            filterFunction: item => item.isRecommended,\n            visibleFunction: tabConfig => tabConfig.items.length,\n        };\n    }\n\n    /**\n     * Get the data for the recommended items tab.\n     *\n     * @returns {tabConfig}\n     */\n    get activitiesTab() {\n        return {\n            name: 'activities',\n            filterFunction: item => item.archetype === ACTIVITY,\n            visibleFunction: tabConfig => tabConfig.items.length,\n        };\n    }\n\n    /**\n     * Get the data for the recommended items tab.\n     *\n     * @returns {tabConfig}\n     */\n    get resourcesTab() {\n        return {\n            name: 'resources',\n            filterFunction: item => item.archetype === RESOURCE,\n            visibleFunction: tabConfig => tabConfig.items.length,\n        };\n    }\n\n    /**\n     * Get any context data for the dialogue.\n     *\n     * @returns {object}\n     */\n    get chooserTemplateContext() {\n        return {\n            classes: 'modchooser',\n        };\n    }\n\n    /**\n     * Fetch the cached data.\n     *\n     * @returns {Promise<object>}\n     */\n    get data() {\n        const cachedData = super.fetchData();\n\n        const newData = JSON.parse(JSON.stringify(cachedData));\n        newData.content_items.forEach(module => {\n            module.link += `&section=${this.currentSectionId}&sr=${this.currentSectionReturnId ?? 0}`;\n        });\n\n        return newData;\n    }\n\n    /**\n     * Fetch the remote data to display.\n     *\n     * @returns {Promise<object>}\n     */\n    get remoteData() {\n        return Repository.activityModules(this.courseId);\n    }\n\n    /**\n     * Get the Chooser footer.\n     *\n     * @returns {Promise<string>}\n     */\n    get chooserFooter() {\n        return Repository.fetchFooterData(this.courseId, this.sectionId);\n    }\n\n    openForSection(sectionId) {\n        this.currentSectionId = sectionId;\n\n        this.show();\n    }\n}\n"],"file":"itemchooser.min.js"}