{"version":3,"sources":["../../../src/local/courseindex/cm.js"],"names":["Prefetch","prefetchTemplate","Component","name","selectors","CM_NAME","CM_COMPLETION","classes","CMHIDDEN","LOCKED","RESTRICTIONS","PAGEITEM","id","element","dataset","state","configDragDrop","cm","get","course","_refreshCompletion","window","location","href","url","baseurl","anchor","reactive","dispatch","scrollIntoView","block","Config","contextid","courseContextId","contextInstanceId","uservisible","addEventListener","getElement","_activityAnchor","watch","handler","remove","_refreshCm","_refreshPageItem","classList","toggle","visible","innerHTML","DRAGGING","dragging","locked","hascmrectrictions","pageItem","isPageId","type","isEditing","istrackeduser","completionElement","value","completionstate","exporter","getExporter","data","cmCompletion","Templates","renderForPromise","html","js","replaceNode","event","document","getElementById","setTimeout","section","sectionid","number","preventDefault","target","DndCmItem"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index cm component.\n *\n * This component is used to control specific course modules interactions like drag and drop.\n *\n * @module     core_courseformat/local/courseindex/cm\n * @class      core_courseformat/local/courseindex/cm\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\nimport Templates from 'core/templates';\nimport Prefetch from 'core/prefetch';\nimport Config from 'core/config';\n\n// Prefetch the completion icons template.\nconst completionTemplate = 'core_courseformat/local/courseindex/cmcompletion';\nPrefetch.prefetchTemplate(completionTemplate);\n\nexport default class Component extends DndCmItem {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex_cm';\n        // Default query selectors.\n        this.selectors = {\n            CM_NAME: `[data-for='cm_name']`,\n            CM_COMPLETION: `[data-for='cm_completion']`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            CMHIDDEN: 'dimmed',\n            LOCKED: 'editinprogress',\n            RESTRICTIONS: 'rectrictions',\n            PAGEITEM: 'pageitem',\n        };\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new Component({\n            element: document.getElementById(target),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the course state.\n     */\n    stateReady(state) {\n        this.configDragDrop(this.id);\n        const cm = state.cm.get(this.id);\n        const course = state.course;\n        // Refresh completion icon.\n        this._refreshCompletion({\n            state,\n            element: cm,\n        });\n        // Check if the current url is the cm url.\n        if (window.location.href == cm.url || window.location.href == `${course.baseurl}#${cm.anchor}`) {\n            this.reactive.dispatch('setPageItem', 'cm', this.id);\n            this.element.scrollIntoView({block: \"center\"});\n        }\n        // Check if this we are displaying this activity page.\n        if (Config.contextid != Config.courseContextId && Config.contextInstanceId == this.id) {\n            this.reactive.dispatch('setPageItem', 'cm', this.id, true);\n            this.element.scrollIntoView({block: \"center\"});\n        }\n        // Add anchor logic if the element is not user visible.\n        if (!cm.uservisible) {\n            this.addEventListener(\n                this.getElement(this.selectors.CM_NAME),\n                'click',\n                this._activityAnchor,\n            );\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `cm[${this.id}]:deleted`, handler: this.remove},\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\n            {watch: `cm[${this.id}].completionstate:updated`, handler: this._refreshCompletion},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n        ];\n    }\n\n    /**\n     * Update a course index cm using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCm({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.CMHIDDEN, !element.visible);\n        this.getElement(this.selectors.CM_NAME).innerHTML = element.name;\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.element.classList.toggle(this.classes.RESTRICTIONS, element.hascmrectrictions ?? false);\n        this.locked = element.locked;\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.element the course state data.\n     */\n    _refreshPageItem({element}) {\n        if (!element.pageItem) {\n            return;\n        }\n        const isPageId = (element.pageItem.type == 'cm' && element.pageItem.id == this.id);\n        this.element.classList.toggle(this.classes.PAGEITEM, isPageId);\n        if (isPageId && !this.reactive.isEditing) {\n            this.element.scrollIntoView({block: \"nearest\"});\n        }\n    }\n\n    /**\n     * Update the activity completion icon.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.state the state data\n     * @param {Object} details.element the element data\n     */\n    async _refreshCompletion({state, element}) {\n        // No completion icons are displayed in edit mode.\n        if (this.reactive.isEditing || !element.istrackeduser) {\n            return;\n        }\n        // Check if the completion value has changed.\n        const completionElement = this.getElement(this.selectors.CM_COMPLETION);\n        if (completionElement.dataset.value == element.completionstate) {\n            return;\n        }\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.cmCompletion(state, element);\n\n        try {\n            const {html, js} = await Templates.renderForPromise(completionTemplate, data);\n            Templates.replaceNode(completionElement, html, js);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * The activity anchor event.\n     *\n     * @param {Event} event\n     */\n    _activityAnchor(event) {\n        const cm = this.reactive.get('cm', this.id);\n        // If the user cannot access the element but the element is present in the page\n        // the new url should be an anchor link.\n        const element = document.getElementById(cm.anchor);\n        if (element) {\n            // Marc the element as page item once the event is handled.\n            setTimeout(() => {\n                this.reactive.dispatch('setPageItem', 'cm', cm.id);\n            }, 50);\n            return;\n        }\n        // If the element is not present in the page we need to go to the specific section.\n        const course = this.reactive.get('course');\n        const section = this.reactive.get('section', cm.sectionid);\n        if (!section) {\n            return;\n        }\n        const url = `${course.baseurl}&section=${section.number}#${cm.anchor}`;\n        event.preventDefault();\n        window.location = url;\n    }\n}\n"],"file":"cm.min.js"}