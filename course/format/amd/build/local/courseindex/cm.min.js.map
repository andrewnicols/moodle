{"version":3,"file":"cm.min.js","sources":["../../../src/local/courseindex/cm.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index cm component.\n *\n * This component is used to control specific course modules interactions like drag and drop.\n *\n * @module     core_courseformat/local/courseindex/cm\n * @class      core_courseformat/local/courseindex/cm\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\nimport Templates from 'core/templates';\nimport Prefetch from 'core/prefetch';\nimport Config from 'core/config';\n\n// Prefetch the completion icons template.\nconst completionTemplate = 'core_courseformat/local/courseindex/cmcompletion';\nPrefetch.prefetchTemplate(completionTemplate);\n\nexport default class Component extends DndCmItem {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'courseindex_cm';\n        // Default query selectors.\n        this.selectors = {\n            CM_NAME: `[data-for='cm_name']`,\n            CM_COMPLETION: `[data-for='cm_completion']`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            CMHIDDEN: 'dimmed',\n            LOCKED: 'editinprogress',\n            RESTRICTIONS: 'restrictions',\n            PAGEITEM: 'pageitem',\n            INDENTED: 'indented',\n        };\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Static method to create a component instance form the mustache template.\n     *\n     * @param {element|string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.getElementById(target),\n            selectors,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the course state.\n     */\n    stateReady(state) {\n        this.configDragDrop(this.id);\n        const cm = state.cm.get(this.id);\n        const course = state.course;\n        // Refresh completion icon.\n        this._refreshCompletion({\n            state,\n            element: cm,\n        });\n        // Check if the current url is the cm url.\n        if (window.location.href == cm.url || window.location.href == `${course.baseurl}#${cm.anchor}`) {\n            this.reactive.dispatch('setPageItem', 'cm', this.id);\n            this.element.scrollIntoView({block: \"center\"});\n        }\n        // Check if this we are displaying this activity page.\n        if (Config.contextid != Config.courseContextId && Config.contextInstanceId == this.id) {\n            this.reactive.dispatch('setPageItem', 'cm', this.id, true);\n            this.element.scrollIntoView({block: \"center\"});\n        }\n        // Add anchor logic if the element is not user visible.\n        if (!cm.uservisible) {\n            this.addEventListener(\n                this.getElement(this.selectors.CM_NAME),\n                'click',\n                this._activityAnchor,\n            );\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `cm[${this.id}]:deleted`, handler: this.remove},\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\n            {watch: `cm[${this.id}].completionstate:updated`, handler: this._refreshCompletion},\n            {watch: `course.pageItem:updated`, handler: this._refreshPageItem},\n        ];\n    }\n\n    /**\n     * Update a course index cm using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCm({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.CMHIDDEN, !element.visible);\n        this.getElement(this.selectors.CM_NAME).innerHTML = element.name;\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.element.classList.toggle(this.classes.RESTRICTIONS, element.hascmrestrictions ?? false);\n        this.element.classList.toggle(this.classes.INDENTED, element.indent);\n        this.locked = element.locked;\n    }\n\n    /**\n     * Handle a page item update.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.element the course state data.\n     */\n    _refreshPageItem({element}) {\n        if (!element.pageItem) {\n            return;\n        }\n        const isPageId = (element.pageItem.type == 'cm' && element.pageItem.id == this.id);\n        this.element.classList.toggle(this.classes.PAGEITEM, isPageId);\n        if (isPageId && !this.reactive.isEditing) {\n            this.element.scrollIntoView({block: \"nearest\"});\n        }\n    }\n\n    /**\n     * Update the activity completion icon.\n     *\n     * @param {Object} details the update details\n     * @param {Object} details.state the state data\n     * @param {Object} details.element the element data\n     */\n    async _refreshCompletion({state, element}) {\n        // No completion icons are displayed in edit mode.\n        if (this.reactive.isEditing || !element.istrackeduser) {\n            return;\n        }\n        // Check if the completion value has changed.\n        const completionElement = this.getElement(this.selectors.CM_COMPLETION);\n        if (completionElement.dataset.value == element.completionstate) {\n            return;\n        }\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.cmCompletion(state, element);\n\n        try {\n            const {html, js} = await Templates.renderForPromise(completionTemplate, data);\n            Templates.replaceNode(completionElement, html, js);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    /**\n     * The activity anchor event.\n     *\n     * @param {Event} event\n     */\n    _activityAnchor(event) {\n        const cm = this.reactive.get('cm', this.id);\n        // If the user cannot access the element but the element is present in the page\n        // the new url should be an anchor link.\n        const element = document.getElementById(cm.anchor);\n        if (element) {\n            // Marc the element as page item once the event is handled.\n            setTimeout(() => {\n                this.reactive.dispatch('setPageItem', 'cm', cm.id);\n            }, 50);\n            return;\n        }\n        // If the element is not present in the page we need to go to the specific section.\n        const course = this.reactive.get('course');\n        const section = this.reactive.get('section', cm.sectionid);\n        if (!section) {\n            return;\n        }\n        const url = `${course.baseurl}&section=${section.number}#${cm.anchor}`;\n        event.preventDefault();\n        window.location = url;\n    }\n}\n"],"names":["_dndcmitem","_interopRequireDefault","_templates","_prefetch","_config","prefetchTemplate","Component","DndCmItem","create","name","this","selectors","CM_NAME","CM_COMPLETION","classes","CMHIDDEN","LOCKED","RESTRICTIONS","PAGEITEM","INDENTED","id","element","dataset","static","target","document","getElementById","stateReady","state","configDragDrop","cm","get","course","_refreshCompletion","window","location","href","url","baseurl","anchor","reactive","dispatch","scrollIntoView","block","Config","contextid","courseContextId","contextInstanceId","uservisible","addEventListener","getElement","_activityAnchor","getWatchers","watch","concat","handler","remove","_refreshCm","_refreshPageItem","_ref","_element$dragging","_element$locked","_element$hascmrestric","classList","toggle","visible","innerHTML","DRAGGING","dragging","locked","hascmrestrictions","indent","_ref2","pageItem","isPageId","type","isEditing","async","_ref3","istrackeduser","completionElement","value","completionstate","data","getExporter","cmCompletion","html","js","Templates","renderForPromise","replaceNode","error","event","setTimeout","section","sectionid","number","preventDefault"],"mappings":"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"}