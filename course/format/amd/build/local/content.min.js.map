{"version":3,"sources":["../../src/local/content.js"],"names":["Component","BaseComponent","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","PAGE","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","init","target","element","document","getElementById","reactive","stateReady","state","_indexContents","addEventListener","_sectionTogglers","toogleAll","getElement","_allSectionToggler","_refreshAllSectionsToggler","supportComponents","isEditing","DispatchActions","classList","add","CourseEvents","manualCompletionToggled","_completionHandler","querySelector","_scrollHandler","event","sectionlink","closest","isChevron","section","toggler","isCollapsed","contains","sectionId","getAttribute","dispatch","contentcollapsed","preventDefault","isAllCollapsed","course","get","sectionlist","getWatchers","watch","handler","_reloadCm","_refreshSectionNumber","_refreshSectionCollapsed","_startProcessing","_refreshCourseSectionlist","_refreshSectionCmlist","id","Error","click","allcollapsed","allexpanded","forEach","remove","detail","cmid","completed","pageOffset","scrollTop","items","getExporter","allItemsArray","pageItem","every","item","index","type","url","offsetTop","number","dataset","sectionid","inplace","inplaceeditable","getInplaceEditable","currentvalue","getValue","currentitemid","getItemId","rawtitle","setValue","cmlist","listparent","createCm","_createCmItem","bind","_fixOrder","createSection","_createSectionItem","_scanIndex","Section","CmItem","selector","creationhandler","getElements","unregister","indexed","cmitem","promise","courseActions","refreshModule","then","catch","_reloadSection","sectionitem","refreshSection","container","newItem","createElement","for","append","neworder","dettachedelements","createMethod","length","innerHTML","itemid","currentitem","children","insertBefore","dndFakeActivity","lastchild","lastChild","removeChild"],"mappings":"0fA0BA,4DACA,0CACA,wCAEA,0CACA,4CACA,mD,0hCAEe,KAAMA,CAAAA,SAAN,QAAwBC,wBAAc,CAOjDC,MAAM,CAACC,UAAD,CAAa,2BAEf,KAAKC,IAAL,CAAY,eAAZ,CAEA,KAAKC,SAAL,CAAiB,CACbC,OAAO,uBADM,CAEbC,YAAY,6BAFC,CAGbC,cAAc,sBAHD,CAIbC,kBAAkB,kCAJL,CAKbC,EAAE,sBALW,CAMbC,IAAI,QANS,CAObC,OAAO,+CAPM,CAQbC,QAAQ,6BARK,CASbC,SAAS,8BATI,CAWbC,WAAW,CAAE,IAXA,CAYbC,UAAU,CAAE,IAZC,CAAjB,CAeA,KAAKC,OAAL,CAAe,CACXC,SAAS,YADE,CAGXC,QAAQ,WAHG,CAIXC,WAAW,aAJA,CAKXd,OAAO,UALI,CAAf,CAQA,KAAKe,YAAL,CAAoB,EAApB,CACA,KAAKC,iBAAL,CAAyB,EAAzB,CAEA,KAAKC,QAAL,CAAgB,EAAhB,CACA,KAAKC,GAAL,CAAW,EAAX,CAEA,KAAKC,aAAL,+BAAqBtB,UAAU,CAACsB,aAAhC,wDAAiD,CACpD,CAUU,MAAJC,CAAAA,IAAI,CAACC,MAAD,CAAStB,SAAT,CAAoBoB,aAApB,CAAmC,CAC1C,MAAO,IAAIzB,CAAAA,SAAJ,CAAc,CACjB4B,OAAO,CAAEC,QAAQ,CAACC,cAAT,CAAwBH,MAAxB,CADQ,CAEjBI,QAAQ,CAAE,0CAFO,CAGjB1B,SAHiB,CAIjBoB,aAJiB,CAAd,CAMV,CAODO,UAAU,CAACC,KAAD,CAAQ,CACd,KAAKC,cAAL,GAEA,KAAKC,gBAAL,CAAsB,KAAKP,OAA3B,CAAoC,OAApC,CAA6C,KAAKQ,gBAAlD,EAGA,KAAMC,CAAAA,SAAS,CAAG,KAAKC,UAAL,CAAgB,KAAKjC,SAAL,CAAeS,SAA/B,CAAlB,CACA,GAAIuB,SAAJ,CAAe,CACX,KAAKF,gBAAL,CAAsBE,SAAtB,CAAiC,OAAjC,CAA0C,KAAKE,kBAA/C,EACA,KAAKC,0BAAL,CAAgCP,KAAhC,CACH,CAED,GAAI,KAAKF,QAAL,CAAcU,iBAAlB,CAAqC,CAEjC,GAAI,KAAKV,QAAL,CAAcW,SAAlB,CAA6B,CACzB,GAAIC,kBAAJ,CAAoB,IAApB,CACH,CAGD,KAAKf,OAAL,CAAagB,SAAb,CAAuBC,GAAvB,CAA2B,KAAK5B,OAAL,CAAaG,WAAxC,CACH,CAGD,KAAKe,gBAAL,CACI,KAAKP,OADT,CAEIkB,YAAY,CAACC,uBAFjB,CAGI,KAAKC,kBAHT,EAOA,KAAKb,gBAAL,CACIN,QAAQ,CAACoB,aAAT,CAAuB,KAAK5C,SAAL,CAAeM,IAAtC,CADJ,CAEI,QAFJ,CAGI,KAAKuC,cAHT,CAKH,CAUDd,gBAAgB,CAACe,KAAD,CAAQ,MACdC,CAAAA,WAAW,CAAGD,KAAK,CAACxB,MAAN,CAAa0B,OAAb,CAAqB,KAAKhD,SAAL,CAAeO,OAApC,CADA,CAEd0C,SAAS,CAAGH,KAAK,CAACxB,MAAN,CAAa0B,OAAb,CAAqB,KAAKhD,SAAL,CAAeQ,QAApC,CAFE,CAIpB,GAAIuC,WAAW,EAAIE,SAAnB,CAA8B,gCAEpBC,CAAAA,OAAO,CAAGJ,KAAK,CAACxB,MAAN,CAAa0B,OAAb,CAAqB,KAAKhD,SAAL,CAAeC,OAApC,CAFU,CAGpBkD,OAAO,CAAGD,OAAO,CAACN,aAAR,CAAsB,KAAK5C,SAAL,CAAeQ,QAArC,CAHU,CAIpB4C,WAAW,sCAAGD,OAAH,WAAGA,OAAH,QAAGA,OAAO,CAAEZ,SAAT,CAAmBc,QAAnB,CAA4B,KAAKzC,OAAL,CAAaC,SAAzC,CAAH,0DAJS,CAM1B,GAAIoC,SAAS,EAAIG,WAAjB,CAA8B,CAE1B,KAAME,CAAAA,SAAS,CAAGJ,OAAO,CAACK,YAAR,CAAqB,SAArB,CAAlB,CACA,KAAK7B,QAAL,CAAc8B,QAAd,CACI,oBADJ,CAEI,CAACF,SAAD,CAFJ,CAGI,CACIG,gBAAgB,CAAE,CAACL,WADvB,CAHJ,CAOH,CACJ,CACJ,CAUDlB,kBAAkB,CAACY,KAAD,CAAQ,yBACtBA,KAAK,CAACY,cAAN,GADsB,KAGhBpC,CAAAA,MAAM,CAAGwB,KAAK,CAACxB,MAAN,CAAa0B,OAAb,CAAqB,KAAKhD,SAAL,CAAeS,SAApC,CAHO,CAIhBkD,cAAc,CAAGrC,MAAM,CAACiB,SAAP,CAAiBc,QAAjB,CAA0B,KAAKzC,OAAL,CAAaC,SAAvC,CAJD,CAMhB+C,MAAM,CAAG,KAAKlC,QAAL,CAAcmC,GAAd,CAAkB,QAAlB,CANO,CAOtB,KAAKnC,QAAL,CAAc8B,QAAd,CACI,oBADJ,6BAEII,MAAM,CAACE,WAFX,oDAE0B,EAF1B,CAGI,CACIL,gBAAgB,CAAE,CAACE,cADvB,CAHJ,CAOH,CAODI,WAAW,EAAG,CAGV,KAAKrC,QAAL,CAAcN,aAAd,CAA8B,KAAKA,aAAnC,CAGA,GAAI,CAAC,KAAKM,QAAL,CAAcU,iBAAnB,CAAsC,CAClC,MAAO,EACV,CACD,MAAO,CAEH,CAAC4B,KAAK,qBAAN,CAA8BC,OAAO,CAAE,KAAKC,SAA5C,CAFG,CAIH,CAACF,KAAK,yBAAN,CAAkCC,OAAO,CAAE,KAAKE,qBAAhD,CAJG,CAMH,CAACH,KAAK,mCAAN,CAA4CC,OAAO,CAAE,KAAKG,wBAA1D,CANG,CAQH,CAACJ,KAAK,oBAAN,CAA6BC,OAAO,CAAE,KAAKI,gBAA3C,CARG,CASH,CAACL,KAAK,6BAAN,CAAsCC,OAAO,CAAE,KAAKK,yBAApD,CATG,CAUH,CAACN,KAAK,yBAAN,CAAkCC,OAAO,CAAE,KAAKM,qBAAhD,CAVG,CAYH,CAACP,KAAK,gBAAN,CAAyBC,OAAO,CAAE,KAAKpC,cAAvC,CAZG,CAcH,CAACmC,KAAK,qBAAN,CAA8BC,OAAO,CAAE,KAAKC,SAA5C,CAdG,CAeH,CAACF,KAAK,uBAAN,CAAgCC,OAAO,CAAE,KAAKC,SAA9C,CAfG,CAiBV,CASDE,wBAAwB,MAAmB,+BAAlB,CAACxC,KAAD,CAAQL,OAAR,CAAkB,MACvC,KAAMD,CAAAA,MAAM,CAAG,KAAKW,UAAL,CAAgB,KAAKjC,SAAL,CAAeC,OAA/B,CAAwCsB,OAAO,CAACiD,EAAhD,CAAf,CACA,GAAI,CAAClD,MAAL,CAAa,CACT,KAAM,IAAImD,CAAAA,KAAJ,mCAAqClD,OAAO,CAACiD,EAA7C,EACT,CAJsC,KAMjCrB,CAAAA,OAAO,CAAG7B,MAAM,CAACsB,aAAP,CAAqB,KAAK5C,SAAL,CAAeQ,QAApC,CANuB,CAOjC4C,WAAW,uCAAGD,OAAH,WAAGA,OAAH,QAAGA,OAAO,CAAEZ,SAAT,CAAmBc,QAAnB,CAA4B,KAAKzC,OAAL,CAAaC,SAAzC,CAAH,4DAPsB,CASvC,GAAIU,OAAO,CAACkC,gBAAR,GAA6BL,WAAjC,CAA8C,CAC1CD,OAAO,CAACuB,KAAR,EACH,CAED,KAAKvC,0BAAL,CAAgCP,KAAhC,CACH,CAODO,0BAA0B,CAACP,KAAD,CAAQ,CAC9B,KAAMN,CAAAA,MAAM,CAAG,KAAKW,UAAL,CAAgB,KAAKjC,SAAL,CAAeS,SAA/B,CAAf,CACA,GAAI,CAACa,MAAL,CAAa,CACT,MACH,CAJ6B,GAM1BqD,CAAAA,YAAY,GANc,CAO1BC,WAAW,GAPe,CAQ9BhD,KAAK,CAACsB,OAAN,CAAc2B,OAAd,CACI3B,OAAO,EAAI,CACPyB,YAAY,CAAGA,YAAY,EAAIzB,OAAO,CAACO,gBAAvC,CACAmB,WAAW,CAAGA,WAAW,EAAI,CAAC1B,OAAO,CAACO,gBACzC,CAJL,EAMA,GAAIkB,YAAJ,CAAkB,CACdrD,MAAM,CAACiB,SAAP,CAAiBC,GAAjB,CAAqB,KAAK5B,OAAL,CAAaC,SAAlC,CACH,CACD,GAAI+D,WAAJ,CAAiB,CACbtD,MAAM,CAACiB,SAAP,CAAiBuC,MAAjB,CAAwB,KAAKlE,OAAL,CAAaC,SAArC,CACH,CACJ,CASDwD,gBAAgB,EAAG,CAGf,KAAKrD,YAAL,CAAoB,EAApB,CACA,KAAKC,iBAAL,CAAyB,EAC5B,CAOD0B,kBAAkB,OAAW,IAAV,CAACoC,MAAD,CAAU,OACzB,GAAIA,MAAM,SAAV,CAA0B,CACtB,MACH,CACD,KAAKrD,QAAL,CAAc8B,QAAd,CAAuB,cAAvB,CAAuC,CAACuB,MAAM,CAACC,IAAR,CAAvC,CAAsDD,MAAM,CAACE,SAA7D,CACH,CAKDpC,cAAc,EAAG,MACPqC,CAAAA,UAAU,CAAG1D,QAAQ,CAACoB,aAAT,CAAuB,KAAK5C,SAAL,CAAeM,IAAtC,EAA4C6E,SADlD,CAEPC,KAAK,CAAG,KAAK1D,QAAL,CAAc2D,WAAd,GAA4BC,aAA5B,CAA0C,KAAK5D,QAAL,CAAcE,KAAxD,CAFD,CAIb,GAAI2D,CAAAA,QAAQ,CAAG,IAAf,CACAH,KAAK,CAACI,KAAN,CAAYC,IAAI,EAAI,CAChB,KAAMC,CAAAA,KAAK,CAAkB,SAAd,GAAAD,IAAI,CAACE,IAAN,CAA4B,KAAKzE,QAAjC,CAA4C,KAAKC,GAA/D,CACA,GAAIuE,KAAK,CAACD,IAAI,CAACjB,EAAN,CAAL,SAAJ,CAAkC,CAC9B,QACH,CAED,KAAMjD,CAAAA,OAAO,CAAGmE,KAAK,CAACD,IAAI,CAACjB,EAAN,CAAL,CAAejD,OAA/B,CAEA,GAAkB,IAAd,GAAAkE,IAAI,CAACE,IAAL,EAAsB,CAACF,IAAI,CAACG,GAA5B,EAAmC,CAAC,KAAKlE,QAAL,CAAcW,SAAtD,CAAiE,CAC7D,MAAO6C,CAAAA,UAAU,EAAI3D,OAAO,CAACsE,SAChC,CACDN,QAAQ,CAAGE,IAAX,CACA,MAAOP,CAAAA,UAAU,EAAI3D,OAAO,CAACsE,SAChC,CAbD,EAcA,GAAIN,QAAJ,CAAc,CACV,KAAK7D,QAAL,CAAc8B,QAAd,CAAuB,aAAvB,CAAsC+B,QAAQ,CAACI,IAA/C,CAAqDJ,QAAQ,CAACf,EAA9D,CACH,CACJ,CAeDL,qBAAqB,OAAY,IAAX,CAAC5C,OAAD,CAAW,OAE7B,KAAMD,CAAAA,MAAM,CAAG,KAAKW,UAAL,CAAgB,KAAKjC,SAAL,CAAeC,OAA/B,CAAwCsB,OAAO,CAACiD,EAAhD,CAAf,CACA,GAAI,CAAClD,MAAL,CAAa,CAET,MACH,CAEDA,MAAM,CAACkD,EAAP,mBAAuBjD,OAAO,CAACuE,MAA/B,EAIAxE,MAAM,CAACyE,OAAP,CAAeC,SAAf,CAA2BzE,OAAO,CAACuE,MAAnC,CAEAxE,MAAM,CAACyE,OAAP,CAAeD,MAAf,CAAwBvE,OAAO,CAACuE,MAAhC,CAGA,KAAMG,CAAAA,OAAO,CAAGC,0BAAgBC,kBAAhB,CAAmC7E,MAAM,CAACsB,aAAP,CAAqB,KAAK5C,SAAL,CAAeE,YAApC,CAAnC,CAAhB,CACA,GAAI+F,OAAJ,CAAa,MAGHG,CAAAA,YAAY,CAAGH,OAAO,CAACI,QAAR,EAHZ,CAIHC,aAAa,CAAGL,OAAO,CAACM,SAAR,EAJb,CAMT,GAA2B,EAAvB,GAAAN,OAAO,CAACI,QAAR,EAAJ,CAA+B,CAE3B,GAAIC,aAAa,EAAI/E,OAAO,CAACiD,EAAzB,GAAgC4B,YAAY,EAAI7E,OAAO,CAACiF,QAAxB,EAAwD,EAApB,EAAAjF,OAAO,CAACiF,QAA5E,CAAJ,CAAiG,CAC7FP,OAAO,CAACQ,QAAR,CAAiBlF,OAAO,CAACiF,QAAzB,CACH,CACJ,CACJ,CACJ,CAQDjC,qBAAqB,OAAY,wBAAX,CAAChD,OAAD,CAAW,YACvBmF,CAAAA,MAAM,yBAAGnF,OAAO,CAACmF,MAAX,4CAAqB,EADJ,CAEvBxD,OAAO,CAAG,KAAKjB,UAAL,CAAgB,KAAKjC,SAAL,CAAeC,OAA/B,CAAwCsB,OAAO,CAACiD,EAAhD,CAFa,CAGvBmC,UAAU,QAAGzD,OAAH,WAAGA,OAAH,QAAGA,OAAO,CAAEN,aAAT,CAAuB,KAAK5C,SAAL,CAAeG,cAAtC,CAHU,CAKvByG,QAAQ,CAAG,KAAKC,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CALY,CAM7B,GAAIH,UAAJ,CAAgB,CACZ,KAAKI,SAAL,CAAeJ,UAAf,CAA2BD,MAA3B,CAAmC,KAAK1G,SAAL,CAAeK,EAAlD,CAAsD,KAAKW,YAA3D,CAAyE4F,QAAzE,CACH,CACJ,CAQDtC,yBAAyB,OAAY,6BAAX,CAAC/C,OAAD,CAAW,OAEjC,GAAmC,CAA/B,OAAKG,QAAL,CAAcN,aAAlB,CAAsC,CAClC,MACH,CAJgC,KAK3B0C,CAAAA,WAAW,8BAAGvC,OAAO,CAACuC,WAAX,sDAA0B,EALV,CAM3B6C,UAAU,CAAG,KAAK1E,UAAL,CAAgB,KAAKjC,SAAL,CAAeI,kBAA/B,CANc,CAQ3B4G,aAAa,CAAG,KAAKC,kBAAL,CAAwBH,IAAxB,CAA6B,IAA7B,CARW,CASjC,GAAIH,UAAJ,CAAgB,CACZ,KAAKI,SAAL,CAAeJ,UAAf,CAA2B7C,WAA3B,CAAwC,KAAK9D,SAAL,CAAeC,OAAvD,CAAgE,KAAKgB,iBAArE,CAAwF+F,aAAxF,CACH,CACJ,CAODnF,cAAc,EAAG,CAEb,KAAKqF,UAAL,CACI,KAAKlH,SAAL,CAAeC,OADnB,CAEI,KAAKiB,QAFT,CAGKuE,IAAD,EAAU,CACN,MAAO,IAAI0B,iBAAJ,CAAY1B,IAAZ,CACV,CALL,EASA,KAAKyB,UAAL,CACI,KAAKlH,SAAL,CAAeK,EADnB,CAEI,KAAKc,GAFT,CAGKsE,IAAD,EAAU,CACN,MAAO,IAAI2B,gBAAJ,CAAW3B,IAAX,CACV,CALL,CAOH,CAWDyB,UAAU,CAACG,QAAD,CAAW3B,KAAX,CAAkB4B,eAAlB,CAAmC,CACzC,KAAMlC,CAAAA,KAAK,CAAG,KAAKmC,WAAL,WAAoBF,QAApB,yBAAd,CACAjC,KAAK,CAACP,OAAN,CAAeY,IAAD,EAAU,mBACpB,GAAI,SAACA,IAAD,WAACA,IAAD,wBAACA,IAAI,CAAEM,OAAP,2BAAC,cAAevB,EAAhB,CAAJ,CAAwB,CACpB,MACH,CAED,GAAIkB,KAAK,CAACD,IAAI,CAACM,OAAL,CAAavB,EAAd,CAAL,SAAJ,CAA0C,CACtCkB,KAAK,CAACD,IAAI,CAACM,OAAL,CAAavB,EAAd,CAAL,CAAuBgD,UAAvB,EACH,CAED9B,KAAK,CAACD,IAAI,CAACM,OAAL,CAAavB,EAAd,CAAL,CAAyB8C,eAAe,CAAC,CACrC,GAAG,IADkC,CAErC/F,OAAO,CAAEkE,IAF4B,CAAD,CAAxC,CAKAA,IAAI,CAACM,OAAL,CAAa0B,OAAb,GACH,CAfD,CAgBH,CAWDvD,SAAS,OAAY,IAAX,CAAC3C,OAAD,CAAW,OACjB,KAAMmG,CAAAA,MAAM,CAAG,KAAKzF,UAAL,CAAgB,KAAKjC,SAAL,CAAeK,EAA/B,CAAmCkB,OAAO,CAACiD,EAA3C,CAAf,CACA,GAAIkD,MAAJ,CAAY,CACR,KAAMC,CAAAA,OAAO,CAAGC,iBAAcC,aAAd,CAA4BH,MAA5B,CAAoCnG,OAAO,CAACiD,EAA5C,CAAhB,CACAmD,OAAO,CAACG,IAAR,CAAa,IAAM,CACf,KAAKjG,cAAL,EAEH,CAHD,EAGGkG,KAHH,EAIH,CACJ,CAWDC,cAAc,OAAY,IAAX,CAACzG,OAAD,CAAW,OACtB,KAAM0G,CAAAA,WAAW,CAAG,KAAKhG,UAAL,CAAgB,KAAKjC,SAAL,CAAeC,OAA/B,CAAwCsB,OAAO,CAACiD,EAAhD,CAApB,CACA,GAAIyD,WAAJ,CAAiB,CACb,KAAMN,CAAAA,OAAO,CAAGC,iBAAcM,cAAd,CAA6BD,WAA7B,CAA0C1G,OAAO,CAACiD,EAAlD,CAAhB,CACAmD,OAAO,CAACG,IAAR,CAAa,IAAM,CACf,KAAKjG,cAAL,EAEH,CAHD,EAGGkG,KAHH,EAIH,CACJ,CAYDlB,aAAa,CAACsB,SAAD,CAAYnD,IAAZ,CAAkB,CAC3B,KAAMoD,CAAAA,OAAO,CAAG5G,QAAQ,CAAC6G,aAAT,CAAuB,KAAKrI,SAAL,CAAeU,WAAtC,CAAhB,CACA0H,OAAO,CAACrC,OAAR,CAAgBuC,GAAhB,CAAsB,QAAtB,CACAF,OAAO,CAACrC,OAAR,CAAgBvB,EAAhB,CAAqBQ,IAArB,CAEAoD,OAAO,CAAC5D,EAAR,kBAAuBQ,IAAvB,EACAoD,OAAO,CAAC7F,SAAR,CAAkBC,GAAlB,CAAsB,KAAK5B,OAAL,CAAaE,QAAnC,EACAqH,SAAS,CAACI,MAAV,CAAiBH,OAAjB,EACA,KAAKlE,SAAL,CAAe,CACX3C,OAAO,CAAE,KAAKG,QAAL,CAAcmC,GAAd,CAAkB,IAAlB,CAAwBmB,IAAxB,CADE,CAAf,EAGA,MAAOoD,CAAAA,OACV,CAYDnB,kBAAkB,CAACkB,SAAD,CAAYnC,SAAZ,CAAuB,MAC/B9C,CAAAA,OAAO,CAAG,KAAKxB,QAAL,CAAcmC,GAAd,CAAkB,SAAlB,CAA6BmC,SAA7B,CADqB,CAE/BoC,OAAO,CAAG5G,QAAQ,CAAC6G,aAAT,CAAuB,KAAKrI,SAAL,CAAeW,UAAtC,CAFqB,CAGrCyH,OAAO,CAACrC,OAAR,CAAgBuC,GAAhB,CAAsB,SAAtB,CACAF,OAAO,CAACrC,OAAR,CAAgBvB,EAAhB,CAAqBwB,SAArB,CACAoC,OAAO,CAACrC,OAAR,CAAgBD,MAAhB,CAAyB5C,OAAO,CAAC4C,MAAjC,CAEAsC,OAAO,CAAC5D,EAAR,mBAAwBwB,SAAxB,EACAoC,OAAO,CAAC7F,SAAR,CAAkBC,GAAlB,CAAsB,KAAK5B,OAAL,CAAaX,OAAnC,EACAkI,SAAS,CAACI,MAAV,CAAiBH,OAAjB,EACA,KAAKJ,cAAL,CAAoB,CAChBzG,OAAO,CAAE2B,OADO,CAApB,EAGA,MAAOkF,CAAAA,OACV,CAWc,KAATrB,CAAAA,SAAS,CAACoB,SAAD,CAAYK,QAAZ,CAAsBnB,QAAtB,CAAgCoB,iBAAhC,CAAmDC,YAAnD,CAAiE,CAC5E,GAAIP,SAAS,SAAb,CAA6B,CACzB,MACH,CAGD,GAAI,CAACK,QAAQ,CAACG,MAAd,CAAsB,CAClBR,SAAS,CAAC5F,SAAV,CAAoBC,GAApB,CAAwB,QAAxB,EACA2F,SAAS,CAACS,SAAV,CAAsB,EAAtB,CACA,MACH,CAGDT,SAAS,CAAC5F,SAAV,CAAoBuC,MAApB,CAA2B,QAA3B,EAGA0D,QAAQ,CAAC3D,OAAT,CAAiB,CAACgE,MAAD,CAASnD,KAAT,GAAmB,4BAChC,GAAID,CAAAA,IAAI,wCAAG,KAAKxD,UAAL,CAAgBoF,QAAhB,CAA0BwB,MAA1B,CAAH,8CAAwCJ,iBAAiB,CAACI,MAAD,CAAzD,wBAAqEH,YAAY,CAACP,SAAD,CAAYU,MAAZ,CAAzF,CACA,GAAIpD,IAAI,SAAR,CAAwB,CAEpB,MACH,CAED,KAAMqD,CAAAA,WAAW,CAAGX,SAAS,CAACY,QAAV,CAAmBrD,KAAnB,CAApB,CACA,GAAIoD,WAAW,SAAf,CAA+B,CAC3BX,SAAS,CAACI,MAAV,CAAiB9C,IAAjB,EACA,MACH,CACD,GAAIqD,WAAW,GAAKrD,IAApB,CAA0B,CACtB0C,SAAS,CAACa,YAAV,CAAuBvD,IAAvB,CAA6BqD,WAA7B,CACH,CACJ,CAfD,EAkBA,GAAIG,CAAAA,eAAJ,CAGA,MAAOd,SAAS,CAACY,QAAV,CAAmBJ,MAAnB,CAA4BH,QAAQ,CAACG,MAA5C,CAAoD,0BAChD,KAAMO,CAAAA,SAAS,CAAGf,SAAS,CAACgB,SAA5B,CACA,UAAID,SAAJ,WAAIA,SAAJ,+BAAIA,SAAS,CAAE3G,SAAf,kCAAI,qBAAsBc,QAAtB,CAA+B,mBAA/B,CAAJ,CAAyD,CACrD4F,eAAe,CAAGC,SACrB,CAFD,IAEO,8CACHT,iBAAiB,sCAACS,SAAD,WAACA,SAAD,mCAACA,SAAS,CAAEnD,OAAZ,sCAAC,mBAAoBvB,EAArB,wDAA2B,CAA3B,CAAjB,CAAiD0E,SACpD,CACDf,SAAS,CAACiB,WAAV,CAAsBF,SAAtB,CACH,CAED,GAAID,eAAJ,CAAqB,CACjBd,SAAS,CAACI,MAAV,CAAiBU,eAAjB,CACH,CACJ,CApkBgD,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course index main component.\n *\n * @module     core_courseformat/local/content\n * @class      core_courseformat/local/content\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport inplaceeditable from 'core/inplace_editable';\nimport Section from 'core_courseformat/local/content/section';\nimport CmItem from 'core_courseformat/local/content/section/cmitem';\n// Course actions is needed for actions that are not migrated to components.\nimport courseActions from 'core_course/actions';\nimport DispatchActions from 'core_courseformat/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            PAGE: `#page`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? 0;\n    }\n\n    /**\n     * Static method to create a component instance form the mustahce template.\n     *\n     * @param {string} target the DOM main element or its ID\n     * @param {object} selectors optional css selector overrides\n     * @param {number} sectionReturn the content section return\n     * @return {Component}\n     */\n    static init(target, selectors, sectionReturn) {\n        return new Component({\n            element: document.getElementById(target),\n            reactive: getCurrentCourseEditor(),\n            selectors,\n            sectionReturn,\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new DispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document.querySelector(this.selectors.PAGE),\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n\n    /**\n     * Setup sections toggler.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _sectionTogglers(event) {\n        const sectionlink = event.target.closest(this.selectors.TOGGLER);\n        const isChevron = event.target.closest(this.selectors.COLLAPSE);\n\n        if (sectionlink || isChevron) {\n\n            const section = event.target.closest(this.selectors.SECTION);\n            const toggler = section.querySelector(this.selectors.COLLAPSE);\n            const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n            if (isChevron || isCollapsed) {\n                // Update the state.\n                const sectionId = section.getAttribute('data-id');\n                this.reactive.dispatch(\n                    'sectionPreferences',\n                    [sectionId],\n                    {\n                        contentcollapsed: !isCollapsed,\n                    },\n                );\n            }\n        }\n    }\n\n    /**\n     * Handle the collapse/expand all sections button.\n     *\n     * Toggler click is delegated to the main course content element because new sections can\n     * appear at any moment and this way we prevent accidental double bindings.\n     *\n     * @param {Event} event the triggered event\n     */\n    _allSectionToggler(event) {\n        event.preventDefault();\n\n        const target = event.target.closest(this.selectors.TOGGLEALL);\n        const isAllCollapsed = target.classList.contains(this.classes.COLLAPSED);\n\n        const course = this.reactive.get('course');\n        this.reactive.dispatch(\n            'sectionPreferences',\n            course.sectionlist ?? [],\n            {\n                contentcollapsed: !isAllCollapsed,\n            }\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        // Section return is a global page variable but most formats define it just before start printing\n        // the course content. This is the reason why we define this page setting here.\n        this.reactive.sectionReturn = this.sectionReturn;\n\n        // Check if the course format is compatible with reactive components.\n        if (!this.reactive.supportComponents) {\n            return [];\n        }\n        return [\n            // State changes that require to reload some course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            // Update section number and title.\n            {watch: `section.number:updated`, handler: this._refreshSectionNumber},\n            // Collapse and expand sections.\n            {watch: `section.contentcollapsed:updated`, handler: this._refreshSectionCollapsed},\n            // Sections and cm sorting.\n            {watch: `transaction:start`, handler: this._startProcessing},\n            {watch: `course.sectionlist:updated`, handler: this._refreshCourseSectionlist},\n            {watch: `section.cmlist:updated`, handler: this._refreshSectionCmlist},\n            // Reindex sections and cms.\n            {watch: `state:updated`, handler: this._indexContents},\n            // State changes thaty require to reload course modules.\n            {watch: `cm.visible:updated`, handler: this._reloadCm},\n            {watch: `cm.sectionid:updated`, handler: this._reloadCm},\n        ];\n    }\n\n    /**\n     * Update section collapsed.\n     *\n     * @param {object} args\n     * @param {Object} args.state The state data\n     * @param {Object} args.element The element to update\n     */\n    _refreshSectionCollapsed({state, element}) {\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            throw new Error(`Unknown section with ID ${element.id}`);\n        }\n        // Check if it is already done.\n        const toggler = target.querySelector(this.selectors.COLLAPSE);\n        const isCollapsed = toggler?.classList.contains(this.classes.COLLAPSED) ?? false;\n\n        if (element.contentcollapsed !== isCollapsed) {\n            toggler.click();\n        }\n\n        this._refreshAllSectionsToggler(state);\n    }\n\n    /**\n     * Refresh the collapse/expand all sections element.\n     *\n     * @param {Object} state The state data\n     */\n    _refreshAllSectionsToggler(state) {\n        const target = this.getElement(this.selectors.TOGGLEALL);\n        if (!target) {\n            return;\n        }\n        // Check if we have all sections collapsed/expanded.\n        let allcollapsed = true;\n        let allexpanded = true;\n        state.section.forEach(\n            section => {\n                allcollapsed = allcollapsed && section.contentcollapsed;\n                allexpanded = allexpanded && !section.contentcollapsed;\n            }\n        );\n        if (allcollapsed) {\n            target.classList.add(this.classes.COLLAPSED);\n        }\n        if (allexpanded) {\n            target.classList.remove(this.classes.COLLAPSED);\n        }\n    }\n\n    /**\n     * Setup the component to start a transaction.\n     *\n     * Some of the course actions replaces the current DOM element with a new one before updating the\n     * course state. This means the component cannot preload any index properly until the transaction starts.\n     *\n     */\n    _startProcessing() {\n        // During a section or cm sorting, some elements could be dettached from the DOM and we\n        // need to store somewhare in case they are needed later.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n    }\n\n    /**\n     * Activity manual completion listener.\n     *\n     * @param {Event} event the custom ecent\n     */\n    _completionHandler({detail}) {\n        if (detail === undefined) {\n            return;\n        }\n        this.reactive.dispatch('cmCompletion', [detail.cmid], detail.completed);\n    }\n\n    /**\n     * Check the current page scroll and update the active element if necessary.\n     */\n    _scrollHandler() {\n        const pageOffset = document.querySelector(this.selectors.PAGE).scrollTop;\n        const items = this.reactive.getExporter().allItemsArray(this.reactive.state);\n        // Check what is the active element now.\n        let pageItem = null;\n        items.every(item => {\n            const index = (item.type === 'section') ? this.sections : this.cms;\n            if (index[item.id] === undefined) {\n                return true;\n            }\n\n            const element = index[item.id].element;\n            // Activities without url can only be page items in edit mode.\n            if (item.type === 'cm' && !item.url && !this.reactive.isEditing) {\n                return pageOffset >= element.offsetTop;\n            }\n            pageItem = item;\n            return pageOffset >= element.offsetTop;\n        });\n        if (pageItem) {\n            this.reactive.dispatch('setPageItem', pageItem.type, pageItem.id);\n        }\n    }\n\n    /**\n     * Update a course section when the section number changes.\n     *\n     * The courseActions module used for most course section tools still depends on css classes and\n     * section numbers (not id). To prevent inconsistencies when a section is moved, we need to refresh\n     * the\n     *\n     * Course formats can override the section title rendering so the frontend depends heavily on backend\n     * rendering. Luckily in edit mode we can trigger a title update using the inplace_editable module.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionNumber({element}) {\n        // Find the element.\n        const target = this.getElement(this.selectors.SECTION, element.id);\n        if (!target) {\n            // Job done. Nothing to refresh.\n            return;\n        }\n        // Update section numbers in all data, css and YUI attributes.\n        target.id = `section-${element.number}`;\n        // YUI uses section number as section id in data-sectionid, in principle if a format use components\n        // don't need this sectionid attribute anymore, but we keep the compatibility in case some plugin\n        // use it for legacy purposes.\n        target.dataset.sectionid = element.number;\n        // The data-number is the attribute used by components to store the section number.\n        target.dataset.number = element.number;\n\n        // Update title and title inplace editable, if any.\n        const inplace = inplaceeditable.getInplaceEditable(target.querySelector(this.selectors.SECTION_ITEM));\n        if (inplace) {\n            // The course content HTML can be modified at any moment, so the function need to do some checkings\n            // to make sure the inplace editable still represents the same itemid.\n            const currentvalue = inplace.getValue();\n            const currentitemid = inplace.getItemId();\n            // Unnamed sections must be recalculated.\n            if (inplace.getValue() === '') {\n                // The value to send can be an empty value if it is a default name.\n                if (currentitemid == element.id && (currentvalue != element.rawtitle || element.rawtitle == '')) {\n                    inplace.setValue(element.rawtitle);\n                }\n            }\n        }\n    }\n\n    /**\n     * Refresh a section cm list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshSectionCmlist({element}) {\n        const cmlist = element.cmlist ?? [];\n        const section = this.getElement(this.selectors.SECTION, element.id);\n        const listparent = section?.querySelector(this.selectors.SECTION_CMLIST);\n        // A method to create a fake element to be replaced when the item is ready.\n        const createCm = this._createCmItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, cmlist, this.selectors.CM, this.dettachedCms, createCm);\n        }\n    }\n\n    /**\n     * Refresh the section list.\n     *\n     * @param {Object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCourseSectionlist({element}) {\n        // If we have a section return means we only show a single section so no need to fix order.\n        if (this.reactive.sectionReturn != 0) {\n            return;\n        }\n        const sectionlist = element.sectionlist ?? [];\n        const listparent = this.getElement(this.selectors.COURSE_SECTIONLIST);\n        // For now section cannot be created at a frontend level.\n        const createSection = this._createSectionItem.bind(this);\n        if (listparent) {\n            this._fixOrder(listparent, sectionlist, this.selectors.SECTION, this.dettachedSections, createSection);\n        }\n    }\n\n    /**\n     * Regenerate content indexes.\n     *\n     * This method is used when a legacy action refresh some content element.\n     */\n    _indexContents() {\n        // Find unindexed sections.\n        this._scanIndex(\n            this.selectors.SECTION,\n            this.sections,\n            (item) => {\n                return new Section(item);\n            }\n        );\n\n        // Find unindexed cms.\n        this._scanIndex(\n            this.selectors.CM,\n            this.cms,\n            (item) => {\n                return new CmItem(item);\n            }\n        );\n    }\n\n    /**\n     * Reindex a content (section or cm) of the course content.\n     *\n     * This method is used internally by _indexContents.\n     *\n     * @param {string} selector the DOM selector to scan\n     * @param {*} index the index attribute to update\n     * @param {*} creationhandler method to create a new indexed element\n     */\n    _scanIndex(selector, index, creationhandler) {\n        const items = this.getElements(`${selector}:not([data-indexed])`);\n        items.forEach((item) => {\n            if (!item?.dataset?.id) {\n                return;\n            }\n            // Delete previous item component.\n            if (index[item.dataset.id] !== undefined) {\n                index[item.dataset.id].unregister();\n            }\n            // Create the new component.\n            index[item.dataset.id] = creationhandler({\n                ...this,\n                element: item,\n            });\n            // Mark as indexed.\n            item.dataset.indexed = true;\n        });\n    }\n\n    /**\n     * Reload a course module contents.\n     *\n     * Most course module HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the module.\n     *\n     * @param {object} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadCm({element}) {\n        const cmitem = this.getElement(this.selectors.CM, element.id);\n        if (cmitem) {\n            const promise = courseActions.refreshModule(cmitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Reload a course section contents.\n     *\n     * Section HTML is still strongly backend dependant.\n     * Some changes require to get a new version of the section.\n     *\n     * @param {details} param0 the watcher details\n     * @param {object} param0.element the state object\n     */\n    _reloadSection({element}) {\n        const sectionitem = this.getElement(this.selectors.SECTION, element.id);\n        if (sectionitem) {\n            const promise = courseActions.refreshSection(sectionitem, element.id);\n            promise.then(() => {\n                this._indexContents();\n                return;\n            }).catch();\n        }\n    }\n\n    /**\n     * Create a new course module item in a section.\n     *\n     * Thos method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} cmid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createCmItem(container, cmid) {\n        const newItem = document.createElement(this.selectors.ACTIVITYTAG);\n        newItem.dataset.for = 'cmitem';\n        newItem.dataset.id = cmid;\n        // The legacy actions.js requires a specific ID and class to refresh the CM.\n        newItem.id = `module-${cmid}`;\n        newItem.classList.add(this.classes.ACTIVITY);\n        container.append(newItem);\n        this._reloadCm({\n            element: this.reactive.get('cm', cmid),\n        });\n        return newItem;\n    }\n\n    /**\n     * Create a new section item.\n     *\n     * This method will append a fake item in the container and trigger an ajax request to\n     * replace the fake element by the real content.\n     *\n     * @param {Element} container the container element (section)\n     * @param {Number} sectionid the course-module ID\n     * @returns {Element} the created element\n     */\n    _createSectionItem(container, sectionid) {\n        const section = this.reactive.get('section', sectionid);\n        const newItem = document.createElement(this.selectors.SECTIONTAG);\n        newItem.dataset.for = 'section';\n        newItem.dataset.id = sectionid;\n        newItem.dataset.number = section.number;\n        // The legacy actions.js requires a specific ID and class to refresh the section.\n        newItem.id = `section-${sectionid}`;\n        newItem.classList.add(this.classes.SECTION);\n        container.append(newItem);\n        this._reloadSection({\n            element: section,\n        });\n        return newItem;\n    }\n\n    /**\n     * Fix/reorder the section or cms order.\n     *\n     * @param {Element} container the HTML element to reorder.\n     * @param {Array} neworder an array with the ids order\n     * @param {string} selector the element selector\n     * @param {Object} dettachedelements a list of dettached elements\n     * @param {function} createMethod method to create missing elements\n     */\n    async _fixOrder(container, neworder, selector, dettachedelements, createMethod) {\n        if (container === undefined) {\n            return;\n        }\n\n        // Empty lists should not be visible.\n        if (!neworder.length) {\n            container.classList.add('hidden');\n            container.innerHTML = '';\n            return;\n        }\n\n        // Grant the list is visible (in case it was empty).\n        container.classList.remove('hidden');\n\n        // Move the elements in order at the beginning of the list.\n        neworder.forEach((itemid, index) => {\n            let item = this.getElement(selector, itemid) ?? dettachedelements[itemid] ?? createMethod(container, itemid);\n            if (item === undefined) {\n                // Missing elements cannot be sorted.\n                return;\n            }\n            // Get the current elemnt at that position.\n            const currentitem = container.children[index];\n            if (currentitem === undefined) {\n                container.append(item);\n                return;\n            }\n            if (currentitem !== item) {\n                container.insertBefore(item, currentitem);\n            }\n        });\n\n        // Dndupload add a fake element we need to keep.\n        let dndFakeActivity;\n\n        // Remove the remaining elements.\n        while (container.children.length > neworder.length) {\n            const lastchild = container.lastChild;\n            if (lastchild?.classList?.contains('dndupload-preview')) {\n                dndFakeActivity = lastchild;\n            } else {\n                dettachedelements[lastchild?.dataset?.id ?? 0] = lastchild;\n            }\n            container.removeChild(lastchild);\n        }\n        // Restore dndupload fake element.\n        if (dndFakeActivity) {\n            container.append(dndFakeActivity);\n        }\n    }\n}\n"],"file":"content.min.js"}