{"version":3,"sources":["../../../src/local/courseeditor/exporter.js"],"names":["reactive","COMPLETIONS","state","data","sections","editmode","isEditing","highlighted","course","sectionlist","forEach","sectionid","sectioninfo","section","get","push","hassections","length","cms","cmlist","cmid","cminfo","cm","hascms","isactive","nextcmid","currentindex","indexOf","id","type","name","number","statename","completionstate","hasstate","items","url","sectionurl"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to export parts of the state and transform them to be used in templates\n * and as draggable data.\n *\n * @module     core_courseformat/local/courseeditor/exporter\n * @class      core_courseformat/local/courseeditor/exporter\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    /**\n     * Class constructor.\n     *\n     * @param {CourseEditor} reactive the course editor object\n     */\n    constructor(reactive) {\n        this.reactive = reactive;\n\n        // Completions states are defined in lib/completionlib.php. There are 4 different completion\n        // state values, however, the course index uses the same state for complete and complete_pass.\n        // This is the reason why completed appears twice in the array.\n        this.COMPLETIONS = ['incomplete', 'complete', 'complete', 'fail'];\n    }\n\n    /**\n     * Generate the course export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @returns {Object}\n     */\n    course(state) {\n        // Collect section information from the state.\n        const data = {\n            sections: [],\n            editmode: this.reactive.isEditing,\n            highlighted: state.course.highlighted ?? '',\n        };\n        const sectionlist = state.course.sectionlist ?? [];\n        sectionlist.forEach(sectionid => {\n            const sectioninfo = state.section.get(sectionid) ?? {};\n            const section = this.section(state, sectioninfo);\n            data.sections.push(section);\n        });\n        data.hassections = (data.sections.length != 0);\n\n        return data;\n    }\n\n    /**\n     * Generate a section export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} sectioninfo the section state data.\n     * @returns {Object}\n     */\n    section(state, sectioninfo) {\n        const section = {\n            ...sectioninfo,\n            highlighted: state.course.highlighted ?? '',\n            cms: [],\n        };\n        const cmlist = sectioninfo.cmlist ?? [];\n        cmlist.forEach(cmid => {\n            const cminfo = state.cm.get(cmid);\n            const cm = this.cm(state, cminfo);\n            section.cms.push(cm);\n        });\n        section.hascms = (section.cms.length != 0);\n\n        return section;\n    }\n\n    /**\n     * Generate a cm export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} cminfo the course module state data.\n     * @returns {Object}\n     */\n    cm(state, cminfo) {\n        const cm = {\n            ...cminfo,\n            isactive: false,\n        };\n        return cm;\n    }\n\n    /**\n     * Generate a dragable cm data structure.\n     *\n     * This method is used by any draggable course module element to generate drop data\n     * for its reactive/dragdrop instance.\n     *\n     * @param {*} state the state object\n     * @param {*} cmid the cours emodule id\n     * @returns {Object|null}\n     */\n    cmDraggableData(state, cmid) {\n        const cminfo = state.cm.get(cmid);\n        if (!cminfo) {\n            return null;\n        }\n\n        // Drop an activity over the next activity is the same as doing anything.\n        let nextcmid;\n        const section = state.section.get(cminfo.sectionid);\n        const currentindex = section?.cmlist.indexOf(cminfo.id);\n        if (currentindex !== undefined) {\n            nextcmid = section?.cmlist[currentindex + 1];\n        }\n\n        return {\n            type: 'cm',\n            id: cminfo.id,\n            name: cminfo.name,\n            sectionid: cminfo.sectionid,\n            nextcmid,\n        };\n    }\n\n    /**\n     * Generate a dragable cm data structure.\n     *\n     * This method is used by any draggable section element to generate drop data\n     * for its reactive/dragdrop instance.\n     *\n     * @param {*} state the state object\n     * @param {*} sectionid the cours section id\n     * @returns {Object|null}\n     */\n    sectionDraggableData(state, sectionid) {\n        const sectioninfo = state.section.get(sectionid);\n        if (!sectioninfo) {\n            return null;\n        }\n        return {\n            type: 'section',\n            id: sectioninfo.id,\n            name: sectioninfo.name,\n            number: sectioninfo.number,\n        };\n    }\n\n    /**\n     * Generate a compoetion export data from the cm element.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} cminfo the course module state data.\n     * @returns {Object}\n     */\n    cmCompletion(state, cminfo) {\n        const data = {\n            statename: '',\n            state: 'NaN',\n        };\n        if (cminfo.completionstate !== undefined) {\n            data.state = cminfo.completionstate;\n            data.hasstate = true;\n            const statename = this.COMPLETIONS[cminfo.completionstate] ?? 'NaN';\n            data[`is${statename}`] = true;\n        }\n        return data;\n    }\n\n    /**\n     * Return a sorted list of all sections and cms items in the state.\n     *\n     * @param {Object} state the current state.\n     * @returns {Array} all sections and cms items in the state.\n     */\n    allItemsArray(state) {\n        const items = [];\n        const sectionlist = state.course.sectionlist ?? [];\n        // Add sections.\n        sectionlist.forEach(sectionid => {\n            const sectioninfo = state.section.get(sectionid);\n            items.push({type: 'section', id: sectioninfo.id, url: sectioninfo.sectionurl});\n            // Add cms.\n            const cmlist = sectioninfo.cmlist ?? [];\n            cmlist.forEach(cmid => {\n                const cminfo = state.cm.get(cmid);\n                items.push({type: 'cm', id: cminfo.id, url: cminfo.url});\n            });\n        });\n        return items;\n    }\n}\n"],"file":"exporter.min.js"}