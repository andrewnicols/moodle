{"version":3,"sources":["../../../src/local/courseeditor/exporter.js"],"names":["constructor","reactive","COMPLETIONS","course","state","data","sections","editmode","isEditing","highlighted","sectionlist","forEach","sectionid","sectioninfo","section","get","push","hassections","length","cms","cmlist","cmid","cminfo","cm","hascms","isactive","cmDraggableData","nextcmid","currentindex","indexOf","id","type","name","sectionDraggableData","number","cmCompletion","statename","completionstate","hasstate","allItemsArray","items","url","sectionurl"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to export parts of the state and transform them to be used in templates\n * and as draggable data.\n *\n * @module     core_courseformat/local/courseeditor/exporter\n * @class      core_courseformat/local/courseeditor/exporter\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    /**\n     * Class constructor.\n     *\n     * @param {CourseEditor} reactive the course editor object\n     */\n    constructor(reactive) {\n        this.reactive = reactive;\n\n        // Completions states are defined in lib/completionlib.php. There are 4 different completion\n        // state values, however, the course index uses the same state for complete and complete_pass.\n        // This is the reason why completed appears twice in the array.\n        this.COMPLETIONS = ['incomplete', 'complete', 'complete', 'fail'];\n    }\n\n    /**\n     * Generate the course export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @returns {Object}\n     */\n    course(state) {\n        // Collect section information from the state.\n        const data = {\n            sections: [],\n            editmode: this.reactive.isEditing,\n            highlighted: state.course.highlighted ?? '',\n        };\n        const sectionlist = state.course.sectionlist ?? [];\n        sectionlist.forEach(sectionid => {\n            const sectioninfo = state.section.get(sectionid) ?? {};\n            const section = this.section(state, sectioninfo);\n            data.sections.push(section);\n        });\n        data.hassections = (data.sections.length != 0);\n\n        return data;\n    }\n\n    /**\n     * Generate a section export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} sectioninfo the section state data.\n     * @returns {Object}\n     */\n    section(state, sectioninfo) {\n        const section = {\n            ...sectioninfo,\n            highlighted: state.course.highlighted ?? '',\n            cms: [],\n        };\n        const cmlist = sectioninfo.cmlist ?? [];\n        cmlist.forEach(cmid => {\n            const cminfo = state.cm.get(cmid);\n            const cm = this.cm(state, cminfo);\n            section.cms.push(cm);\n        });\n        section.hascms = (section.cms.length != 0);\n\n        return section;\n    }\n\n    /**\n     * Generate a cm export data from the state.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} cminfo the course module state data.\n     * @returns {Object}\n     */\n    cm(state, cminfo) {\n        const cm = {\n            ...cminfo,\n            isactive: false,\n        };\n        return cm;\n    }\n\n    /**\n     * Generate a dragable cm data structure.\n     *\n     * This method is used by any draggable course module element to generate drop data\n     * for its reactive/dragdrop instance.\n     *\n     * @param {*} state the state object\n     * @param {*} cmid the cours emodule id\n     * @returns {Object|null}\n     */\n    cmDraggableData(state, cmid) {\n        const cminfo = state.cm.get(cmid);\n        if (!cminfo) {\n            return null;\n        }\n\n        // Drop an activity over the next activity is the same as doing anything.\n        let nextcmid;\n        const section = state.section.get(cminfo.sectionid);\n        const currentindex = section?.cmlist.indexOf(cminfo.id);\n        if (currentindex !== undefined) {\n            nextcmid = section?.cmlist[currentindex + 1];\n        }\n\n        return {\n            type: 'cm',\n            id: cminfo.id,\n            name: cminfo.name,\n            sectionid: cminfo.sectionid,\n            nextcmid,\n        };\n    }\n\n    /**\n     * Generate a dragable cm data structure.\n     *\n     * This method is used by any draggable section element to generate drop data\n     * for its reactive/dragdrop instance.\n     *\n     * @param {*} state the state object\n     * @param {*} sectionid the cours section id\n     * @returns {Object|null}\n     */\n    sectionDraggableData(state, sectionid) {\n        const sectioninfo = state.section.get(sectionid);\n        if (!sectioninfo) {\n            return null;\n        }\n        return {\n            type: 'section',\n            id: sectioninfo.id,\n            name: sectioninfo.name,\n            number: sectioninfo.number,\n        };\n    }\n\n    /**\n     * Generate a compoetion export data from the cm element.\n     *\n     * @param {Object} state the current state.\n     * @param {Object} cminfo the course module state data.\n     * @returns {Object}\n     */\n    cmCompletion(state, cminfo) {\n        const data = {\n            statename: '',\n            state: 'NaN',\n        };\n        if (cminfo.completionstate !== undefined) {\n            data.state = cminfo.completionstate;\n            data.hasstate = true;\n            const statename = this.COMPLETIONS[cminfo.completionstate] ?? 'NaN';\n            data[`is${statename}`] = true;\n        }\n        return data;\n    }\n\n    /**\n     * Return a sorted list of all sections and cms items in the state.\n     *\n     * @param {Object} state the current state.\n     * @returns {Array} all sections and cms items in the state.\n     */\n    allItemsArray(state) {\n        const items = [];\n        const sectionlist = state.course.sectionlist ?? [];\n        // Add sections.\n        sectionlist.forEach(sectionid => {\n            const sectioninfo = state.section.get(sectionid);\n            items.push({type: 'section', id: sectioninfo.id, url: sectioninfo.sectionurl});\n            // Add cms.\n            const cmlist = sectioninfo.cmlist ?? [];\n            cmlist.forEach(cmid => {\n                const cminfo = state.cm.get(cmid);\n                items.push({type: 'cm', id: cminfo.id, url: cminfo.url});\n            });\n        });\n        return items;\n    }\n}\n"],"file":"exporter.min.js"}