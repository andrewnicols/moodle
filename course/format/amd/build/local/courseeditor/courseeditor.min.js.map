{"version":3,"file":"courseeditor.min.js","sources":["../../../src/local/courseeditor/courseeditor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {Reactive} from 'core/reactive';\nimport notification from 'core/notification';\nimport Exporter from 'core_courseformat/local/courseeditor/exporter';\nimport log from 'core/log';\nimport ajax from 'core/ajax';\nimport * as Storage from 'core/sessionstorage';\nimport {uploadFilesToCourse} from 'core_courseformat/local/courseeditor/fileuploader';\n\n/**\n * Main course editor module.\n *\n * All formats can register new components on this object to create new reactive\n * UI components that watch the current course state.\n *\n * @module     core_courseformat/local/courseeditor/courseeditor\n * @class     core_courseformat/local/courseeditor/courseeditor\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class extends Reactive {\n\n    /**\n     * The current state cache key\n     *\n     * The state cache is considered dirty if the state changes from the last page or\n     * if the page has editing mode on.\n     *\n     * @attribute stateKey\n     * @type number|null\n     * @default 1\n     * @package\n     */\n    stateKey = 1;\n\n    /**\n     * The current page section return\n     * @attribute sectionReturn\n     * @type number\n     * @default 0\n     */\n    sectionReturn = 0;\n\n    /**\n     * Set up the course editor when the page is ready.\n     *\n     * The course can only be loaded once per instance. Otherwise an error is thrown.\n     *\n     * The backend can inform the module of the current state key. This key changes every time some\n     * update in the course affect the current user state. Some examples are:\n     *  - The course content has been edited\n     *  - The user marks some activity as completed\n     *  - The user collapses or uncollapses a section (it is stored as a user preference)\n     *\n     * @param {number} courseId course id\n     * @param {string} serverStateKey the current backend course cache reference\n     */\n    async loadCourse(courseId, serverStateKey) {\n\n        if (this.courseId) {\n            throw new Error(`Cannot load ${courseId}, course already loaded with id ${this.courseId}`);\n        }\n\n        if (!serverStateKey) {\n            // The server state key is not provided, we use a invalid statekey to force reloading.\n            serverStateKey = `invalidStateKey_${Date.now()}`;\n        }\n\n        // Default view format setup.\n        this._editing = false;\n        this._supportscomponents = false;\n        this._fileHandlers = null;\n\n        this.courseId = courseId;\n\n        let stateData;\n\n        const storeStateKey = Storage.get(`course/${courseId}/stateKey`);\n        try {\n            // Check if the backend state key is the same we have in our session storage.\n            if (!this.isEditing && serverStateKey == storeStateKey) {\n                stateData = JSON.parse(Storage.get(`course/${courseId}/staticState`));\n            }\n            if (!stateData) {\n                stateData = await this.getServerCourseState();\n            }\n\n        } catch (error) {\n            log.error(\"EXCEPTION RAISED WHILE INIT COURSE EDITOR\");\n            log.error(error);\n            return;\n        }\n\n        // The bulk editing only applies to the frontend and the state data is not created in the backend.\n        stateData.bulk = {\n            enabled: false,\n            selectedType: '',\n            selection: [],\n        };\n\n        this.setInitialState(stateData);\n\n        // In editing mode, the session cache is considered dirty always.\n        if (this.isEditing) {\n            this.stateKey = null;\n        } else {\n            // Check if the last state is the same as the cached one.\n            const newState = JSON.stringify(stateData);\n            const previousState = Storage.get(`course/${courseId}/staticState`);\n            if (previousState !== newState || storeStateKey !== serverStateKey) {\n                Storage.set(`course/${courseId}/staticState`, newState);\n                Storage.set(`course/${courseId}/stateKey`, stateData?.course?.statekey ?? serverStateKey);\n            }\n            this.stateKey = Storage.get(`course/${courseId}/stateKey`);\n        }\n\n        this._loadFileHandlers();\n    }\n\n    /**\n     * Load the file hanlders promise.\n     */\n    _loadFileHandlers() {\n        // Load the course file extensions.\n        this._fileHandlersPromise = new Promise((resolve) => {\n            if (!this.isEditing) {\n                resolve([]);\n                return;\n            }\n            // Check the cache.\n            const handlersCacheKey = `course/${this.courseId}/fileHandlers`;\n\n            const cacheValue = Storage.get(handlersCacheKey);\n            if (cacheValue) {\n                try {\n                    const cachedHandlers = JSON.parse(cacheValue);\n                    resolve(cachedHandlers);\n                    return;\n                } catch (error) {\n                    log.error(\"ERROR PARSING CACHED FILE HANDLERS\");\n                }\n            }\n            // Call file handlers webservice.\n            ajax.call([{\n                methodname: 'core_courseformat_file_handlers',\n                args: {\n                    courseid: this.courseId,\n                }\n            }])[0].then((handlers) => {\n                Storage.set(handlersCacheKey, JSON.stringify(handlers));\n                resolve(handlers);\n                return;\n            }).catch(error => {\n                log.error(error);\n                resolve([]);\n                return;\n            });\n        });\n    }\n\n    /**\n     * Setup the current view settings\n     *\n     * @param {Object} setup format, page and course settings\n     * @param {boolean} setup.editing if the page is in edit mode\n     * @param {boolean} setup.supportscomponents if the format supports components for content\n     * @param {string} setup.cacherev the backend cached state revision\n     */\n    setViewFormat(setup) {\n        this._editing = setup.editing ?? false;\n        this._supportscomponents = setup.supportscomponents ?? false;\n    }\n\n    /**\n     * Load the current course state from the server.\n     *\n     * @returns {Object} the current course state\n     */\n    async getServerCourseState() {\n        const courseState = await ajax.call([{\n            methodname: 'core_courseformat_get_state',\n            args: {\n                courseid: this.courseId,\n            }\n        }])[0];\n\n        const stateData = JSON.parse(courseState);\n\n        return {\n            course: {},\n            section: [],\n            cm: [],\n            ...stateData,\n        };\n    }\n\n    /**\n     * Return the current edit mode.\n     *\n     * Components should use this method to check if edit mode is active.\n     *\n     * @return {boolean} if edit is enabled\n     */\n    get isEditing() {\n        return this._editing ?? false;\n    }\n\n    /**\n     * Return a data exporter to transform state part into mustache contexts.\n     *\n     * @return {Exporter} the exporter class\n     */\n    getExporter() {\n        return new Exporter(this);\n    }\n\n    /**\n     * Return if the current course support components to refresh the content.\n     *\n     * @returns {boolean} if the current content support components\n     */\n    get supportComponents() {\n        return this._supportscomponents ?? false;\n    }\n\n    /**\n     * Return the course file handlers promise.\n     * @returns {Promise} the promise for file handlers.\n     */\n    async getFileHandlersPromise() {\n        return this._fileHandlersPromise ?? [];\n    }\n\n    /**\n     * Upload a file list to the course.\n     *\n     * This method is a wrapper to the course file uploader.\n     *\n     * @param {number} sectionId the section id\n     * @param {number} sectionNum the section number\n     * @param {Array} files and array of files\n     * @return {Promise} the file queue promise\n     */\n    uploadFiles(sectionId, sectionNum, files) {\n        return uploadFilesToCourse(this.courseId, sectionId, sectionNum, files);\n    }\n\n    /**\n     * Get a value from the course editor static storage if any.\n     *\n     * The course editor static storage uses the sessionStorage to store values from the\n     * components. This is used to prevent unnecesary template loadings on every page. However,\n     * the storage does not work if no sessionStorage can be used (in debug mode for example),\n     * if the page is in editing mode or if the initial state change from the last page.\n     *\n     * @param {string} key the key to get\n     * @return {boolean|string} the storage value or false if cannot be loaded\n     */\n    getStorageValue(key) {\n        if (this.isEditing || !this.stateKey) {\n            return false;\n        }\n        const dataJson = Storage.get(`course/${this.courseId}/${key}`);\n        if (!dataJson) {\n            return false;\n        }\n        // Check the stateKey.\n        try {\n            const data = JSON.parse(dataJson);\n            if (data?.stateKey !== this.stateKey) {\n                return false;\n            }\n            return data.value;\n        } catch (error) {\n            return false;\n        }\n    }\n\n    /**\n     * Stores a value into the course editor static storage if available\n     *\n     * @param {String} key the key to store\n     * @param {*} value the value to store (must be compatible with JSON,stringify)\n     * @returns {boolean} true if the value is stored\n     */\n    setStorageValue(key, value) {\n        // Values cannot be stored on edit mode.\n        if (this.isEditing) {\n            return false;\n        }\n        const data = {\n            stateKey: this.stateKey,\n            value,\n        };\n        return Storage.set(`course/${this.courseId}/${key}`, JSON.stringify(data));\n    }\n\n    /**\n     * Convert a file dragging event into a proper dragging file list.\n     * @param {DataTransfer} dataTransfer the event to convert\n     * @return {Array} of file list info.\n     */\n    getFilesDraggableData(dataTransfer) {\n        const exporter = this.getExporter();\n        return exporter.fileDraggableData(this.state, dataTransfer);\n    }\n\n    /**\n     * Dispatch a change in the state.\n     *\n     * Usually reactive modules throw an error directly to the components when something\n     * goes wrong. However, course editor can directly display a notification.\n     *\n     * @method dispatch\n     * @param {mixed} args any number of params the mutation needs.\n     */\n    async dispatch(...args) {\n        try {\n            await super.dispatch(...args);\n        } catch (error) {\n            // Display error modal.\n            notification.exception(error);\n            // Force unlock all elements.\n            super.dispatch('unlockAll');\n        }\n    }\n}\n"],"names":["_notification","_interopRequireDefault","_exporter","_log","_ajax","Storage","_interopRequireWildcard","_default","Reactive","constructor","super","arguments","_defineProperty","this","async","courseId","serverStateKey","Error","concat","stateData","Date","now","_editing","_supportscomponents","_fileHandlers","storeStateKey","get","isEditing","JSON","parse","getServerCourseState","error","bulk","enabled","selectedType","selection","setInitialState","stateKey","newState","stringify","_stateData$course$sta","_stateData","_stateData$course","set","course","statekey","_loadFileHandlers","_fileHandlersPromise","Promise","resolve","handlersCacheKey","cacheValue","cachedHandlers","call","methodname","args","courseid","then","handlers","catch","setViewFormat","setup","_setup$editing","_setup$supportscompon","editing","supportscomponents","courseState","ajax","section","cm","_this$_editing","getExporter","Exporter","supportComponents","_this$_supportscompon","_this$_fileHandlersPr","uploadFiles","sectionId","sectionNum","files","_fileuploader","uploadFilesToCourse","getStorageValue","key","dataJson","data","value","setStorageValue","getFilesDraggableData","dataTransfer","exporter","fileDraggableData","state","dispatch","exception"],"mappings":"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"}