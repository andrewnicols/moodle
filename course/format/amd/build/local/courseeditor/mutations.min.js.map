{"version":3,"sources":["../../../src/local/courseeditor/mutations.js"],"names":["action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajax","call","methodname","ajaxresult","JSON","parse","stateManager","addUpdateTypes","prepareFields","_prepareFields","updateName","fields","locked","cmids","Error","course","get","cmLock","_callEditWebservice","id","updates","processUpdates","sectionIds","sectionLock","cmIds","dragValue","setPageItem","_setElementsValue","complete","newValue","lockValue","name","fieldName","setReadOnly","forEach","element","type","isStatic","newPageItem","pageItem","sectionId","sectionid","state","section","cm","preferences","updatePreferences","contentcollapsed","indexcollapsed","prefKey","push","jsonString","stringify","M","util","set_user_preference"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n * @module     core_courseformat/local/courseeditor/mutations\n * @class     core_courseformat/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_courseformat_update_course webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {number} courseId\n     * @param {array} ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n\n    /**\n     * Mutation module initialize.\n     *\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\n     *\n     * @param {StateManager} stateManager the state manager\n     */\n    init(stateManager) {\n        // Add a method to prepare the fields when some update is comming from the server.\n        stateManager.addUpdateTypes({\n            prepareFields: this._prepareFields,\n        });\n    }\n\n    /**\n     * Add default values to state elements.\n     *\n     * This method is called every time a webservice returns a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    _prepareFields(stateManager, updateName, fields) {\n        // Any update should unlock the element.\n        fields.locked = false;\n        return fields;\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Add a new section to a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {number} targetSectionId optional the target section id\n     */\n    async addSection(stateManager, targetSectionId) {\n        if (!targetSectionId) {\n            targetSectionId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of course modules ids\n     */\n    async sectionDelete(stateManager, sectionIds) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course modules as complete.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} complete the new completion value\n     */\n    cmCompletion(stateManager, cmIds, complete) {\n        const newValue = (complete) ? 1 : 0;\n        this._setElementsValue(stateManager, 'cm', cmIds, 'completionstate', newValue);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the page current item.\n     *\n     * Only one element of the course state can be the page item at a time.\n     *\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\n     * this element get the page item.\n     *\n     * If the page item is static means that it is not meant to change. This is important because\n     * static page items has some special logic. For example, if a cm is the static page item\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\n     * @param {Number|undefined} id the element id\n     * @param {boolean|undefined} isStatic if the page item is static\n     */\n    setPageItem(stateManager, type, id, isStatic) {\n        let newPageItem;\n        if (type !== undefined) {\n            newPageItem = stateManager.get(type, id);\n            if (!newPageItem) {\n                return;\n            }\n        }\n        stateManager.setReadOnly(false);\n        // Remove the current page item.\n        const course = stateManager.get('course');\n        course.pageItem = null;\n        // Save the new page item.\n        if (newPageItem) {\n            course.pageItem = {\n                id,\n                type,\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\n                isStatic,\n            };\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /*\n     * Get updated user preferences and state data related to some section ids.\n     *\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     * @param {Object} preferences the new preferences values\n     */\n    async sectionPreferences(stateManager, sectionIds, preferences) {\n        stateManager.setReadOnly(false);\n        // Check if we need to update preferences.\n        let updatePreferences = false;\n        sectionIds.forEach(sectionId => {\n            const section = stateManager.get('section', sectionId);\n            if (section === undefined) {\n                return;\n            }\n            let newValue = preferences.contentcollapsed ?? section.contentcollapsed;\n            if (section.contentcollapsed != newValue) {\n                section.contentcollapsed = newValue;\n                updatePreferences = true;\n            }\n            newValue = preferences.indexcollapsed ?? section.indexcollapsed;\n            if (section.indexcollapsed != newValue) {\n                section.indexcollapsed = newValue;\n                updatePreferences = true;\n            }\n        });\n        stateManager.setReadOnly(true);\n\n        if (updatePreferences) {\n            // Build the preference structures.\n            const course = stateManager.get('course');\n            const state = stateManager.state;\n            const prefKey = `coursesectionspreferences_${course.id}`;\n            const preferences = {\n                contentcollapsed: [],\n                indexcollapsed: [],\n            };\n            state.section.forEach(section => {\n                if (section.contentcollapsed) {\n                    preferences.contentcollapsed.push(section.id);\n                }\n                if (section.indexcollapsed) {\n                    preferences.indexcollapsed.push(section.id);\n                }\n            });\n            const jsonString = JSON.stringify(preferences);\n            M.util.set_user_preference(prefKey, jsonString);\n        }\n    }\n\n    /**\n     * Get updated state data related to some cm ids.\n     *\n     * @method cmState\n     * @param {StateManager} stateManager the current state\n     * @param {array} cmids the list of cm ids to update\n     */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Get the full updated state data of the course.\n     *\n     * @param {StateManager} stateManager the current state\n     */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates);\n    }\n\n}\n"],"file":"mutations.min.js"}