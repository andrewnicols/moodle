{"version":3,"sources":["../../../src/local/courseeditor/mutations.js"],"names":["_callEditWebservice","action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajaxresult","ajax","call","methodname","JSON","parse","init","stateManager","addUpdateTypes","prepareFields","_prepareFields","updateName","fields","locked","cmMove","cmids","Error","course","get","cmLock","updates","id","processUpdates","sectionMove","sectionIds","sectionLock","addSection","sectionDelete","cmDrag","cmIds","dragValue","setPageItem","_setElementsValue","sectionDrag","cmCompletion","complete","newValue","lockValue","name","fieldName","setReadOnly","forEach","element","type","isStatic","newPageItem","pageItem","sectionId","sectionid","unlockAll","state","section","cm","sectionPreferences","preferences","updatePreferences","contentcollapsed","indexcollapsed","prefKey","push","jsonString","stringify","M","util","set_user_preference","cmState","sectionState","courseState"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport ajax from 'core/ajax';\n\n/**\n * Default mutation manager\n *\n * @module     core_courseformat/local/courseeditor/mutations\n * @class     core_courseformat/local/courseeditor/mutations\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class {\n\n    // All course editor mutations for Moodle 4.0 will be located in this file.\n\n    /**\n     * Private method to call core_courseformat_update_course webservice.\n     *\n     * @method _callEditWebservice\n     * @param {string} action\n     * @param {number} courseId\n     * @param {array} ids\n     * @param {number} targetSectionId optional target section id (for moving actions)\n     * @param {number} targetCmId optional target cm id (for moving actions)\n     */\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\n        const args = {\n            action,\n            courseid: courseId,\n            ids,\n        };\n        if (targetSectionId) {\n            args.targetsectionid = targetSectionId;\n        }\n        if (targetCmId) {\n            args.targetcmid = targetCmId;\n        }\n        let ajaxresult = await ajax.call([{\n            methodname: 'core_courseformat_update_course',\n            args,\n        }])[0];\n        return JSON.parse(ajaxresult);\n    }\n\n\n    /**\n     * Mutation module initialize.\n     *\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\n     *\n     * @param {StateManager} stateManager the state manager\n     */\n    init(stateManager) {\n        // Add a method to prepare the fields when some update is comming from the server.\n        stateManager.addUpdateTypes({\n            prepareFields: this._prepareFields,\n        });\n    }\n\n    /**\n     * Add default values to state elements.\n     *\n     * This method is called every time a webservice returns a update state message.\n     *\n     * @param {Object} stateManager the state manager\n     * @param {String} updateName the state element to update\n     * @param {Object} fields the new data\n     * @returns {Object} final fields data\n     */\n    _prepareFields(stateManager, updateName, fields) {\n        // Any update should unlock the element.\n        fields.locked = false;\n        return fields;\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\n     * new location:\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\n     *                value will be ignored in this case.\n     *  - targetSectionId: the activities will be appended to the section. In this case\n     *                     targetSectionId should not be present.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmids the list of cm ids to move\n     * @param {number} targetSectionId the target section id\n     * @param {number} targetCmId the target course module id\n     */\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\n        if (!targetSectionId && !targetCmId) {\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\n        }\n        const course = stateManager.get('course');\n        this.cmLock(stateManager, cmids, true);\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Move course modules to specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids to move\n     * @param {number} targetSectionId the target section id\n     */\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\n        if (!targetSectionId) {\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\n        }\n        const course = stateManager.get('course');\n        this.sectionLock(stateManager, sectionIds, true);\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Add a new section to a specific course location.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {number} targetSectionId optional the target section id\n     */\n    async addSection(stateManager, targetSectionId) {\n        if (!targetSectionId) {\n            targetSectionId = 0;\n        }\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Delete sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of course modules ids\n     */\n    async sectionDelete(stateManager, sectionIds) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n    }\n\n    /**\n     * Mark or unmark course modules as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} dragValue the new dragging value\n     */\n    cmDrag(stateManager, cmIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course sections as dragging.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} dragValue the new dragging value\n     */\n    sectionDrag(stateManager, sectionIds, dragValue) {\n        this.setPageItem(stateManager);\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\n    }\n\n    /**\n     * Mark or unmark course modules as complete.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} complete the new completion value\n     */\n    cmCompletion(stateManager, cmIds, complete) {\n        const newValue = (complete) ? 1 : 0;\n        this._setElementsValue(stateManager, 'cm', cmIds, 'completionstate', newValue);\n    }\n\n    /**\n     * Lock or unlock course modules.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} cmIds the list of course modules ids\n     * @param {bool} lockValue the new locked value\n     */\n    cmLock(stateManager, cmIds, lockValue) {\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\n    }\n\n    /**\n     * Lock or unlock course sections.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {array} sectionIds the list of section ids\n     * @param {bool} lockValue the new locked value\n     */\n    sectionLock(stateManager, sectionIds, lockValue) {\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\n    }\n\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\n        stateManager.setReadOnly(false);\n        ids.forEach((id) => {\n            const element = stateManager.get(name, id);\n            if (element) {\n                element[fieldName] = newValue;\n            }\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Set the page current item.\n     *\n     * Only one element of the course state can be the page item at a time.\n     *\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\n     * this element get the page item.\n     *\n     * If the page item is static means that it is not meant to change. This is important because\n     * static page items has some special logic. For example, if a cm is the static page item\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\n     *\n     * @param {StateManager} stateManager the current state manager\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\n     * @param {Number|undefined} id the element id\n     * @param {boolean|undefined} isStatic if the page item is static\n     */\n    setPageItem(stateManager, type, id, isStatic) {\n        let newPageItem;\n        if (type !== undefined) {\n            newPageItem = stateManager.get(type, id);\n            if (!newPageItem) {\n                return;\n            }\n        }\n        stateManager.setReadOnly(false);\n        // Remove the current page item.\n        const course = stateManager.get('course');\n        course.pageItem = null;\n        // Save the new page item.\n        if (newPageItem) {\n            course.pageItem = {\n                id,\n                type,\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\n                isStatic,\n            };\n        }\n        stateManager.setReadOnly(true);\n    }\n\n    /**\n     * Unlock all course elements.\n     *\n     * @param {StateManager} stateManager the current state manager\n     */\n    unlockAll(stateManager) {\n        const state = stateManager.state;\n        stateManager.setReadOnly(false);\n        state.section.forEach((section) => {\n            section.locked = false;\n        });\n        state.cm.forEach((cm) => {\n            cm.locked = false;\n        });\n        stateManager.setReadOnly(true);\n    }\n\n    /*\n     * Get updated user preferences and state data related to some section ids.\n     *\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     * @param {Object} preferences the new preferences values\n     */\n    async sectionPreferences(stateManager, sectionIds, preferences) {\n        stateManager.setReadOnly(false);\n        // Check if we need to update preferences.\n        let updatePreferences = false;\n        sectionIds.forEach(sectionId => {\n            const section = stateManager.get('section', sectionId);\n            if (section === undefined) {\n                return;\n            }\n            let newValue = preferences.contentcollapsed ?? section.contentcollapsed;\n            if (section.contentcollapsed != newValue) {\n                section.contentcollapsed = newValue;\n                updatePreferences = true;\n            }\n            newValue = preferences.indexcollapsed ?? section.indexcollapsed;\n            if (section.indexcollapsed != newValue) {\n                section.indexcollapsed = newValue;\n                updatePreferences = true;\n            }\n        });\n        stateManager.setReadOnly(true);\n\n        if (updatePreferences) {\n            // Build the preference structures.\n            const course = stateManager.get('course');\n            const state = stateManager.state;\n            const prefKey = `coursesectionspreferences_${course.id}`;\n            const preferences = {\n                contentcollapsed: [],\n                indexcollapsed: [],\n            };\n            state.section.forEach(section => {\n                if (section.contentcollapsed) {\n                    preferences.contentcollapsed.push(section.id);\n                }\n                if (section.indexcollapsed) {\n                    preferences.indexcollapsed.push(section.id);\n                }\n            });\n            const jsonString = JSON.stringify(preferences);\n            M.util.set_user_preference(prefKey, jsonString);\n        }\n    }\n\n    /**\n     * Get updated state data related to some cm ids.\n     *\n     * @method cmState\n     * @param {StateManager} stateManager the current state\n     * @param {array} cmids the list of cm ids to update\n     */\n    async cmState(stateManager, cmids) {\n        this.cmLock(stateManager, cmids, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\n        stateManager.processUpdates(updates);\n        this.cmLock(stateManager, cmids, false);\n    }\n\n    /**\n     * Get updated state data related to some section ids.\n     *\n     * @method sectionState\n     * @param {StateManager} stateManager the current state\n     * @param {array} sectionIds the list of section ids to update\n     */\n    async sectionState(stateManager, sectionIds) {\n        this.sectionLock(stateManager, sectionIds, true);\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\n        stateManager.processUpdates(updates);\n        this.sectionLock(stateManager, sectionIds, false);\n    }\n\n    /**\n     * Get the full updated state data of the course.\n     *\n     * @param {StateManager} stateManager the current state\n     */\n    async courseState(stateManager) {\n        const course = stateManager.get('course');\n        const updates = await this._callEditWebservice('course_state', course.id);\n        stateManager.processUpdates(updates);\n    }\n\n}\n"],"file":"mutations.min.js"}