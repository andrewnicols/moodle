{"version":3,"file":"bulkedittools.min.js","sources":["../../../src/local/content/bulkedittools.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The bulk editor tools bar.\n *\n * @module     core_courseformat/local/content/bulkedittools\n * @class      core_courseformat/local/content/bulkedittools\n * @copyright  2023 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport {disableStickyFooter, enableStickyFooter} from 'core/sticky-footer';\nimport {getCurrentCourseEditor} from 'core_courseformat/courseeditor';\nimport {get_string as getString} from 'core/str';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\n\n// Load global strings.\nprefetchStrings(\n    'core_courseformat',\n    ['bulkselection']\n);\n\nexport default class Component extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'bulk_editor_tools';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONS: `[data-for=\"bulkaction\"]`,\n            ACTIONTOOL: `[data-for=\"bulkactions\"] li`,\n            CANCEL: `[data-for=\"bulkcancel\"]`,\n            COUNT: `[data-for='bulkcount']`,\n            SELECTABLE: `[data-bulkcheckbox][data-is-selectable]`,\n            SELECTALL: `[data-for=\"selectall\"]`,\n            BULKBTN: `[data-for=\"enableBulk\"]`,\n        };\n        // Most classes will be loaded later by DndCmItem.\n        this.classes = {\n            HIDE: 'd-none',\n            DISABLED: 'disabled',\n        };\n    }\n\n    /**\n     * Static method to create a component instance from the mustache template.\n     *\n     * @param {string} target optional altentative DOM main element CSS selector\n     * @param {object} selectors optional css selector overrides\n     * @return {Component}\n     */\n    static init(target, selectors) {\n        return new this({\n            element: document.querySelector(target),\n            reactive: getCurrentCourseEditor(),\n            selectors\n        });\n    }\n\n    /**\n     * Initial state ready method.\n     */\n    stateReady() {\n        const cancelBtn = this.getElement(this.selectors.CANCEL);\n        if (cancelBtn) {\n            this.addEventListener(cancelBtn, 'click', this._cancelBulk);\n        }\n        const selectAll = this.getElement(this.selectors.SELECTALL);\n        if (selectAll) {\n            this.addEventListener(selectAll, 'change', this._selectAllClick);\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `bulk.enabled:updated`, handler: this._refreshEnabled},\n            {watch: `bulk:updated`, handler: this._refreshTools},\n        ];\n    }\n\n    /**\n     * Hide and show the bulk edit tools.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details (state.bulk in this case).\n     */\n    _refreshEnabled({element}) {\n        if (element.enabled) {\n            enableStickyFooter();\n        } else {\n            disableStickyFooter();\n        }\n    }\n\n    /**\n     * Refresh the tools depending on the current selection.\n     *\n     * @param {object} param the state watcher information\n     * @param {Object} param.state the full state data.\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    _refreshTools(param) {\n        this._refreshSelectCount(param);\n        this._refreshSelectAll(param);\n        this._refreshActions(param);\n    }\n\n    /**\n     * Refresh the selection count.\n     *\n     * @param {object} param\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    async _refreshSelectCount({element: bulk}) {\n        const selectedCount = await getString('bulkselection', 'core_courseformat', bulk.selection.length);\n        const selectedElement = this.getElement(this.selectors.COUNT);\n        if (selectedElement) {\n            selectedElement.innerHTML = selectedCount;\n        }\n    }\n\n    /**\n     * Refresh the select all element.\n     *\n     * @param {object} param\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    _refreshSelectAll({element: bulk}) {\n        const selectall = this.getElement(this.selectors.SELECTALL);\n        if (!selectall) {\n            return;\n        }\n        if (bulk.selectedType === '') {\n            selectall.checked = false;\n            selectall.disabled = true;\n            return;\n        }\n\n        selectall.disabled = false;\n        const maxSelection = document.querySelectorAll(this.selectors.SELECTABLE).length;\n        selectall.checked = (bulk.selection.length == maxSelection);\n    }\n\n    /**\n     * Refresh the visible action buttons depending on the selection type.\n     *\n     * @param {object} param\n     * @param {Object} param.element the affected element (bulk in this case).\n     */\n    _refreshActions({element: bulk}) {\n        // By default, we show the cm options.\n        const displayType = (bulk.selectedType == 'section') ? 'section' : 'cm';\n        const enabled = (bulk.selectedType !== '');\n        this.getElements(this.selectors.ACTIONS).forEach(action => {\n            action.classList.toggle(this.classes.DISABLED, !enabled);\n\n            const actionTool = action.closest(this.selectors.ACTIONTOOL);\n            const isHidden = (action.dataset.bulk != displayType);\n            actionTool?.classList.toggle(this.classes.HIDE, isHidden);\n        });\n    }\n\n    /**\n     * Cancel bulk handler.\n     */\n    _cancelBulk() {\n        const pending = new Pending(`courseformat/content:bulktoggle_off`);\n        this.reactive.dispatch('bulkEnable', false);\n        // Wait for a while and focus on enable bulk button.\n        setTimeout(() => {\n            document.querySelector(this.selectors.BULKBTN)?.focus();\n            pending.resolve();\n        }, 150);\n    }\n\n    /**\n     * Select all elements click handler.\n     * @param {Event} event\n     */\n    _selectAllClick(event) {\n        const target = event.target;\n        const bulk = this.reactive.get('bulk');\n        if (bulk.selectedType === '') {\n            return;\n        }\n        if (!target.checked) {\n            this._handleUnselectAll();\n            return;\n        }\n        this._handleSelectAll(bulk);\n    }\n\n    /**\n     * Process unselect all elements.\n     */\n    _handleUnselectAll() {\n        const pending = new Pending(`courseformat/content:bulktUnselectAll`);\n        // Re-enable bulk will clean the selection and the selection type.\n        this.reactive.dispatch('bulkEnable', true);\n        // Wait for a while and focus on the first checkbox.\n        setTimeout(() => {\n            document.querySelector(this.selectors.SELECTABLE)?.focus();\n            pending.resolve();\n        }, 150);\n    }\n\n    /**\n     * Process a select all selectable elements.\n     * @param {Object} bulk the state bulk data\n     * @param {String} bulk.selectedType the current selected type (section/cm)\n     */\n    _handleSelectAll(bulk) {\n        const selectableIds = [];\n        const selectables = document.querySelectorAll(this.selectors.SELECTABLE);\n        if (selectables.length == 0) {\n            return;\n        }\n        selectables.forEach(selectable => {\n            selectableIds.push(selectable.dataset.id);\n        });\n        const mutation = (bulk.selectedType === 'cm') ? 'cmSelect' : 'sectionSelect';\n        this.reactive.dispatch(mutation, selectableIds);\n    }\n}\n"],"names":["_pending","_prefetch","prefetchStrings","Component","BaseComponent","create","name","this","selectors","ACTIONS","ACTIONTOOL","CANCEL","COUNT","SELECTABLE","SELECTALL","BULKBTN","classes","HIDE","DISABLED","static","target","element","document","querySelector","reactive","_courseeditor","getCurrentCourseEditor","stateReady","cancelBtn","getElement","addEventListener","_cancelBulk","selectAll","_selectAllClick","getWatchers","watch","handler","_refreshEnabled","_refreshTools","_ref","enabled","_stickyFooter","enableStickyFooter","disableStickyFooter","param","_refreshSelectCount","_refreshSelectAll","_refreshActions","async","_ref2","bulk","selectedCount","_str","get_string","selection","length","selectedElement","innerHTML","_ref3","selectall","selectedType","checked","disabled","maxSelection","querySelectorAll","_ref4","displayType","getElements","forEach","action","classList","toggle","actionTool","closest","isHidden","dataset","pending","Pending","dispatch","setTimeout","_document$querySelect","focus","resolve","event","get","_handleSelectAll","_handleUnselectAll","_document$querySelect2","selectableIds","selectables","selectable","push","id","mutation"],"mappings":";;;;;;;;qFA4BAA,cAAAA,6CAIA,EAAAC,UAAAC,iBACI,oBACA,CAAC,kBAGgBC,MAAAA,kBAAkBC,UAAAA,cAKnCC,SAESC,KAAAA,KAAO,oBAEZC,KAAKC,UAAY,CACbC,QADa,0BAEbC,WAFa,8BAGbC,OAHa,0BAIbC,MAJa,yBAKbC,WALa,0CAMbC,UANa,yBAObC,QAAO,2BAGXR,KAAKS,QAAU,CACXC,KAAM,SACNC,SAAU,WAEjB,CASUC,YAACC,OAAQZ,WACT,OAAA,IAAID,KAAK,CACZc,QAASC,SAASC,cAAcH,QAChCI,UAAU,EAFEC,cAAAC,0BAGZlB,qBAEP,CAKDmB,aACUC,MAAAA,UAAYrB,KAAKsB,WAAWtB,KAAKC,UAAUG,QAC7CiB,WACArB,KAAKuB,iBAAiBF,UAAW,QAASrB,KAAKwB,aAE7CC,MAAAA,UAAYzB,KAAKsB,WAAWtB,KAAKC,UAAUM,WAC7CkB,WACAzB,KAAKuB,iBAAiBE,UAAW,SAAUzB,KAAK0B,gBAEvD,CAODC,cACI,MAAO,CACH,CAACC,MAAD,uBAAgCC,QAAS7B,KAAK8B,iBAC9C,CAACF,MAAD,eAAwBC,QAAS7B,KAAK+B,eAE7C,CAQDD,gBAA2BE,MAAX,IAAAlB,QAACA,SAAUkB,KACnBlB,QAAQmB,SACR,EAAAC,cAAAC,uBAEA,EAAAD,cAAAE,sBAEP,CASDL,cAAcM,OACLC,KAAAA,oBAAoBD,OACpBE,KAAAA,kBAAkBF,OAClBG,KAAAA,gBAAgBH,MACxB,CAQwBI,0BAAkBC,OAAjB,IAAC5B,QAAS6B,MAAOD,MACvC,MAAME,oBAAsB,EAAAC,KAAAC,YAAU,gBAAiB,oBAAqBH,KAAKI,UAAUC,QACrFC,gBAAkBjD,KAAKsB,WAAWtB,KAAKC,UAAUI,OACnD4C,kBACAA,gBAAgBC,UAAYN,cAEnC,CAQDL,kBAAmCY,OAAjB,IAACrC,QAAS6B,MAAOQ,MACzBC,MAAAA,UAAYpD,KAAKsB,WAAWtB,KAAKC,UAAUM,WAC7C,IAAC6C,UACD,OAEJ,GAA0B,KAAtBT,KAAKU,aAGL,OAFAD,UAAUE,SAAU,OACpBF,UAAUG,UAAW,GAIzBH,UAAUG,UAAW,EACfC,MAAAA,aAAezC,SAAS0C,iBAAiBzD,KAAKC,UAAUK,YAAY0C,OAC1EI,UAAUE,QAAWX,KAAKI,UAAUC,QAAUQ,YACjD,CAQDhB,gBAAiCkB,OAAjB,IAAC5C,QAAS6B,MAAOe,MAEvBC,MAAAA,YAAoC,WAArBhB,KAAKU,aAA6B,UAAY,KAC7DpB,QAAiC,KAAtBU,KAAKU,aACjBO,KAAAA,YAAY5D,KAAKC,UAAUC,SAAS2D,SAAQC,SAC7CA,OAAOC,UAAUC,OAAOhE,KAAKS,QAAQE,UAAWsB,SAE1CgC,MAAAA,WAAaH,OAAOI,QAAQlE,KAAKC,UAAUE,YAC3CgE,SAAYL,OAAOM,QAAQzB,MAAQgB,YACzCM,kBAAAA,WAAYF,UAAUC,OAAOhE,KAAKS,QAAQC,KAAMyD,SAAhD,GAEP,CAKD3C,cACI,MAAM6C,QAAU,IAAIC,SAAAA,QAApB,uCACAtE,KAAKiB,SAASsD,SAAS,cAAc,GAErCC,YAAW,KAAM,IAAAC,sBACb,QAAA1D,sBAAAA,SAASC,cAAchB,KAAKC,UAAUO,gBAAtC,IAAAiE,uBAAAA,sBAAgDC,QAChDL,QAAQM,SAAR,GACD,IACN,CAMDjD,gBAAgBkD,OACZ,MAAM/D,OAAS+D,MAAM/D,OACf8B,KAAO3C,KAAKiB,SAAS4D,IAAI,QACL,KAAtBlC,KAAKU,eAGJxC,OAAOyC,QAIPwB,KAAAA,iBAAiBnC,MAHlB3C,KAAK+E,qBAIZ,CAKDA,qBACI,MAAMV,QAAU,IAAIC,SAAAA,QAApB,yCAEAtE,KAAKiB,SAASsD,SAAS,cAAc,GAErCC,YAAW,KAAM,IAAAQ,uBACb,QAAAjE,uBAAAA,SAASC,cAAchB,KAAKC,UAAUK,mBAAtC,IAAA0E,wBAAAA,uBAAmDN,QACnDL,QAAQM,SAAR,GACD,IACN,CAODG,iBAAiBnC,MACPsC,MAAAA,cAAgB,GAChBC,YAAcnE,SAAS0C,iBAAiBzD,KAAKC,UAAUK,YAC7D,GAA0B,GAAtB4E,YAAYlC,OACZ,OAEJkC,YAAYrB,SAAQsB,aAChBF,cAAcG,KAAKD,WAAWf,QAAQiB,GAAtC,IAEEC,MAAAA,SAAkC,OAAtB3C,KAAKU,aAAyB,WAAa,gBAC7DrD,KAAKiB,SAASsD,SAASe,SAAUL,cACpC"}