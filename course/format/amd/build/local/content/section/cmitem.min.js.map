{"version":3,"file":"cmitem.min.js","sources":["../../../../src/local/content/section/cmitem.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course course module item component.\n *\n * This component is used to control specific course modules interactions like drag and drop.\n *\n * @module     core_courseformat/local/content/section/cmitem\n * @class      core_courseformat/local/content/section/cmitem\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\n\nexport default class extends DndCmItem {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_section_cmitem';\n        // Default query selectors.\n        this.selectors = {\n            BULKSELECT: `[data-for='cmBulkSelect']`,\n            BULKCHECKBOX: `[data-bulkcheckbox]`,\n            CARD: `.activity-item`,\n            DRAGICON: `.editing_move`,\n            INPLACEEDITABLE: `[data-inplaceeditablelink]`,\n        };\n        // Most classes will be loaded later by DndCmItem.\n        this.classes = {\n            LOCKED: 'editinprogress',\n            HIDE: 'd-none',\n            SELECTED: 'selected',\n        };\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Initial state ready method.\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this.configDragDrop(this.id);\n        this.getElement(this.selectors.DRAGICON)?.classList.add(this.classes.DRAGICON);\n        this._refreshBulk({state});\n        this.addEventListener(this.element, 'click', this._handleBulkModeClick);\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `cm[${this.id}]:deleted`, handler: this.unregister},\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\n            {watch: `bulk:updated`, handler: this._refreshBulk},\n        ];\n    }\n\n    /**\n     * Update a course index cm using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCm({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.locked = element.locked;\n    }\n\n    /**\n     * Update the bulk editing interface.\n     *\n     * @param {object} param\n     * @param {Object} param.state the state data\n     */\n    _refreshBulk({state}) {\n        const bulk = state.bulk;\n        // For now, dragging elements in bulk is not possible.\n        this.setDraggable(!bulk.enabled);\n\n        this.getElement(this.selectors.BULKSELECT)?.classList.toggle(this.classes.HIDE, !bulk.enabled);\n\n        const disabled = !this._isCmBulkEnabled(bulk);\n        const selected = this._isSelected(bulk);\n        this._refreshActivityCard(bulk, selected);\n        this._setCheckboxValue(selected, disabled);\n    }\n\n    /**\n     * Update the activity card depending on the bulk selection.\n     *\n     * @param {Object} bulk the current bulk state data\n     * @param {Boolean} selected if the activity is selected.\n     */\n    _refreshActivityCard(bulk, selected) {\n        this.getElement(this.selectors.INPLACEEDITABLE)?.classList.toggle(this.classes.HIDE, bulk.enabled);\n        this.getElement(this.selectors.CARD)?.classList.toggle(this.classes.SELECTED, selected);\n        this.element.classList.toggle(this.classes.SELECTED, selected);\n    }\n\n    /**\n     * Modify the checkbox element.\n     * @param {Boolean} checked the new checked value\n     * @param {Boolean} disabled the new disabled value\n     */\n    _setCheckboxValue(checked, disabled) {\n        const checkbox = this.getElement(this.selectors.BULKCHECKBOX);\n        if (!checkbox) {\n            return;\n        }\n        checkbox.checked = checked;\n        checkbox.disabled = disabled;\n        // Is selectable is used to easily scan the page for bulk checkboxes.\n        if (disabled) {\n            checkbox.removeAttribute('data-is-selectable');\n        } else {\n            checkbox.dataset.isSelectable = 1;\n        }\n    }\n\n    /**\n     * Handle the activity card click in bulk mode.\n     * @param {Event} event the click event\n     */\n    _handleBulkModeClick(event) {\n        const selectElement = event.target.closest(this.selectors.BULKSELECT);\n        if (selectElement) {\n            // The select element checkbox execute a normal content action as\n            // any regular action button. This is because the chengechecker module\n            // is sniffing any form element and will with the checked value\n            // changing it twice.\n            return;\n        }\n        const bulk = this.reactive.get('bulk');\n        if (!this._isCmBulkEnabled(bulk)) {\n            return;\n        }\n        event.preventDefault();\n        const mutation = (this._isSelected(bulk)) ? 'cmUnselect' : 'cmSelect';\n        this.reactive.dispatch(mutation, [this.id]);\n    }\n\n    /**\n     * Check if cm bulk selection is available.\n     * @param {Object} bulk the current state bulk attribute\n     * @returns {Boolean}\n     */\n    _isCmBulkEnabled(bulk) {\n        if (!bulk.enabled) {\n            return false;\n        }\n        return (bulk.selectedType === '' || bulk.selectedType === 'cm');\n    }\n\n    /**\n     * Check if the cm id is part of the current bulk selection.\n     * @param {Object} bulk the current state bulk attribute\n     * @returns {Boolean}\n     */\n    _isSelected(bulk) {\n        if (bulk.selectedType !== 'cm') {\n            return false;\n        }\n        return bulk.selection.includes(this.id);\n    }\n}\n"],"names":["_dndcmitem","_default","DndCmItem","create","name","this","selectors","BULKSELECT","BULKCHECKBOX","CARD","DRAGICON","INPLACEEDITABLE","classes","LOCKED","HIDE","SELECTED","id","element","dataset","stateReady","state","_this$getElement","configDragDrop","getElement","classList","add","_refreshBulk","addEventListener","_handleBulkModeClick","getWatchers","watch","concat","handler","unregister","_refreshCm","_ref","_element$dragging","_element$locked","toggle","DRAGGING","dragging","locked","_ref2","_this$getElement2","bulk","setDraggable","enabled","disabled","_isCmBulkEnabled","selected","_isSelected","_refreshActivityCard","_setCheckboxValue","_this$getElement3","_this$getElement4","checked","checkbox","removeAttribute","isSelectable","event","target","closest","reactive","get","preventDefault","mutation","dispatch","selectedType","selection","includes"],"mappings":"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"}