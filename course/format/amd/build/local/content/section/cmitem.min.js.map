{"version":3,"file":"cmitem.min.js","sources":["../../../../src/local/content/section/cmitem.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course course module item component.\n *\n * This component is used to control specific course modules interactions like drag and drop.\n *\n * @module     core_courseformat/local/content/section/cmitem\n * @class      core_courseformat/local/content/section/cmitem\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport DndCmItem from 'core_courseformat/local/courseeditor/dndcmitem';\n\nexport default class extends DndCmItem {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_section_cmitem';\n        // Default query selectors.\n        this.selectors = {\n            BULKSELECT: `[data-for='cmBulkSelect']`,\n            BULKCHECKBOX: `[data-bulkcheckbox]`,\n            CARD: `.activity-item`,\n            DRAGICON: `.editing_move`,\n            INPLACEEDITABLE: `[data-inplaceeditablelink]`,\n        };\n        // Most classes will be loaded later by DndCmItem.\n        this.classes = {\n            LOCKED: 'editinprogress',\n            HIDE: 'd-none',\n            SELECTED: 'selected',\n        };\n        // We need our id to watch specific events.\n        this.id = this.element.dataset.id;\n    }\n\n    /**\n     * Initial state ready method.\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this.configDragDrop(this.id);\n        this.getElement(this.selectors.DRAGICON)?.classList.add(this.classes.DRAGICON);\n        this._refreshBulk({state});\n        this.addEventListener(this.element, 'click', this._handleBulkModeClick);\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `cm[${this.id}]:deleted`, handler: this.unregister},\n            {watch: `cm[${this.id}]:updated`, handler: this._refreshCm},\n            {watch: `bulk:updated`, handler: this._refreshBulk},\n        ];\n    }\n\n    /**\n     * Update a course index cm using the state information.\n     *\n     * @param {object} param\n     * @param {Object} param.element details the update details.\n     */\n    _refreshCm({element}) {\n        // Update classes.\n        this.element.classList.toggle(this.classes.DRAGGING, element.dragging ?? false);\n        this.element.classList.toggle(this.classes.LOCKED, element.locked ?? false);\n        this.locked = element.locked;\n    }\n\n    /**\n     * Update the bulk editing interface.\n     *\n     * @param {object} param\n     * @param {Object} param.state the state data\n     */\n    _refreshBulk({state}) {\n        const bulk = state.bulk;\n        // For now, dragging elements in bulk is not possible.\n        this.setDraggable(!bulk.enabled);\n\n        this.getElement(this.selectors.BULKSELECT)?.classList.toggle(this.classes.HIDE, !bulk.enabled);\n\n        const disabled = !this._isCmBulkEnabled(bulk);\n        const selected = this._isSelected(bulk);\n        this._refreshActivityCard(bulk, selected);\n        this._setCheckboxValue(selected, disabled);\n    }\n\n    /**\n     * Update the activity card depending on the bulk selection.\n     *\n     * @param {Object} bulk the current bulk state data\n     * @param {Boolean} selected if the activity is selected.\n     */\n    _refreshActivityCard(bulk, selected) {\n        this.getElement(this.selectors.INPLACEEDITABLE)?.classList.toggle(this.classes.HIDE, bulk.enabled);\n        this.getElement(this.selectors.CARD)?.classList.toggle(this.classes.SELECTED, selected);\n        this.element.classList.toggle(this.classes.SELECTED, selected);\n    }\n\n    /**\n     * Modify the checkbox element.\n     * @param {Boolean} checked the new checked value\n     * @param {Boolean} disabled the new disabled value\n     */\n    _setCheckboxValue(checked, disabled) {\n        const checkbox = this.getElement(this.selectors.BULKCHECKBOX);\n        if (!checkbox) {\n            return;\n        }\n        checkbox.checked = checked;\n        checkbox.disabled = disabled;\n        // Is selectable is used to easily scan the page for bulk checkboxes.\n        if (disabled) {\n            checkbox.removeAttribute('data-is-selectable');\n        } else {\n            checkbox.dataset.isSelectable = 1;\n        }\n    }\n\n    /**\n     * Handle the activity card click in bulk mode.\n     * @param {Event} event the click event\n     */\n    _handleBulkModeClick(event) {\n        const selectElement = event.target.closest(this.selectors.BULKSELECT);\n        if (selectElement) {\n            // The select element checkbox execute a normal content action as\n            // any regular action button. This is because the chengechecker module\n            // is sniffing any form element and will with the checked value\n            // changing it twice.\n            return;\n        }\n        const bulk = this.reactive.get('bulk');\n        if (!this._isCmBulkEnabled(bulk)) {\n            return;\n        }\n        event.preventDefault();\n        const mutation = (this._isSelected(bulk)) ? 'cmUnselect' : 'cmSelect';\n        this.reactive.dispatch(mutation, [this.id]);\n    }\n\n    /**\n     * Check if cm bulk selection is available.\n     * @param {Object} bulk the current state bulk attribute\n     * @returns {Boolean}\n     */\n    _isCmBulkEnabled(bulk) {\n        if (!bulk.enabled) {\n            return false;\n        }\n        return (bulk.selectedType === '' || bulk.selectedType === 'cm');\n    }\n\n    /**\n     * Check if the cm id is part of the current bulk selection.\n     * @param {Object} bulk the current state bulk attribute\n     * @returns {Boolean}\n     */\n    _isSelected(bulk) {\n        if (bulk.selectedType !== 'cm') {\n            return false;\n        }\n        return bulk.selection.includes(this.id);\n    }\n}\n"],"names":["obj","_dndcmitem","__esModule","default","_default","DndCmItem","create","this","name","selectors","BULKSELECT","BULKCHECKBOX","CARD","DRAGICON","INPLACEEDITABLE","classes","LOCKED","HIDE","SELECTED","id","element","dataset","stateReady","state","_this$getElement","configDragDrop","getElement","classList","add","_refreshBulk","addEventListener","_handleBulkModeClick","getWatchers","watch","concat","handler","unregister","_refreshCm","_ref","_element$dragging","_element$locked","toggle","DRAGGING","dragging","locked","_ref2","_this$getElement2","bulk","setDraggable","enabled","disabled","_isCmBulkEnabled","selected","_isSelected","_refreshActivityCard","_setCheckboxValue","_this$getElement3","_this$getElement4","checked","checkbox","removeAttribute","isSelectable","event","target","closest","reactive","get","preventDefault","mutation","dispatch","selectedType","selection","includes","_exports"],"mappings":"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"}