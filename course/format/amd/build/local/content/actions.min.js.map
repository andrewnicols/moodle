{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     core_courseformat/local/content/actions\n * @class      core_courseformat/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport {getList} from 'core/normalise';\nimport * as CourseEvents from 'core_course/events';\nimport Pending from 'core/pending';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            // Move modal selectors.\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            MODALTOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n            CONTENTTREE: `#destination-selector`,\n            ACTIONMENU: `.action-menu`,\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\n        };\n        // Component css classes.\n        this.classes = {\n            DISABLED: `disabled`,\n        };\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data.\n     *\n     */\n    stateReady(state) {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n        // Check section limit.\n        this._checkSectionlist({state});\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\n        this.addEventListener(\n            this.element,\n            CourseEvents.sectionRefreshed,\n            () => this._checkSectionlist({state})\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n        ];\n    }\n\n    _dispatchClick(event) {\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n        if (target.classList.contains(this.classes.DISABLED)) {\n            event.preventDefault();\n            return;\n        }\n\n        // Invoke proper method.\n        const methodName = this._actionMethodName(target.dataset.action);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _checkSectionlist({state}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target section id and title.\n        data.sectionid = sectionInfo.id;\n        data.sectiontitle = sectionInfo.title;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursesection', 'core'),\n            body: Templates.render('core_courseformat/local/content/movesection', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element and section zero.\n        const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n        this._disableLink(currentElement);\n        const generalSection = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-number='0']`);\n        this._disableLink(generalSection);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n            },\n            true\n        );\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n            this.reactive.dispatch('sectionMove', [sectionId], target.dataset.id);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const cmInfo = this.reactive.get('cm', cmId);\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target cm info.\n        data.cmid = cmInfo.id;\n        data.cmname = cmInfo.name;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursemodule', 'core'),\n            body: Templates.render('core_courseformat/local/content/movecm', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element.\n        let currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n        this._disableLink(currentElement);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n                ENTER: this.selectors.SECTIONLINK,\n            }\n        );\n\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\n        // All jQuery int this code can be replaced when MDL-71979 is integrated.\n        const sectionnode = currentElement.closest(this.selectors.SECTIONNODE);\n        const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\n        let collapsibleId = toggler.data('target') ?? toggler.attr('href');\n        if (collapsibleId) {\n            // We cannot be sure we have # in the id element name.\n            collapsibleId = collapsibleId.replace('#', '');\n            jQuery(`#${collapsibleId}`).collapse('toggle');\n        }\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            // Get draggable data from cm or section to dispatch.\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n\n            this.reactive.dispatch('cmMove', [cmId], targetSectionId, targetCmId);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n    /**\n     * Handle a create section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\n    }\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        const cmList = sectionInfo.cmlist ?? [];\n        if (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle) {\n            // We need confirmation if the section has something.\n            const modalParams = {\n                title: getString('confirm', 'core'),\n                body: getString('confirmdeletesection', 'moodle', sectionInfo.title),\n                saveButtonText: getString('delete', 'core'),\n                type: ModalFactory.types.SAVE_CANCEL,\n            };\n\n            const modal = await this._modalBodyRenderedPromise(modalParams);\n\n            modal.getRoot().on(\n                ModalEvents.save,\n                e => {\n                    // Stop the default save button behaviour which is to close the modal.\n                    e.preventDefault();\n                    modal.destroy();\n                    this.reactive.dispatch('sectionDelete', [sectionId]);\n                }\n            );\n            return;\n        } else {\n            // We don't need confirmation to delete empty sections.\n            this.reactive.dispatch('sectionDelete', [sectionId]);\n        }\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.DISABLED, locked);\n            this.setElementLocked(element, locked);\n        });\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     */\n    _disableLink(element) {\n        if (element) {\n            element.style.pointerEvents = 'none';\n            element.style.userSelect = 'none';\n            element.classList.add(this.classes.DISABLED);\n            element.setAttribute('aria-disabled', true);\n            element.addEventListener('click', event => event.preventDefault());\n        }\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _modalBodyRenderedPromise(modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalFactory.create(modalParams).then((modal) => {\n                modal.setRemoveOnClose(true);\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n\n    /**\n     * Hide and later destroy a modal.\n     *\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\n     *\n     * @param {Modal} modal\n     * @param {HTMLElement} element the dom element to focus on.\n     */\n    _destroyModal(modal, element) {\n        modal.hide();\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\n        if (element) {\n            element.focus();\n        }\n        setTimeout(() =>{\n            modal.destroy();\n            pendingDestroy.resolve();\n        }, 500);\n    }\n\n    /**\n     * Get the closest actions menu toggler to an action element.\n     *\n     * @param {HTMLElement} element the action link element\n     * @returns {HTMLElement|undefined}\n     */\n    _getClosestActionMenuToogler(element) {\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\n        if (!actionMenu) {\n            return undefined;\n        }\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\n    }\n}\n"],"names":["_modal_factory","_interopRequireDefault","_modal_events","_templates","CourseEvents","_interopRequireWildcard","_pending","_contenttree","_jquery","_prefetch","prefetchStrings","_default","BaseComponent","create","name","this","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","classes","DISABLED","stateReady","state","addEventListener","element","_dispatchClick","_checkSectionlist","sectionRefreshed","getWatchers","watch","handler","event","target","closest","classList","contains","preventDefault","methodName","_actionMethodName","dataset","action","undefined","requestName","charAt","toUpperCase","slice","concat","_ref","_setAddSectionLocked","course","sectionlist","length","maxsections","async","sectionId","id","sectionInfo","reactive","get","editTools","_getClosestActionMenuToogler","data","getExporter","sectionid","sectiontitle","title","modalParams","_str","get_string","body","Templates","render","modal","_modalBodyRenderedPromise","modalBody","getBody","currentElement","querySelector","_disableLink","generalSection","ContentTree","SECTION","TOGGLER","COLLAPSE","matches","for","getAttribute","dispatch","_destroyModal","_toggler$data","cmId","cmInfo","exporter","cmid","cmname","ENTER","sectionnode","toggler","default","find","collapsibleId","attr","replace","collapse","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","section","cmlist","_target$dataset$id","_sectionInfo$cmlist","cmList","hassummary","rawtitle","saveButtonText","type","ModalFactory","types","SAVE_CANCEL","getRoot","on","ModalEvents","save","e","destroy","locked","getElements","forEach","toggle","setElementLocked","style","pointerEvents","userSelect","add","setAttribute","Promise","resolve","reject","then","setRemoveOnClose","bodyRendered","setSaveButtonText","show","catch","hide","pendingDestroy","Pending","focus","setTimeout","actionMenu"],"mappings":"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"}