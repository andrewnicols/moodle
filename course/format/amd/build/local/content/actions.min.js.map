{"version":3,"file":"actions.min.js","sources":["../../../src/local/content/actions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Course state actions dispatcher.\n *\n * This module captures all data-dispatch links in the course content and dispatch the proper\n * state mutation, including any confirmation and modal required.\n *\n * @module     core_courseformat/local/content/actions\n * @class      core_courseformat/local/content/actions\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport {getList, getFirst} from 'core/normalise';\nimport * as CourseEvents from 'core_course/events';\nimport Pending from 'core/pending';\nimport ContentTree from 'core_courseformat/local/courseeditor/contenttree';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\n// Load global strings.\nprefetchStrings('core', ['movecoursesection', 'movecoursemodule', 'confirm', 'delete']);\n\n// Mutations are dispatched by the course content actions.\n// Formats can use this module addActions static method to add custom actions.\n// Direct mutations can be simple strings (mutation) name or functions.\nconst directMutations = {\n    sectionHide: 'sectionHide',\n    sectionShow: 'sectionShow',\n    cmHide: 'cmHide',\n    cmShow: 'cmShow',\n    cmStealth: 'cmStealth',\n    cmMoveRight: 'cmMoveRight',\n    cmMoveLeft: 'cmMoveLeft',\n};\n\nexport default class extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'content_actions';\n        // Default query selectors.\n        this.selectors = {\n            ACTIONLINK: `[data-action]`,\n            // Move modal selectors.\n            SECTIONLINK: `[data-for='section']`,\n            CMLINK: `[data-for='cm']`,\n            SECTIONNODE: `[data-for='sectionnode']`,\n            MODALTOGGLER: `[data-toggle='collapse']`,\n            ADDSECTION: `[data-action='addSection']`,\n            CONTENTTREE: `#destination-selector`,\n            ACTIONMENU: `.action-menu`,\n            ACTIONMENUTOGGLER: `[data-toggle=\"dropdown\"]`,\n            // Availability modal selectors.\n            OPTIONSRADIO: `[type='radio']`,\n        };\n        // Component css classes.\n        this.classes = {\n            DISABLED: `disabled`,\n        };\n    }\n\n    /**\n     * Add extra actions to the module.\n     *\n     * @param {array} actions array of methods to execute\n     */\n    static addActions(actions) {\n        for (const [action, mutationReference] of Object.entries(actions)) {\n            if (typeof mutationReference !== 'function' && typeof mutationReference !== 'string') {\n                throw new Error(`${action} action must be a mutation name or a function`);\n            }\n            directMutations[action] = mutationReference;\n        }\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data.\n     *\n     */\n    stateReady(state) {\n        // Delegate dispatch clicks.\n        this.addEventListener(\n            this.element,\n            'click',\n            this._dispatchClick\n        );\n        // Check section limit.\n        this._checkSectionlist({state});\n        // Add an Event listener to recalculate limits it if a section HTML is altered.\n        this.addEventListener(\n            this.element,\n            CourseEvents.sectionRefreshed,\n            () => this._checkSectionlist({state})\n        );\n    }\n\n    /**\n     * Return the component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            // Check section limit.\n            {watch: `course.sectionlist:updated`, handler: this._checkSectionlist},\n        ];\n    }\n\n    _dispatchClick(event) {\n        const target = event.target.closest(this.selectors.ACTIONLINK);\n        if (!target) {\n            return;\n        }\n        if (target.classList.contains(this.classes.DISABLED)) {\n            event.preventDefault();\n            return;\n        }\n\n        // Invoke proper method.\n        const actionName = target.dataset.action;\n        const methodName = this._actionMethodName(actionName);\n\n        if (this[methodName] !== undefined) {\n            this[methodName](target, event);\n            return;\n        }\n\n        // Check direct mutations or mutations handlers.\n        if (directMutations[actionName] !== undefined) {\n            if (typeof directMutations[actionName] === 'function') {\n                directMutations[actionName](target, event);\n                return;\n            }\n            this._requestMutationAction(target, event, directMutations[actionName]);\n            return;\n        }\n    }\n\n    _actionMethodName(name) {\n        const requestName = name.charAt(0).toUpperCase() + name.slice(1);\n        return `_request${requestName}`;\n    }\n\n    /**\n     * Check the section list and disable some options if needed.\n     *\n     * @param {Object} detail the update details.\n     * @param {Object} detail.state the state object.\n     */\n    _checkSectionlist({state}) {\n        // Disable \"add section\" actions if the course max sections has been exceeded.\n        this._setAddSectionLocked(state.course.sectionlist.length > state.course.maxsections);\n    }\n\n    /**\n     * Return the ids represented by this element.\n     *\n     * Depending on the dataset attributes the action could represent a single id\n     * or a bulk actions with all the current selected ids.\n     *\n     * @param {HTMLElement} target\n     * @returns {Number[]} array of Ids\n     */\n    _getTargetIds(target) {\n        let ids = [];\n        if (target?.dataset?.id) {\n            ids.push(target.dataset.id);\n        }\n        const bulkType = target?.dataset?.bulk;\n        if (!bulkType) {\n            return ids;\n        }\n        const bulk = this.reactive.get('bulk');\n        if (bulk.enabled && bulk.selectedType === bulkType) {\n            ids = [...ids, ...bulk.selection];\n        }\n        return ids;\n    }\n\n    /**\n     * Handle a move section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target section id and title.\n        data.sectionid = sectionInfo.id;\n        data.sectiontitle = sectionInfo.title;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursesection', 'core'),\n            body: Templates.render('core_courseformat/local/content/movesection', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element and section zero.\n        const currentElement = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-id='${sectionId}']`);\n        this._disableLink(currentElement);\n        const generalSection = modalBody.querySelector(`${this.selectors.SECTIONLINK}[data-number='0']`);\n        this._disableLink(generalSection);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n            },\n            true\n        );\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for != 'section' || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n            this.reactive.dispatch('sectionMove', [sectionId], target.dataset.id);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n    /**\n     * Handle a move cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestMoveCm(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const cmInfo = this.reactive.get('cm', cmId);\n\n        event.preventDefault();\n\n        // The section edit menu to refocus on end.\n        const editTools = this._getClosestActionMenuToogler(target);\n\n        // Collect section information from the state.\n        const exporter = this.reactive.getExporter();\n        const data = exporter.course(this.reactive.state);\n\n        // Add the target cm info.\n        data.cmid = cmInfo.id;\n        data.cmname = cmInfo.name;\n\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: getString('movecoursemodule', 'core'),\n            body: Templates.render('core_courseformat/local/content/movecm', data),\n        };\n\n        // Create the modal.\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        const modalBody = getList(modal.getBody())[0];\n\n        // Disable current element.\n        let currentElement = modalBody.querySelector(`${this.selectors.CMLINK}[data-id='${cmId}']`);\n        this._disableLink(currentElement);\n\n        // Setup keyboard navigation.\n        new ContentTree(\n            modalBody.querySelector(this.selectors.CONTENTTREE),\n            {\n                SECTION: this.selectors.SECTIONNODE,\n                TOGGLER: this.selectors.MODALTOGGLER,\n                COLLAPSE: this.selectors.MODALTOGGLER,\n                ENTER: this.selectors.SECTIONLINK,\n            }\n        );\n\n        // Open the cm section node if possible (Bootstrap 4 uses jQuery to interact with collapsibles).\n        // All jQuery int this code can be replaced when MDL-71979 is integrated.\n        const sectionnode = currentElement.closest(this.selectors.SECTIONNODE);\n        const toggler = jQuery(sectionnode).find(this.selectors.MODALTOGGLER);\n        let collapsibleId = toggler.data('target') ?? toggler.attr('href');\n        if (collapsibleId) {\n            // We cannot be sure we have # in the id element name.\n            collapsibleId = collapsibleId.replace('#', '');\n            jQuery(`#${collapsibleId}`).collapse('toggle');\n        }\n\n        // Capture click.\n        modalBody.addEventListener('click', (event) => {\n            const target = event.target;\n            if (!target.matches('a') || target.dataset.for === undefined || target.dataset.id === undefined) {\n                return;\n            }\n            if (target.getAttribute('aria-disabled')) {\n                return;\n            }\n            event.preventDefault();\n\n            // Get draggable data from cm or section to dispatch.\n            let targetSectionId;\n            let targetCmId;\n            if (target.dataset.for == 'cm') {\n                const dropData = exporter.cmDraggableData(this.reactive.state, target.dataset.id);\n                targetSectionId = dropData.sectionid;\n                targetCmId = dropData.nextcmid;\n            } else {\n                const section = this.reactive.get('section', target.dataset.id);\n                targetSectionId = target.dataset.id;\n                targetCmId = section?.cmlist[0];\n            }\n\n            this.reactive.dispatch('cmMove', [cmId], targetSectionId, targetCmId);\n            this._destroyModal(modal, editTools);\n        });\n    }\n\n    /**\n     * Handle a create section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestAddSection(target, event) {\n        event.preventDefault();\n        this.reactive.dispatch('addSection', target.dataset.id ?? 0);\n    }\n\n    /**\n     * Handle a delete section request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestDeleteSection(target, event) {\n        // Check we have an id.\n        const sectionId = target.dataset.id;\n\n        if (!sectionId) {\n            return;\n        }\n        const sectionInfo = this.reactive.get('section', sectionId);\n\n        event.preventDefault();\n\n        const cmList = sectionInfo.cmlist ?? [];\n        if (cmList.length || sectionInfo.hassummary || sectionInfo.rawtitle) {\n            // We need confirmation if the section has something.\n            const modalParams = {\n                title: getString('confirm', 'core'),\n                body: getString('confirmdeletesection', 'moodle', sectionInfo.title),\n                saveButtonText: getString('delete', 'core'),\n                type: ModalFactory.types.SAVE_CANCEL,\n            };\n\n            const modal = await this._modalBodyRenderedPromise(modalParams);\n\n            modal.getRoot().on(\n                ModalEvents.save,\n                e => {\n                    // Stop the default save button behaviour which is to close the modal.\n                    e.preventDefault();\n                    modal.destroy();\n                    this.reactive.dispatch('sectionDelete', [sectionId]);\n                }\n            );\n            return;\n        } else {\n            // We don't need confirmation to delete empty sections.\n            this.reactive.dispatch('sectionDelete', [sectionId]);\n        }\n    }\n\n    /**\n     * Handle a toggle cm selection.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestToggleSelectionCm(target) {\n        const cmId = target.dataset.id;\n        if (!cmId) {\n            return;\n        }\n        const value = target.checked ?? false;\n        const mutation = (value) ? 'cmSelect' : 'cmUnselect';\n        this.reactive.dispatch(mutation, [cmId]);\n    }\n\n    /**\n     * Handle a toggle section selection.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestToggleSelectionSection(target) {\n        const sectionId = target.dataset.id;\n        if (!sectionId) {\n            return;\n        }\n        const value = target.checked ?? false;\n        const mutation = (value) ? 'sectionSelect' : 'sectionUnselect';\n        this.reactive.dispatch(mutation, [sectionId]);\n    }\n\n    /**\n     * Basic mutation action helper.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     * @param {string} mutationName the mutation name\n     */\n    async _requestMutationAction(target, event, mutationName) {\n        if (!target.dataset.id) {\n            return;\n        }\n        event.preventDefault();\n        this.reactive.dispatch(mutationName, [target.dataset.id]);\n    }\n\n    /**\n     * Handle a course module duplicate request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestCmDuplicate(target, event) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n        const sectionId = target.dataset.sectionid ?? null;\n        event.preventDefault();\n        this.reactive.dispatch('cmDuplicate', cmIds, sectionId);\n    }\n\n    /**\n     * Handle a delete cm request.\n     *\n     * @param {Element} target the dispatch action element\n     * @param {Event} event the triggered event\n     */\n    async _requestCmDelete(target, event) {\n        // Check we have an id.\n        const cmId = target.dataset.id;\n\n        if (!cmId) {\n            return;\n        }\n        const cmInfo = this.reactive.get('cm', cmId);\n\n        event.preventDefault();\n\n        const modalParams = {\n            title: getString('confirm', 'core'),\n            body: getString(\n                'deletechecktypename',\n                'moodle',\n                {\n                    type: cmInfo.modname,\n                    name: cmInfo.name,\n                }\n            ),\n            saveButtonText: getString('delete', 'core'),\n            type: ModalFactory.types.SAVE_CANCEL,\n        };\n\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        modal.getRoot().on(\n            ModalEvents.save,\n            e => {\n                // Stop the default save button behaviour which is to close the modal.\n                e.preventDefault();\n                modal.destroy();\n                this.reactive.dispatch('cmDelete', [cmId]);\n            }\n        );\n    }\n\n    /**\n     * Handle a cm availability change request.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestCmAvailability(target) {\n        const cmIds = this._getTargetIds(target);\n        if (cmIds.length == 0) {\n            return;\n        }\n        // Show the availability modal to decide which action to trigger.\n        const exporter = this.reactive.getExporter();\n        const data = {\n            allowstealth: exporter.canUseStealth(this.reactive.state, cmIds),\n        };\n        const modalParams = {\n            title: getString('availability', 'core'),\n            body: Templates.render('core_courseformat/local/content/cm/availabilitymodal', data),\n            saveButtonText: getString('apply', 'core'),\n            type: ModalFactory.types.SAVE_CANCEL,\n        };\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        this._setupMutationRadioButtonModal(modal, cmIds);\n    }\n\n    /**\n     * Handle a section availability change request.\n     *\n     * @param {Element} target the dispatch action element\n     */\n    async _requestSectionAvailability(target) {\n        const sectionIds = this._getTargetIds(target);\n        if (sectionIds.length == 0) {\n            return;\n        }\n        // Show the availability modal to decide which action to trigger.\n        const modalParams = {\n            title: getString('availability', 'core'),\n            body: Templates.render('core_courseformat/local/content/section/availabilitymodal', []),\n            saveButtonText: getString('apply', 'core'),\n            type: ModalFactory.types.SAVE_CANCEL,\n        };\n        const modal = await this._modalBodyRenderedPromise(modalParams);\n\n        this._setupMutationRadioButtonModal(modal, sectionIds);\n    }\n\n    /**\n     * Add events to a mutation selector radio buttons modal.\n     * @param {Modal} modal\n     * @param {Number[]} ids the section or cm ids to apply the mutation\n     */\n    _setupMutationRadioButtonModal(modal, ids) {\n        // The save button is not enabled until the user selects an option.\n        modal.setButtonDisabled('save', true);\n\n        const submitFunction = (radio) => {\n            const mutation = radio?.value;\n            if (!mutation) {\n                return false;\n            }\n            this.reactive.dispatch(mutation, ids);\n            return true;\n        };\n\n        const modalBody = getFirst(modal.getBody());\n        const radioOptions = modalBody.querySelectorAll(this.selectors.OPTIONSRADIO);\n        radioOptions.forEach(radio => {\n            radio.addEventListener('change', () => {\n                modal.setButtonDisabled('save', false);\n            });\n            radio.parentNode.addEventListener('click', () => {\n                radio.checked = true;\n                modal.setButtonDisabled('save', false);\n            });\n            radio.parentNode.addEventListener('dblclick', dbClickEvent => {\n                if (submitFunction(radio)) {\n                    dbClickEvent.preventDefault();\n                    modal.destroy();\n                }\n            });\n        });\n\n        modal.getRoot().on(\n            ModalEvents.save,\n            () => {\n                const radio = modalBody.querySelector(`${this.selectors.OPTIONSRADIO}:checked`);\n                submitFunction(radio);\n            }\n        );\n    }\n\n    /**\n     * Disable all add sections actions.\n     *\n     * @param {boolean} locked the new locked value.\n     */\n    _setAddSectionLocked(locked) {\n        const targets = this.getElements(this.selectors.ADDSECTION);\n        targets.forEach(element => {\n            element.classList.toggle(this.classes.DISABLED, locked);\n            this.setElementLocked(element, locked);\n        });\n    }\n\n    /**\n     * Replace an element with a copy with a different tag name.\n     *\n     * @param {Element} element the original element\n     */\n    _disableLink(element) {\n        if (element) {\n            element.style.pointerEvents = 'none';\n            element.style.userSelect = 'none';\n            element.classList.add(this.classes.DISABLED);\n            element.setAttribute('aria-disabled', true);\n            element.addEventListener('click', event => event.preventDefault());\n        }\n    }\n\n    /**\n     * Render a modal and return a body ready promise.\n     *\n     * @param {object} modalParams the modal params\n     * @return {Promise} the modal body ready promise\n     */\n    _modalBodyRenderedPromise(modalParams) {\n        return new Promise((resolve, reject) => {\n            ModalFactory.create(modalParams).then((modal) => {\n                modal.setRemoveOnClose(true);\n                // Handle body loading event.\n                modal.getRoot().on(ModalEvents.bodyRendered, () => {\n                    resolve(modal);\n                });\n                // Configure some extra modal params.\n                if (modalParams.saveButtonText !== undefined) {\n                    modal.setSaveButtonText(modalParams.saveButtonText);\n                }\n                modal.show();\n                return;\n            }).catch(() => {\n                reject(`Cannot load modal content`);\n            });\n        });\n    }\n\n    /**\n     * Hide and later destroy a modal.\n     *\n     * Behat will fail if we remove the modal while some boostrap collapse is executing.\n     *\n     * @param {Modal} modal\n     * @param {HTMLElement} element the dom element to focus on.\n     */\n    _destroyModal(modal, element) {\n        modal.hide();\n        const pendingDestroy = new Pending(`courseformat/actions:destroyModal`);\n        if (element) {\n            element.focus();\n        }\n        setTimeout(() =>{\n            modal.destroy();\n            pendingDestroy.resolve();\n        }, 500);\n    }\n\n    /**\n     * Get the closest actions menu toggler to an action element.\n     *\n     * @param {HTMLElement} element the action link element\n     * @returns {HTMLElement|undefined}\n     */\n    _getClosestActionMenuToogler(element) {\n        const actionMenu = element.closest(this.selectors.ACTIONMENU);\n        if (!actionMenu) {\n            return undefined;\n        }\n        return actionMenu.querySelector(this.selectors.ACTIONMENUTOGGLER);\n    }\n}\n"],"names":["_modal_factory","_interopRequireDefault","_modal_events","_templates","CourseEvents","_interopRequireWildcard","_pending","_contenttree","_jquery","_prefetch","prefetchStrings","directMutations","sectionHide","sectionShow","cmHide","cmShow","cmStealth","cmMoveRight","cmMoveLeft","_default","BaseComponent","create","name","this","selectors","ACTIONLINK","SECTIONLINK","CMLINK","SECTIONNODE","MODALTOGGLER","ADDSECTION","CONTENTTREE","ACTIONMENU","ACTIONMENUTOGGLER","OPTIONSRADIO","classes","DISABLED","addActions","actions","action","mutationReference","Object","entries","Error","stateReady","state","addEventListener","element","_dispatchClick","_checkSectionlist","sectionRefreshed","getWatchers","watch","handler","event","target","closest","classList","contains","preventDefault","actionName","dataset","methodName","_actionMethodName","undefined","_requestMutationAction","requestName","charAt","toUpperCase","slice","concat","_ref","_setAddSectionLocked","course","sectionlist","length","maxsections","_getTargetIds","_target$dataset","_target$dataset2","ids","id","push","bulkType","bulk","reactive","get","enabled","selectedType","selection","async","sectionId","sectionInfo","editTools","_getClosestActionMenuToogler","data","getExporter","sectionid","sectiontitle","title","modalParams","_str","get_string","body","Templates","render","modal","_modalBodyRenderedPromise","modalBody","getBody","currentElement","querySelector","_disableLink","generalSection","ContentTree","SECTION","TOGGLER","COLLAPSE","matches","for","getAttribute","dispatch","_destroyModal","_toggler$data","cmId","cmInfo","exporter","cmid","cmname","ENTER","sectionnode","toggler","default","find","collapsibleId","attr","replace","collapse","targetSectionId","targetCmId","dropData","cmDraggableData","nextcmid","section","cmlist","_target$dataset$id","_sectionInfo$cmlist","cmList","hassummary","rawtitle","saveButtonText","type","ModalFactory","types","SAVE_CANCEL","getRoot","on","ModalEvents","save","e","destroy","_requestToggleSelectionCm","_target$checked","mutation","checked","_requestToggleSelectionSection","_target$checked2","mutationName","_target$dataset$secti","cmIds","modname","_requestCmAvailability","allowstealth","canUseStealth","_setupMutationRadioButtonModal","_requestSectionAvailability","sectionIds","setButtonDisabled","submitFunction","radio","value","_normalise","getFirst","querySelectorAll","forEach","parentNode","dbClickEvent","locked","getElements","toggle","setElementLocked","style","pointerEvents","userSelect","add","setAttribute","Promise","resolve","reject","then","setRemoveOnClose","bodyRendered","setSaveButtonText","show","catch","hide","pendingDestroy","Pending","focus","setTimeout","actionMenu"],"mappings":"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"}