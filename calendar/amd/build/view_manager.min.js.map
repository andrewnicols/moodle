{"version":3,"file":"view_manager.min.js","sources":["../src/view_manager.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module to handler calendar view changes.\n *\n * @module     core_calendar/view_manager\n * @copyright  2017 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport * as CalendarRepository from 'core_calendar/repository';\nimport CalendarEvents from 'core_calendar/events';\nimport * as CalendarSelectors from 'core_calendar/selectors';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport SummaryModal from 'core_calendar/summary_modal';\nimport CustomEvents from 'core/custom_interaction_events';\nimport {get_string as getString} from 'core/str';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\n\n/**\n * Limit number of events per day\n *\n */\nconst LIMIT_DAY_EVENTS = 5;\n\n/**\n * Hide day events if more than 5.\n *\n */\nexport const foldDayEvents = () => {\n    const root = $(CalendarSelectors.elements.monthDetailed);\n    const days = root.find(CalendarSelectors.day);\n    if (days.length === 0) {\n        return;\n    }\n    days.each(function() {\n        const dayContainer = $(this);\n        const eventsSelector = `${CalendarSelectors.elements.dateContent} ul li[data-event-eventtype]`;\n        const filteredEventsSelector = `${CalendarSelectors.elements.dateContent} ul li[data-event-filtered=\"true\"]`;\n        const moreEventsSelector = `${CalendarSelectors.elements.dateContent} [data-action=\"view-more-events\"]`;\n        const events = dayContainer.find(eventsSelector);\n        if (events.length === 0) {\n            return;\n        }\n\n        const filteredEvents = dayContainer.find(filteredEventsSelector);\n        const numberOfFiltered = filteredEvents.length;\n        const numberOfEvents = events.length - numberOfFiltered;\n\n        let count = 1;\n        events.each(function() {\n            const event = $(this);\n            const isNotFiltered = event.attr('data-event-filtered') !== 'true';\n            const offset = (numberOfEvents === LIMIT_DAY_EVENTS) ? 0 : 1;\n            if (isNotFiltered) {\n                if (count > LIMIT_DAY_EVENTS - offset) {\n                    event.attr('data-event-folded', 'true');\n                    event.hide();\n                } else {\n                    event.attr('data-event-folded', 'false');\n                    event.show();\n                    count++;\n                }\n            } else {\n                // It's being filtered out.\n                event.attr('data-event-folded', 'false');\n            }\n        });\n\n        const moreEventsLink = dayContainer.find(moreEventsSelector);\n        if (numberOfEvents > LIMIT_DAY_EVENTS) {\n            const numberOfHiddenEvents = numberOfEvents - LIMIT_DAY_EVENTS + 1;\n            moreEventsLink.show();\n            getString('moreevents', 'calendar', numberOfHiddenEvents).then(str => {\n                const link = moreEventsLink.find('strong a');\n                moreEventsLink.attr('data-event-folded', 'false');\n                link.text(str);\n                return str;\n            }).fail();\n        } else {\n            moreEventsLink.hide();\n        }\n    });\n};\n\n/**\n * Register and handle month calendar events.\n *\n * @param {string} pendingId pending id.\n */\nexport const registerEventListenersForMonthDetailed = (pendingId) => {\n    const events = `${CalendarEvents.viewUpdated}`;\n    $('body').on(events, function(e) {\n        foldDayEvents(e);\n    });\n    foldDayEvents();\n    $('body').on(CalendarEvents.filterChanged, function(e, data) {\n        const root = $(CalendarSelectors.elements.monthDetailed);\n        const pending = new Pending(pendingId);\n        const target = root.find(CalendarSelectors.eventType[data.type]);\n        const transitionPromise = $.Deferred();\n        if (data.hidden) {\n            transitionPromise.then(function() {\n                target.attr('data-event-filtered', 'true');\n                return target.hide().promise();\n            }).fail();\n        } else {\n            transitionPromise.then(function() {\n                target.attr('data-event-filtered', 'false');\n                return target.show().promise();\n            }).fail();\n        }\n\n        transitionPromise.then(function() {\n            foldDayEvents();\n            return;\n        })\n        .always(pending.resolve)\n        .fail();\n\n        transitionPromise.resolve();\n    });\n};\n\n/**\n * Register event listeners for the module.\n *\n * @param {object} root The root element.\n */\nconst registerEventListeners = (root) => {\n    root = $(root);\n\n    // Bind click events to event links.\n    root.on('click', CalendarSelectors.links.eventLink, (e) => {\n        const target = e.target;\n        let eventLink = null;\n        let eventId = null;\n        const pendingPromise = new Pending('core_calendar/view_manager:eventLink:click');\n\n        if (target.matches(CalendarSelectors.actions.viewEvent)) {\n            eventLink = target;\n        } else {\n            eventLink = target.closest(CalendarSelectors.actions.viewEvent);\n        }\n\n        if (eventLink) {\n            eventId = eventLink.dataset.eventId;\n        } else {\n            eventId = target.querySelector(CalendarSelectors.actions.viewEvent).dataset.eventId;\n        }\n\n        if (eventId) {\n            // A link was found. Show the modal.\n\n            e.preventDefault();\n            // We've handled the event so stop it from bubbling\n            // and causing the day click handler to fire.\n            e.stopPropagation();\n\n            renderEventSummaryModal(eventId)\n            .then(pendingPromise.resolve)\n            .catch();\n        } else {\n            pendingPromise.resolve();\n        }\n    });\n\n    root.on('click', CalendarSelectors.links.navLink, (e) => {\n        const wrapper = root.find(CalendarSelectors.wrapper);\n        const view = wrapper.data('view');\n        const courseId = wrapper.data('courseid');\n        const categoryId = wrapper.data('categoryid');\n        const link = e.currentTarget;\n\n        if (view === 'month' || view === 'monthblock') {\n            changeMonth(root, link.href, link.dataset.year, link.dataset.month, courseId, categoryId, link.dataset.day);\n            e.preventDefault();\n        } else if (view === 'day') {\n            changeDay(root, link.href, link.dataset.year, link.dataset.month, link.dataset.day, courseId, categoryId);\n            e.preventDefault();\n        }\n    });\n\n    const viewSelector = root.find(CalendarSelectors.viewSelector);\n    CustomEvents.define(viewSelector, [CustomEvents.events.activate]);\n    viewSelector.on(\n        CustomEvents.events.activate,\n        (e) => {\n            e.preventDefault();\n\n            const option = e.target;\n            if (option.classList.contains('active')) {\n                return;\n            }\n\n            const view = option.dataset.view,\n                year = option.dataset.year,\n                month = option.dataset.month,\n                day = option.dataset.day,\n                courseId = option.dataset.courseid,\n                categoryId = option.dataset.categoryid;\n\n            if (view == 'month') {\n                refreshMonthContent(root, year, month, courseId, categoryId, root, 'core_calendar/calendar_month', day)\n                    .then(() => {\n                        updateUrl('?view=month');\n                    }).fail(Notification.exception);\n            } else if (view == 'day') {\n                refreshDayContent(root, year, month, day, courseId, categoryId, root, 'core_calendar/calendar_day')\n                    .then(() => {\n                        updateUrl('?view=day');\n                    }).fail(Notification.exception);\n            } else if (view == 'upcoming') {\n                reloadCurrentUpcoming(root, courseId, categoryId, root, 'core_calendar/calendar_upcoming')\n                    .then(() => {\n                        updateUrl('?view=upcoming');\n                    }).fail(Notification.exception);\n            }\n        }\n    );\n};\n\n/**\n * Refresh the month content.\n *\n * @param {object} root The root element.\n * @param {number} year Year\n * @param {number} month Month\n * @param {number} courseId The id of the course whose events are shown\n * @param {number} categoryId The id of the category whose events are shown\n * @param {object} target The element being replaced. If not specified, the calendarwrapper is used.\n * @param {string} template The template to be rendered.\n * @param {number} day Day (optional)\n * @return {promise}\n */\nexport const refreshMonthContent = (root, year, month, courseId, categoryId, target = null, template = '', day = 1) => {\n    startLoading(root);\n\n    target = target || root.find(CalendarSelectors.wrapper);\n    template = template || root.attr('data-template');\n    M.util.js_pending([root.get('id'), year, month, courseId].join('-'));\n    const includenavigation = root.data('includenavigation');\n    const mini = root.data('mini');\n    const viewMode = target.data('view');\n    return CalendarRepository.getCalendarMonthData(year, month, courseId, categoryId, includenavigation, mini, day, viewMode)\n        .then(context => {\n            return Templates.render(template, context);\n        })\n        .then((html, js) => {\n            return Templates.replaceNode(target, html, js);\n        })\n        .then(() => {\n            document.querySelector('body').dispatchEvent(new CustomEvent(CalendarEvents.viewUpdated));\n            return;\n        })\n        .always(() => {\n            M.util.js_complete([root.get('id'), year, month, courseId].join('-'));\n            return stopLoading(root);\n        })\n        .fail(Notification.exception);\n};\n\n/**\n * Handle changes to the current calendar view.\n *\n * @param {object} root The container element\n * @param {string} url The calendar url to be shown\n * @param {number} year Year\n * @param {number} month Month\n * @param {number} courseId The id of the course whose events are shown\n * @param {number} categoryId The id of the category whose events are shown\n * @param {number} day Day (optional)\n * @return {promise}\n */\nexport const changeMonth = (root, url, year, month, courseId, categoryId, day = 1) => {\n    return refreshMonthContent(root, year, month, courseId, categoryId, null, '', day)\n        .then((...args) => {\n            if (url.length && url !== '#') {\n                updateUrl(url);\n            }\n            return args;\n        })\n        .then((...args) => {\n            $('body').trigger(CalendarEvents.monthChanged, [year, month, courseId, categoryId]);\n            return args;\n        });\n};\n\n/**\n * Reload the current month view data.\n *\n * @param {object} root The container element.\n * @param {number} courseId The course id.\n * @param {number} categoryId The id of the category whose events are shown\n * @return {promise}\n */\nexport const reloadCurrentMonth = (root, courseId = 0, categoryId = 0) => {\n    const year = root.find(CalendarSelectors.wrapper).data('year');\n    const month = root.find(CalendarSelectors.wrapper).data('month');\n    const day = root.find(CalendarSelectors.wrapper).data('day');\n\n    courseId = courseId || root.find(CalendarSelectors.wrapper).data('courseid');\n    categoryId = categoryId || root.find(CalendarSelectors.wrapper).data('categoryid');\n\n    return refreshMonthContent(root, year, month, courseId, categoryId, null, '', day).\n        then((...args) => {\n            $('body').trigger(CalendarEvents.courseChanged, [year, month, courseId, categoryId]);\n            return args;\n        });\n};\n\n\n/**\n * Refresh the day content.\n *\n * @param {object} root The root element.\n * @param {number} year Year\n * @param {number} month Month\n * @param {number} day Day\n * @param {number} courseId The id of the course whose events are shown\n * @param {number} categoryId The id of the category whose events are shown\n * @param {object} target The element being replaced. If not specified, the calendarwrapper is used.\n * @param {string} template The template to be rendered.\n *\n * @return {promise}\n */\nexport const refreshDayContent = (root, year, month, day, courseId, categoryId, target = null, template = '') => {\n    startLoading(root);\n\n    if (!target || target.length == 0){\n        target = root.find(CalendarSelectors.wrapper);\n    }\n    template = template || root.attr('data-template');\n    M.util.js_pending([root.get('id'), year, month, day, courseId, categoryId].join('-'));\n    const includenavigation = root.data('includenavigation');\n    return CalendarRepository.getCalendarDayData(year, month, day, courseId, categoryId, includenavigation)\n        .then((context) => {\n            context.viewingday = true;\n            context.showviewselector = true;\n            return Templates.render(template, context);\n        })\n        .then((html, js) => {\n            return Templates.replaceNode(target, html, js);\n        })\n        .then(() => {\n            document.querySelector('body').dispatchEvent(new CustomEvent(CalendarEvents.viewUpdated));\n            return;\n        })\n        .always(() => {\n            M.util.js_complete([root.get('id'), year, month, day, courseId, categoryId].join('-'));\n            return stopLoading(root);\n        })\n        .fail(Notification.exception);\n};\n\n/**\n * Reload the current day view data.\n *\n * @param {object} root The container element.\n * @param {number} courseId The course id.\n * @param {number} categoryId The id of the category whose events are shown\n * @return {promise}\n */\nexport const reloadCurrentDay = (root, courseId = 0, categoryId = 0) => {\n    const wrapper = root.find(CalendarSelectors.wrapper);\n    const year = wrapper.data('year');\n    const month = wrapper.data('month');\n    const day = wrapper.data('day');\n\n    courseId = courseId || root.find(CalendarSelectors.wrapper).data('courseid');\n    categoryId = categoryId || root.find(CalendarSelectors.wrapper).data('categoryid');\n\n    return refreshDayContent(root, year, month, day, courseId, categoryId);\n};\n\n/**\n * Handle changes to the current calendar view.\n *\n * @param {object} root The root element.\n * @param {String} url The calendar url to be shown\n * @param {Number} year Year\n * @param {Number} month Month\n * @param {Number} day Day\n * @param {Number} courseId The id of the course whose events are shown\n * @param {Number} categoryId The id of the category whose events are shown\n * @return {promise}\n */\nexport const changeDay = (root, url, year, month, day, courseId, categoryId) => {\n    return refreshDayContent(root, year, month, day, courseId, categoryId)\n        .then((...args) => {\n            if (url.length && url !== '#') {\n                updateUrl(url);\n            }\n            return args;\n        })\n        .then((...args) => {\n            $('body').trigger(CalendarEvents.dayChanged, [year, month, courseId, categoryId]);\n            return args;\n        });\n};\n\n/**\n * Update calendar URL.\n *\n * @param {String} url The calendar url to be updated.\n */\nexport const updateUrl = (url) => {\n    const viewingFullCalendar = document.getElementById(CalendarSelectors.fullCalendarView);\n\n    // We want to update the url only if the user is viewing the full calendar.\n    if (viewingFullCalendar) {\n        window.history.pushState({}, '', url);\n    }\n};\n\n/**\n * Set the element state to loading.\n *\n * @param {object} root The container element\n * @method startLoading\n */\nconst startLoading = (root) => {\n    const loadingIconContainer = root.find(CalendarSelectors.containers.loadingIcon);\n\n    loadingIconContainer.removeClass('hidden');\n};\n\n/**\n * Remove the loading state from the element.\n *\n * @param {object} root The container element\n * @method stopLoading\n */\nconst stopLoading = (root) => {\n    const loadingIconContainer = root.find(CalendarSelectors.containers.loadingIcon);\n\n    loadingIconContainer.addClass('hidden');\n};\n\n/**\n * Reload the current month view data.\n *\n * @param {object} root The container element.\n * @param {number} courseId The course id.\n * @param {number} categoryId The id of the category whose events are shown\n * @param {object} target The element being replaced. If not specified, the calendarwrapper is used.\n * @param {string} template The template to be rendered.\n * @return {promise}\n */\nexport const reloadCurrentUpcoming = (root, courseId = 0, categoryId = 0, target = null, template = '') => {\n    startLoading(root);\n\n    target = target || root.find(CalendarSelectors.wrapper);\n    template = template || root.attr('data-template');\n    courseId = courseId || root.find(CalendarSelectors.wrapper).data('courseid');\n    categoryId = categoryId || root.find(CalendarSelectors.wrapper).data('categoryid');\n\n    return CalendarRepository.getCalendarUpcomingData(courseId, categoryId)\n        .then((context) => {\n            context.viewingupcoming = true;\n            context.showviewselector = true;\n            return Templates.render(template, context);\n        })\n        .then((html, js) => {\n            return Templates.replaceNode(target, html, js);\n        })\n        .then(() => {\n            document.querySelector('body').dispatchEvent(new CustomEvent(CalendarEvents.viewUpdated));\n            return;\n        })\n        .always(function() {\n            return stopLoading(root);\n        })\n        .fail(Notification.exception);\n};\n\n/**\n * Get the CSS class to apply for the given event type.\n *\n * @param {string} eventType The calendar event type\n * @return {string}\n */\nconst getEventTypeClassFromType = (eventType) => {\n    return 'calendar_event_' + eventType;\n};\n\n/**\n * Render the event summary modal.\n *\n * @param {Number} eventId The calendar event id.\n * @returns {Promise}\n */\nconst renderEventSummaryModal = (eventId) => {\n    const pendingPromise = new Pending('core_calendar/view_manager:renderEventSummaryModal');\n\n    // Calendar repository promise.\n    return CalendarRepository.getEventById(eventId)\n    .then((getEventResponse) => {\n        if (!getEventResponse.event) {\n            throw new Error('Error encountered while trying to fetch calendar event with ID: ' + eventId);\n        }\n\n        return getEventResponse.event;\n    })\n    .then(eventData => {\n        // Build the modal parameters from the event data.\n        const modalParams = {\n            title: eventData.name,\n            type: SummaryModal.TYPE,\n            body: Templates.render('core_calendar/event_summary_body', eventData),\n            templateContext: {\n                canedit: eventData.canedit,\n                candelete: eventData.candelete,\n                headerclasses: getEventTypeClassFromType(eventData.normalisedeventtype),\n                isactionevent: eventData.isactionevent,\n                url: eventData.url,\n                action: eventData.action\n            }\n        };\n\n        // Create the modal.\n        return ModalFactory.create(modalParams);\n    })\n    .then(modal => {\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Finally, render the modal!\n        modal.show();\n\n        return modal;\n    })\n    .then(modal => {\n        pendingPromise.resolve();\n\n        return modal;\n    })\n    .catch(Notification.exception);\n};\n\nexport const init = (root, view) => {\n    prefetchStrings('calendar', ['moreevents']);\n    foldDayEvents();\n    registerEventListeners(root, view);\n    const calendarTable = root.find(CalendarSelectors.elements.monthDetailed);\n    if (calendarTable.length) {\n        const pendingId = `month-detailed-${calendarTable.id}-filterChanged`;\n        registerEventListenersForMonthDetailed(calendarTable, pendingId);\n    }\n};\n"],"names":["_jquery","_interopRequireDefault","_templates","_notification","CalendarRepository","_interopRequireWildcard","_events","CalendarSelectors","_modal_factory","_modal_events","_summary_modal","_custom_interaction_events","_pending","LIMIT_DAY_EVENTS","foldDayEvents","root","days","elements","monthDetailed","find","day","length","each","dayContainer","default","this","eventsSelector","dateContent","filteredEventsSelector","moreEventsSelector","events","numberOfFiltered","numberOfEvents","count","event","attr","hide","show","moreEventsLink","numberOfHiddenEvents","_str","get_string","then","str","link","text","fail","registerEventListenersForMonthDetailed","pendingId","concat","CalendarEvents","viewUpdated","on","e","filterChanged","data","pending","Pending","target","eventType","type","transitionPromise","$","Deferred","hidden","promise","always","resolve","registerEventListeners","refreshMonthContent","year","month","courseId","categoryId","template","startLoading","wrapper","M","util","js_pending","get","join","includenavigation","mini","viewMode","getCalendarMonthData","context","Templates","render","html","js","replaceNode","document","querySelector","dispatchEvent","CustomEvent","js_complete","stopLoading","Notification","exception","changeMonth","url","updateUrl","_len","arguments","args","Array","_key","trigger","monthChanged","_len2","_key2","courseChanged","_len3","_key3","refreshDayContent","getCalendarDayData","viewingday","showviewselector","changeDay","_len4","_key4","dayChanged","_len5","_key5","getElementById","fullCalendarView","window","history","pushState","containers","loadingIcon","removeClass","addClass","reloadCurrentUpcoming","getCalendarUpcomingData","viewingupcoming","getEventTypeClassFromType","renderEventSummaryModal","eventId","pendingPromise","getEventById","getEventResponse","Error","eventData","modalParams","title","name","SummaryModal","TYPE","body","templateContext","canedit","candelete","headerclasses","normalisedeventtype","isactionevent","action","ModalFactory","create","modal","getRoot","ModalEvents","destroy","catch","view","_prefetch","prefetchStrings","links","eventLink","matches","actions","viewEvent","closest","dataset","preventDefault","stopPropagation","navLink","currentTarget","href","viewSelector","define","CustomEvents","activate","option","classList","contains","courseid","categoryid","calendarTable","id"],"mappings":"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"}