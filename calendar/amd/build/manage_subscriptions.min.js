define ("core_calendar/manage_subscriptions",["exports","core_calendar/selectors","core_calendar/repository","core/modal_factory","core/modal_events","core/notification","core/prefetch","core/str","core/local/inplace_editable/events"],function(_exports,CalendarSelectors,CalendarRepository,Modal,ModalEvents,_notification,_prefetch,_str,_events){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.init=void 0;CalendarSelectors=_interopRequireWildcard(CalendarSelectors);CalendarRepository=_interopRequireWildcard(CalendarRepository);Modal=_interopRequireWildcard(Modal);ModalEvents=_interopRequireWildcard(ModalEvents);_prefetch=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(_prefetch);function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(null===obj||"object"!=typeof obj&&"function"!=typeof obj){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if("default"!=key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}const getSubscriptionId=element=>{return parseInt(element.closest("tr").dataset.subid)},getSubscriptionName=element=>{return element.closest("tr").dataset.subname},getSubscriptionRow=subscriptionId=>{return document.querySelector("tr[data-subid=\"".concat(subscriptionId,"\"]"))},createModal=(element,messageCode)=>{const subscriptionName=getSubscriptionName(element);return Modal.create({type:Modal.types.SAVE_CANCEL,title:(0,_str.get_string)("confirmation","admin"),body:(0,_str.get_string)(messageCode,"calendar",subscriptionName),buttons:{save:(0,_str.get_string)("yes")}}).then(modal=>{modal.getRoot().on(ModalEvents.hidden,()=>{element.focus()});modal.show();return modal})},responseHandlerForDelete=async(element,data)=>{const subscriptionName=getSubscriptionName(element),message=data.status?await(0,_str.get_string)("subscriptionremoved","calendar",subscriptionName):data.warnings[0].message,type=data.status?"info":"error";return(0,_notification.addNotification)({message,type})},registerEventListeners=()=>{document.addEventListener("click",e=>{const deleteAction=e.target.closest(CalendarSelectors.actions.deleteSubscription);if(deleteAction){e.preventDefault();const modalPromise=createModal(deleteAction,"confirmsubscriptiondelete");modalPromise.then(modal=>{modal.getRoot().on(ModalEvents.save,()=>{const subscriptionId=getSubscriptionId(deleteAction);CalendarRepository.deleteSubscription(subscriptionId).then(data=>{const response=responseHandlerForDelete(deleteAction,data);return response.then(()=>{const subscriptionRow=getSubscriptionRow(subscriptionId);return subscriptionRow.remove()})}).catch(_notification.displayException)});return modal}).catch(_notification.displayException)}});document.addEventListener(_events.eventTypes.elementUpdated,e=>{const inplaceEditable=e.target;if("core_calendar"==inplaceEditable.getAttribute("data-component")){(0,_notification.fetchNotifications)()}})},init=()=>{_prefetch.default.prefetchStrings("moodle",["yes"]);_prefetch.default.prefetchStrings("core_admin",["confirmation"]);_prefetch.default.prefetchStrings("core_calendar",["confirmsubscriptiondelete","subscriptionremoved"]);registerEventListeners()};_exports.init=init});
//# sourceMappingURL=manage_subscriptions.min.js.map
