{"version":3,"sources":["../src/participantsfilter.js"],"names":["init","participantsRegionId","filterSet","document","querySelector","activeFilters","courseid","CourseFilter","getFilterRegion","Selectors","filterset","regions","filterlist","addFilterRow","pendingPromise","Pending","rownum","querySelectorAll","filter","region","length","Templates","renderForPromise","then","html","js","newContentNodes","appendNodeContents","filterRow","typeList","data","forEach","contentNode","contentTypeList","fields","type","innerHTML","updateFiltersOptions","result","resolve","catch","Notification","exception","getFilterDataSource","filterType","filterDataNode","datasource","byName","addFilter","initialFilterValues","dataset","Filter","GenericFilter","filterTypeClass","typeField","value","disabled","getFilterObject","name","removeOrReplaceFilterRow","refreshContent","filterCount","replaceFilterRow","removeFilterRow","hasFilterValue","removeFilterObject","remove","updateTableFromFilter","getAvailableFilterLegends","filterLegends","index","innerText","rowNum","replaceNode","filterName","tearDown","removeAllFilters","filters","removeEmptyFilters","options","option","classList","add","addRowButton","actions","addRow","all","setAttribute","removeAttribute","filtermatch","join","filterverb","setFilterFromConfig","config","filterConfig","Object","entries","Promise","jointype","filterPromises","map","filterData","filterValues","values","promise","filterValue","DynamicTable","setFilters","getTableFromId","tableRegion","parseInt","maxFilters","typeListSelect","requests","Array","_","rowIndex","push","fetchedStrings","legendStrings","addEventListener","e","target","closest","preventDefault","applyFilters","resetFilters","filterRegion","CustomEvents","define","events","accessibleChange","on","tableRoot","initialFilters","getFilters","initialFilterPromise"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Participants filter managemnet.\n *\n * @module     core_user/participants_filter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from './local/participantsfilter/filtertypes/courseid';\nimport * as DynamicTable from 'core_table/dynamic';\nimport GenericFilter from './local/participantsfilter/filter';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from './local/participantsfilter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} participantsRegionId\n */\nexport const init = participantsRegionId => {\n    // Keep a reference to the filterset.\n    const filterSet = document.querySelector(`#${participantsRegionId}`);\n\n    // Keep a reference to all of the active filters.\n    const activeFilters = {\n        courseid: new CourseFilter('courseid', filterSet),\n    };\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    const getFilterRegion = () => filterSet.querySelector(Selectors.filterset.regions.filterlist);\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    const addFilterRow = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:addFilterRow');\n\n        const rownum = 1 + getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rownum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.appendNodeContents(getFilterRegion(), html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    const getFilterDataSource = filterType => {\n        const filterDataNode = filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    };\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    const addFilter = async(filterRow, filterType, initialFilterValues) => {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        activeFilters[filterType] = new Filter(filterType, filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        return activeFilters[filterType];\n    };\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    const getFilterObject = name => {\n        return activeFilters[name];\n    };\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeOrReplaceFilterRow = (filterRow, refreshContent) => {\n        const filterCount = getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n\n        if (filterCount === 1) {\n            replaceFilterRow(filterRow, refreshContent);\n        } else {\n            removeFilterRow(filterRow, refreshContent);\n        }\n    };\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeFilterRow = async(filterRow, refreshContent = true) => {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await getAvailableFilterLegends();\n\n        getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    };\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    const replaceFilterRow = (filterRow, refreshContent = true, rowNum = 1) => {\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rowNum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            // Refresh the table.\n            if (refreshContent) {\n                return updateTableFromFilter();\n            } else {\n                return filterRow;\n            }\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    const removeFilterObject = filterName => {\n        if (filterName) {\n            const filter = getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete activeFilters[filterName];\n            }\n        }\n    };\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    const removeAllFilters = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return updateTableFromFilter()\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        });\n    };\n\n    /**\n     * Remove any empty filters.\n     */\n    const removeEmptyFilters = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    };\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    const updateFiltersOptions = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            filterSet.querySelector(Selectors.filterset.fields.join).value = 1;\n            filterSet.dataset.filterverb = 1;\n        } else {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    };\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n\n            return addFilterRow().then(([filterRow]) => addFilter(filterRow, filterType, filterValues));\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises).then(() => {\n            return removeEmptyFilters();\n        })\n        .then(updateFiltersOptions)\n        .then(updateTableFromFilter);\n    };\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     *\n     * @return {Promise}\n     */\n    const updateTableFromFilter = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        return DynamicTable.setFilters(\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n            {\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                filters,\n            }\n        )\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    const getAvailableFilterLegends = async() => {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core_user\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n        .then(fetchedStrings => {\n            return fetchedStrings;\n        })\n        .catch(Notification.exception);\n\n        return legendStrings;\n    };\n\n    // Add listeners for the main actions.\n    filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filterset.actions.addRow)) {\n            e.preventDefault();\n\n            addFilterRow();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n            e.preventDefault();\n\n            updateTableFromFilter();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n            e.preventDefault();\n\n            removeAllFilters();\n        }\n    });\n\n    // Add the listener to remove a single filter.\n    filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filter.actions.remove)) {\n            e.preventDefault();\n\n            removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n        }\n    });\n\n    // Add listeners for the filter type selection.\n    let filterRegion = jQuery(getFilterRegion());\n    CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n    filterRegion.on(CustomEvents.events.accessibleChange, e => {\n        const typeField = e.target.closest(Selectors.filter.fields.type);\n        if (typeField && typeField.value) {\n            const filter = e.target.closest(Selectors.filter.region);\n\n            addFilter(filter, typeField.value);\n        }\n    });\n\n    filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n        filterSet.dataset.filterverb = e.target.value;\n    });\n\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n    const initialFilters = DynamicTable.getFilters(tableRoot);\n    if (initialFilters) {\n        const initialFilterPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n        // Apply the initial filter configuration.\n        setFilterFromConfig(initialFilters)\n        .then(() => initialFilterPromise.resolve())\n        .catch();\n    }\n};\n"],"file":"participantsfilter.min.js"}