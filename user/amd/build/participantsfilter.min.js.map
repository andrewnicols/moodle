{"version":3,"file":"participantsfilter.min.js","sources":["../src/participantsfilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Participants filter managemnet.\n *\n * @module     core_user/participants_filter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from './local/participantsfilter/filtertypes/courseid';\nimport * as DynamicTable from 'core_table/dynamic';\nimport GenericFilter from './local/participantsfilter/filter';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from './local/participantsfilter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} participantsRegionId\n */\nexport const init = participantsRegionId => {\n    // Keep a reference to the filterset.\n    const filterSet = document.querySelector(`#${participantsRegionId}`);\n\n    // Keep a reference to all of the active filters.\n    const activeFilters = {\n        courseid: new CourseFilter('courseid', filterSet),\n    };\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    const getFilterRegion = () => filterSet.querySelector(Selectors.filterset.regions.filterlist);\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    const addFilterRow = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:addFilterRow');\n\n        const rownum = 1 + getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rownum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.appendNodeContents(getFilterRegion(), html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    const getFilterDataSource = filterType => {\n        const filterDataNode = filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    };\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    const addFilter = async(filterRow, filterType, initialFilterValues) => {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode?.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        activeFilters[filterType] = new Filter(filterType, filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        return activeFilters[filterType];\n    };\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    const getFilterObject = name => {\n        return activeFilters[name];\n    };\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeOrReplaceFilterRow = (filterRow, refreshContent) => {\n        const filterCount = getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n\n        if (filterCount === 1) {\n            replaceFilterRow(filterRow, refreshContent);\n        } else {\n            removeFilterRow(filterRow, refreshContent);\n        }\n    };\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeFilterRow = async(filterRow, refreshContent = true) => {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await getAvailableFilterLegends();\n\n        getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    };\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    const replaceFilterRow = (filterRow, refreshContent = true, rowNum = 1) => {\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rowNum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            // Refresh the table.\n            if (refreshContent) {\n                return updateTableFromFilter();\n            } else {\n                return filterRow;\n            }\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    const removeFilterObject = filterName => {\n        if (filterName) {\n            const filter = getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete activeFilters[filterName];\n            }\n        }\n    };\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    const removeAllFilters = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return updateTableFromFilter()\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        });\n    };\n\n    /**\n     * Remove any empty filters.\n     */\n    const removeEmptyFilters = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    };\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    const updateFiltersOptions = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            filterSet.querySelector(Selectors.filterset.fields.join).value = 2;\n            filterSet.dataset.filterverb = 2;\n        } else {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    };\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n\n            return addFilterRow().then(([filterRow]) => addFilter(filterRow, filterType, filterValues));\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises).then(() => {\n            return removeEmptyFilters();\n        })\n        .then(updateFiltersOptions)\n        .then(updateTableFromFilter);\n    };\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     *\n     * @return {Promise}\n     */\n    const updateTableFromFilter = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        return DynamicTable.setFilters(\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n            {\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                filters,\n            }\n        )\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    const getAvailableFilterLegends = async() => {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core_user\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n        .then(fetchedStrings => {\n            return fetchedStrings;\n        })\n        .catch(Notification.exception);\n\n        return legendStrings;\n    };\n\n    // Add listeners for the main actions.\n    filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filterset.actions.addRow)) {\n            e.preventDefault();\n\n            addFilterRow();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n            e.preventDefault();\n\n            updateTableFromFilter();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n            e.preventDefault();\n\n            removeAllFilters();\n        }\n    });\n\n    // Add the listener to remove a single filter.\n    filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filter.actions.remove)) {\n            e.preventDefault();\n\n            removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n        }\n    });\n\n    // Add listeners for the filter type selection.\n    let filterRegion = jQuery(getFilterRegion());\n    CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n    filterRegion.on(CustomEvents.events.accessibleChange, e => {\n        const typeField = e.target.closest(Selectors.filter.fields.type);\n        if (typeField && typeField.value) {\n            const filter = e.target.closest(Selectors.filter.region);\n\n            addFilter(filter, typeField.value);\n        }\n    });\n\n    filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n        filterSet.dataset.filterverb = e.target.value;\n    });\n\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n    const initialFilters = DynamicTable.getFilters(tableRoot);\n    if (initialFilters) {\n        const initialFilterPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n        // Apply the initial filter configuration.\n        setFilterFromConfig(initialFilters)\n        .then(() => initialFilterPromise.resolve())\n        .catch();\n    }\n};\n"],"names":["_courseid","_interopRequireDefault","DynamicTable","_interopRequireWildcard","_filter","_notification","_pending","_selectors","_templates","_custom_interaction_events","_jquery","participantsRegionId","filterSet","document","querySelector","concat","activeFilters","courseid","CourseFilter","getFilterRegion","Selectors","filterset","regions","filterlist","addFilterRow","pendingPromise","Pending","default","rownum","querySelectorAll","filter","region","length","Templates","renderForPromise","then","_ref","html","js","appendNodeContents","filterRow","typeList","data","forEach","contentNode","contentTypeList","fields","type","innerHTML","updateFiltersOptions","result","resolve","catch","Notification","exception","addFilter","async","filterType","initialFilterValues","dataset","filterDataNode","datasource","byName","getFilterDataSource","Filter","GenericFilter","filterTypeClass","_systemImportTransformerGlobalIdentifier","define","amd","Promise","reject","require","typeField","value","disabled","removeOrReplaceFilterRow","refreshContent","replaceFilterRow","removeFilterRow","hasFilterValue","removeFilterObject","remove","updateTableFromFilter","filterLegends","getAvailableFilterLegends","index","innerText","rowNum","_ref2","replaceNode","filterName","tearDown","filters","option","classList","add","addRowButton","actions","addRow","all","setAttribute","removeAttribute","filtermatch","join","filterverb","setFilterFromConfig","config","filterConfig","Object","entries","jointype","filterPromises","map","_ref3","filterData","filterValues","values","_ref4","promise","filterValue","name","setFilters","getTableFromId","tableRegion","parseInt","maxFilters","typeListSelect","requests","Array","_","rowIndex","push","key","component","param","_str","get_strings","fetchedStrings","addEventListener","e","target","closest","preventDefault","applyFilters","resetFilters","removeAllFilters","filterRegion","CustomEvents","events","accessibleChange","on","tableRoot","initialFilters","getFilters","initialFilterPromise"],"mappings":"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"}