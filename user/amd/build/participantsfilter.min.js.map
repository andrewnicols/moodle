{"version":3,"file":"participantsfilter.min.js","sources":["../src/participantsfilter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Participants filter managemnet.\n *\n * @module     core_user/participants_filter\n * @package    core_user\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport CourseFilter from './local/participantsfilter/filtertypes/courseid';\nimport * as DynamicTable from 'core_table/dynamic';\nimport GenericFilter from './local/participantsfilter/filter';\nimport {get_strings as getStrings} from 'core/str';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Selectors from './local/participantsfilter/selectors';\nimport Templates from 'core/templates';\nimport CustomEvents from 'core/custom_interaction_events';\nimport jQuery from 'jquery';\n\n/**\n * Initialise the participants filter on the element with the given id.\n *\n * @param {String} participantsRegionId\n */\nexport const init = participantsRegionId => {\n    // Keep a reference to the filterset.\n    const filterSet = document.querySelector(`#${participantsRegionId}`);\n\n    // Keep a reference to all of the active filters.\n    const activeFilters = {\n        courseid: new CourseFilter('courseid', filterSet),\n    };\n\n    /**\n     * Get the filter list region.\n     *\n     * @return {HTMLElement}\n     */\n    const getFilterRegion = () => filterSet.querySelector(Selectors.filterset.regions.filterlist);\n\n    /**\n     * Add an unselected filter row.\n     *\n     * @return {Promise}\n     */\n    const addFilterRow = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:addFilterRow');\n\n        const rownum = 1 + getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rownum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.appendNodeContents(getFilterRegion(), html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Get the filter data source node fro the specified filter type.\n     *\n     * @param {String} filterType\n     * @return {HTMLElement}\n     */\n    const getFilterDataSource = filterType => {\n        const filterDataNode = filterSet.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(filterType));\n    };\n\n    /**\n     * Add a filter to the list of active filters, performing any necessary setup.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {String} filterType\n     * @param {Array} initialFilterValues The initially selected values for the filter\n     * @returns {Filter}\n     */\n    const addFilter = async(filterRow, filterType, initialFilterValues) => {\n        // Name the filter on the filter row.\n        filterRow.dataset.filterType = filterType;\n\n        const filterDataNode = getFilterDataSource(filterType);\n\n        // Instantiate the Filter class.\n        let Filter = GenericFilter;\n        if (filterDataNode.dataset.filterTypeClass) {\n            Filter = await import(filterDataNode.dataset.filterTypeClass);\n        }\n        activeFilters[filterType] = new Filter(filterType, filterSet, initialFilterValues);\n\n        // Disable the select.\n        const typeField = filterRow.querySelector(Selectors.filter.fields.type);\n        typeField.value = filterType;\n        typeField.disabled = 'disabled';\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        return activeFilters[filterType];\n    };\n\n    /**\n     * Get the registered filter class for the named filter.\n     *\n     * @param {String} name\n     * @return {Object} See the Filter class.\n     */\n    const getFilterObject = name => {\n        return activeFilters[name];\n    };\n\n    /**\n     * Remove or replace the specified filter row and associated class, ensuring that if there is only one filter row,\n     * that it is replaced instead of being removed.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeOrReplaceFilterRow = (filterRow, refreshContent) => {\n        const filterCount = getFilterRegion().querySelectorAll(Selectors.filter.region).length;\n\n        if (filterCount === 1) {\n            replaceFilterRow(filterRow, refreshContent);\n        } else {\n            removeFilterRow(filterRow, refreshContent);\n        }\n    };\n\n    /**\n     * Remove the specified filter row and associated class.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     */\n    const removeFilterRow = async(filterRow, refreshContent = true) => {\n        const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n        const hasFilterValue = !!filterType.value;\n\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        // Remove the actual filter HTML.\n        filterRow.remove();\n\n        // Update the list of available filter types.\n        updateFiltersOptions();\n\n        if (hasFilterValue && refreshContent) {\n            // Refresh the table if there was any content in this row.\n            updateTableFromFilter();\n        }\n\n        // Update filter fieldset legends.\n        const filterLegends = await getAvailableFilterLegends();\n\n        getFilterRegion().querySelectorAll(Selectors.filter.region).forEach((filterRow, index) => {\n            filterRow.querySelector('legend').innerText = filterLegends[index];\n        });\n\n    };\n\n    /**\n     * Replace the specified filter row with a new one.\n     *\n     * @param {HTMLElement} filterRow\n     * @param {Bool} refreshContent Whether to refresh the table content when removing\n     * @param {Number} rowNum The number used to label the filter fieldset legend (eg Row 1). Defaults to 1 (the first filter).\n     * @return {Promise}\n     */\n    const replaceFilterRow = (filterRow, refreshContent = true, rowNum = 1) => {\n        // Remove the filter object.\n        removeFilterObject(filterRow.dataset.filterType);\n\n        return Templates.renderForPromise('core_user/local/participantsfilter/filterrow', {\"rownumber\": rowNum})\n        .then(({html, js}) => {\n            const newContentNodes = Templates.replaceNode(filterRow, html, js);\n\n            return newContentNodes;\n        })\n        .then(filterRow => {\n            // Note: This is a nasty hack.\n            // We should try to find a better way of doing this.\n            // We do not have the list of types in a readily consumable format, so we take the pre-rendered one and copy\n            // it in place.\n            const typeList = filterSet.querySelector(Selectors.data.typeList);\n\n            filterRow.forEach(contentNode => {\n                const contentTypeList = contentNode.querySelector(Selectors.filter.fields.type);\n\n                if (contentTypeList) {\n                    contentTypeList.innerHTML = typeList.innerHTML;\n                }\n            });\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            updateFiltersOptions();\n\n            return filterRow;\n        })\n        .then(filterRow => {\n            // Refresh the table.\n            if (refreshContent) {\n                return updateTableFromFilter();\n            } else {\n                return filterRow;\n            }\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Remove the Filter Object from the register.\n     *\n     * @param {string} filterName The name of the filter to be removed\n     */\n    const removeFilterObject = filterName => {\n        if (filterName) {\n            const filter = getFilterObject(filterName);\n            if (filter) {\n                filter.tearDown();\n\n                // Remove from the list of active filters.\n                delete activeFilters[filterName];\n            }\n        }\n    };\n\n    /**\n     * Remove all filters.\n     *\n     * @returns {Promise}\n     */\n    const removeAllFilters = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => removeOrReplaceFilterRow(filterRow, false));\n\n        // Refresh the table.\n        return updateTableFromFilter()\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        });\n    };\n\n    /**\n     * Remove any empty filters.\n     */\n    const removeEmptyFilters = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const filterType = filterRow.querySelector(Selectors.filter.fields.type);\n            if (!filterType.value) {\n                removeOrReplaceFilterRow(filterRow, false);\n            }\n        });\n    };\n\n    /**\n     * Update the list of filter types to filter out those already selected.\n     */\n    const updateFiltersOptions = () => {\n        const filters = getFilterRegion().querySelectorAll(Selectors.filter.region);\n        filters.forEach(filterRow => {\n            const options = filterRow.querySelectorAll(Selectors.filter.fields.type + ' option');\n            options.forEach(option => {\n                if (option.value === filterRow.dataset.filterType) {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                } else if (activeFilters[option.value]) {\n                    option.classList.add('hidden');\n                    option.disabled = true;\n                } else {\n                    option.classList.remove('hidden');\n                    option.disabled = false;\n                }\n            });\n        });\n\n        // Configure the state of the \"Add row\" button.\n        // This button is disabled when there is a filter row available for each condition.\n        const addRowButton = filterSet.querySelector(Selectors.filterset.actions.addRow);\n        const filterDataNode = filterSet.querySelectorAll(Selectors.data.fields.all);\n        if (filterDataNode.length <= filters.length) {\n            addRowButton.setAttribute('disabled', 'disabled');\n        } else {\n            addRowButton.removeAttribute('disabled');\n        }\n\n        if (filters.length === 1) {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.add('hidden');\n            filterSet.querySelector(Selectors.filterset.fields.join).value = 1;\n            filterSet.dataset.filterverb = 1;\n        } else {\n            filterSet.querySelector(Selectors.filterset.regions.filtermatch).classList.remove('hidden');\n        }\n    };\n\n    /**\n     * Set the current filter options based on a provided configuration.\n     *\n     * @param {Object} config\n     * @param {Number} config.jointype\n     * @param {Object} config.filters\n     * @returns {Promise}\n     */\n    const setFilterFromConfig = config => {\n        const filterConfig = Object.entries(config.filters);\n\n        if (!filterConfig.length) {\n            // There are no filters to set from.\n            return Promise.resolve();\n        }\n\n        // Set the main join type.\n        filterSet.querySelector(Selectors.filterset.fields.join).value = config.jointype;\n\n        const filterPromises = filterConfig.map(([filterType, filterData]) => {\n            if (filterType === 'courseid') {\n                // The courseid is a special case.\n                return false;\n            }\n\n            const filterValues = filterData.values;\n\n            if (!filterValues.length) {\n                // There are no values for this filter.\n                // Skip it.\n                return false;\n            }\n\n            return addFilterRow().then(([filterRow]) => addFilter(filterRow, filterType, filterValues));\n        }).filter(promise => promise);\n\n        if (!filterPromises.length) {\n            return Promise.resolve();\n        }\n\n        return Promise.all(filterPromises).then(() => {\n            return removeEmptyFilters();\n        })\n        .then(updateFiltersOptions)\n        .then(updateTableFromFilter);\n    };\n\n    /**\n     * Update the Dynamic table based upon the current filter.\n     *\n     * @return {Promise}\n     */\n    const updateTableFromFilter = () => {\n        const pendingPromise = new Pending('core_user/participantsfilter:updateTableFromFilter');\n\n        const filters = {};\n        Object.values(activeFilters).forEach(filter => {\n            filters[filter.filterValue.name] = filter.filterValue;\n        });\n\n        return DynamicTable.setFilters(\n            DynamicTable.getTableFromId(filterSet.dataset.tableRegion),\n            {\n                jointype: parseInt(filterSet.querySelector(Selectors.filterset.fields.join).value, 10),\n                filters,\n            }\n        )\n        .then(result => {\n            pendingPromise.resolve();\n\n            return result;\n        })\n        .catch(Notification.exception);\n    };\n\n    /**\n     * Fetch the strings used to populate the fieldset legends for the maximum number of filters possible.\n     *\n     * @return {array}\n     */\n    const getAvailableFilterLegends = async() => {\n        const maxFilters = document.querySelector(Selectors.data.typeListSelect).length - 1;\n        let requests = [];\n\n        [...Array(maxFilters)].forEach((_, rowIndex) => {\n            requests.push({\n                \"key\": \"filterrowlegend\",\n                \"component\": \"core_user\",\n                // Add 1 since rows begin at 1 (index begins at zero).\n                \"param\": rowIndex + 1\n            });\n        });\n\n        const legendStrings = await getStrings(requests)\n        .then(fetchedStrings => {\n            return fetchedStrings;\n        })\n        .catch(Notification.exception);\n\n        return legendStrings;\n    };\n\n    // Add listeners for the main actions.\n    filterSet.querySelector(Selectors.filterset.region).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filterset.actions.addRow)) {\n            e.preventDefault();\n\n            addFilterRow();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.applyFilters)) {\n            e.preventDefault();\n\n            updateTableFromFilter();\n        }\n\n        if (e.target.closest(Selectors.filterset.actions.resetFilters)) {\n            e.preventDefault();\n\n            removeAllFilters();\n        }\n    });\n\n    // Add the listener to remove a single filter.\n    filterSet.querySelector(Selectors.filterset.regions.filterlist).addEventListener('click', e => {\n        if (e.target.closest(Selectors.filter.actions.remove)) {\n            e.preventDefault();\n\n            removeOrReplaceFilterRow(e.target.closest(Selectors.filter.region), true);\n        }\n    });\n\n    // Add listeners for the filter type selection.\n    let filterRegion = jQuery(getFilterRegion());\n    CustomEvents.define(filterRegion, [CustomEvents.events.accessibleChange]);\n    filterRegion.on(CustomEvents.events.accessibleChange, e => {\n        const typeField = e.target.closest(Selectors.filter.fields.type);\n        if (typeField && typeField.value) {\n            const filter = e.target.closest(Selectors.filter.region);\n\n            addFilter(filter, typeField.value);\n        }\n    });\n\n    filterSet.querySelector(Selectors.filterset.fields.join).addEventListener('change', e => {\n        filterSet.dataset.filterverb = e.target.value;\n    });\n\n    const tableRoot = DynamicTable.getTableFromId(filterSet.dataset.tableRegion);\n    const initialFilters = DynamicTable.getFilters(tableRoot);\n    if (initialFilters) {\n        const initialFilterPromise = new Pending('core_user/participantsfilter:setFilterFromConfig');\n        // Apply the initial filter configuration.\n        setFilterFromConfig(initialFilters)\n        .then(() => initialFilterPromise.resolve())\n        .catch();\n    }\n};\n"],"names":["_courseid","_interopRequireDefault","DynamicTable","obj","nodeInterop","__esModule","_typeof","default","cache","_getRequireWildcardCache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireWildcard","_filter","_notification","_pending","_selectors","_templates","_custom_interaction_events","_jquery","_systemImportTransformerGlobalIdentifier","window","self","global","WeakMap","cacheBabelInterop","cacheNodeInterop","_toConsumableArray","arr","_arrayWithoutHoles","Array","isArray","_arrayLikeToArray","iter","Symbol","iterator","from","_iterableToArray","_unsupportedIterableToArray","TypeError","_nonIterableSpread","_slicedToArray","i","_arrayWithHoles","_i","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","length","err","return","_iterableToArrayLimit","_nonIterableRest","o","minLen","n","toString","slice","constructor","name","test","len","arr2","_regeneratorRuntime","exports","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","val","object","reverse","pop","skipTempReset","prev","charAt","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_exports","init","participantsRegionId","_ref2","_ref3","_ref9","filterSet","document","querySelector","concat","activeFilters","courseid","CourseFilter","getFilterRegion","Selectors","filterset","regions","filterlist","addFilterRow","pendingPromise","Pending","rownum","querySelectorAll","filter","region","Templates","renderForPromise","rownumber","_ref","html","js","appendNodeContents","filterRow","typeList","data","contentNode","contentTypeList","fields","innerHTML","updateFiltersOptions","Notification","getFilterDataSource","filterType","datasource","byName","addFilter","_callee","initialFilterValues","filterDataNode","Filter","typeField","_context","dataset","GenericFilter","filterTypeClass","amd","require","module","component","loader","disabled","_x2","_x3","removeOrReplaceFilterRow","refreshContent","replaceFilterRow","removeFilterRow","_callee2","hasFilterValue","filterLegends","_args2","_context2","removeFilterObject","remove","updateTableFromFilter","getAvailableFilterLegends","index","innerText","_x4","rowNum","_ref4","replaceNode","filterName","tearDown","filters","option","classList","add","addRowButton","actions","addRow","all","setAttribute","removeAttribute","filtermatch","join","filterverb","filterValue","setFilters","getTableFromId","tableRegion","jointype","parseInt","_callee3","maxFilters","requests","legendStrings","_context3","typeListSelect","_","rowIndex","param","getStrings","get_strings","fetchedStrings","addEventListener","e","target","closest","preventDefault","applyFilters","resetFilters","filterRegion","jQuery","CustomEvents","events","accessibleChange","on","tableRoot","initialFilters","getFilters","initialFilterPromise","config","filterConfig","entries","filterPromises","map","_ref5","_ref6","filterData","filterValues","_ref7","promise","setFilterFromConfig"],"mappings":"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"}