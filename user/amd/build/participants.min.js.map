{"version":3,"sources":["../src/participants.js"],"names":["Selectors","bulkActionSelect","bulkUserSelectedCheckBoxes","checkCountButton","showCountText","showCountToggle","stateHelpIcon","tableForm","uniqueId","init","uniqueid","noteStateNames","root","document","querySelector","getTableFromUniqueId","DynamicTableSelectors","main","fromRegionId","registerEventListeners","CustomEvents","define","events","accessibleChange","on","e","target","closest","action","value","tableRoot","checkboxes","querySelectorAll","pendingPromise","Pending","indexOf","preventDefault","ids","forEach","checkbox","push","getAttribute","replace","bulkAction","dataset","courseId","pendingBulkAction","then","modal","getRoot","ModalEvents","hidden","focus","resolve","catch","Notification","exception","length","form","submit","resetBulkAction","addEventListener","showCountLink","showCountLinkClicked","contains","checkCountButtonClicked","DynamicTable","setPageSize","targetPageSize","CheckboxToggleAll","setGroupState","Events","tableContentRefreshed","defaultPageSize","parseInt","tableDefaultPerPage","currentPageSize","tablePageSize","totalRowCount","tableTotalRows","updateSlavesFromMasterState","pageCountStrings","key","component","param","classList","add","remove","Str","get_strings","showingParticipantCountString","showCountString","selectCountString","showingParticipantCount","innerHTML"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Some UI stuff for participants page.\n * This is also used by the report/participants/index.php because it has the same functionality.\n *\n * @module     core_user/participants\n * @copyright  2017 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport * as Str from 'core/str';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport CustomEvents from 'core/custom_interaction_events';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport jQuery from 'jquery';\nimport {showAddNote, showSendMessage} from 'core_user/local/participants/bulkactions';\nimport 'core/inplace_editable';\n\nconst Selectors = {\n    bulkActionSelect: \"#formactionid\",\n    bulkUserSelectedCheckBoxes: \"input[data-togglegroup='participants-table'][data-toggle='slave']:checked\",\n    checkCountButton: \"#checkall\",\n    showCountText: '[data-region=\"participant-count\"]',\n    showCountToggle: '[data-action=\"showcount\"]',\n    stateHelpIcon: '[data-region=\"state-help-icon\"]',\n    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\n};\n\nexport const init = ({\n    uniqueid,\n    noteStateNames = {},\n}) => {\n    const root = document.querySelector(Selectors.tableForm(uniqueid));\n    const getTableFromUniqueId = uniqueId => root.querySelector(DynamicTableSelectors.main.fromRegionId(uniqueId));\n\n    /**\n     * Private method.\n     *\n     * @method registerEventListeners\n     * @private\n     */\n    const registerEventListeners = () => {\n        CustomEvents.define(Selectors.bulkActionSelect, [CustomEvents.events.accessibleChange]);\n        jQuery(Selectors.bulkActionSelect).on(CustomEvents.events.accessibleChange, e => {\n            const bulkActionSelect = e.target.closest('select');\n            const action = bulkActionSelect.value;\n            const tableRoot = getTableFromUniqueId(uniqueid);\n            const checkboxes = tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes);\n            const pendingPromise = new Pending('core_user/participants:bulkActionSelect');\n\n            if (action.indexOf('#') !== -1) {\n                e.preventDefault();\n\n                const ids = [];\n                checkboxes.forEach(checkbox => {\n                    ids.push(checkbox.getAttribute('name').replace('user', ''));\n                });\n\n                let bulkAction;\n                if (action === '#messageselect') {\n                    bulkAction = showSendMessage(ids);\n                } else if (action === '#addgroupnote') {\n                    bulkAction = showAddNote(\n                        root.dataset.courseId,\n                        ids,\n                        noteStateNames,\n                        root.querySelector(Selectors.stateHelpIcon)\n                    );\n                }\n\n                if (bulkAction) {\n                    const pendingBulkAction = new Pending('core_user/participants:bulkActionSelected');\n                    bulkAction\n                    .then(modal => {\n                        modal.getRoot().on(ModalEvents.hidden, () => {\n                            // Focus on the action select when the dialog is closed.\n                            bulkActionSelect.focus();\n                        });\n\n                        pendingBulkAction.resolve();\n                        return modal;\n                    })\n                    .catch(Notification.exception);\n                }\n            } else if (action !== '' && checkboxes.length) {\n                bulkActionSelect.form.submit();\n            }\n\n            resetBulkAction(bulkActionSelect);\n            pendingPromise.resolve();\n        });\n\n        root.addEventListener('click', e => {\n            // Handle clicking of the \"Show [all|count]\" and \"Select all\" actions.\n            const showCountLink = root.querySelector(Selectors.showCountToggle);\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const showCountLinkClicked = showCountLink && showCountLink.contains(e.target);\n            const checkCountButtonClicked = checkCountButton && checkCountButton.contains(e.target);\n\n            if (showCountLinkClicked || checkCountButtonClicked) {\n                e.preventDefault();\n\n                const tableRoot = getTableFromUniqueId(uniqueid);\n\n                DynamicTable.setPageSize(tableRoot, showCountLink.dataset.targetPageSize)\n                .then(tableRoot => {\n                    // Always update the toggle state.\n                    // This ensures that the bulk actions are disabled after changing the page size.\n                    CheckboxToggleAll.setGroupState(root, 'participants-table', checkCountButtonClicked);\n\n                    return tableRoot;\n                })\n                .catch(Notification.exception);\n            }\n        });\n\n        // When the content is refreshed, update the row counts in various places.\n        root.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\n            const showCountLink = root.querySelector(Selectors.showCountToggle);\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const tableRoot = e.target;\n\n            const defaultPageSize = parseInt(root.dataset.tableDefaultPerPage, 10);\n            const currentPageSize = parseInt(tableRoot.dataset.tablePageSize, 10);\n            const totalRowCount = parseInt(tableRoot.dataset.tableTotalRows, 10);\n\n            CheckboxToggleAll.updateSlavesFromMasterState(root, 'participants-table');\n\n            const pageCountStrings = [\n                {\n                    key: 'countparticipantsfound',\n                    component: 'core_user',\n                    param: totalRowCount,\n                },\n            ];\n\n\n            if (totalRowCount <= defaultPageSize) {\n                // There are fewer than the default page count numbers of rows.\n                showCountLink.classList.add('hidden');\n\n                if (checkCountButton) {\n                    checkCountButton.classList.add('hidden');\n                }\n            } else if (totalRowCount <= currentPageSize) {\n                // The are fewer than the current page size.\n                pageCountStrings.push({\n                    key: 'showperpage',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                // Show the 'Show [x]' link.\n                showCountLink.classList.remove('hidden');\n                showCountLink.dataset.targetPageSize = defaultPageSize;\n\n                if (checkCountButton) {\n                    // The 'Check all [x]' button is only visible when there are values to set.\n                    checkCountButton.classList.add('hidden');\n                }\n            } else {\n                pageCountStrings.push({\n                    key: 'showall',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                // Show both the 'Show [x]' link, and the 'Check all [x]' button.\n                showCountLink.classList.remove('hidden');\n                showCountLink.dataset.targetPageSize = totalRowCount;\n\n                if (checkCountButton) {\n                    checkCountButton.classList.remove('hidden');\n                }\n            }\n\n            Str.get_strings(pageCountStrings)\n            .then(([showingParticipantCountString, showCountString, selectCountString]) => {\n                const showingParticipantCount = root.querySelector(Selectors.showCountText);\n                showingParticipantCount.innerHTML = showingParticipantCountString;\n\n                if (showCountString) {\n                    showCountLink.innerHTML = showCountString;\n                }\n\n                if (selectCountString && checkCountButton) {\n                    checkCountButton.value = selectCountString;\n                }\n\n                return;\n            })\n            .catch(Notification.exception);\n        });\n    };\n\n    const resetBulkAction = bulkActionSelect => {\n        bulkActionSelect.value = '';\n    };\n\n    registerEventListeners();\n};\n"],"file":"participants.min.js"}