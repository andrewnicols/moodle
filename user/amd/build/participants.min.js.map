{"version":3,"sources":["../src/participants.js"],"names":["Selectors","bulkActionSelect","bulkUserSelectedCheckBoxes","checkCountButton","showCountText","showCountToggle","stateHelpIcon","tableForm","uniqueId","uniqueid","noteStateNames","root","document","querySelector","getTableFromUniqueId","DynamicTableSelectors","main","fromRegionId","registerEventListeners","CustomEvents","define","events","accessibleChange","on","e","target","closest","action","value","tableRoot","checkboxes","querySelectorAll","pendingPromise","Pending","indexOf","preventDefault","ids","forEach","checkbox","push","getAttribute","replace","bulkAction","dataset","courseId","pendingBulkAction","then","modal","getRoot","ModalEvents","hidden","focus","resolve","catch","Notification","exception","length","form","submit","resetBulkAction","addEventListener","checkCountButtonClicked","contains","DynamicTable","setPageSize","targetPageSize","CheckboxToggleAll","setGroupState","Events","tableContentRefreshed","defaultPageSize","parseInt","tableDefaultPerPage","currentPageSize","tablePageSize","totalRowCount","tableTotalRows","updateSlavesFromMasterState","pageCountStrings","key","component","param","classList","add","remove","Str","get_strings","showingParticipantCountString","selectCountString","showingParticipantCount","innerHTML"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Some UI stuff for participants page.\n * This is also used by the report/participants/index.php because it has the same functionality.\n *\n * @module     core_user/participants\n * @copyright  2017 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport * as Str from 'core/str';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport CustomEvents from 'core/custom_interaction_events';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport jQuery from 'jquery';\nimport {showAddNote, showSendMessage} from 'core_user/local/participants/bulkactions';\nimport 'core/inplace_editable';\n\nconst Selectors = {\n    bulkActionSelect: \"#formactionid\",\n    bulkUserSelectedCheckBoxes: \"input[data-togglegroup='participants-table'][data-toggle='slave']:checked\",\n    checkCountButton: \"#checkall\",\n    showCountText: '[data-region=\"participant-count\"]',\n    showCountToggle: '[data-action=\"showcount\"]',\n    stateHelpIcon: '[data-region=\"state-help-icon\"]',\n    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\n};\n\nexport const init = ({\n    uniqueid,\n    noteStateNames = {},\n}) => {\n    const root = document.querySelector(Selectors.tableForm(uniqueid));\n    const getTableFromUniqueId = uniqueId => root.querySelector(DynamicTableSelectors.main.fromRegionId(uniqueId));\n\n    /**\n     * Private method.\n     *\n     * @method registerEventListeners\n     * @private\n     */\n    const registerEventListeners = () => {\n        CustomEvents.define(Selectors.bulkActionSelect, [CustomEvents.events.accessibleChange]);\n        jQuery(Selectors.bulkActionSelect).on(CustomEvents.events.accessibleChange, e => {\n            const bulkActionSelect = e.target.closest('select');\n            const action = bulkActionSelect.value;\n            const tableRoot = getTableFromUniqueId(uniqueid);\n            const checkboxes = tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes);\n            const pendingPromise = new Pending('core_user/participants:bulkActionSelect');\n\n            if (action.indexOf('#') !== -1) {\n                e.preventDefault();\n\n                const ids = [];\n                checkboxes.forEach(checkbox => {\n                    ids.push(checkbox.getAttribute('name').replace('user', ''));\n                });\n\n                let bulkAction;\n                if (action === '#messageselect') {\n                    bulkAction = showSendMessage(ids);\n                } else if (action === '#addgroupnote') {\n                    bulkAction = showAddNote(\n                        root.dataset.courseId,\n                        ids,\n                        noteStateNames,\n                        root.querySelector(Selectors.stateHelpIcon)\n                    );\n                }\n\n                if (bulkAction) {\n                    const pendingBulkAction = new Pending('core_user/participants:bulkActionSelected');\n                    bulkAction\n                    .then(modal => {\n                        modal.getRoot().on(ModalEvents.hidden, () => {\n                            // Focus on the action select when the dialog is closed.\n                            bulkActionSelect.focus();\n                        });\n\n                        pendingBulkAction.resolve();\n                        return modal;\n                    })\n                    .catch(Notification.exception);\n                }\n            } else if (action !== '' && checkboxes.length) {\n                bulkActionSelect.form.submit();\n            }\n\n            resetBulkAction(bulkActionSelect);\n            pendingPromise.resolve();\n        });\n\n        root.addEventListener('click', e => {\n            // Handle clicking of the \"Select all\" actions.\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n            const checkCountButtonClicked = checkCountButton && checkCountButton.contains(e.target);\n\n            if (checkCountButtonClicked) {\n                e.preventDefault();\n\n                const tableRoot = getTableFromUniqueId(uniqueid);\n\n                DynamicTable.setPageSize(tableRoot, checkCountButton.dataset.targetPageSize)\n                .then(tableRoot => {\n                    // Update the toggle state.\n                    CheckboxToggleAll.setGroupState(root, 'participants-table', true);\n\n                    return tableRoot;\n                })\n                .catch(Notification.exception);\n            }\n        });\n\n        // When the content is refreshed, update the row counts in various places.\n        root.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const tableRoot = e.target;\n\n            const defaultPageSize = parseInt(tableRoot.dataset.tableDefaultPerPage, 10);\n            const currentPageSize = parseInt(tableRoot.dataset.tablePageSize, 10);\n            const totalRowCount = parseInt(tableRoot.dataset.tableTotalRows, 10);\n\n            CheckboxToggleAll.updateSlavesFromMasterState(root, 'participants-table');\n\n            const pageCountStrings = [\n                {\n                    key: 'countparticipantsfound',\n                    component: 'core_user',\n                    param: totalRowCount,\n                },\n            ];\n\n            if (totalRowCount <= defaultPageSize) {\n                if (checkCountButton) {\n                    checkCountButton.classList.add('hidden');\n                }\n            } else if (totalRowCount <= currentPageSize) {\n                // The are fewer than the current page size.\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                if (checkCountButton) {\n                    // The 'Check all [x]' button is only visible when there are values to set.\n                    checkCountButton.classList.add('hidden');\n                }\n            } else {\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                if (checkCountButton) {\n                    checkCountButton.classList.remove('hidden');\n                }\n            }\n\n            Str.get_strings(pageCountStrings)\n            .then(([showingParticipantCountString, selectCountString]) => {\n                const showingParticipantCount = root.querySelector(Selectors.showCountText);\n                showingParticipantCount.innerHTML = showingParticipantCountString;\n\n                if (selectCountString && checkCountButton) {\n                    checkCountButton.value = selectCountString;\n                }\n\n                return;\n            })\n            .catch(Notification.exception);\n        });\n    };\n\n    const resetBulkAction = bulkActionSelect => {\n        bulkActionSelect.value = '';\n    };\n\n    registerEventListeners();\n};\n"],"file":"participants.min.js"}