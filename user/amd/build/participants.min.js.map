{"version":3,"file":"participants.min.js","sources":["../src/participants.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Some UI stuff for participants page.\n * This is also used by the report/participants/index.php because it has the same functionality.\n *\n * @module     core_user/participants\n * @package    core_user\n * @copyright  2017 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport * as Str from 'core/str';\nimport CheckboxToggleAll from 'core/checkbox-toggleall';\nimport CustomEvents from 'core/custom_interaction_events';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport ModalEvents from 'core/modal_events';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport jQuery from 'jquery';\nimport {showAddNote, showSendMessage} from 'core_user/local/participants/bulkactions';\n\nconst Selectors = {\n    bulkActionSelect: \"#formactionid\",\n    bulkUserSelectedCheckBoxes: \"input[data-togglegroup='participants-table'][data-toggle='slave']:checked\",\n    checkCountButton: \"#checkall\",\n    showCountText: '[data-region=\"participant-count\"]',\n    showCountToggle: '[data-action=\"showcount\"]',\n    stateHelpIcon: '[data-region=\"state-help-icon\"]',\n    tableForm: uniqueId => `form[data-table-unique-id=\"${uniqueId}\"]`,\n};\n\nexport const init = ({\n    uniqueid,\n    noteStateNames = {},\n}) => {\n    const root = document.querySelector(Selectors.tableForm(uniqueid));\n    const getTableFromUniqueId = uniqueId => root.querySelector(DynamicTableSelectors.main.fromRegionId(uniqueId));\n\n    /**\n     * Private method.\n     *\n     * @method registerEventListeners\n     * @private\n     */\n    const registerEventListeners = () => {\n        CustomEvents.define(Selectors.bulkActionSelect, [CustomEvents.events.accessibleChange]);\n        jQuery(Selectors.bulkActionSelect).on(CustomEvents.events.accessibleChange, e => {\n            const bulkActionSelect = e.target.closest('select');\n            const action = bulkActionSelect.value;\n            const tableRoot = getTableFromUniqueId(uniqueid);\n            const checkboxes = tableRoot.querySelectorAll(Selectors.bulkUserSelectedCheckBoxes);\n            const pendingPromise = new Pending('core_user/participants:bulkActionSelect');\n\n            if (action.indexOf('#') !== -1) {\n                e.preventDefault();\n\n                const ids = [];\n                checkboxes.forEach(checkbox => {\n                    ids.push(checkbox.getAttribute('name').replace('user', ''));\n                });\n\n                let bulkAction;\n                if (action === '#messageselect') {\n                    bulkAction = showSendMessage(ids);\n                } else if (action === '#addgroupnote') {\n                    bulkAction = showAddNote(\n                        root.dataset.courseId,\n                        ids,\n                        noteStateNames,\n                        root.querySelector(Selectors.stateHelpIcon)\n                    );\n                }\n\n                if (bulkAction) {\n                    const pendingBulkAction = new Pending('core_user/participants:bulkActionSelected');\n                    bulkAction\n                    .then(modal => {\n                        modal.getRoot().on(ModalEvents.hidden, () => {\n                            // Focus on the action select when the dialog is closed.\n                            bulkActionSelect.focus();\n                        });\n\n                        pendingBulkAction.resolve();\n                        return modal;\n                    })\n                    .catch(Notification.exception);\n                }\n            } else if (action !== '' && checkboxes.length) {\n                bulkActionSelect.form.submit();\n            }\n\n            resetBulkAction(bulkActionSelect);\n            pendingPromise.resolve();\n        });\n\n        root.addEventListener('click', e => {\n            // Handle clicking of the \"Show [all|count]\" and \"Select all\" actions.\n            const showCountLink = root.querySelector(Selectors.showCountToggle);\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const showCountLinkClicked = showCountLink && showCountLink.contains(e.target);\n            const checkCountButtonClicked = checkCountButton && checkCountButton.contains(e.target);\n\n            if (showCountLinkClicked || checkCountButtonClicked) {\n                e.preventDefault();\n\n                const tableRoot = getTableFromUniqueId(uniqueid);\n\n                DynamicTable.setPageSize(tableRoot, showCountLink.dataset.targetPageSize)\n                .then(tableRoot => {\n                    // Always update the toggle state.\n                    // This ensures that the bulk actions are disabled after changing the page size.\n                    CheckboxToggleAll.setGroupState(root, 'participants-table', checkCountButtonClicked);\n\n                    return tableRoot;\n                })\n                .catch(Notification.exception);\n            }\n        });\n\n        // When the content is refreshed, update the row counts in various places.\n        root.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\n            const showCountLink = root.querySelector(Selectors.showCountToggle);\n            const checkCountButton = root.querySelector(Selectors.checkCountButton);\n\n            const tableRoot = e.target;\n\n            const defaultPageSize = parseInt(root.dataset.tableDefaultPerPage, 10);\n            const currentPageSize = parseInt(tableRoot.dataset.tablePageSize, 10);\n            const totalRowCount = parseInt(tableRoot.dataset.tableTotalRows, 10);\n\n            CheckboxToggleAll.updateSlavesFromMasterState(root, 'participants-table');\n\n            const pageCountStrings = [\n                {\n                    key: 'countparticipantsfound',\n                    component: 'core_user',\n                    param: totalRowCount,\n                },\n            ];\n\n\n            if (totalRowCount <= defaultPageSize) {\n                // There are fewer than the default page count numbers of rows.\n                showCountLink.classList.add('hidden');\n\n                if (checkCountButton) {\n                    checkCountButton.classList.add('hidden');\n                }\n            } else if (totalRowCount <= currentPageSize) {\n                // The are fewer than the current page size.\n                pageCountStrings.push({\n                    key: 'showperpage',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: defaultPageSize,\n                });\n\n                // Show the 'Show [x]' link.\n                showCountLink.classList.remove('hidden');\n                showCountLink.dataset.targetPageSize = defaultPageSize;\n\n                if (checkCountButton) {\n                    // The 'Check all [x]' button is only visible when there are values to set.\n                    checkCountButton.classList.add('hidden');\n                }\n            } else {\n                pageCountStrings.push({\n                    key: 'showall',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                pageCountStrings.push({\n                    key: 'selectalluserswithcount',\n                    component: 'core',\n                    param: totalRowCount,\n                });\n\n                // Show both the 'Show [x]' link, and the 'Check all [x]' button.\n                showCountLink.classList.remove('hidden');\n                showCountLink.dataset.targetPageSize = totalRowCount;\n\n                if (checkCountButton) {\n                    checkCountButton.classList.remove('hidden');\n                }\n            }\n\n            Str.get_strings(pageCountStrings)\n            .then(([showingParticipantCountString, showCountString, selectCountString]) => {\n                const showingParticipantCount = root.querySelector(Selectors.showCountText);\n                showingParticipantCount.innerHTML = showingParticipantCountString;\n\n                if (showCountString) {\n                    showCountLink.innerHTML = showCountString;\n                }\n\n                if (selectCountString && checkCountButton) {\n                    checkCountButton.value = selectCountString;\n                }\n\n                return;\n            })\n            .catch(Notification.exception);\n        });\n    };\n\n    const resetBulkAction = bulkActionSelect => {\n        bulkActionSelect.value = '';\n    };\n\n    registerEventListeners();\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","_typeof","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_i","Symbol","iterator","_s","_e","_x","_r","_arr","_n","_d","next","done","push","value","length","err","return","_iterableToArrayLimit","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","TypeError","_nonIterableRest","len","arr2","DynamicTable","Str","_checkboxToggleall","_custom_interaction_events","_selectors","_modal_events","_notification","_pending","_jquery","Selectors","uniqueId","concat","_exports","init","_ref","uniqueid","_ref$noteStateNames","noteStateNames","root","document","querySelector","getTableFromUniqueId","DynamicTableSelectors","main","fromRegionId","resetBulkAction","bulkActionSelect","CustomEvents","define","events","accessibleChange","jQuery","on","e","target","closest","action","checkboxes","querySelectorAll","pendingPromise","Pending","indexOf","preventDefault","bulkAction","ids","forEach","checkbox","getAttribute","replace","showSendMessage","showAddNote","dataset","courseId","pendingBulkAction","then","modal","getRoot","ModalEvents","hidden","focus","resolve","catch","Notification","exception","form","submit","addEventListener","showCountLink","checkCountButton","showCountLinkClicked","contains","checkCountButtonClicked","tableRoot","setPageSize","targetPageSize","CheckboxToggleAll","setGroupState","Events","tableContentRefreshed","defaultPageSize","parseInt","tableDefaultPerPage","currentPageSize","tablePageSize","totalRowCount","tableTotalRows","updateSlavesFromMasterState","pageCountStrings","component","param","classList","add","remove","get_strings","_ref2","_ref3","showingParticipantCountString","showCountString","selectCountString","innerHTML"],"mappings":"yrBAiC4B,SAAAA,uBAAAC,KAAAA,OAAAA,KAAAA,IAAAC,WAAAD,IAAAE,CAAAA,QAAAF,IAAA,CAAA,SAAAG,yBAAAC,aAAA,GAAA,mBAAAC,QAAA,OAAA,KAAA,IAAAC,kBAAAD,IAAAA,QAAAE,iBAAAF,IAAAA,eAAAF,yBAAA,SAAAC,aAAAA,OAAAA,YAAAG,iBAAAD,iBAAA,GAAAF,YAAA,CAAA,SAAAI,wBAAAR,IAAAI,aAAAA,IAAAA,aAAAJ,KAAAA,IAAAC,kBAAAD,IAAA,GAAA,OAAAA,KAAA,WAAAS,QAAAT,MAAA,mBAAAA,IAAA,MAAA,CAAAE,QAAAF,KAAA,IAAAU,MAAAP,yBAAAC,aAAAM,GAAAA,OAAAA,MAAAC,IAAAX,KAAAU,OAAAA,MAAAE,IAAAZ,SAAAa,OAAA,CAAA,EAAAC,sBAAAC,OAAAC,gBAAAD,OAAAE,yBAAA,IAAA,IAAAC,OAAAlB,IAAA,GAAAe,YAAAG,KAAAH,OAAAI,UAAAC,eAAAC,KAAArB,IAAAkB,KAAAI,CAAAA,IAAAA,KAAAR,sBAAAC,OAAAE,yBAAAjB,IAAAkB,KAAA,KAAAI,OAAAA,KAAAV,KAAAU,KAAAC,KAAAR,OAAAC,eAAAH,OAAAK,IAAAI,MAAAT,OAAAK,KAAAlB,IAAAkB,IAAA,QAAAL,OAAAX,QAAAF,IAAAU,OAAAA,MAAAa,IAAAvB,IAAAa,QAAAA,MAAA,CAAA,SAAAW,eAAAC,IAAAC,UAAA,SAAAD,KAAAE,GAAAA,MAAAC,QAAAH,KAAA,OAAAA,GAAA,CAAAI,CAAAJ,MAAA,SAAAA,IAAAC,GAAA,IAAAI,GAAAL,MAAAA,IAAAM,KAAAA,oBAAAA,QAAAN,IAAAM,OAAAC,WAAAP,IAAA,cAAA,GAAA,MAAAK,GAAA,CAAA,IAAAG,GAAAC,GAAAC,GAAAC,GAAAC,KAAAC,GAAAA,IAAAC,EAAAA,IAAAJ,EAAAA,IAAAA,GAAAA,IAAAL,GAAAA,GAAAT,KAAAI,MAAAe,KAAA,IAAAd,EAAA,CAAA,GAAAX,OAAAe,MAAAA,GAAA,OAAAQ,IAAA,OAAA,OAAAA,IAAAL,GAAAE,GAAAd,KAAAS,KAAAW,QAAAJ,KAAAK,KAAAT,GAAAU,OAAAN,KAAAO,SAAAlB,GAAAY,IAAA,GAAA,CAAA,MAAAO,KAAAN,IAAAL,EAAAA,GAAAW,GAAAP,CAAAA,QAAAA,IAAAA,IAAAA,IAAAR,MAAAA,GAAAgB,SAAAV,GAAAN,GAAAgB,SAAA/B,OAAAqB,MAAAA,IAAA,MAAA,CAAA,QAAA,GAAAG,GAAA,MAAAL,EAAA,CAAA,CAAA,OAAAG,IAAA,CAAA,CAAAU,CAAAtB,IAAAC,IAAA,SAAAsB,EAAAC,QAAAD,IAAAA,EAAAA,OAAAA,GAAAE,iBAAAF,EAAAE,OAAAA,kBAAAF,EAAAC,QAAAE,IAAAA,EAAApC,OAAAI,UAAAiC,SAAA/B,KAAA2B,GAAAK,YAAA,WAAAF,GAAAH,EAAAM,cAAAH,EAAAH,EAAAM,YAAAC,MAAA,GAAA,QAAAJ,GAAAxB,QAAAwB,EAAAxB,OAAAA,MAAA6B,KAAAR,GAAAG,GAAAM,cAAAN,GAAAM,2CAAAA,KAAAN,GAAAD,OAAAA,kBAAAF,EAAAC,OAAA,CAAAS,CAAAjC,IAAAC,IAAA,qBAAAiC,UAAA,4IAAA,CAAAC,EAAA,CAAA,SAAAV,kBAAAzB,IAAAoC,YAAAA,KAAAA,IAAApC,IAAAmB,UAAAiB,IAAApC,IAAAmB,QAAAlB,IAAAA,IAAAA,EAAAoC,EAAAA,SAAAnC,MAAAkC,KAAAnC,EAAAmC,IAAAnC,IAAAoC,KAAApC,GAAAD,IAAAC,UAAAoC,IAAA,8EAR5BC,aAAAvD,wBAAAuD,cACAC,IAAAxD,wBAAAwD,KACAC,mBAAAlE,uBAAAkE,oBACAC,2BAAAnE,uBAAAmE,4BACAC,WAAApE,uBAAAoE,YACAC,cAAArE,uBAAAqE,eACAC,cAAAtE,uBAAAsE,eACAC,SAAAvE,uBAAAuE,UACAC,QAAAxE,uBAAAwE,SAGA,IAAMC,2BACgB,gBADhBA,qCAE0B,4EAF1BA,2BAGgB,YAHhBA,wBAIa,oCAJbA,0BAKe,4BALfA,wBAMa,kCANbA,oBAOS,SAAAC,UAAQ,MAAAC,8BAAAA,OAAkCD,SAAQ,KAAA,EA6L/DE,SAAAC,KA1LkB,SAAHC,MAGX,IAFFC,SAAQD,KAARC,SAAQC,oBAAAF,KACRG,eAAAA,oBAAc,IAAAD,oBAAG,CAAA,EAAEA,oBAEbE,KAAOC,SAASC,cAAcX,oBAAoBM,WAClDM,qBAAuB,SAAAX,UAAQ,OAAIQ,KAAKE,cAAcE,WAAqBnF,QAACoF,KAAKC,aAAad,UAAU,EAgLxGe,gBAAkB,SAAAC,kBACpBA,iBAAiB9C,MAAQ,IAxKzB+C,2BAAAA,QAAaC,OAAOnB,2BAA4B,CAACkB,2BAAAA,QAAaE,OAAOC,oBACrE,EAAAC,iBAAOtB,4BAA4BuB,GAAGL,2BAAAA,QAAaE,OAAOC,kBAAkB,SAAAG,GACxE,IAAMP,iBAAmBO,EAAEC,OAAOC,QAAQ,UACpCC,OAASV,iBAAiB9C,MAE1ByD,WADYhB,qBAAqBN,UACVuB,iBAAiB7B,sCACxC8B,eAAiB,IAAIC,SAAOrG,QAAC,2CAEnC,IAA6B,IAAzBiG,OAAOK,QAAQ,KAAa,CAC5BR,EAAES,iBAEF,IAKIC,WALEC,IAAM,GAiBZ,GAhBAP,WAAWQ,SAAQ,SAAAC,UACfF,IAAIjE,KAAKmE,SAASC,aAAa,QAAQC,QAAQ,OAAQ,IAC3D,IAGe,mBAAXZ,OACAO,YAAa,EAAAM,aAAeA,iBAACL,KACX,kBAAXR,SACPO,YAAa,EAAAO,aAAWA,aACpBhC,KAAKiC,QAAQC,SACbR,IACA3B,eACAC,KAAKE,cAAcX,2BAIvBkC,WAAY,CACZ,IAAMU,kBAAoB,IAAIb,SAAOrG,QAAC,6CACtCwG,WACCW,MAAK,SAAAC,OAOF,OANAA,MAAMC,UAAUxB,GAAGyB,cAAWtH,QAACuH,QAAQ,WAEnChC,iBAAiBiC,OACrB,IAEAN,kBAAkBO,UACXL,KACV,IACAM,MAAMC,cAAY3H,QAAC4H,UACxB,CACH,KAAqB,KAAX3B,QAAiBC,WAAWxD,QACnC6C,iBAAiBsC,KAAKC,SAG1BxC,gBAAgBC,kBAChBa,eAAeqB,SACnB,IAEA1C,KAAKgD,iBAAiB,SAAS,SAAAjC,GAE3B,IAAMkC,cAAgBjD,KAAKE,cAAcX,2BACnC2D,iBAAmBlD,KAAKE,cAAcX,4BAEtC4D,qBAAuBF,eAAiBA,cAAcG,SAASrC,EAAEC,QACjEqC,wBAA0BH,kBAAoBA,iBAAiBE,SAASrC,EAAEC,QAEhF,GAAImC,sBAAwBE,wBAAyB,CACjDtC,EAAES,iBAEF,IAAM8B,UAAYnD,qBAAqBN,UAEvCf,aAAayE,YAAYD,UAAWL,cAAchB,QAAQuB,gBACzDpB,MAAK,SAAAkB,WAKF,OAFAG,mBAAiBxI,QAACyI,cAAc1D,KAAM,qBAAsBqD,yBAErDC,SACV,IACAX,MAAMC,cAAY3H,QAAC4H,UACxB,CACJ,IAGA7C,KAAKgD,iBAAiBlE,aAAa6E,OAAOC,uBAAuB,SAAA7C,GAC7D,IAAMkC,cAAgBjD,KAAKE,cAAcX,2BACnC2D,iBAAmBlD,KAAKE,cAAcX,4BAEtC+D,UAAYvC,EAAEC,OAEd6C,gBAAkBC,SAAS9D,KAAKiC,QAAQ8B,oBAAqB,IAC7DC,gBAAkBF,SAASR,UAAUrB,QAAQgC,cAAe,IAC5DC,cAAgBJ,SAASR,UAAUrB,QAAQkC,eAAgB,IAEjEV,mBAAAA,QAAkBW,4BAA4BpE,KAAM,sBAEpD,IAAMqE,iBAAmB,CACrB,CACIpI,IAAK,yBACLqI,UAAW,YACXC,MAAOL,gBAKXA,eAAiBL,iBAEjBZ,cAAcuB,UAAUC,IAAI,UAExBvB,kBACAA,iBAAiBsB,UAAUC,IAAI,WAE5BP,eAAiBF,iBAExBK,iBAAiB5G,KAAK,CAClBxB,IAAK,cACLqI,UAAW,OACXC,MAAOV,kBAGXQ,iBAAiB5G,KAAK,CAClBxB,IAAK,0BACLqI,UAAW,OACXC,MAAOV,kBAIXZ,cAAcuB,UAAUE,OAAO,UAC/BzB,cAAchB,QAAQuB,eAAiBK,gBAEnCX,kBAEAA,iBAAiBsB,UAAUC,IAAI,YAGnCJ,iBAAiB5G,KAAK,CAClBxB,IAAK,UACLqI,UAAW,OACXC,MAAOL,gBAGXG,iBAAiB5G,KAAK,CAClBxB,IAAK,0BACLqI,UAAW,OACXC,MAAOL,gBAIXjB,cAAcuB,UAAUE,OAAO,UAC/BzB,cAAchB,QAAQuB,eAAiBU,cAEnChB,kBACAA,iBAAiBsB,UAAUE,OAAO,WAI1C3F,IAAI4F,YAAYN,kBACfjC,MAAK,SAAAwC,OAAyE,IAAAC,MAAAtI,eAAAqI,MAAA,GAAvEE,8BAA6BD,MAAA,GAAEE,gBAAeF,MAAA,GAAEG,kBAAiBH,MAAA,GACrC7E,KAAKE,cAAcX,yBAC3B0F,UAAYH,8BAEhCC,kBACA9B,cAAcgC,UAAYF,iBAG1BC,mBAAqB9B,mBACrBA,iBAAiBxF,MAAQsH,kBAIhC,IACArC,MAAMC,cAAY3H,QAAC4H,UACxB,IAQN"}