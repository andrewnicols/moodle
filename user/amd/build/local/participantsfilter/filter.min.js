define ("core_user/local/participantsfilter/filter",["exports","core/form-autocomplete","./selectors","core/str"],function(_exports,_formAutocomplete,_selectors,_str){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.default=void 0;_formAutocomplete=_interopRequireDefault(_formAutocomplete);_selectors=_interopRequireDefault(_selectors);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const getOptionsForSelect=select=>{return select.querySelectorAll(":checked")};class _default{constructor(filterType,rootNode,initialValues){this.filterType=filterType;this.rootNode=rootNode;this.addValueSelector(initialValues)}tearDown(){}get placeholder(){return(0,_str.get_string)("placeholdertypeorselect","core_user")}get showSuggestions(){return!0}async addValueSelector(){let initialValues=0<arguments.length&&arguments[0]!==void 0?arguments[0]:[];const filterValueNode=this.getFilterValueNode(),sourceDataNode=this.getSourceDataForFilter();if(!sourceDataNode){return}filterValueNode.innerHTML=sourceDataNode.outerHTML;const dataSource=filterValueNode.querySelector("select");dataSource.id="filter-value-"+dataSource.getAttribute("data-field-name");const filterValueLabel=document.createElement("label");filterValueLabel.setAttribute("for",dataSource.id);filterValueLabel.classList.add("sr-only");filterValueLabel.innerText=dataSource.getAttribute("data-field-title");filterValueNode.appendChild(filterValueLabel);initialValues.forEach(filterValue=>{let selectedOption=dataSource.querySelector("option[value=\"".concat(filterValue,"\"]"));if(selectedOption){selectedOption.selected=!0}else if(!this.showSuggestions){selectedOption=document.createElement("option");selectedOption.value=filterValue;selectedOption.innerHTML=filterValue;selectedOption.selected=!0;dataSource.append(selectedOption)}});_formAutocomplete.default.enhance(dataSource,"1"==dataSource.dataset.allowCustom,null,await this.placeholder,!1,this.showSuggestions,null,!dataSource.multiple,{items:"core_user/local/participantsfilter/autocomplete_selection_items",layout:"core_user/local/participantsfilter/autocomplete_layout",selection:"core_user/local/participantsfilter/autocomplete_selection"})}get filterRoot(){return this.rootNode.querySelector(_selectors.default.filter.byName(this.filterType))}getSourceDataForFilter(){const filterDataNode=this.rootNode.querySelector(_selectors.default.filterset.regions.datasource);return filterDataNode.querySelector(_selectors.default.data.fields.byName(this.filterType))}getFilterValueNode(){return this.filterRoot.querySelector(_selectors.default.filter.regions.values)}get name(){return this.filterType}get jointype(){return parseInt(this.filterRoot.querySelector(_selectors.default.filter.fields.join).value,10)}get rawValues(){const filterValueNode=this.getFilterValueNode(),filterValueSelect=filterValueNode.querySelector("select");return Object.values(getOptionsForSelect(filterValueSelect)).map(option=>option.value)}get values(){return this.rawValues.map(option=>parseInt(option,10))}get filterValue(){return{name:this.name,jointype:this.jointype,values:this.values}}}_exports.default=_default;return _exports.default});
//# sourceMappingURL=filter.min.js.map
