{"version":3,"sources":["../../../src/local/participantsfilter/filter.js"],"names":["getOptionsForSelect","select","querySelectorAll","filterType","rootNode","initialValues","addValueSelector","filterValueNode","getFilterValueNode","innerHTML","getSourceDataForFilter","outerHTML","dataSource","querySelector","id","getAttribute","filterValueLabel","document","createElement","setAttribute","classList","add","innerText","appendChild","forEach","filterValue","selectedOption","selected","showSuggestions","value","append","Autocomplete","dataset","allowCustom","placeholder","multiple","items","layout","selection","enhance","Selectors","filter","byName","filterDataNode","filterset","regions","datasource","data","fields","filterRoot","values","parseInt","join","filterValueSelect","Object","map","option","rawValues","name","jointype"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base Filter class for a filter type in the participants filter UI.\n *\n * @module     core_user/local/participantsfilter/filter\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Autocomplete from 'core/form-autocomplete';\nimport Selectors from './selectors';\nimport {get_string as getString} from 'core/str';\n\n/**\n * Fetch all checked options in the select.\n *\n * This is a poor-man's polyfill for select.selectedOptions, which is not available in IE11.\n *\n * @param {HTMLSelectElement} select\n * @returns {HTMLOptionElement[]} All selected options\n */\nconst getOptionsForSelect = select => {\n    return select.querySelectorAll(':checked');\n};\n\nexport default class {\n\n    /**\n     * Constructor for a new filter.\n     *\n     * @param {String} filterType The type of filter that this relates to\n     * @param {HTMLElement} rootNode The root node for the participants filterset\n     * @param {Array} initialValues The initial values for the selector\n     */\n    constructor(filterType, rootNode, initialValues) {\n        this.filterType = filterType;\n        this.rootNode = rootNode;\n\n        this.addValueSelector(initialValues);\n    }\n\n    /**\n     * Perform any tear-down for this filter type.\n     */\n    tearDown() {\n        // eslint-disable-line no-empty-function\n    }\n\n    /**\n     * Get the placeholder to use when showing the value selector.\n     *\n     * @return {Promise} Resolving to a String\n     */\n    get placeholder() {\n        return getString('placeholdertypeorselect', 'core_user');\n    }\n\n    /**\n     * Whether to show suggestions in the autocomplete.\n     *\n     * @return {Boolean}\n     */\n    get showSuggestions() {\n        return true;\n    }\n\n    /**\n     * Add the value selector to the filter row.\n     *\n     * @param {Array} initialValues\n     */\n    async addValueSelector(initialValues = []) {\n        const filterValueNode = this.getFilterValueNode();\n\n        // Copy the data in place.\n        filterValueNode.innerHTML = this.getSourceDataForFilter().outerHTML;\n\n        const dataSource = filterValueNode.querySelector('select');\n\n        // Set an ID for this filter value element.\n        dataSource.id = 'filter-value-' + dataSource.getAttribute('data-field-name');\n\n        // Create a hidden label for the filter value.\n        const filterValueLabel = document.createElement('label');\n        filterValueLabel.setAttribute('for', dataSource.id);\n        filterValueLabel.classList.add('sr-only');\n        filterValueLabel.innerText = dataSource.getAttribute('data-field-title');\n\n        // Append this label to the filter value container.\n        filterValueNode.appendChild(filterValueLabel);\n\n        // If there are any initial values then attempt to apply them.\n        initialValues.forEach(filterValue => {\n            let selectedOption = dataSource.querySelector(`option[value=\"${filterValue}\"]`);\n            if (selectedOption) {\n                selectedOption.selected = true;\n            } else if (!this.showSuggestions) {\n                selectedOption = document.createElement('option');\n                selectedOption.value = filterValue;\n                selectedOption.innerHTML = filterValue;\n                selectedOption.selected = true;\n\n                dataSource.append(selectedOption);\n            }\n        });\n\n        Autocomplete.enhance(\n            // The source select element.\n            dataSource,\n\n            // Whether to allow 'tags' (custom entries).\n            dataSource.dataset.allowCustom == \"1\",\n\n            // We do not require AJAX at all as standard.\n            null,\n\n            // The string to use as a placeholder.\n            await this.placeholder,\n\n            // Disable case sensitivity on searches.\n            false,\n\n            // Show suggestions.\n            this.showSuggestions,\n\n            // Do not override the 'no suggestions' string.\n            null,\n\n            // Close the suggestions if this is not a multi-select.\n            !dataSource.multiple,\n\n            // Template overrides.\n            {\n                items: 'core_user/local/participantsfilter/autocomplete_selection_items',\n                layout: 'core_user/local/participantsfilter/autocomplete_layout',\n                selection: 'core_user/local/participantsfilter/autocomplete_selection',\n            }\n        );\n    }\n\n    /**\n     * Get the root node for this filter.\n     *\n     * @returns {HTMLElement}\n     */\n    get filterRoot() {\n        return this.rootNode.querySelector(Selectors.filter.byName(this.filterType));\n    }\n\n    /**\n     * Get the possible data for this filter type.\n     *\n     * @returns {Array}\n     */\n    getSourceDataForFilter() {\n        const filterDataNode = this.rootNode.querySelector(Selectors.filterset.regions.datasource);\n\n        return filterDataNode.querySelector(Selectors.data.fields.byName(this.filterType));\n    }\n\n    /**\n     * Get the HTMLElement which contains the value selector.\n     *\n     * @returns {HTMLElement}\n     */\n    getFilterValueNode() {\n        return this.filterRoot.querySelector(Selectors.filter.regions.values);\n    }\n\n    /**\n     * Get the name of this filter.\n     *\n     * @returns {String}\n     */\n    get name() {\n        return this.filterType;\n    }\n\n    /**\n     * Get the type of join specified.\n     *\n     * @returns {Number}\n     */\n    get jointype() {\n        return parseInt(this.filterRoot.querySelector(Selectors.filter.fields.join).value, 10);\n    }\n\n    /**\n     * Get the list of raw values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get rawValues() {\n        const filterValueNode = this.getFilterValueNode();\n        const filterValueSelect = filterValueNode.querySelector('select');\n\n        return Object.values(getOptionsForSelect(filterValueSelect)).map(option => option.value);\n    }\n\n    /**\n     * Get the list of values for this filter type.\n     *\n     * @returns {Array}\n     */\n    get values() {\n        return this.rawValues.map(option => parseInt(option, 10));\n    }\n\n    /**\n     * Get the composed value for this filter.\n     *\n     * @returns {Object}\n     */\n    get filterValue() {\n        return {\n            name: this.name,\n            jointype: this.jointype,\n            values: this.values,\n        };\n    }\n}\n"],"file":"filter.min.js"}