{"version":3,"sources":["../../../src/local/participants/bulkactions.js"],"names":["showAddNote","courseid","users","noteStateNames","stateHelpIcon","length","Promise","resolve","states","key","push","value","label","selected","context","stateNames","innerHTML","titlePromise","Str","get_string","ModalFactory","create","type","types","SAVE_CANCEL","body","Templates","render","title","buttons","save","removeOnClose","then","modal","getRoot","on","ModalEvents","submitAddNote","show","text","find","val","publishstate","notes","map","userid","Repository","createNotesForUsers","noteIds","msg","catch","Notification","exception","showSendMessage","e","trim","removeAttr","preventDefault","submitSendMessage","messages","touserid","sendMessagesToUsers","messageIds"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Bulk actions for lists of participants.\n *\n * @module     core_user/local/participants/bulkactions\n * @package    core_user\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as Repository from 'core_user/repository';\nimport * as Str from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport {add as notifyUser} from 'core/toast';\n\n/**\n * Show the add note popup\n *\n * @param {Number} courseid\n * @param {Number[]} users\n * @param {String[]} noteStateNames\n * @param {HTMLElement} stateHelpIcon\n * @return {Promise}\n */\nexport const showAddNote = (courseid, users, noteStateNames, stateHelpIcon) => {\n    if (!users.length) {\n        // No users were selected.\n        return Promise.resolve();\n    }\n\n    const states = [];\n    for (let key in noteStateNames) {\n        switch (key) {\n            case 'draft':\n                states.push({value: 'personal', label: noteStateNames[key]});\n                break;\n            case 'public':\n                states.push({value: 'course', label: noteStateNames[key], selected: 1});\n                break;\n            case 'site':\n                states.push({value: key, label: noteStateNames[key]});\n                break;\n        }\n    }\n\n    const context = {\n        stateNames: states,\n        stateHelpIcon: stateHelpIcon.innerHTML,\n    };\n\n    let titlePromise = null;\n    if (users.length === 1) {\n        titlePromise = Str.get_string('addbulknotesingle', 'core_notes');\n    } else {\n        titlePromise = Str.get_string('addbulknote', 'core_notes', users.length);\n    }\n\n    return ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        body: Templates.render('core_user/add_bulk_note', context),\n        title: titlePromise,\n        buttons: {\n            save: titlePromise,\n        },\n        removeOnClose: true,\n    })\n    .then(modal => {\n        modal.getRoot().on(ModalEvents.save, () => submitAddNote(courseid, users, modal));\n\n        modal.show();\n\n        return modal;\n    });\n};\n\n/**\n * Add a note to this list of users.\n *\n * @param {Number} courseid\n * @param {Number[]} users\n * @param {Modal} modal\n * @return {Promise}\n */\nconst submitAddNote = (courseid, users, modal) => {\n    const text = modal.getRoot().find('form textarea').val();\n    const publishstate = modal.getRoot().find('form select').val();\n\n    const notes = users.map(userid => {\n        return {\n            userid,\n            text,\n            courseid,\n            publishstate,\n        };\n    });\n\n    return Repository.createNotesForUsers(notes)\n    .then(noteIds => {\n        if (noteIds.length === 1) {\n            return Str.get_string('addbulknotedonesingle', 'core_notes');\n        } else {\n            return Str.get_string('addbulknotedone', 'core_notes', noteIds.length);\n        }\n    })\n    .then(msg => notifyUser(msg))\n    .catch(Notification.exception);\n};\n\n/**\n * Show the send message popup.\n *\n * @param {Number[]} users\n * @return {Promise}\n */\nexport const showSendMessage = users => {\n    if (!users.length) {\n        // Nothing to do.\n        return Promise.resolve();\n    }\n\n    let titlePromise;\n    if (users.length === 1) {\n        titlePromise = Str.get_string('sendbulkmessagesingle', 'core_message');\n    } else {\n        titlePromise = Str.get_string('sendbulkmessage', 'core_message', users.length);\n    }\n\n    return ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        body: Templates.render('core_user/send_bulk_message', {}),\n        title: titlePromise,\n        buttons: {\n            save: titlePromise,\n        },\n        removeOnClose: true,\n    })\n    .then(modal => {\n        modal.getRoot().on(ModalEvents.save, (e) => {\n            const text = modal.getRoot().find('form textarea').val();\n            if (text.trim() === '') {\n                modal.getRoot().find('[data-role=\"messagetextrequired\"]').removeAttr('hidden');\n                e.preventDefault();\n                return;\n            }\n\n            submitSendMessage(modal, users, text);\n        });\n\n        modal.show();\n\n        return modal;\n    });\n};\n\n/**\n * Send a message to these users.\n *\n * @param {Modal} modal\n * @param {Number[]} users\n * @param {String} text\n * @return {Promise}\n */\nconst submitSendMessage = (modal, users, text) => {\n    const messages = users.map(touserid => {\n        return {\n            touserid,\n            text,\n        };\n    });\n\n    return Repository.sendMessagesToUsers(messages)\n    .then(messageIds => {\n        if (messageIds.length == 1) {\n            return Str.get_string('sendbulkmessagesentsingle', 'core_message');\n        } else {\n            return Str.get_string('sendbulkmessagesent', 'core_message', messageIds.length);\n        }\n    })\n    .then(msg => notifyUser(msg))\n    .catch(Notification.exception);\n};\n"],"file":"bulkactions.min.js"}