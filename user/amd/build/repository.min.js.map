{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle AJAX interactions.\n *\n * @module     core_user/repository\n * @copyright  2020 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport fetch from 'core/fetch';\n\n/**\n * Get single user preference\n *\n * @param {String} name Name of the preference\n * @param {Number} userid User ID (defaults to current user)\n * @return {Promise}\n */\nexport const getUserPreference = (name, userid = 0) => getUserPreferences(name, userid)\n    .then((response) => response[name]);\n\n/**\n * Get multiple user preferences\n *\n * @param {String|null} name Name of the preference (omit if you want to retrieve all)\n * @param {Number} userid User ID (defaults to current user)\n * @return {Promise<object<string, string>>}\n */\nexport const getUserPreferences = (name = null, userid = 0) => {\n    const endpoint = ['preferences'];\n    if (name) {\n        endpoint.push(name);\n    }\n\n    const params = {};\n    if (userid) {\n        params.userid = userid;\n    }\n\n    return fetch(\n        'core_user',\n        endpoint.join('/'),\n        params,\n    );\n};\n\n/**\n * Set single user preference\n *\n * @param {String} name Name of the preference\n * @param {String|null} value Value of the preference (omit if you want to remove the current value)\n * @param {Number} userid User ID (defaults to current user)\n * @return {Promise}\n */\nexport const setUserPreference = async(name, value = null, userid = 0) => {\n    const result = await fetch(\n        'core_user',\n        `preferences/${name}`,\n        {value, userid},\n        'POST',\n    );\n\n    return result[name];\n};\n\n/**\n * Set multiple user preferences\n *\n * @param {Object[]} preferences Array of preferences containing name/value/userid attributes\n * @return {Promise}\n */\nexport const setUserPreferences = (preferences) => fetch(\n    'core_user',\n    'preferences',\n    {\n        preferences,\n    },\n    'POST',\n);\n\n/**\n * Unenrol the user with the specified user enrolmentid ID.\n *\n * @param {Number} userEnrolmentId\n * @return {Promise}\n */\nexport const unenrolUser = userEnrolmentId => {\n    return fetchMany([{\n        methodname: 'core_enrol_unenrol_user_enrolment',\n        args: {\n            ueid: userEnrolmentId,\n        },\n    }])[0];\n};\n\n/**\n * Submit the user enrolment form with the specified form data.\n *\n * @param {String} formdata\n * @return {Promise}\n */\nexport const submitUserEnrolmentForm = formdata => {\n    return fetchMany([{\n        methodname: 'core_enrol_submit_user_enrolment_form',\n        args: {\n            formdata,\n        },\n    }])[0];\n};\n\nexport const createNotesForUsers = notes => {\n    return fetchMany([{\n        methodname: 'core_notes_create_notes',\n        args: {\n            notes\n        }\n    }])[0];\n};\n\nexport const sendMessagesToUsers = messages => {\n    return fetchMany([{\n        methodname: 'core_message_send_instant_messages',\n        args: {messages}\n    }])[0];\n};\n"],"names":["name","userid","getUserPreferences","then","response","endpoint","push","params","join","async","value","result","preferences","userEnrolmentId","methodname","args","ueid","formdata","notes","messages"],"mappings":";;;;;;;mXAiCiC,SAACA,UAAMC,8DAAS,SAAMC,mBAAmBF,KAAMC,QAC3EE,MAAMC,UAAaA,SAASJ,eASpBE,mBAAqB,eAACF,4DAAO,KAAMC,8DAAS,QAC/CI,SAAW,CAAC,eACdL,MACAK,SAASC,KAAKN,YAGZO,OAAS,UACXN,SACAM,OAAON,OAASA,SAGb,kBACH,YACAI,SAASG,KAAK,KACdD,mFAYyBE,eAAMT,UAAMU,6DAAQ,KAAMT,8DAAS,QAC1DU,aAAe,kBACjB,kCACeX,MACf,CAACU,MAAAA,MAAOT,OAAAA,QACR,eAGGU,OAAOX,mCASiBY,cAAgB,kBAC/C,YACA,cACA,CACIA,YAAAA,aAEJ,6BASuBC,kBAChB,cAAU,CAAC,CACdC,WAAY,oCACZC,KAAM,CACFC,KAAMH,oBAEV,oCAS+BI,WAC5B,cAAU,CAAC,CACdH,WAAY,wCACZC,KAAM,CACFE,SAAAA,aAEJ,gCAG2BC,QACxB,cAAU,CAAC,CACdJ,WAAY,0BACZC,KAAM,CACFG,MAAAA,UAEJ,gCAG2BC,WACxB,cAAU,CAAC,CACdL,WAAY,qCACZC,KAAM,CAACI,SAAAA,aACP"}