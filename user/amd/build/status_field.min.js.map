{"version":3,"sources":["../src/status_field.js"],"names":["Selectors","editEnrolment","showDetails","unenrol","statusElement","getDynamicTableFromLink","link","closest","DynamicTableSelectors","main","region","getStatusContainer","getUserEnrolmentIdFromLink","getAttribute","registerEventListeners","contextId","uniqueId","getBodyFunction","userEnrolmentId","formData","getBody","document","addEventListener","e","tableRoot","target","fromRegionId","editLink","preventDefault","showEditDialogue","unenrolLink","showUnenrolConfirmation","showDetailsLink","showStatusDetails","container","ModalFactory","create","large","title","Str","get_string","dataset","fullname","type","types","SAVE_CANCEL","body","then","modal","getRoot","on","ModalEvents","save","submitEditFormAjax","hidden","destroy","show","catch","Notification","exception","submitUnenrolFormAjax","ueid","stringData","key","component","param","user","course","coursename","enrolinstancename","Promise","all","get_strings","strings","setTitle","setSaveButtonText","setBody","context","editenrollink","statusclass","querySelector","editEnrolLink","outerHTML","CANCEL","Templates","render","hide","click","clickedLink","userData","form","find","Repository","submitUserEnrolmentForm","serialize","data","result","DynamicTable","refreshTableContent","notificationString","JSON","stringify","args","unenrolUser","alert","errors","message","formdata","Fragment","loadFragment","contextid","uniqueid"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * AMD module for the user enrolment status field in the course participants page.\n *\n * @module     core_user/status_field\n * @copyright  2017 Jun Pataleta\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as DynamicTable from 'core_table/dynamic';\nimport * as Repository from './repository';\nimport * as Str from 'core/str';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport Fragment from 'core/fragment';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport {add as notifyUser} from 'core/toast';\n\nconst Selectors = {\n    editEnrolment: '[data-action=\"editenrolment\"]',\n    showDetails: '[data-action=\"showdetails\"]',\n    unenrol: '[data-action=\"unenrol\"]',\n    statusElement: '[data-status]',\n};\n\n/**\n * Get the dynamic table from the specified link.\n *\n * @param {HTMLElement} link\n * @returns {HTMLElement}\n */\nconst getDynamicTableFromLink = link => link.closest(DynamicTableSelectors.main.region);\n\n/**\n * Get the status container from the specified link.\n *\n * @param {HTMLElement} link\n * @returns {HTMLElement}\n */\nconst getStatusContainer = link => link.closest(Selectors.statusElement);\n\n/**\n * Get user enrolment id from the specified link\n *\n * @param {HTMLElement} link\n * @returns {Number}\n */\nconst getUserEnrolmentIdFromLink = link => link.getAttribute('rel');\n\n/**\n * Register all event listeners for the status fields.\n *\n * @param {Number} contextId\n * @param {Number} uniqueId\n */\nconst registerEventListeners = (contextId, uniqueId) => {\n    const getBodyFunction = (userEnrolmentId, formData) => getBody(contextId, userEnrolmentId, formData);\n\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(DynamicTableSelectors.main.fromRegionId(uniqueId));\n        if (!tableRoot) {\n            return;\n        }\n\n        const editLink = e.target.closest(Selectors.editEnrolment);\n        if (editLink) {\n            e.preventDefault();\n\n            showEditDialogue(editLink, getBodyFunction);\n        }\n\n        const unenrolLink = e.target.closest(Selectors.unenrol);\n        if (unenrolLink) {\n            e.preventDefault();\n\n            showUnenrolConfirmation(unenrolLink);\n        }\n\n        const showDetailsLink = e.target.closest(Selectors.showDetails);\n        if (showDetailsLink) {\n            e.preventDefault();\n\n            showStatusDetails(showDetailsLink);\n        }\n    });\n};\n\n/**\n * Show the edit dialogue.\n *\n * @param {HTMLElement} link\n * @param {Function} getBody Function to get the body for the specified user enrolment\n */\nconst showEditDialogue = (link, getBody) => {\n    const container = getStatusContainer(link);\n    const userEnrolmentId = getUserEnrolmentIdFromLink(link);\n\n    ModalFactory.create({\n        large: true,\n        title: Str.get_string('edituserenrolment', 'enrol', container.dataset.fullname),\n        type: ModalFactory.types.SAVE_CANCEL,\n        body: getBody(userEnrolmentId)\n    })\n    .then(modal => {\n        // Handle save event.\n        modal.getRoot().on(ModalEvents.save, e => {\n            // Don't close the modal yet.\n            e.preventDefault();\n\n            // Submit form data.\n            submitEditFormAjax(link, getBody, modal, userEnrolmentId, container.dataset);\n        });\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Show the modal.\n        modal.show();\n\n        return modal;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Show and handle the unenrolment confirmation dialogue.\n *\n * @param {HTMLElement} link\n */\nconst showUnenrolConfirmation = link => {\n    const container = getStatusContainer(link);\n    const userEnrolmentId = getUserEnrolmentIdFromLink(link);\n\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n    })\n    .then(modal => {\n        // Handle confirm event.\n        modal.getRoot().on(ModalEvents.save, e => {\n            // Don't close the modal yet.\n            e.preventDefault();\n\n            // Submit data.\n            submitUnenrolFormAjax(\n                link,\n                modal,\n                {\n                    ueid: userEnrolmentId,\n                },\n                container.dataset\n            );\n        });\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => {\n            // Destroy when hidden.\n            modal.destroy();\n        });\n\n        // Display the delete confirmation modal.\n        modal.show();\n\n        const stringData = [\n            {\n                key: 'unenrol',\n                component: 'enrol',\n            },\n            {\n                key: 'unenrolconfirm',\n                component: 'enrol',\n                param: {\n                    user: container.dataset.fullname,\n                    course: container.dataset.coursename,\n                    enrolinstancename: container.dataset.enrolinstancename,\n                }\n            }\n        ];\n\n        return Promise.all([Str.get_strings(stringData), modal]);\n    })\n    .then(([strings, modal]) => {\n        modal.setTitle(strings[0]);\n        modal.setSaveButtonText(strings[0]);\n        modal.setBody(strings[1]);\n\n        return modal;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Show the user details dialogue.\n *\n * @param {HTMLElement} link\n */\nconst showStatusDetails = link => {\n    const container = getStatusContainer(link);\n\n    const context = {\n        editenrollink: '',\n        statusclass: container.querySelector('span.badge').getAttribute('class'),\n        ...container.dataset,\n    };\n\n    // Find the edit enrolment link.\n    const editEnrolLink = container.querySelector(Selectors.editEnrolment);\n    if (editEnrolLink) {\n        // If there's an edit enrolment link for this user, clone it into the context for the modal.\n        context.editenrollink = editEnrolLink.outerHTML;\n    }\n\n    ModalFactory.create({\n        large: true,\n        type: ModalFactory.types.CANCEL,\n        title: Str.get_string('enroldetails', 'enrol'),\n        body: Templates.render('core_user/status_details', context),\n    })\n    .then(modal => {\n        if (editEnrolLink) {\n            modal.getRoot().on('click', Selectors.editEnrolment, e => {\n                e.preventDefault();\n                modal.hide();\n\n                // Trigger click event for the edit enrolment link to show the edit enrolment modal.\n                editEnrolLink.click();\n            });\n        }\n\n        modal.show();\n\n        // Handle hidden event.\n        modal.getRoot().on(ModalEvents.hidden, () => modal.destroy());\n\n        return modal;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Submit the edit dialogue.\n *\n * @param {HTMLElement} clickedLink\n * @param {Function} getBody\n * @param {Object} modal\n * @param {Number} userEnrolmentId\n * @param {Object} userData\n */\nconst submitEditFormAjax = (clickedLink, getBody, modal, userEnrolmentId, userData) => {\n    const form = modal.getRoot().find('form');\n\n    Repository.submitUserEnrolmentForm(form.serialize())\n    .then(data => {\n        if (!data.result) {\n            throw data.result;\n        }\n\n        // Dismiss the modal.\n        modal.hide();\n        modal.destroy();\n\n        return data;\n    })\n    .then(() => {\n        DynamicTable.refreshTableContent(getDynamicTableFromLink(clickedLink))\n        .catch(Notification.exception);\n\n        return Str.get_string('enrolmentupdatedforuser', 'core_enrol', userData);\n    })\n    .then(notificationString => {\n        notifyUser(notificationString);\n\n        return;\n    })\n    .catch(() => {\n        modal.setBody(getBody(userEnrolmentId, JSON.stringify(form.serialize())));\n\n        return modal;\n    });\n};\n\n/**\n * Submit the unenrolment form.\n *\n * @param {HTMLElement} clickedLink\n * @param {Object} modal\n * @param {Object} args\n * @param {Object} userData\n */\nconst submitUnenrolFormAjax = (clickedLink, modal, args, userData) => {\n    Repository.unenrolUser(args.ueid)\n    .then(data => {\n        if (!data.result) {\n            // Display an alert containing the error message\n            Notification.alert(data.errors[0].key, data.errors[0].message);\n\n            return data;\n        }\n\n        // Dismiss the modal.\n        modal.hide();\n        modal.destroy();\n\n        return data;\n    })\n    .then(() => {\n        DynamicTable.refreshTableContent(getDynamicTableFromLink(clickedLink))\n        .catch(Notification.exception);\n\n        return Str.get_string('unenrolleduser', 'core_enrol', userData);\n    })\n    .then(notificationString => {\n        notifyUser(notificationString);\n\n        return;\n    })\n    .catch(Notification.exception);\n};\n\n/**\n * Get the body fragment.\n *\n * @param {Number} contextId\n * @param {Number} ueid The user enrolment id\n * @param {Object} formdata\n * @returns {Promise}\n */\nconst getBody = (contextId, ueid, formdata = null) => Fragment.loadFragment(\n    'enrol',\n    'user_enrolment_form',\n    contextId,\n    {\n        ueid,\n        formdata,\n    }\n);\n\n/**\n * Initialise the statu field handler.\n *\n * @param {object} param\n * @param {Number} param.contextid\n * @param {Number} param.uniqueid\n */\nexport const init = ({contextid, uniqueid}) => {\n    registerEventListeners(contextid, uniqueid);\n};\n"],"file":"status_field.min.js"}