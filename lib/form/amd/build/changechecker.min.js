define ("core_form/changechecker",["exports","core_editor/events","core/str"],function(_exports,_events,_str){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.watchFormById=_exports.watchForm=_exports.unWatchForm=_exports.startWatching=_exports.resetFormDirtyStateById=_exports.resetFormDirtyState=_exports.resetAllFormDirtyStates=_exports.markFormSubmitted=_exports.markFormChangedFromNode=_exports.markFormAsDirtyById=_exports.markFormAsDirty=_exports.markAllFormsSubmitted=_exports.markAllFormsAsDirty=_exports.isAnyWatchedFormDirty=_exports.disableAllChecks=void 0;let warningString,watchedForms=[],formChangeCheckerDisabled=!1;const getFormFromChild=formChild=>formChild.closest("form"),watchForm=formNode=>{formNode=getFormFromChild(formNode);if(!formNode){return}if(isWatchingForm(formNode)){return}watchedForms.push(formNode)};_exports.watchForm=watchForm;const unWatchForm=formNode=>{watchedForms=watchedForms.filter(watchedForm=>!!watchedForm.contains(formNode))};_exports.unWatchForm=unWatchForm;const resetAllFormDirtyStates=()=>{watchedForms.forEach(watchedForm=>{watchedForm.dataset.formSubmitted="false";watchedForm.dataset.formDirty="false"})};_exports.resetAllFormDirtyStates=resetAllFormDirtyStates;const resetFormDirtyState=formNode=>{formNode=getFormFromChild(formNode);if(!formNode){return}formNode.dataset.formSubmitted="false";formNode.dataset.formDirty="false"};_exports.resetFormDirtyState=resetFormDirtyState;const markAllFormsAsDirty=()=>{watchedForms.forEach(watchedForm=>{watchedForm.dataset.formDirty="true"})};_exports.markAllFormsAsDirty=markAllFormsAsDirty;const markFormAsDirty=formNode=>{formNode=getFormFromChild(formNode);if(!formNode){return}formNode.dataset.formDirty="true"};_exports.markFormAsDirty=markFormAsDirty;const disableAllChecks=()=>{formChangeCheckerDisabled=!0};_exports.disableAllChecks=disableAllChecks;const isAnyWatchedFormDirty=()=>{if(formChangeCheckerDisabled){return!1}const hasSubmittedForm=watchedForms.some(watchedForm=>"true"===watchedForm.dataset.formSubmitted);if(hasSubmittedForm){return!1}const hasDirtyForm=watchedForms.some(watchedForm=>{if(!watchedForm.isConnected){return!1}if("true"===watchedForm.dataset.formDirty){return!0}if(document.activeElement&&document.activeElement.dataset.propertyIsEnumerable("initialValue")){const isActiveElementWatched=isWatchingForm(document.activeElement),hasValueChanged=document.activeElement.dataset.initialValue!==document.activeElement.value;if(isActiveElementWatched&&hasValueChanged){return!0}}return!1});if(hasDirtyForm){return!0}if("undefined"!=typeof window.tinyMCE){if(window.tinyMCE.editors.some(editor=>editor.isDirty())){return!0}}return!1};_exports.isAnyWatchedFormDirty=isAnyWatchedFormDirty;const getFormForNode=target=>watchedForms.find(watchedForm=>watchedForm.contains(target)),isWatchingForm=target=>watchedForms.some(watchedForm=>watchedForm.contains(target)),shouldIgnoreChangesForNode=target=>!!target.closest(".ignoredirty"),markFormChangedFromNode=changedNode=>{if(changedNode.dataset.formChangeCheckerOverride){disableAllChecks();return}if(!isWatchingForm(changedNode)){return}if(shouldIgnoreChangesForNode(changedNode)){return}const formNode=getFormForNode(changedNode);formNode.dataset.formDirty="true"};_exports.markFormChangedFromNode=markFormChangedFromNode;const markFormSubmitted=formNode=>{formNode=getFormFromChild(formNode);if(!formNode){return}formNode.dataset.formSubmitted="true"};_exports.markFormSubmitted=markFormSubmitted;const markAllFormsSubmitted=()=>{watchedForms.forEach(watchedForm=>markFormSubmitted(watchedForm))};_exports.markAllFormsSubmitted=markAllFormsSubmitted;const beforeUnloadHandler=e=>{let warnBeforeUnload=isAnyWatchedFormDirty()&&!M.cfg.behatsiterunning;if(warnBeforeUnload){e.preventDefault();e.returnValue=warningString;return e.returnValue}window.removeEventListener("beforeunload",beforeUnloadHandler);return null},startWatching=()=>{if(!1){return}addLegacyFunctions();document.addEventListener("change",e=>{if(!isWatchingForm(e.target)){return}markFormChangedFromNode(e.target)});document.addEventListener("click",e=>{const ignoredButton=e.target.closest("[data-formchangechecker-ignore-submit]");if(!ignoredButton){return}const ownerForm=getFormFromChild(e.target);if(ownerForm){ownerForm.dataset.ignoreSubmission="true"}});document.addEventListener("focusin",e=>{if(e.target.matches("input, textarea, select")){if(e.target.dataset.propertyIsEnumerable("initialValue")){return}e.target.dataset.initialValue=e.target.value}});document.addEventListener("submit",e=>{const formNode=getFormFromChild(e.target);if(!formNode){return}if(formNode.dataset.ignoreSubmission){formNode.dataset.ignoreSubmission="false";return}markFormSubmitted(formNode)});document.addEventListener(_events.eventTypes.editorContentRestored,e=>{if(e.target!=document){resetFormDirtyState(e.target)}else{resetAllFormDirtyStates()}});(0,_str.get_string)("changesmadereallygoaway","moodle").then(changesMadeString=>{warningString=changesMadeString}).catch();window.addEventListener("beforeunload",beforeUnloadHandler)};_exports.startWatching=startWatching;const addLegacyFunctions=()=>{const getLoggedLegacyFallback=(oldFunctionName,newFunctionName,newFunction)=>function(){window.console.warn("The moodle-core-formchangechecker has been deprecated and replaced with core_form/changechecker. "+"The ".concat(oldFunctionName," function has been replaced with ").concat(newFunctionName,"."));newFunction(...arguments)};window.M.core_formchangechecker={init:getLoggedLegacyFallback("init","watchFormById",watchFormById),reset_form_dirty_state:getLoggedLegacyFallback("reset_form_dirty_state","resetFormDirtyState",resetAllFormDirtyStates),set_form_changed:getLoggedLegacyFallback("set_form_changed","markFormAsDirty",markAllFormsAsDirty),set_form_submitted:getLoggedLegacyFallback("set_form_submitted","markFormSubmitted",markAllFormsSubmitted)}},watchFormById=formId=>{watchForm(document.getElementById(formId))};_exports.watchFormById=watchFormById;_exports.resetFormDirtyStateById=formId=>{resetFormDirtyState(document.getElementById(formId))};_exports.markFormAsDirtyById=formId=>{markFormAsDirty(document.getElementById(formId))};startWatching()});
//# sourceMappingURL=changechecker.min.js.map
