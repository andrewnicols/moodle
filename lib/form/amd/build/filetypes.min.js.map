{"version":3,"sources":["../src/filetypes.js"],"names":["define","$","Log","Str","ModalFactory","ModalEvents","Ajax","Templates","Tree","FileTypes","elementId","elementLabel","onlyTypes","allowAll","inputField","wrapperBrowserTrigger","wrapperDescriptions","length","error","prepareBrowserTrigger","then","prepareBrowserModal","bind","prepareBrowserTree","prototype","render","html","browserTrigger","find","create","type","types","SAVE_CANCEL","title","modal","browserModal","getRoot","on","hidden","focus","save","saveBrowserModal","e","preventDefault","is","bodyContent","loadBrowserModalBody","browserTree","getBody","handleKeyDown","item","keyCode","keys","enter","space","stopPropagation","toggleCheckbox","attr","call","hideOrShowItemsDependingOnAllowAll","first","currentTarget","checkbox","key","prop","show","setBody","when","args","onlytypes","join","allowall","current","val","methodname","browserData","elementid","groups","allcheckbox","updateDescriptions","newvalue","each","push","filter","x","i","a","indexOf","descriptions","forEach","description","text","trim","extensions","templatedata","hasdescriptions","others","hide","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module allows to enhance the form elements MoodleQuickForm_filetypes\n *\n * @module     core_form/filetypes\n * @copyright  2017 David Mudrak <david@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.3\n */\ndefine(['jquery', 'core/log', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/ajax',\n        'core/templates', 'core/tree'],\n    function($, Log, Str, ModalFactory, ModalEvents, Ajax, Templates, Tree) {\n\n    \"use strict\";\n\n    /**\n     * Constructor of the FileTypes instances.\n     *\n     * @constructor\n     * @param {String} elementId The id of the form element to enhance\n     * @param {String} elementLabel The label of the form element used as the modal selector title\n     * @param {String} onlyTypes Limit the list of offered types to this\n     * @param {Bool} allowAll Allow presence of the \"All file types\" item\n     */\n    var FileTypes = function(elementId, elementLabel, onlyTypes, allowAll) {\n\n        this.elementId = elementId;\n        this.elementLabel = elementLabel;\n        this.onlyTypes = onlyTypes;\n        this.allowAll = allowAll;\n\n        this.inputField = $('#' + elementId);\n        this.wrapperBrowserTrigger = $('[data-filetypesbrowser=\"' + elementId + '\"]');\n        this.wrapperDescriptions = $('[data-filetypesdescriptions=\"' + elementId + '\"]');\n\n        if (!this.wrapperBrowserTrigger.length) {\n            // This is a valid case. Most probably the element is frozen and\n            // the filetypes browser should not be available.\n            return;\n        }\n\n        if (!this.inputField.length || !this.wrapperDescriptions.length) {\n            Log.error('core_form/filetypes: Unexpected DOM structure, unable to enhance filetypes field ' + elementId);\n            return;\n        }\n\n        this.prepareBrowserTrigger()\n            .then(function() {\n                return this.prepareBrowserModal();\n            }.bind(this))\n\n            .then(function() {\n                return this.prepareBrowserTree();\n            }.bind(this));\n    };\n\n    /**\n     * Create and set the browser trigger widget (this.browserTrigger).\n     *\n     * @method prepareBrowserTrigger\n     * @returns {Promise}\n     */\n    FileTypes.prototype.prepareBrowserTrigger = function() {\n        return Templates.render('core_form/filetypes-trigger', {})\n            .then(function(html) {\n                this.wrapperBrowserTrigger.html(html);\n                this.browserTrigger = this.wrapperBrowserTrigger.find('[data-filetypeswidget=\"browsertrigger\"]');\n            }.bind(this));\n    };\n\n    /**\n     * Create and set the modal for displaying the browser (this.browserModal).\n     *\n     * @method prepareBrowserModal\n     * @returns {Promise}\n     */\n    FileTypes.prototype.prepareBrowserModal = function() {\n        return ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: this.elementLabel\n\n        }).then(function(modal) {\n            this.browserModal = modal;\n        }.bind(this))\n\n        .then(function() {\n            // Because we have custom conditional modal trigger, we need to\n            // handle the focus after closing ourselves, too.\n            this.browserModal.getRoot().on(ModalEvents.hidden, function() {\n                this.browserTrigger.focus();\n            }.bind(this));\n\n            this.browserModal.getRoot().on(ModalEvents.save, function() {\n                this.saveBrowserModal();\n            }.bind(this));\n        }.bind(this));\n\n    };\n\n    /**\n     * Create and set the tree in the browser modal's body.\n     *\n     * @method prepareBrowserTree\n     * @returns {Promise}\n     */\n    FileTypes.prototype.prepareBrowserTree = function() {\n\n        this.browserTrigger.on('click', function(e) {\n            e.preventDefault();\n\n            // We want to display the browser modal only when the associated input\n            // field is not frozen (disabled).\n            if (this.inputField.is('[disabled]')) {\n                return;\n            }\n\n            var bodyContent = this.loadBrowserModalBody();\n\n            bodyContent.then(function() {\n\n                // Turn the list of groups and extensions into the tree.\n                this.browserTree = new Tree(this.browserModal.getBody());\n\n                // Override the behaviour of the Enter and Space keys to toggle our checkbox,\n                // rather than toggle the tree node expansion status.\n                this.browserTree.handleKeyDown = function(item, e) {\n                    if (e.keyCode == this.browserTree.keys.enter || e.keyCode == this.browserTree.keys.space) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        this.toggleCheckbox(item.attr('data-filetypesbrowserkey'));\n                    } else {\n                        Tree.prototype.handleKeyDown.call(this.browserTree, item, e);\n                    }\n                }.bind(this);\n\n                if (this.allowAll) {\n                    // Hide all other items if \"All file types\" is enabled.\n                    this.hideOrShowItemsDependingOnAllowAll(this.browserModal.getRoot()\n                        .find('input[type=\"checkbox\"][data-filetypesbrowserkey=\"*\"]').first());\n                    // And do the same whenever we click that checkbox.\n                    this.browserModal.getRoot().on('change', 'input[type=\"checkbox\"][data-filetypesbrowserkey=\"*\"]', function(e) {\n                        this.hideOrShowItemsDependingOnAllowAll($(e.currentTarget));\n                    }.bind(this));\n                }\n\n                // Synchronize checked status if the file extension is present in multiple groups.\n                this.browserModal.getRoot().on('change', 'input[type=\"checkbox\"][data-filetypesbrowserkey]', function(e) {\n                    var checkbox = $(e.currentTarget);\n                    var key = checkbox.attr('data-filetypesbrowserkey');\n                    this.browserModal.getRoot().find('input[type=\"checkbox\"][data-filetypesbrowserkey=\"' + key + '\"]')\n                        .prop('checked', checkbox.prop('checked'));\n                }.bind(this));\n\n            }.bind(this))\n\n            .then(function() {\n                this.browserModal.show();\n            }.bind(this));\n\n            this.browserModal.setBody(bodyContent);\n\n        }.bind(this));\n\n        // Return a resolved promise.\n        return $.when();\n    };\n\n    /**\n     * Load the browser modal body contents.\n     *\n     * @returns {Promise}\n     */\n    FileTypes.prototype.loadBrowserModalBody = function() {\n\n        var args = {\n            onlytypes: this.onlyTypes.join(),\n            allowall: this.allowAll,\n            current: this.inputField.val()\n        };\n\n        return Ajax.call([{\n            methodname: 'core_form_get_filetypes_browser_data',\n            args: args\n\n        }])[0].then(function(browserData) {\n            return Templates.render('core_form/filetypes-browser', {\n                elementid: this.elementId,\n                groups: browserData.groups\n            });\n        }.bind(this));\n    };\n\n    /**\n     * Change the checked status of the given file type (group or extension).\n     *\n     * @method toggleCheckbox\n     * @param {String} key\n     */\n    FileTypes.prototype.toggleCheckbox = function(key) {\n\n        var checkbox = this.browserModal.getRoot().find('input[type=\"checkbox\"][data-filetypesbrowserkey=\"' + key + '\"]').first();\n\n        checkbox.prop('checked', !checkbox.prop('checked'));\n    };\n\n    /**\n     * Update the associated input field with selected file types.\n     *\n     * @method saveBrowserModal\n     */\n    FileTypes.prototype.saveBrowserModal = function() {\n\n        // Check the \"All file types\" first.\n        if (this.allowAll) {\n            var allcheckbox = this.browserModal.getRoot().find('input[type=\"checkbox\"][data-filetypesbrowserkey=\"*\"]');\n            if (allcheckbox.length && allcheckbox.prop('checked')) {\n                this.inputField.val('*');\n                this.updateDescriptions(['*']);\n                return;\n            }\n        }\n\n        // Iterate over all checked boxes and populate the list.\n        var newvalue = [];\n\n        this.browserModal.getRoot().find('input[type=\"checkbox\"]').each(/** @this represents the checkbox */ function() {\n            var checkbox = $(this);\n            var key = checkbox.attr('data-filetypesbrowserkey');\n\n            if (checkbox.prop('checked')) {\n                newvalue.push(key);\n            }\n        });\n\n        // Remove duplicates (e.g. file types present in multiple groups).\n        newvalue = newvalue.filter(function(x, i, a) {\n            return a.indexOf(x) == i;\n        });\n\n        this.inputField.val(newvalue.join(' '));\n        this.updateDescriptions(newvalue);\n    };\n\n    /**\n     * Describe the selected filetypes in the form when saving the browser.\n     *\n     * @param {Array} keys List of keys to describe\n     * @returns {Promise}\n     */\n    FileTypes.prototype.updateDescriptions = function(keys) {\n\n        var descriptions = [];\n\n        keys.forEach(function(key) {\n            descriptions.push({\n                description: this.browserModal.getRoot().find('[data-filetypesname=\"' + key + '\"]').first().text().trim(),\n                extensions: this.browserModal.getRoot().find('[data-filetypesextensions=\"' + key + '\"]').first().text().trim()\n            });\n        }.bind(this));\n\n        var templatedata = {\n            hasdescriptions: (descriptions.length > 0),\n            descriptions: descriptions\n        };\n\n        return Templates.render('core_form/filetypes-descriptions', templatedata)\n            .then(function(html) {\n                this.wrapperDescriptions.html(html);\n            }.bind(this));\n    };\n\n    /**\n     * If \"All file types\" is checked, all other browser items are made hidden, and vice versa.\n     *\n     * @param {jQuery} allcheckbox The \"All file types\" checkbox.\n     */\n    FileTypes.prototype.hideOrShowItemsDependingOnAllowAll = function(allcheckbox) {\n        var others = this.browserModal.getRoot().find('[role=\"treeitem\"][data-filetypesbrowserkey!=\"*\"]');\n        if (allcheckbox.prop('checked')) {\n            others.hide();\n        } else {\n            others.show();\n        }\n    };\n\n    return {\n        init: function(elementId, elementLabel, onlyTypes, allowAll) {\n            new FileTypes(elementId, elementLabel, onlyTypes, allowAll);\n        }\n    };\n});\n"],"file":"filetypes.min.js"}