{"version":3,"sources":["../src/modalform.js"],"names":["constructor","config","FORM_SUBMITTED","FORM_CANCELLED","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","NOSUBMIT_BUTTON_PRESSED","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","LOADED","modal","modalConfig","removeOnClose","type","ModalFactory","types","SAVE_CANCEL","large","args","futureListeners","show","pendingPromise","Pending","create","then","formParams","URLSearchParams","Object","entries","bodyContent","getBody","toString","setBodyContent","catch","Notification","exception","getRoot","on","ModalEvents","hidden","notifyResetFormChanges","destroy","returnFocus","focus","getModal","addClass","e","preventDefault","event","trigger","events","target","defaultPrevented","processNoSubmitButton","submitFormAjax","saveButtonText","setSaveButtonText","saveButtonClasses","setSaveButtonClasses","save","find","submit","cancel","forEach","addEventListener","resolve","eventName","detail","cancelable","CustomEvent","dispatchEvent","push","formDataString","params","formdata","form","formClass","Ajax","call","methodname","response","html","js","Fragment","processCollectedJavascript","javascript","onSubmitError","getFormNode","FormEvents","notifyFormSubmittedByJavascript","FormChangeChecker","resetFormDirtyState","button","formData","serialize","encodeURIComponent","getAttribute","validateElements","invalid","length","first","disableButtons","getFooter","attr","enableButtons","removeAttr","submitted","promise","Promise","data","JSON","parse","hide","value","Error","removeClass"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display a form in a modal dialogue\n *\n * Example:\n *    import ModalForm from 'core_form/modalform';\n *\n *    const modalForm = new ModalForm({\n *        formClass: 'pluginname\\\\form\\\\formname',\n *        modalConfig: {title: 'Here comes the title'},\n *        args: {categoryid: 123},\n *        returnFocus: e.target,\n *    });\n *    modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, (c) => window.console.log(c.detail));\n *    modalForm.show();\n *\n * See also https://docs.moodle.org/dev/Modal_and_AJAX_forms\n *\n * @module     core_form/modalform\n * @copyright  2018 Mitxel Moriana <mitxel@tresipunt.>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport * as FormEvents from 'core_form/events';\nimport Fragment from 'core/fragment';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\nexport default class ModalForm {\n\n    /**\n     * Various events that can be observed.\n     *\n     * @type {Object}\n     */\n    events = {\n        // Form was successfully submitted - the response is passed to the event listener.\n        // Cancellable (but it's hardly ever needed to cancel this event).\n        FORM_SUBMITTED: 'core_form_modalform_formsubmitted',\n        // Cancel button was pressed.\n        // Cancellable (but it's hardly ever needed to cancel this event).\n        FORM_CANCELLED: 'core_form_modalform_formcancelled',\n        // User attempted to submit the form but there was client-side validation error.\n        CLIENT_VALIDATION_ERROR: 'core_form_modalform_clientvalidationerror',\n        // User attempted to submit the form but server returned validation error.\n        SERVER_VALIDATION_ERROR: 'core_form_modalform_validationerror',\n        // Error occurred while performing request to the server.\n        // Cancellable (by default calls Notification.exception).\n        ERROR: 'core_form_modalform_error',\n        // Right after user pressed no-submit button,\n        // listen to this event if you want to add JS validation or processing for no-submit button.\n        // Cancellable.\n        NOSUBMIT_BUTTON_PRESSED: 'core_form_modalform_nosubmitbutton',\n        // Right after user pressed submit button,\n        // listen to this event if you want to add additional JS validation or confirmation dialog.\n        // Cancellable.\n        SUBMIT_BUTTON_PRESSED: 'core_form_modalform_submitbutton',\n        // Right after user pressed cancel button,\n        // listen to this event if you want to add confirmation dialog.\n        // Cancellable.\n        CANCEL_BUTTON_PRESSED: 'core_form_modalform_cancelbutton',\n        // Modal was loaded and this.modal is available (but the form content may not be loaded yet).\n        LOADED: 'core_form_modalform_loaded',\n    };\n\n    /**\n     * Constructor\n     *\n     * Shows the required form inside a modal dialogue\n     *\n     * @param {Object} config parameters for the form and modal dialogue:\n     * @paramy {String} config.formClass PHP class name that handles the form (should extend \\core_form\\modal )\n     * @paramy {Object} config.modalConfig modal config - title, type, etc.\n     *              Default: {removeOnClose: true, type: ModalFactory.types.SAVE_CANCEL}\n     * @paramy {Object} config.args Arguments for the initial form rendering (for example, id of the edited entity)\n     * @paramy {String} config.saveButtonText the text to display on the Modal \"Save\" button (optional)\n     * @paramy {String} config.saveButtonClasses additional CSS classes for the Modal \"Save\" button\n     * @paramy {HTMLElement} config.returnFocus element to return focus to after the dialogue is closed\n     */\n    constructor(config) {\n        this.modal = null;\n        this.config = config;\n        this.config.modalConfig = {\n            removeOnClose: true,\n            type: ModalFactory.types.SAVE_CANCEL,\n            large: true,\n            ...(this.config.modalConfig || {}),\n        };\n        this.config.args = this.config.args || {};\n        this.futureListeners = [];\n    }\n\n    /**\n     * Initialise the modal and shows it\n     *\n     * @return {Promise}\n     */\n    show() {\n        const pendingPromise = new Pending('core_form/modalform:init');\n        return ModalFactory.create(this.config.modalConfig)\n        .then((modal) => {\n            this.modal = modal;\n\n            // Retrieve the form and set the modal body. We can not set the body in the modalConfig,\n            // we need to make sure that the modal already exists when we render the form. Some form elements\n            // such as date_selector inspect the existing elements on the page to find the highest z-index.\n            const formParams = new URLSearchParams(Object.entries(this.config.args || {}));\n            const bodyContent = this.getBody(formParams.toString());\n            this.modal.setBodyContent(bodyContent);\n            bodyContent.catch(Notification.exception);\n\n            // After successfull submit, when we press \"Cancel\" or close the dialogue by clicking on X in the top right corner.\n            this.modal.getRoot().on(ModalEvents.hidden, () => {\n                this.notifyResetFormChanges();\n                this.modal.destroy();\n                // Focus on the element that actually launched the modal.\n                if (this.config.returnFocus) {\n                    this.config.returnFocus.focus();\n                }\n            });\n\n            // Add the class to the modal dialogue.\n            this.modal.getModal().addClass('modal-form-dialogue');\n\n            // We catch the press on submit buttons in the forms.\n            this.modal.getRoot().on('click', 'form input[type=submit][data-no-submit]',\n                (e) => {\n                    e.preventDefault();\n                    const event = this.trigger(this.events.NOSUBMIT_BUTTON_PRESSED, e.target);\n                    if (!event.defaultPrevented) {\n                        this.processNoSubmitButton(e.target);\n                    }\n                });\n\n            // We catch the form submit event and use it to submit the form with ajax.\n            this.modal.getRoot().on('submit', 'form', (e) => {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax();\n                }\n            });\n\n            // Change the text for the save button.\n            if (typeof this.config.saveButtonText !== 'undefined' &&\n                typeof this.modal.setSaveButtonText !== 'undefined') {\n                this.modal.setSaveButtonText(this.config.saveButtonText);\n            }\n            // Set classes for the save button.\n            if (typeof this.config.saveButtonClasses !== 'undefined') {\n                this.setSaveButtonClasses(this.config.saveButtonClasses);\n            }\n            // When Save button is pressed - submit the form.\n            this.modal.getRoot().on(ModalEvents.save, (e) => {\n                e.preventDefault();\n                this.modal.getRoot().find('form').submit();\n            });\n\n            // When Cancel button is pressed - allow to intercept.\n            this.modal.getRoot().on(ModalEvents.cancel, (e) => {\n                const event = this.trigger(this.events.CANCEL_BUTTON_PRESSED);\n                if (event.defaultPrevented) {\n                    e.preventDefault();\n                }\n            });\n            this.futureListeners.forEach(args => this.modal.getRoot()[0].addEventListener(...args));\n            this.futureListeners = [];\n            this.trigger(this.events.LOADED, null, false);\n            return this.modal.show();\n        })\n        .then(pendingPromise.resolve);\n    }\n\n    /**\n     * Triggers a custom event\n     *\n     * @private\n     * @param {String} eventName\n     * @param {*} detail\n     * @param {Boolean} cancelable\n     * @return {CustomEvent<unknown>}\n     */\n    trigger(eventName, detail = null, cancelable = true) {\n        const e = new CustomEvent(eventName, {detail, cancelable});\n        this.modal.getRoot()[0].dispatchEvent(e);\n        return e;\n    }\n\n    /**\n     * Add listener for an event\n     *\n     * @param {array} args\n     * @example:\n     *    const modalForm = new ModalForm(...);\n     *    dynamicForm.addEventListener(modalForm.events.FORM_SUBMITTED, e => {\n     *        window.console.log(e.detail);\n     *    });\n     */\n    addEventListener(...args) {\n        if (!this.modal) {\n            this.futureListeners.push(args);\n        } else {\n            this.modal.getRoot()[0].addEventListener(...args);\n        }\n    }\n\n    /**\n     * Get form contents (to be used in ModalForm.setBodyContent())\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        const params = {\n            formdata: formDataString,\n            form: this.config.formClass\n        };\n        const pendingPromise = new Pending('core_form/modalform:form_body');\n        return Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: params\n        }])[0]\n        .then(response => {\n            pendingPromise.resolve();\n            return {html: response.html, js: Fragment.processCollectedJavascript(response.javascript)};\n        });\n    }\n\n    /**\n     * On exception during form processing. Caller may override\n     *\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        const event = this.trigger(this.events.ERROR, exception);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        Notification.exception(exception);\n    }\n\n    /**\n     * Notifies listeners that form dirty state should be reset.\n     *\n     * @fires event:formSubmittedByJavascript\n     */\n    notifyResetFormChanges() {\n        const form = this.getFormNode();\n        FormEvents.notifyFormSubmittedByJavascript(this.getFormNode(), true);\n\n        if (!form) {\n            return;\n        }\n\n        FormChangeChecker.resetFormDirtyState(this.getFormNode());\n    }\n\n    /**\n     * Get the form node from the Dialogue.\n     *\n     * @returns {HTMLFormElement}\n     */\n    getFormNode() {\n        return this.modal.getRoot().find('form')[0];\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @param {Element} button button that was pressed\n     * @fires event:formSubmittedByJavascript\n     */\n    processNoSubmitButton(button) {\n        const form = this.getFormNode();\n        if (!form) {\n            return;\n        }\n\n        FormEvents.notifyFormSubmittedByJavascript(form, true);\n\n        // Add the button name to the form data and submit it.\n        let formData = this.modal.getRoot().find('form').serialize();\n        formData = formData + '&' + encodeURIComponent(button.getAttribute('name')) + '=' +\n            encodeURIComponent(button.getAttribute('value'));\n\n        const bodyContent = this.getBody(formData);\n        this.modal.setBodyContent(bodyContent);\n        bodyContent.catch(Notification.exception);\n    }\n\n    /**\n     * Validate form elements\n     * @return {Boolean} Whether client-side validation has passed, false if there are errors\n     * @fires event:formSubmittedByJavascript\n     */\n    validateElements() {\n        FormEvents.notifyFormSubmittedByJavascript(this.getFormNode());\n\n        // Now the change events have run, see if there are any \"invalid\" form fields.\n        /** @var {jQuery} list of elements with errors */\n        const invalid = this.modal.getRoot().find('[aria-invalid=\"true\"], .error');\n\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (invalid.length) {\n            invalid.first().focus();\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Disable buttons during form submission\n     */\n    disableButtons() {\n        this.modal.getFooter().find('[data-action]').attr('disabled', true);\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    enableButtons() {\n        this.modal.getFooter().find('[data-action]').removeAttr('disabled');\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     */\n    async submitFormAjax() {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!this.validateElements()) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const formData = this.modal.getRoot().find('form').serialize();\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData,\n                form: this.config.formClass\n            }\n        }])[0]\n        .then((response) => {\n            if (!response.submitted) {\n                // Form was not submitted because validation failed.\n                const promise = new Promise(\n                    resolve => resolve({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)}));\n                this.modal.setBodyContent(promise);\n                this.enableButtons();\n                this.trigger(this.events.SERVER_VALIDATION_ERROR);\n            } else {\n                // Form was submitted properly. Hide the modal and execute callback.\n                const data = JSON.parse(response.data);\n                this.notifyResetFormChanges();\n                const event = this.trigger(this.events.FORM_SUBMITTED, data);\n                if (!event.defaultPrevented) {\n                    this.modal.hide();\n                }\n            }\n            return null;\n        })\n        .catch(exception => this.onSubmitError(exception));\n    }\n\n    /**\n     * Set the classes for the 'save' button.\n     *\n     * @method setSaveButtonClasses\n     * @param {(String)} value The 'save' button classes.\n     */\n    setSaveButtonClasses(value) {\n        const button = this.modal.getFooter().find(\"[data-action='save']\");\n        if (!button) {\n            throw new Error(\"Unable to find the 'save' button\");\n        }\n        button.removeClass().addClass(value);\n    }\n}\n"],"file":"modalform.min.js"}