{"version":3,"sources":["../src/dynamicform.js"],"names":["DynamicForm","container","formClass","FORM_SUBMITTED","FORM_CANCELLED","CLIENT_VALIDATION_ERROR","SERVER_VALIDATION_ERROR","ERROR","NOSUBMIT_BUTTON_PRESSED","SUBMIT_BUTTON_PRESSED","CANCEL_BUTTON_PRESSED","key","component","catch","Notification","exception","addEventListener","e","target","matches","preventDefault","event","trigger","events","defaultPrevented","processCancelButton","processNoSubmitButton","submitFormAjax","args","formData","URLSearchParams","Object","entries","pendingPromise","Pending","getBody","toString","then","resp","updateForm","resolve","eventName","detail","cancelable","CustomEvent","dispatchEvent","formDataString","Ajax","call","methodname","formdata","form","response","html","js","Fragment","processCollectedJavascript","javascript","innerHTML","button","querySelector","FormData","append","getAttribute","notifyFormSubmitAjax","disableButtons","finally","onSubmitError","skipValidation","Promise","Y","use","Event","M","core_formchangechecker","reset_form_dirty_state","notifyResetFormChanges","Templates","replaceNodeContents","invalid","querySelectorAll","length","focus","forEach","el","setAttribute","removeAttribute","validateElements","submitted","enableButtons","data","JSON","parse","onSubmitSuccess"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display an embedded form, it is only loaded and reloaded inside its container\n *\n *\n * @module     core_form/dynamicform\n * @copyright  2019 Marina Glancy\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * See also https://docs.moodle.org/dev/Modal_and_AJAX_forms\n *\n * @example\n *    import DynamicForm from 'core_form/dynamicform';\n *\n *    const dynamicForm = new DynamicForm(document.querySelector('#mycontainer', 'pluginname\\\\form\\\\formname');\n *    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\n *        e.preventDefault();\n *        window.console.log(e.detail);\n *        dynamicForm.container.innerHTML = 'Thank you, your form is submitted!';\n *    });\n *    dynamicForm.load();\n *\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport Event from 'core/event';\nimport {get_strings as getStrings} from 'core/str';\nimport Y from 'core/yui';\nimport Fragment from 'core/fragment';\nimport Pending from 'core/pending';\n\n/**\n * @class core_form/dynamicform\n */\nexport default class DynamicForm {\n\n    /**\n     * Various events that can be observed.\n     *\n     * @type {Object}\n     */\n    events = {\n        // Form was successfully submitted - the response is passed to the event listener.\n        // Cancellable (in order to prevent default behavior to clear the container).\n        FORM_SUBMITTED: 'core_form_dynamicform_formsubmitted',\n        // Cancel button was pressed.\n        // Cancellable (in order to prevent default behavior to clear the container).\n        FORM_CANCELLED: 'core_form_dynamicform_formcancelled',\n        // User attempted to submit the form but there was client-side validation error.\n        CLIENT_VALIDATION_ERROR: 'core_form_dynamicform_clientvalidationerror',\n        // User attempted to submit the form but server returned validation error.\n        SERVER_VALIDATION_ERROR: 'core_form_dynamicform_validationerror',\n        // Error occurred while performing request to the server.\n        // Cancellable (by default calls Notification.exception).\n        ERROR: 'core_form_dynamicform_error',\n        // Right after user pressed no-submit button,\n        // listen to this event if you want to add JS validation or processing for no-submit button.\n        // Cancellable.\n        NOSUBMIT_BUTTON_PRESSED: 'core_form_dynamicform_nosubmitbutton',\n        // Right after user pressed submit button,\n        // listen to this event if you want to add additional JS validation or confirmation dialog.\n        // Cancellable.\n        SUBMIT_BUTTON_PRESSED: 'core_form_dynamicform_submitbutton',\n        // Right after user pressed cancel button,\n        // listen to this event if you want to add confirmation dialog.\n        // Cancellable.\n        CANCEL_BUTTON_PRESSED: 'core_form_dynamicform_cancelbutton',\n    };\n\n    /**\n     * Constructor\n     *\n     * Creates an instance\n     *\n     * @param {Element} container - the parent element for the form\n     * @param {string} formClass full name of the php class that extends \\core_form\\modal , must be in autoloaded location\n     */\n    constructor(container, formClass) {\n        this.formClass = formClass;\n        this.container = container;\n\n        // Ensure strings required for shortforms are always available.\n        getStrings([\n            {key: 'collapseall', component: 'moodle'},\n            {key: 'expandall', component: 'moodle'}\n        ]).catch(Notification.exception);\n\n        // Register delegated events handlers in vanilla JS.\n        this.container.addEventListener('click', e => {\n            if (e.target.matches('form input[type=submit][data-cancel]')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.CANCEL_BUTTON_PRESSED, e.target);\n                if (!event.defaultPrevented) {\n                    this.processCancelButton();\n                }\n            } else if (e.target.matches('form input[type=submit][data-no-submit=\"1\"]')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.NOSUBMIT_BUTTON_PRESSED, e.target);\n                if (!event.defaultPrevented) {\n                    this.processNoSubmitButton(e.target);\n                }\n            }\n        });\n\n        this.container.addEventListener('submit', e => {\n            if (e.target.matches('form')) {\n                e.preventDefault();\n                const event = this.trigger(this.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    this.submitFormAjax();\n                }\n            }\n        });\n    }\n\n    /**\n     * Loads the form via AJAX and shows it inside a given container\n     *\n     * @param {Object} args\n     * @return {Promise}\n     * @public\n     */\n    load(args = null) {\n        const formData = new URLSearchParams(Object.entries(args || {}));\n        const pendingPromise = new Pending('core_form/dynamicform:load');\n        return this.getBody(formData.toString())\n        .then((resp) => this.updateForm(resp))\n        .then(pendingPromise.resolve);\n    }\n\n    /**\n     * Triggers a custom event\n     *\n     * @private\n     * @param {String} eventName\n     * @param {*} detail\n     * @param {Boolean} cancelable\n     * @return {CustomEvent<unknown>}\n     */\n    trigger(eventName, detail = null, cancelable = true) {\n        const e = new CustomEvent(eventName, {detail, cancelable});\n        this.container.dispatchEvent(e);\n        return e;\n    }\n\n    /**\n     * Add listener for an event\n     *\n     * @param {array} args\n     * @example:\n     *    const dynamicForm = new DynamicForm(...);\n     *    dynamicForm.addEventListener(dynamicForm.events.FORM_SUBMITTED, e => {\n     *        e.preventDefault();\n     *        window.console.log(e.detail);\n     *        dynamicForm.container.innerHTML = 'Thank you, your form is submitted!';\n     *    });\n     */\n    addEventListener(...args) {\n        this.container.addEventListener(...args);\n    }\n\n    /**\n     * Get form body\n     *\n     * @param {String} formDataString form data in format of a query string\n     * @private\n     * @return {Promise}\n     */\n    getBody(formDataString) {\n        return Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formDataString,\n                form: this.formClass,\n            }\n        }])[0]\n        .then(response => {\n            return {html: response.html, js: Fragment.processCollectedJavascript(response.javascript)};\n        });\n    }\n\n    /**\n     * On form submit\n     *\n     * @param {*} response Response received from the form's \"process\" method\n     */\n    onSubmitSuccess(response) {\n        const event = this.trigger(this.events.FORM_SUBMITTED, response);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        // Default implementation is to remove the form. Event listener should either remove or reload the form\n        // since its contents is no longer correct. For example, if an element was created as a result of\n        // form submission, the \"id\" in the form would be still zero. Also the server-side validation\n        // errors from the previous submission may still be present.\n        this.container.innerHTML = '';\n    }\n\n    /**\n     * On exception during form processing\n     *\n     * @private\n     * @param {Object} exception\n     */\n    onSubmitError(exception) {\n        const event = this.trigger(this.events.ERROR, exception);\n        if (event.defaultPrevented) {\n            return;\n        }\n\n        Notification.exception(exception);\n    }\n\n    /**\n     * Click on a \"submit\" button that is marked in the form as registerNoSubmitButton()\n     *\n     * @method submitButtonPressed\n     * @param {Element} button that was pressed\n     */\n    processNoSubmitButton(button) {\n        const pendingPromise = new Pending('core_form/dynamicform:nosubmit');\n        const form = this.container.querySelector('form');\n        const formData = new URLSearchParams([...(new FormData(form)).entries()]);\n        formData.append(button.getAttribute('name'), button.getAttribute('value'));\n\n        this.notifyFormSubmitAjax(true)\n        .then(() => {\n            // Add the button name to the form data and submit it.\n            this.disableButtons();\n            return this.getBody(formData.toString());\n        })\n        .then((resp) => this.updateForm(resp))\n        .finally(pendingPromise.resolve)\n        .catch(exception => this.onSubmitError(exception));\n    }\n\n    /**\n     * Wrapper for Event.notifyFormSubmitAjax that waits for the module to load\n     *\n     * We often destroy the form right after calling this function and we need to make sure that it actually\n     * completes before it, or otherwise it will try to work with a form that does not exist.\n     *\n     * @param {Boolean} skipValidation\n     * @return {Promise}\n     */\n    notifyFormSubmitAjax(skipValidation = false) {\n        const form = this.container.querySelector('form');\n        return new Promise(resolve => {\n            Y.use('event', 'moodle-core-event', 'moodle-core-formchangechecker', function() {\n                Event.notifyFormSubmitAjax(form, skipValidation);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Notifies listeners that form dirty state should be reset.\n     *\n     * @return {Promise<unknown>}\n     */\n    notifyResetFormChanges() {\n        const form = this.container.querySelector('form');\n        return new Promise(resolve => {\n            Y.use('event', 'moodle-core-event', 'moodle-core-formchangechecker', () => {\n                Event.notifyFormSubmitAjax(form, true);\n                M.core_formchangechecker.reset_form_dirty_state();\n                resolve();\n            });\n        });\n    }\n\n    /**\n     * Click on a \"cancel\" button\n     */\n    processCancelButton() {\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n        this.notifyResetFormChanges()\n        .then(() => {\n            const event = this.trigger(this.events.FORM_CANCELLED);\n            if (!event.defaultPrevented) {\n                // By default removes the form from the DOM.\n                this.container.innerHTML = '';\n            }\n            return null;\n        })\n        .catch(null);\n    }\n\n    /**\n     * Update form contents\n     *\n     * @param {object} param\n     * @param {string} param.html\n     * @param {string} param.js\n     */\n    updateForm({html, js}) {\n        Templates.replaceNodeContents(this.container, html, js);\n    }\n\n    /**\n     * Validate form elements\n     * @return {Promise} promise that returns true if client-side validation has passed, false if there are errors\n     */\n    validateElements() {\n        // Notify listeners that the form is about to be submitted (this will reset atto autosave).\n        return this.notifyFormSubmitAjax()\n        .then(() => {\n            // Now the change events have run, see if there are any \"invalid\" form fields.\n            const invalid = [...this.container.querySelectorAll('[aria-invalid=\"true\"], .error')];\n\n            // If we found invalid fields, focus on the first one and do not submit via ajax.\n            if (invalid.length) {\n                invalid[0].focus();\n                return false;\n            }\n\n            return true;\n        });\n    }\n\n    /**\n     * Disable buttons during form submission\n     */\n    disableButtons() {\n        this.container.querySelectorAll('form input[type=\"submit\"]')\n            .forEach(el => el.setAttribute('disabled', true));\n    }\n\n    /**\n     * Enable buttons after form submission (on validation error)\n     */\n    enableButtons() {\n        this.container.querySelectorAll('form input[type=\"submit\"]')\n            .forEach(el => el.removeAttribute('disabled'));\n    }\n\n    /**\n     * Submit the form via AJAX call to the core_form_dynamic_form WS\n     */\n    async submitFormAjax() {\n        // If we found invalid fields, focus on the first one and do not submit via ajax.\n        if (!(await this.validateElements())) {\n            this.trigger(this.events.CLIENT_VALIDATION_ERROR, null, false);\n            return;\n        }\n        this.disableButtons();\n\n        // Convert all the form elements values to a serialised string.\n        const form = this.container.querySelector('form');\n        const formData = new URLSearchParams([...(new FormData(form)).entries()]);\n\n        // Now we can continue...\n        Ajax.call([{\n            methodname: 'core_form_dynamic_form',\n            args: {\n                formdata: formData.toString(),\n                form: this.formClass\n            }\n        }])[0]\n        .then((response) => {\n            if (!response.submitted) {\n                // Form was not submitted, it could be either because validation failed or because no-submit button was pressed.\n                this.updateForm({html: response.html, js: Fragment.processCollectedJavascript(response.javascript)});\n                this.enableButtons();\n                this.trigger(this.events.SERVER_VALIDATION_ERROR, null, false);\n            } else {\n                // Form was submitted properly.\n                const data = JSON.parse(response.data);\n                this.enableButtons();\n                this.notifyResetFormChanges()\n                .then(() => this.onSubmitSuccess(data))\n                .catch();\n            }\n            return null;\n        })\n        .catch(exception => this.onSubmitError(exception));\n    }\n}\n"],"file":"dynamicform.min.js"}