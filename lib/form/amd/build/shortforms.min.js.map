{"version":3,"sources":["../src/shortforms.js"],"names":["classList","collapsedFieldset","collapseAll","selectors","collapsableFieldsets","toggleAllLink","toggleSectionLink","getFormFromChild","formChild","closest","getFieldsetFromChild","fieldsetChild","setExpandedState","element","open","fieldset","statusElement","form","querySelector","id","remove","setAttribute","add","value","updateToggleAllState","anyCollapsed","Array","from","querySelectorAll","some","toggle","getAttribute","toggleAllLinks","dataset","toggleState","forEach","link","innerHTML","expandallstring","collapseallstring","setExpandedStates","expandForm","collapseForm","expandFieldset","collapseFieldset","toggleFieldset","handleToggleClick","e","target","preventDefault","handleFormError","initialised","init","document","addEventListener","eventTypes","formError"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {eventTypes} from './events';\n\nconst classList = {\n    collapsedFieldset: 'collapsed',\n    collapseAll: 'collapse-all',\n};\n\nconst selectors = {\n    collapsableFieldsets: 'fieldset.collapsible',\n    toggleAllLink: '[data-action=\"core_form-shortforms-toggleall\"]',\n    toggleSectionLink: '[data-action=\"core_form-shortforms-toggle-section\"]',\n};\n\n/**\n * Get the nearest form element from a child element.\n *\n * @param {HTMLElement} formChild\n * @returns {HTMLFormElement|null}\n */\nconst getFormFromChild = formChild => formChild.closest('form');\n\n/**\n * Get the nearest fieldset element from a child element.\n *\n * @param {HTMLElement} fieldsetChild\n * @returns {HTMLFieldSetElement|null}\n */\nconst getFieldsetFromChild = fieldsetChild => fieldsetChild.closest('fieldset');\n\n/**\n * Set the expanded state for a fieldset based on its nearest child.\n *\n * @param   {HTMLElement} element\n * @param   {bool} open\n */\nconst setExpandedState = (element, open) => {\n    const fieldset = getFieldsetFromChild(element);\n    const statusElement = fieldset.form.querySelector(`input[name=mform_isexpanded_${fieldset.id}]`);\n\n    if (open) {\n        fieldset.classList.remove(classList.collapsedFieldset);\n        fieldset.setAttribute('aria-expanded', 'true');\n    } else {\n        fieldset.classList.add(classList.collapsedFieldset);\n        fieldset.setAttribute('aria-expanded', 'false');\n    }\n\n    if (statusElement) {\n        statusElement.value = open ? 1 : 0;\n    }\n};\n\n/**\n * Update the toggle all buttons to reflect the correct state.\n *\n * If any fieldset is currently collapsed, then the text will be updated to expand all.\n * If all fieldsets are expanded, then the toggle will be updated to collapse all.\n *\n * @param   {HTMLElement} element\n */\nconst updateToggleAllState = element => {\n    const form = getFormFromChild(element);\n\n    // If any fieldset is not aria-expanded, then show 'Expand all', otherwise show 'Collapse all'.\n    const anyCollapsed = Array.from(form.querySelectorAll(selectors.toggleSectionLink)).some(toggle => {\n        return toggle.closest('fieldset').getAttribute('aria-expanded') !== 'true';\n    });\n\n    const toggleAllLinks = form.querySelectorAll(selectors.toggleAllLink);\n\n    if (anyCollapsed) {\n        form.dataset.toggleState = 'closed';\n        toggleAllLinks.forEach(link => {\n            link.innerHTML = link.dataset.expandallstring;\n            link.classList.remove(classList.collapseAll);\n        });\n\n    } else {\n        form.dataset.toggleState = 'open';\n        toggleAllLinks.forEach(link => {\n            link.innerHTML = link.dataset.collapseallstring;\n            link.classList.add(classList.collapseAll);\n        });\n    }\n};\n\n/**\n * Set the expanded state for all fieldsets in a form.\n *\n * @param   {HTMLElement} element\n * @param   {bool} open\n */\nconst setExpandedStates = (element, open) => {\n    const form = getFormFromChild(element);\n\n    form.querySelectorAll(selectors.collapsableFieldsets).forEach(fieldset => setExpandedState(fieldset, open));\n\n    // Update all toggle links for this form.\n    updateToggleAllState(form);\n};\n\n/**\n * Expand all fieldsets in a form.\n *\n * @param   {HTMLElement} form\n * @returns {void}\n */\nexport const expandForm = form => setExpandedStates(form, true);\n\n/**\n * Collapse all fieldsets in a form.\n *\n * @param   {HTMLElement} form\n * @returns {void}\n */\nexport const collapseForm = form => setExpandedStates(form, false);\n\n/**\n * Expand the specified fieldset.\n *\n * @param   {HTMLElement} element\n * @returns {void}\n */\nexport const expandFieldset = element => {\n    setExpandedState(element, true);\n\n    // Update all toggle links for this form.\n    updateToggleAllState(element);\n};\n\n/**\n * Collapse all fieldsets in a form.\n *\n * @param   {HTMLElement} element\n */\nexport const collapseFieldset = element => {\n    setExpandedState(element, false);\n\n    // Update all toggle links for this form.\n    updateToggleAllState(element);\n};\n\n\n/**\n * Toggle the state of a specific fieldset.\n *\n * @param   {HTMLElement} element\n */\nexport const toggleFieldset = element => {\n    const fieldset = getFieldsetFromChild(element);\n    setExpandedState(fieldset, fieldset.getAttribute('aria-expanded') === 'false');\n\n    // Update all toggle links for this form.\n    updateToggleAllState(fieldset);\n};\n\n\n/**\n * The event listener for all shortforms links.\n *\n * @param   {Event} e\n */\nconst handleToggleClick = e => {\n    const toggleAllLink = e.target.closest(selectors.toggleAllLink);\n    if (toggleAllLink) {\n        const form = getFormFromChild(toggleAllLink);\n        if (!form) {\n            // This link is not in a form.\n            return;\n        }\n\n        e.preventDefault();\n        if (form.dataset.toggleState === 'open') {\n            collapseForm(form);\n            form.dataset.toggleState = 'closed';\n        } else {\n            expandForm(form);\n            form.dataset.toggleState = 'open';\n        }\n    }\n\n    const toggleSectionLink = e.target.closest(selectors.toggleSectionLink);\n    if (toggleSectionLink) {\n        e.preventDefault();\n        toggleFieldset(toggleSectionLink);\n        updateToggleAllState(toggleSectionLink);\n    }\n};\n\n/**\n * The event listener for handling form errors.\n *\n * @param   {Event} e\n */\nconst handleFormError = e => {\n    const element = getFieldsetFromChild(e.target);\n    if (element) {\n        expandFieldset(element);\n        return;\n    }\n};\n\nlet initialised = false;\n\n/**\n * Initialiser for the module.\n *\n * Note: This module can only be initialised once per page load.\n */\nexport const init = () => {\n    if (initialised) {\n        return;\n    }\n    initialised = true;\n\n    document.addEventListener('click', handleToggleClick);\n    document.addEventListener(eventTypes.formError, handleFormError);\n};\n"],"file":"shortforms.min.js"}