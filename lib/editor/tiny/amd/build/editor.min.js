define("editor_tiny/editor",["exports","./loader"],(function(_exports,_loader){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.setupForTarget=_exports.setupForElementId=void 0;var _systemImportTransformerGlobalIdentifier="undefined"!=typeof window?window:"undefined"!=typeof self?self:"undefined"!=typeof global?global:{};const importPluginList=pluginList=>pluginList.map((pluginPath=>-1===pluginPath.indexOf("/")?pluginPath:"function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise((function(resolve,reject){_systemImportTransformerGlobalIdentifier.require([pluginPath],resolve,reject)})):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require(pluginPath)):Promise.resolve(_systemImportTransformerGlobalIdentifier[pluginPath])));_exports.setupForElementId=_ref=>{let{elementId:elementId}=_ref;return setupForTarget(document.querySelector("#".concat(elementId)))};const setupForTarget=target=>{const pluginList=["anchor","advlist","link","image","lists","editor_tiny/testplugin"];return(0,_loader.getTinyMCE)().then((tinyMCE=>Promise.all([tinyMCE,...importPluginList(pluginList)]))).then((_ref2=>{let[tinyMCE,...pluginList]=_ref2;return tinyMCE.init({target:target,toolbar:["undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | outdent indent","editor_tiny/testplugin"],plugins:["wordcount",...pluginList].join(" ")})})).catch((err=>{window.console.log(err)}))};_exports.setupForTarget=setupForTarget}));

//# sourceMappingURL=editor.min.js.map