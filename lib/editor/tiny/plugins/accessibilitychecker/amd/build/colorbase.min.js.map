{"version":3,"file":"colorbase.min.js","sources":["../src/colorbase.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * @package    tiny_accessibilitychecker\n * @copyright  2022, Stevani Andolo  <stevani@hotmail.com.au>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport default class {\n\n    REGEX_HEX = /^#?([\\da-fA-F]{2})([\\da-fA-F]{2})([\\da-fA-F]{2})(\\ufffe)?/;\n    REGEX_HEX3 = /^#?([\\da-fA-F]{1})([\\da-fA-F]{1})([\\da-fA-F]{1})(\\ufffe)?/;\n    REGEX_RGB = /rgba?\\(([\\d]{1,3}), ?([\\d]{1,3}), ?([\\d]{1,3}),? ?([.\\d]*)?\\)/;\n\n    TYPES = {\n        HEX: 'hex',\n        RGB: 'rgb',\n        RGBA: 'rgba'\n    };\n\n    KEYWORDS = {\n        black: '000',\n        silver: 'c0c0c0',\n        gray: '808080',\n        white: 'fff',\n        maroon: '800000',\n        red: 'f00',\n        purple: '800080',\n        fuchsia: 'f0f',\n        green: '008000',\n        lime: '0f0',\n        olive: '808000',\n        yellow: 'ff0',\n        navy: '000080',\n        blue: '00f',\n        teal: '008080',\n        aqua: '0ff'\n    };\n\n    STR_HEX = '#{*}{*}{*}';\n    STR_RGB = 'rgb({*}, {*}, {*})';\n    STR_RGBA = 'rgba({*}, {*}, {*}, {*})';\n\n    toHex = (str) => {\n        var clr = this._convertTo(str, 'hex'),\n            isTransparent = clr.toLowerCase() === 'transparent';\n\n        if (clr.charAt(0) !== '#' && !isTransparent) {\n            clr = '#' + clr;\n        }\n\n        return isTransparent ? clr.toLowerCase() : clr.toUpperCase();\n    };\n\n    toRGB = (str) => {\n        var clr = this._convertTo(str, 'rgb');\n        return clr.toLowerCase();\n    };\n\n    toRGBA = (str) => {\n        var clr = this._convertTo(str, 'rgba');\n        return clr.toLowerCase();\n    };\n\n    toArray = (str) => {\n        // Parse with regex and return \"matches\" array.\n        var type = this.findType(str).toUpperCase(),\n            regex,\n            arr,\n            length,\n            lastItem;\n\n        if (type === 'HEX' && str.length < 5) {\n            type = 'HEX3';\n        }\n\n        if (type.charAt(type.length - 1) === 'A') {\n            type = type.slice(0, -1);\n        }\n\n        regex = this._getRightValue('REGEX_' + type);\n\n        if (regex) {\n            arr = regex.exec(str) || [];\n            length = arr.length;\n\n            if (length) {\n                arr.shift();\n                length--;\n\n                if (type === 'HEX3') {\n                    arr[0] += arr[0];\n                    arr[1] += arr[1];\n                    arr[2] += arr[2];\n                }\n                lastItem = arr[length - 1];\n\n                if (!lastItem) {\n                    arr[length - 1] = 1;\n                }\n            }\n        }\n        return arr;\n    };\n\n    fromArray = (arr, template) => {\n        arr = arr.concat();\n\n        if (typeof template === 'undefined') {\n            return arr.join(', ');\n        }\n\n        var replace = '{*}';\n        template = this._getRightValue('STR_' + template.toUpperCase());\n\n        if (arr.length === 3 && template.match(/\\{\\*\\}/g).length === 4) {\n            arr.push(1);\n        }\n\n        while (template.indexOf(replace) >= 0 && arr.length > 0) {\n            template = template.replace(replace, arr.shift());\n        }\n        return template;\n    };\n\n    findType = (str) => {\n        if (this.KEYWORDS[str]) {\n            return 'keyword';\n        }\n\n        var index = str.indexOf('('),\n            key;\n\n        if (index > 0) {\n            key = str.substr(0, index);\n        }\n\n        if (key && this.TYPES[key.toUpperCase()]) {\n            return this.TYPES[key.toUpperCase()];\n        }\n        return 'hex';\n    };\n\n    _getAlpha = (clr) => {\n        var alpha,\n            arr = this.toArray(clr);\n\n        if (arr.length > 3) {\n            alpha = arr.pop();\n        }\n        return +alpha || 1;\n    };\n\n    _keywordToHex = (clr) => {\n        var keyword = this.KEYWORDS[clr];\n\n        if (keyword) {\n            return keyword;\n        }\n        return keyword;\n    };\n\n    _convertTo = (clr, to) => {\n        if (clr === 'transparent') {\n            return clr;\n        }\n\n        var from = this.findType(clr),\n            originalTo = to,\n            needsAlpha,\n            alpha,\n            method,\n            ucTo;\n\n        if (from === 'keyword') {\n            clr = this._keywordToHex(clr);\n            from = 'hex';\n        }\n\n        if (from === 'hex' && clr.length < 5) {\n            if (clr.charAt(0) === '#') {\n                clr = clr.substr(1);\n            }\n\n            clr = '#' + clr.charAt(0) + clr.charAt(0) +\n                        clr.charAt(1) + clr.charAt(1) +\n                        clr.charAt(2) + clr.charAt(2);\n        }\n\n        if (from === to) {\n            return clr;\n        }\n\n        if (from.charAt(from.length - 1) === 'a') {\n            from = from.slice(0, -1);\n        }\n\n        needsAlpha = (to.charAt(to.length - 1) === 'a');\n        if (needsAlpha) {\n            to = to.slice(0, -1);\n            alpha = this._getAlpha(clr);\n        }\n\n        ucTo = to.charAt(0).toUpperCase() + to.substr(1).toLowerCase();\n        method = window['_' + from + 'To' + ucTo];\n\n        // Check to see if need conversion to rgb first.\n        // Check to see if there is a direct conversion method.\n        // Convertions are: hex <-> rgb <-> hsl.\n        if (!method) {\n            if (from !== 'rgb' && to !== 'rgb') {\n                clr = window['_' + from + 'ToRgb'](clr);\n                from = 'rgb';\n                method = window['_' + from + 'To' + ucTo];\n            }\n        }\n\n        if (method) {\n            clr = ((method)(clr, needsAlpha));\n        }\n\n        // Process clr from arrays to strings after conversions if alpha is needed.\n        if (needsAlpha) {\n            if (!Array.isArray(clr)) {\n                clr = this.toArray(clr);\n            }\n            clr.push(alpha);\n            clr = this.fromArray(clr, originalTo.toUpperCase());\n        }\n        return clr;\n    };\n\n    _hexToRgb = (str, array) => {\n        var r, g, b;\n\n        /* jshint bitwise:false */\n        if (str.charAt(0) === '#') {\n            str = str.substr(1);\n        }\n\n        /* eslint no-bitwise: */\n        str = parseInt(str, 16);\n        r = str >> 16;\n        g = str >> 8 & 0xFF;\n        b = str & 0xFF;\n\n        if (array) {\n            return [r, g, b];\n        }\n        return 'rgb(' + r + ', ' + g + ', ' + b + ')';\n    };\n\n    _rgbToHex = (str) => {\n        /* jshint bitwise:false */\n        var rgb = this.toArray(str),\n            hex = rgb[2] | (rgb[1] << 8) | (rgb[0] << 16);\n\n        hex = (+hex).toString(16);\n\n        while (hex.length < 6) {\n            hex = '0' + hex;\n        }\n        return '#' + hex;\n    };\n\n    _getRightValue = (string) => {\n        let regex = null;\n        if (string === 'REGEX_RGB') {\n            regex = this.REGEX_RGB;\n        } else if (string === 'REGEX_HEX') {\n            regex = this.REGEX_HEX;\n        } else if (string === 'REGEX_HEX3') {\n            regex = this.REGEX_HEX3;\n        } else if (string === 'STR_HEX') {\n            regex = this.STR_HEX;\n        } else if (string === 'STR_RGB') {\n            regex = this.STR_RGB;\n        } else if (string === 'STR_RGBA') {\n            regex = this.STR_RGBA;\n        }\n        return regex;\n    };\n}\n"],"names":["constructor","_defineProperty","this","HEX","RGB","RGBA","black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","str","clr","_convertTo","isTransparent","toLowerCase","charAt","toUpperCase","type","regex","arr","length","findType","slice","_getRightValue","exec","shift","template","concat","join","match","push","indexOf","replace","KEYWORDS","key","index","substr","TYPES","alpha","toArray","pop","keyword","to","needsAlpha","method","ucTo","from","originalTo","_keywordToHex","_getAlpha","window","Array","isArray","fromArray","array","r","g","b","parseInt","rgb","hex","toString","string","REGEX_RGB","REGEX_HEX","REGEX_HEX3","STR_HEX","STR_RGB","STR_RGBA"],"mappings":"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"}