{"version":3,"file":"embed.min.js","sources":["../src/embed.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Embed class for Moodle.\n *\n * @module      tiny_media/embed\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {\n    get_string as getString,\n    get_strings as getStrings,\n} from 'core/str';\nimport * as ModalFactory from 'core/modal_factory';\nimport * as ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport {getCurrentLanguage, getMoodleLang} from 'editor_tiny/options';\nimport {component} from \"./common\";\nimport Modal from './embedmodal';\nimport Selectors from './selectors';\nimport {getEmbedPermissions} from './options';\n\nexport const MediaEmbed = class {\n    editor = null;\n    canShowFilePicker = false;\n\n    /**\n     * @property {Object} The names of the alignment options.\n     */\n    helpStrings = null;\n\n    /**\n     * @property {boolean} Indicate that the user is updating the media or not.\n     */\n    isUpdating = false;\n\n    constructor(editor) {\n        const permissions = getEmbedPermissions(editor);\n        this.canShowFilePicker = permissions.filepicker;\n        this.editor = editor;\n    }\n\n    async getHelpStrings() {\n        if (!this.helpStrings) {\n            const [addSource, tracks, subtitles, captions, descriptions, chapters, metadata] = await getStrings([\n                'addsource_help',\n                'tracks_help',\n                'subtitles_help',\n                'captions_help',\n                'descriptions_help',\n                'chapters_help',\n                'metadata_help',\n            ].map((key) => ({\n                key,\n                component,\n            })));\n\n            this.helpStrings = {addSource, tracks, subtitles, captions, descriptions, chapters, metadata};\n        }\n\n        return this.helpStrings;\n    }\n\n    async getTemplateContext(data) {\n        const languages = this.prepareMoodleLang();\n\n        const helpIcons = Array.from(Object.entries(await this.getHelpStrings())).forEach(([key, text]) => {\n            data[`${key.toLowerCase()}helpicon`] = {text};\n        });\n\n        return Object.assign({}, {\n            elementid: this.editor.getElement().id,\n            showfilepicker: this.canShowFilePicker,\n            langsinstalled: languages.installed,\n            langsavailable: languages.available,\n            link: true,\n            video: false,\n            audio: false,\n            isupdating: this.isUpdating,\n        }, data, helpIcons);\n    }\n\n    async displayDialogue() {\n        const data = Object.assign({}, this.getCurrentEmbedData());\n        this.isUpdating = Object.keys(data).length !== 0;\n\n        const modal = await ModalFactory.create({\n            type: Modal.TYPE,\n            title: getString('createmedia', 'tiny_media'),\n            templateContext: await this.getTemplateContext(data),\n            removeOnClose: true,\n            large: true,\n        });\n\n        this.currentModal = modal;\n        await this.registerEventListeners(modal);\n        modal.show();\n    }\n\n    getCurrentEmbedData() {\n        const properties = this.getMediumProperties();\n        if (!properties) {\n            return {};\n        }\n\n        const processedProperties = {};\n        processedProperties[properties.type.toLowerCase()] = properties;\n        processedProperties.link = false;\n\n        return processedProperties;\n    }\n\n    getSelectedMedia() {\n        const mediaElm = this.editor.selection.getNode();\n\n        if (!mediaElm) {\n            return null;\n        }\n\n        if (mediaElm.nodeName.toLowerCase() === 'video' || mediaElm.nodeName.toLowerCase() === 'audio') {\n            return mediaElm;\n        }\n\n        if (mediaElm.querySelector('video')) {\n            return mediaElm.querySelector('video');\n        }\n\n        if (mediaElm.querySelector('audio')) {\n            return mediaElm.querySelector('audio');\n        }\n\n        return null;\n    }\n\n    getMediumProperties() {\n        const boolAttr = (elem, attr) => {\n            // As explained in MDL-64175, some OS (like Ubuntu), are removing the value for these attributes.\n            // So in order to check if attr=\"true\", we need to check if the attribute exists and if the value is empty or true.\n            return (elem.hasAttribute(attr) && (elem.getAttribute(attr) || elem.getAttribute(attr) === ''));\n        };\n\n        const tracks = {\n            subtitles: [],\n            captions: [],\n            descriptions: [],\n            chapters: [],\n            metadata: []\n        };\n        const sources = [];\n\n        const medium = this.getSelectedMedia();\n        if (!medium) {\n            return null;\n        }\n        medium.querySelectorAll('track').forEach((track) => {\n            tracks[track.getAttribute('kind')].push({\n                src: track.getAttribute('src'),\n                srclang: track.getAttribute('srclang'),\n                label: track.getAttribute('label'),\n                defaultTrack: boolAttr(track, 'default')\n            });\n        });\n\n        medium.querySelectorAll('source').forEach((source) => {\n            sources.push(source.src);\n        });\n\n        return {\n            type: medium.nodeName.toLowerCase() === 'video' ? Selectors.EMBED.mediaTypes.video : Selectors.EMBED.mediaTypes.audio,\n            sources,\n            poster: medium.getAttribute('poster'),\n            title: medium.getAttribute('title'),\n            width: medium.getAttribute('width'),\n            height: medium.getAttribute('height'),\n            autoplay: boolAttr(medium, 'autoplay'),\n            loop: boolAttr(medium, 'loop'),\n            muted: boolAttr(medium, 'muted'),\n            controls: boolAttr(medium, 'controls'),\n            tracks,\n        };\n    }\n\n    prepareMoodleLang() {\n        const moodleLangs = getMoodleLang(this.editor);\n        const currentLanguage = getCurrentLanguage(this.editor);\n\n        const installed = Object.entries(moodleLangs.installed).map(([lang, code]) => ({\n            lang,\n            code,\n            \"default\": lang === currentLanguage,\n        }));\n\n        const available = Object.entries(moodleLangs.available).map(([lang, code]) => ({\n            lang,\n            code,\n            \"default\": lang === currentLanguage,\n        }));\n\n        return {\n            installed,\n            available,\n        };\n    }\n\n    getMoodleLangObj(subtitleLang) {\n        const {available} = getMoodleLang(this.editor);\n\n        if (available[subtitleLang]) {\n            return {\n                lang: subtitleLang,\n                code: available[subtitleLang],\n            };\n        }\n\n        return null;\n    }\n\n    filePickerCallback(params, element, fpType) {\n        if (params.url !== '') {\n            const tabPane = element.closest('.tab-pane');\n            element.closest(Selectors.EMBED.elements.source).querySelector(Selectors.EMBED.elements.url).value = params.url;\n\n            if (tabPane.id === this.editor.getElement().id + '_' + Selectors.EMBED.mediaTypes.link.toLowerCase()) {\n                tabPane.querySelector(Selectors.EMBED.elements.name).value = params.file;\n            }\n\n            if (fpType === 'subtitle') {\n                // If the file is subtitle file. We need to match the language and label for that file.\n                const subtitleLang = params.file.split('.vtt')[0].split('-').slice(-1)[0];\n                const langObj = this.getMoodleLangObj(subtitleLang);\n                if (langObj) {\n                    const track = element.closest(Selectors.EMBED.elements.track);\n                    track.querySelector(Selectors.EMBED.elements.trackLabel).value = langObj.lang.trim();\n                    track.querySelector(Selectors.EMBED.elements.trackLang).value = langObj.code;\n                }\n            }\n        }\n    }\n\n    addMediaSourceComponent(element, callback) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.source + Selectors.EMBED.elements.mediaSource);\n        const clone = sourceElement.cloneNode(true);\n\n        sourceElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        sourceElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n\n        sourceElement.parentNode.insertBefore(clone, sourceElement.nextSibling);\n\n        if (callback) {\n            callback(clone);\n        }\n    }\n\n    removeMediaSourceComponent(element) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.source + Selectors.EMBED.elements.mediaSource);\n        sourceElement.remove();\n    }\n\n    addTrackComponent(element, callback) {\n        const trackElement = element.closest(Selectors.EMBED.elements.track);\n        const clone = trackElement.cloneNode(true);\n\n        trackElement.querySelector('.removecomponent-wrapper').classList.remove('hidden');\n        trackElement.querySelector('.addcomponent-wrapper').classList.add('hidden');\n\n        trackElement.parentNode.insertBefore(clone, trackElement.nextSibling);\n\n        if (callback) {\n            callback(clone);\n        }\n    }\n\n    removeTrackComponent(element) {\n        const sourceElement = element.closest(Selectors.EMBED.elements.track);\n        sourceElement.remove();\n    }\n\n    getMediumTypeFromTabPane(tabPane) {\n        return tabPane.getAttribute('data-medium-type');\n    }\n\n    getTrackTypeFromTabPane(tabPane) {\n        return tabPane.getAttribute('data-track-kind');\n    }\n\n    getMediaHTML(form) {\n        const mediumType = this.getMediumTypeFromTabPane(form.querySelector('.root.tab-content > .tab-pane.active'));\n        const tabContent = form.querySelector(Selectors.EMBED.elements[mediumType.toLowerCase() + 'Pane']);\n\n        return this['getMediaHTML' + mediumType[0].toUpperCase() + mediumType.substr(1)](tabContent);\n    }\n\n    getMediaHTMLLink(tab) {\n        const context = {\n            url: tab.querySelector(Selectors.EMBED.elements.url).value,\n            name: tab.querySelector(Selectors.EMBED.elements.name).value || false\n        };\n\n        return context.url ? Templates.renderForPromise('tiny_media/embed_media_link', context) : '';\n    }\n\n    getMediaHTMLVideo(tab) {\n        const context = this.getContextForMediaHTML(tab);\n        context.width = tab.querySelector(Selectors.EMBED.elements.width).value || false;\n        context.height = tab.querySelector(Selectors.EMBED.elements.height).value || false;\n        context.poster = tab.querySelector(\n            `${Selectors.EMBED.elements.posterSource} ${Selectors.EMBED.elements.url}`\n        ).value || false;\n\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed_media_video', context) : '';\n    }\n\n    getMediaHTMLAudio(tab) {\n        const context = this.getContextForMediaHTML(tab);\n\n        return context.sources.length ? Templates.renderForPromise('tiny_media/embed_media_audio', context) : '';\n    }\n\n    getContextForMediaHTML(tab) {\n        const tracks = Array.from(tab.querySelectorAll(Selectors.EMBED.elements.track)).map(track => ({\n            track: track.querySelector(Selectors.EMBED.elements.trackSource + ' ' + Selectors.EMBED.elements.url).value,\n            kind: this.getTrackTypeFromTabPane(track.closest('.tab-pane')),\n            label: track.querySelector(Selectors.EMBED.elements.trackLabel).value ||\n                track.querySelector(Selectors.EMBED.elements.trackLang).value,\n            srclang: track.querySelector(Selectors.EMBED.elements.trackLang).value,\n            defaultTrack: track.querySelector(Selectors.EMBED.elements.trackDefault).checked ? \"true\" : null\n        })).filter((track) => !!track.track);\n\n        const sources = Array.from(tab.querySelectorAll(Selectors.EMBED.elements.mediaSource + ' '\n            + Selectors.EMBED.elements.url))\n                .filter((source) => !!source.value)\n                .map((source) => source.value);\n\n        return {\n            sources,\n            description: tab.querySelector(Selectors.EMBED.elements.mediaSource + ' '\n                + Selectors.EMBED.elements.url).value || false,\n            tracks,\n            showControls: tab.querySelector(Selectors.EMBED.elements.mediaControl).checked,\n            autoplay: tab.querySelector(Selectors.EMBED.elements.mediaAutoplay).checked,\n            muted: tab.querySelector(Selectors.EMBED.elements.mediaMute).checked,\n            loop: tab.querySelector(Selectors.EMBED.elements.mediaLoop).checked,\n            title: tab.querySelector(Selectors.EMBED.elements.title).value || false\n        };\n    }\n\n    getFilepickerTypeFromElement(element) {\n        if (element.closest(Selectors.EMBED.elements.posterSource)) {\n            return 'image';\n        }\n        if (element.closest(Selectors.EMBED.elements.trackSource)) {\n            return 'subtitle';\n        }\n\n        return 'media';\n    }\n\n    async clickHandler(e) {\n        const element = e.target;\n\n        const mediaBrowser = element.closest(Selectors.EMBED.actions.mediaBrowser);\n        if (mediaBrowser) {\n            e.preventDefault();\n            const fpType = this.getFilepickerTypeFromElement(element);\n            const params = await displayFilepicker(this.editor, fpType);\n            this.filePickerCallback(params, element, fpType);\n        }\n\n        const addComponentSourceAction = element.closest(Selectors.EMBED.elements.mediaSource + ' .addcomponent');\n        if (addComponentSourceAction) {\n            e.preventDefault();\n            this.addMediaSourceComponent(element);\n        }\n\n        const removeComponentSourceAction = element.closest(Selectors.EMBED.elements.mediaSource + ' .removecomponent');\n        if (removeComponentSourceAction) {\n            e.preventDefault();\n            this.removeMediaSourceComponent(element);\n        }\n\n        const addComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .addcomponent');\n        if (addComponentTrackAction) {\n            e.preventDefault();\n            this.addTrackComponent(element);\n        }\n\n        const removeComponentTrackAction = element.closest(Selectors.EMBED.elements.track + ' .removecomponent');\n        if (removeComponentTrackAction) {\n            e.preventDefault();\n            this.removeTrackComponent(element);\n        }\n\n        // Only allow one track per tab to be selected as \"default\".\n        const trackDefaultAction = element.closest(Selectors.EMBED.elements.trackDefault);\n        if (trackDefaultAction && trackDefaultAction.checked) {\n            const getKind = (el) => this.getTrackTypeFromTabPane(el.parentElement.closest('.tab-pane'));\n\n            element.parentElement\n                .closest('.root.tab-content')\n                .querySelectorAll(Selectors.EMBED.elements.trackDefault)\n                .forEach((select) => {\n                    if (select !== element && getKind(element) === getKind(select)) {\n                        select.checked = false;\n                    }\n                });\n        }\n    }\n\n    async handleDialogueSubmission(event, modal) {\n        const {html} = await this.getMediaHTML(modal.getRoot()[0]);\n        if (html) {\n            if (this.isUpdating) {\n                const selectedNode = this.getSelectedMedia();\n                selectedNode.outerHTML = html;\n                this.isUpdating = false;\n            } else {\n                this.editor.insertContent(html);\n            }\n        }\n    }\n\n    async registerEventListeners(modal) {\n        await modal.getBody();\n        const $root = modal.getRoot();\n        const root = $root[0];\n        if (this.canShowFilePicker) {\n            root.addEventListener('click', this.clickHandler.bind(this));\n        }\n\n        $root.on(ModalEvents.save, this.handleDialogueSubmission.bind(this));\n        $root.on(ModalEvents.hidden, () => {\n            this.currentModal.destroy();\n        });\n        $root.on(ModalEvents.shown, () => {\n            root.querySelectorAll(Selectors.EMBED.elements.trackLang).forEach((dropdown) => {\n                const defaultVal = dropdown.getAttribute('data-value');\n                if (defaultVal) {\n                    dropdown.value = defaultVal;\n                }\n            });\n        });\n    }\n};\n"],"names":["_templates","_interopRequireDefault","ModalFactory","_interopRequireWildcard","ModalEvents","_embedmodal","_selectors","constructor","editor","_defineProperty","this","permissions","canShowFilePicker","filepicker","async","helpStrings","addSource","tracks","subtitles","captions","descriptions","chapters","metadata","_str","get_strings","map","key","component","getTemplateContext","data","languages","prepareMoodleLang","helpIcons","Array","from","Object","entries","getHelpStrings","forEach","_ref","text","toLowerCase","assign","elementid","getElement","id","showfilepicker","langsinstalled","installed","langsavailable","available","link","video","audio","isupdating","isUpdating","getCurrentEmbedData","keys","length","modal","create","type","Modal","TYPE","title","get_string","templateContext","removeOnClose","large","currentModal","registerEventListeners","show","properties","getMediumProperties","processedProperties","getSelectedMedia","mediaElm","selection","getNode","nodeName","querySelector","boolAttr","elem","attr","hasAttribute","getAttribute","sources","medium","querySelectorAll","track","push","src","srclang","label","defaultTrack","source","Selectors","EMBED","mediaTypes","poster","width","height","autoplay","loop","muted","controls","moodleLangs","_options","getMoodleLang","currentLanguage","getCurrentLanguage","_ref2","lang","code","default","_ref3","getMoodleLangObj","subtitleLang","filePickerCallback","params","element","fpType","url","tabPane","closest","elements","value","name","file","split","slice","langObj","trackLabel","trim","trackLang","addMediaSourceComponent","callback","sourceElement","mediaSource","clone","cloneNode","classList","remove","add","parentNode","insertBefore","nextSibling","removeMediaSourceComponent","addTrackComponent","trackElement","removeTrackComponent","getMediumTypeFromTabPane","getTrackTypeFromTabPane","getMediaHTML","form","mediumType","tabContent","toUpperCase","substr","getMediaHTMLLink","tab","context","Templates","renderForPromise","getMediaHTMLVideo","getContextForMediaHTML","concat","posterSource","getMediaHTMLAudio","trackSource","kind","trackDefault","checked","filter","description","showControls","mediaControl","mediaAutoplay","mediaMute","mediaLoop","getFilepickerTypeFromElement","clickHandler","e","target","actions","mediaBrowser","preventDefault","_utils","displayFilepicker","trackDefaultAction","getKind","el","parentElement","select","event","html","getRoot","outerHTML","insertContent","getBody","$root","root","addEventListener","bind","on","save","handleDialogueSubmission","hidden","destroy","shown","dropdown","defaultVal"],"mappings":"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"}