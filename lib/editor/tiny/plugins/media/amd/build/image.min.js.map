{"version":3,"file":"image.min.js","sources":["../src/image.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Media plugin Image class for Moodle.\n *\n * @module      tiny_media/image\n * @copyright   2022 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\nimport * as ModalFactory from 'core/modal_factory';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport Selectors from 'tiny_media/selectors';\nimport Modal from 'tiny_media/imagemodal';\nimport {getImagePermissions} from 'tiny_media/options';\nimport {component} from \"./common\";\n\nexport const MediaImage = class {\n\n    DEFAULTS = {\n        WIDTH: 160,\n        HEIGHT: 160,\n    };\n\n    form = null;\n    rawImageDimensions = null;\n    canShowFilePicker = false;\n    editor = null;\n    currentModal = null;\n    selectedImage = null;\n    imageAlignment = null;\n\n    constructor(editor) {\n        const permissions = getImagePermissions(editor);\n        this.canShowFilePicker = permissions.filepicker;\n        this.editor = editor;\n    }\n\n    async displayDialogue() {\n        // Reset the image dimensions.\n        this.rawImageDimensions = null;\n        let data = {};\n\n        const currentImageData = await this.getCurrentImageData();\n        if (currentImageData) {\n            Object.assign(data, currentImageData);\n        }\n\n        const modal = await ModalFactory.create({\n            type: Modal.TYPE,\n            title: getString('imageproperties', 'tiny_media'),\n            templateContext: await this.getTemplateContext(data),\n            removeOnClose: true,\n            large: true,\n        });\n\n        this.currentModal = modal;\n        await this.registerEventListeners(modal);\n        modal.show();\n    }\n\n    async getImageAlignment(selected = '') {\n        const [\n            alignmentTopString,\n            alignmentMiddleString,\n            alignmentBottomString,\n            alignmentLeftString,\n            alignmentRightString,\n        ] = await getStrings([\n            'alignment_top',\n            'alignment_middle',\n            'alignment_bottom',\n            'alignment_left',\n            'alignment_right',\n        ].map((key) => ({\n            key,\n            component,\n        })));\n\n        let alignments = [\n            {\n                text: alignmentTopString,\n                value: 'text-top'\n            },\n            {\n                text: alignmentMiddleString,\n                value: 'middle'\n            },\n            {\n                text: alignmentBottomString,\n                value: 'text-bottom'\n            },\n            {\n                text: alignmentLeftString,\n                value: 'left'\n            },\n            {\n                text: alignmentRightString,\n                value: 'right'\n            },\n        ];\n\n        if (selected) {\n            alignments.forEach((alignment, index, array) => {\n                if (alignment.value === selected) {\n                    array[index]['selected'] = true;\n                }\n            });\n        }\n\n        return alignments;\n    }\n\n    async getTemplateContext(data) {\n        return Object.assign({}, {\n            elementid: this.editor.id,\n            showfilepicker: this.canShowFilePicker,\n            alignoptions: await this.getImageAlignment(),\n        }, data);\n    }\n\n    async getCurrentImageData() {\n        const properties = this.getSelectedImageProperties();\n        if (!properties) {\n            return false;\n        }\n        if (properties.align) {\n            properties.alignoptions = await this.getImageAlignment(properties.align);\n        }\n        if (properties.src) {\n            properties.haspreview = true;\n        }\n        if (!properties.alt) {\n            properties.presentation = true;\n        }\n        return properties;\n    }\n\n    filePickerCallback(params, self) {\n        if (params.url !== '') {\n            const input = self.form.querySelector(Selectors.IMAGE.elements.url);\n            input.value = params.url;\n\n            // Auto set the width and height.\n            self.form.querySelector(Selectors.IMAGE.elements.width).value = '';\n            self.form.querySelector(Selectors.IMAGE.elements.height).value = '';\n\n            // Load the preview image.\n            self.loadPreviewImage(params.url);\n        }\n    }\n\n    loadPreviewImage(url) {\n        const image = new Image();\n\n        image.onerror = () => {\n            const preview = this.form.querySelector(Selectors.IMAGE.elements.preview);\n            preview.style.display = 'none';\n        };\n\n        image.onload = () => {\n            let input, currentWidth, currentHeight, widthRatio, heightRatio;\n\n            // Store dimensions of the raw image, falling back to defaults for images without dimensions (e.g. SVG).\n            this.rawImageDimensions = {\n                width: image.width || this.DEFAULTS.WIDTH,\n                height: image.height || this.DEFAULTS.HEIGHT,\n            };\n\n            input = this.form.querySelector(Selectors.IMAGE.elements.width);\n            currentWidth = input.value;\n            if (currentWidth === '') {\n                input.value = this.rawImageDimensions.width;\n                currentWidth = \"\" + this.rawImageDimensions.width;\n            }\n\n            input = this.form.querySelector(Selectors.IMAGE.elements.height);\n            currentHeight = input.value;\n            if (currentHeight === '') {\n                input.value = this.rawImageDimensions.height;\n                currentHeight = \"\" + this.rawImageDimensions.height;\n            }\n\n            input = this.form.querySelector(Selectors.IMAGE.elements.preview);\n            input.setAttribute('src', image.src);\n            input.style.display = 'inline';\n\n            input = this.form.querySelector(Selectors.IMAGE.elements.constrain);\n            if (this.isPercentageValue(currentWidth) && this.isPercentageValue(currentHeight)) {\n                input.checked = currentWidth === currentHeight;\n            } else if (image.width === 0 || image.height === 0) {\n                // If we don't have both dimensions of the image, we can't auto-size it, so disable control.\n                input.disabled = 'disabled';\n            } else {\n                // This is the same as comparing to 3 decimal places.\n                widthRatio = Math.round(1000 * parseInt(currentWidth, 10) / image.width);\n                heightRatio = Math.round(1000 * parseInt(currentHeight, 10) / image.height);\n                input.checked = widthRatio === heightRatio;\n            }\n        };\n\n        image.src = url;\n    }\n\n    urlChanged() {\n        const input = this.form.querySelector(Selectors.IMAGE.elements.url);\n\n        if (input.value !== '') {\n            // Load the preview image.\n            this.loadPreviewImage(input.value);\n        }\n    }\n\n    hasErrorUrlField() {\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value;\n        const urlError = url === '';\n        this.toggleVisibility(Selectors.IMAGE.elements.urlWarning, urlError);\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.url], urlError);\n\n        return urlError;\n    }\n\n    hasErrorAltField() {\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value;\n        const presentation = this.form.querySelector(Selectors.IMAGE.elements.presentation).checked;\n        const imageAltError = alt === '' && !presentation;\n        this.toggleVisibility(Selectors.IMAGE.elements.altWarning, imageAltError);\n        this.toggleAriaInvalid([Selectors.IMAGE.elements.alt, Selectors.IMAGE.elements.presentation], imageAltError);\n\n        return imageAltError;\n    }\n\n    toggleVisibility(selector, predicate) {\n        const elements = this.form.querySelectorAll(selector);\n        elements.forEach((element) => {\n            element.style.display = predicate ? 'block' : 'none';\n        });\n    }\n\n    toggleAriaInvalid(selectors, predicate) {\n        selectors.forEach((selector) => {\n            const elements = this.form.querySelectorAll(selector);\n            elements.forEach((element) => {\n                element.setAttribute('aria-invalid', predicate);\n            });\n        });\n    }\n\n    getAlignmentClass(alignment) {\n        return Selectors.IMAGE.elements.alignSettings + '_' + alignment;\n    }\n\n    updateWarning() {\n        const urlError = this.hasErrorUrlField();\n        const imageAltError = this.hasErrorAltField();\n\n        return urlError || imageAltError;\n    }\n\n    setImage() {\n        const url = this.form.querySelector(Selectors.IMAGE.elements.url).value,\n            alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value,\n            width = this.form.querySelector(Selectors.IMAGE.elements.width).value,\n            height = this.form.querySelector(Selectors.IMAGE.elements.height).value,\n            alignment = this.getAlignmentClass(this.form.querySelector(Selectors.IMAGE.elements.alignment).value),\n            presentation = this.form.querySelector(Selectors.IMAGE.elements.presentation).checked,\n            constrain = this.form.querySelector(Selectors.IMAGE.elements.constrain).value,\n            customStyle = this.form.querySelector(Selectors.IMAGE.elements.customStyle).value;\n        let classList = [];\n\n        // Check if there are any accessibility issues.\n        if (this.updateWarning()) {\n            return;\n        }\n\n        if (url !== '') {\n            if (constrain) {\n                classList.push(Selectors.IMAGE.styles.responsive);\n            }\n\n            // Add the alignment class for the image.\n            classList.push(alignment);\n\n            if (!this.isPercentageValue(width) && isNaN(parseInt(width, 10))) {\n                this.form.querySelector(Selectors.IMAGE.elements.width).focus();\n                return;\n            }\n            if (!this.isPercentageValue(height) && isNaN(parseInt(height, 10))) {\n                this.form.querySelector(Selectors.IMAGE.elements.height).focus();\n                return;\n            }\n\n            Templates.render('tiny_media/image', {\n                url: url,\n                alt: alt,\n                width: width,\n                height: height,\n                presentation: presentation,\n                customstyle: customStyle,\n                classlist: classList.join(' ')\n            }).then(html => {\n                this.editor.insertContent(html);\n                this.currentModal.destroy();\n            });\n        }\n    }\n\n    handleKeyupCharacterCount() {\n        const alt = this.form.querySelector(Selectors.IMAGE.elements.alt).value,\n            current = this.form.querySelector('#currentcount');\n        current.innerHTML = alt.length;\n    }\n\n    autoAdjustSize(e, forceHeight) {\n        forceHeight = forceHeight || false;\n\n        let keyField = this.form.querySelector(Selectors.IMAGE.elements.width),\n            keyFieldType = 'width',\n            subField = this.form.querySelector(Selectors.IMAGE.elements.height),\n            subFieldType = 'height',\n            constrainField = this.form.querySelector(Selectors.IMAGE.elements.constrain),\n            keyFieldValue = keyField.value,\n            subFieldValue = subField.value,\n            imagePreview = this.form.querySelector(Selectors.IMAGE.elements.preview),\n            rawPercentage,\n            rawSize;\n\n        // If we do not know the image size, do not do anything.\n        if (!this.rawImageDimensions) {\n            return;\n        }\n\n        // Set the width back to default if it is empty.\n        if (keyFieldValue === '') {\n            keyFieldValue = this.rawImageDimensions[keyFieldType];\n            keyField.value = keyFieldValue;\n            keyFieldValue = keyField.value;\n        }\n\n        // Clear the existing preview sizes.\n        imagePreview.style.width = null;\n        imagePreview.style.height = null;\n\n        // Now update with the new values.\n        if (!constrainField.checked) {\n            // We are not keeping the image proportion - update the preview accordingly.\n\n            // Width.\n            if (this.isPercentageValue(keyFieldValue)) {\n                rawPercentage = parseInt(keyFieldValue, 10);\n                rawSize = this.rawImageDimensions.width / 100 * rawPercentage;\n                imagePreview.style.width = rawSize + 'px';\n            } else {\n                imagePreview.style.width = keyFieldValue + 'px';\n            }\n\n            // Height.\n            if (this.isPercentageValue(subFieldValue)) {\n                rawPercentage = parseInt(subFieldValue, 10);\n                rawSize = this.rawImageDimensions.height / 100 * rawPercentage;\n                imagePreview.style.height = rawSize + 'px';\n            } else {\n                imagePreview.style.height = subFieldValue + 'px';\n            }\n        } else {\n            // We are keeping the image in proportion.\n            if (forceHeight) {\n                // By default, we update based on width. Swap the key and sub fields around to achieve a height-based scale.\n                let temporaryValue;\n                temporaryValue = keyField;\n                subField = temporaryValue;\n\n                temporaryValue = keyFieldType;\n                keyFieldType = subFieldType;\n                subFieldType = temporaryValue;\n\n                temporaryValue = keyFieldValue;\n                keyFieldValue = subFieldValue;\n                subFieldValue = temporaryValue;\n            }\n\n            if (this.isPercentageValue(keyFieldValue)) {\n                // This is a percentage based change. Copy it verbatim.\n                subFieldValue = keyFieldValue;\n\n                // Set the width to the calculated pixel width.\n                rawPercentage = parseInt(keyFieldValue, 10);\n                rawSize = this.rawImageDimensions.width / 100 * rawPercentage;\n\n                // And apply the width/height to the container.\n                imagePreview.style.width = rawSize;\n                rawSize = this.rawImageDimensions.height / 100 * rawPercentage;\n                imagePreview.style.height = rawSize;\n            } else {\n                // Calculate the scaled subFieldValue from the keyFieldValue.\n                subFieldValue = Math.round((keyFieldValue / this.rawImageDimensions[keyFieldType]) *\n                    this.rawImageDimensions[subFieldType]);\n\n                if (forceHeight) {\n                    imagePreview.style.width = subFieldValue;\n                    imagePreview.style.height = keyFieldValue;\n                } else {\n                    imagePreview.style.width = keyFieldValue;\n                    imagePreview.style.height = subFieldValue;\n                }\n            }\n\n            // Update the subField's value within the form to reflect the changes.\n            subField.value = subFieldValue;\n        }\n    }\n\n    getSelectedImageProperties() {\n        let properties = {\n                src: null,\n                alt: null,\n                width: null,\n                height: null,\n                align: '',\n                presentation: false\n            },\n\n            // Get the current selection.\n            image = this.getSelectedImage(),\n            width,\n            height,\n            style;\n\n        if (image) {\n            image = this.removeLegacyAlignment(image);\n            this.selectedImage = image;\n\n            style = image.style;\n            properties.customstyle = style;\n\n            width = image.width;\n            if (!this.isPercentageValue(String(width))) {\n                width = parseInt(width, 10);\n            }\n            height = image.height;\n            if (!this.isPercentageValue(String(height))) {\n                height = parseInt(height, 10);\n            }\n\n            if (width !== 0) {\n                properties.width = width;\n            }\n            if (height !== 0) {\n                properties.height = height;\n            }\n            this.getAlignmentProperties(image, properties);\n            properties.src = image.getAttribute('src');\n            properties.alt = image.getAttribute('alt') || '';\n            properties.presentation = (image.getAttribute('role') === 'presentation');\n            return properties;\n        }\n\n        // No image selected - clean up.\n        this.selectedImage = null;\n        return false;\n    }\n\n    removeLegacyAlignment(imageNode) {\n        if (!imageNode.style.margin) {\n            // There is no margin therefore this cannot match any known alignments.\n            return imageNode;\n        }\n\n        Selectors.IMAGE.alignments.some(alignment => {\n            if (imageNode.style[alignment.name] !== alignment.value) {\n                // The name/value do not match. Skip.\n                return false;\n            }\n            const normalisedNode = document.createElement('div');\n            normalisedNode.style.margin = alignment.margin;\n            if (imageNode.style.margin !== normalisedNode.style.margin) {\n                // The margin does not match.\n                return false;\n            }\n\n            imageNode.classList.add(this.getAlignmentClass(alignment.value));\n            imageNode.style[alignment.name] = null;\n            imageNode.style.margin = null;\n\n            return true;\n        });\n\n        return imageNode;\n    }\n\n    getAlignmentProperties(image, properties) {\n        let complete,\n            defaultAlignment;\n\n        // Check for an alignment value.\n        complete = Selectors.IMAGE.alignments.some(alignment => {\n            const classname = this.getAlignmentClass(alignment.value);\n            if (image.classList.contains(classname)) {\n                properties.align = alignment.value;\n                return true;\n            }\n\n            if (alignment.isDefault) {\n                defaultAlignment = alignment.value;\n            }\n\n            return false;\n        });\n\n        if (!complete && defaultAlignment) {\n            properties.align = defaultAlignment;\n        }\n    }\n\n    getSelectedImage() {\n        const imgElm = this.editor.selection.getNode();\n        const figureElm = this.editor.dom.getParent(imgElm, 'figure.image');\n        if (figureElm) {\n            return this.editor.dom.select('img', figureElm)[0];\n        }\n        if (imgElm && (imgElm.nodeName !== 'IMG' || this.isPlaceholderImage(imgElm))) {\n            return null;\n        }\n        return imgElm;\n    }\n\n    isPlaceholderImage(imgElm) {\n        return imgElm.nodeName === 'IMG' && (imgElm.hasAttribute('data-mce-object') || imgElm.hasAttribute('data-mce-placeholder'));\n    }\n\n    isPercentageValue(value) {\n        return value.match(/\\d+%/);\n    }\n\n    async registerEventListeners(modal) {\n        await modal.getBody();\n        const $root = modal.getRoot();\n        const root = $root[0];\n        this.form = root.querySelector(Selectors.IMAGE.elements.form);\n\n        root.addEventListener('click', e => {\n            const submitAction = e.target.closest(Selectors.IMAGE.actions.submit);\n            const imageBrowserAction = e.target.closest(Selectors.IMAGE.actions.imageBrowser);\n            if (submitAction) {\n                e.preventDefault();\n                this.setImage();\n            }\n            if (imageBrowserAction && this.canShowFilePicker) {\n                e.preventDefault();\n                displayFilepicker(this.editor, 'image').then((params) => {\n                    const self = this;\n                    this.filePickerCallback(params, self);\n                }).catch();\n            }\n        });\n\n        root.addEventListener('change', e => {\n            const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n            const presentationEle = e.target.closest(Selectors.IMAGE.elements.presentation);\n            const constrainEle = e.target.closest(Selectors.IMAGE.elements.constrain);\n            if (urlEle) {\n                this.hasErrorUrlField();\n            }\n            if (presentationEle) {\n                this.hasErrorAltField();\n            }\n            if (constrainEle) {\n                this.autoAdjustSize(e, true);\n            }\n        });\n\n        root.addEventListener('blur', e => {\n            if (e.target.nodeType === Node.ELEMENT_NODE) {\n                const urlEle = e.target.closest(Selectors.IMAGE.elements.url);\n                const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n                const widthEle = e.target.closest(Selectors.IMAGE.elements.width);\n                const heightEle = e.target.closest(Selectors.IMAGE.elements.height);\n                if (urlEle) {\n                    this.urlChanged();\n                }\n                if (altEle) {\n                    this.hasErrorAltField();\n                }\n                if (widthEle) {\n                    this.autoAdjustSize(e);\n                }\n                if (heightEle) {\n                    this.autoAdjustSize(e, true);\n                }\n            }\n        }, true);\n\n        // Character count.\n        root.addEventListener('keyup', e => {\n            const altEle = e.target.closest(Selectors.IMAGE.elements.alt);\n            if (altEle) {\n                this.handleKeyupCharacterCount();\n            }\n        });\n    }\n};\n"],"names":["constructor","editor","WIDTH","HEIGHT","permissions","canShowFilePicker","filepicker","rawImageDimensions","data","currentImageData","this","getCurrentImageData","Object","assign","modal","ModalFactory","create","type","Modal","TYPE","title","templateContext","getTemplateContext","removeOnClose","large","currentModal","registerEventListeners","show","selected","alignmentTopString","alignmentMiddleString","alignmentBottomString","alignmentLeftString","alignmentRightString","map","key","component","alignments","text","value","forEach","alignment","index","array","elementid","id","showfilepicker","alignoptions","getImageAlignment","properties","getSelectedImageProperties","align","src","haspreview","alt","presentation","filePickerCallback","params","self","url","form","querySelector","Selectors","IMAGE","elements","width","height","loadPreviewImage","image","Image","onerror","preview","style","display","onload","input","currentWidth","currentHeight","widthRatio","heightRatio","DEFAULTS","setAttribute","constrain","isPercentageValue","checked","disabled","Math","round","parseInt","urlChanged","hasErrorUrlField","urlError","toggleVisibility","urlWarning","toggleAriaInvalid","hasErrorAltField","imageAltError","altWarning","selector","predicate","querySelectorAll","element","selectors","getAlignmentClass","alignSettings","updateWarning","setImage","customStyle","classList","push","styles","responsive","isNaN","focus","render","customstyle","classlist","join","then","html","insertContent","destroy","handleKeyupCharacterCount","innerHTML","length","autoAdjustSize","e","forceHeight","rawPercentage","rawSize","keyField","keyFieldType","subField","subFieldType","constrainField","keyFieldValue","subFieldValue","imagePreview","temporaryValue","getSelectedImage","removeLegacyAlignment","selectedImage","String","getAlignmentProperties","getAttribute","imageNode","margin","some","name","normalisedNode","document","createElement","add","complete","defaultAlignment","classname","contains","isDefault","imgElm","selection","getNode","figureElm","dom","getParent","select","nodeName","isPlaceholderImage","hasAttribute","match","getBody","root","getRoot","addEventListener","submitAction","target","closest","actions","submit","imageBrowserAction","imageBrowser","preventDefault","catch","urlEle","presentationEle","constrainEle","nodeType","Node","ELEMENT_NODE","altEle","widthEle","heightEle"],"mappings":"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"}