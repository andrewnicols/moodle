define("tiny_native/plugin",["exports","editor_tiny/loader","editor_tiny/utils","./common"],(function(_exports,_loader,_utils,_common){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0;
/**
   * Tiny tiny_native for Moodle.
   *
   * @module      plugintype_pluginname/plugin
   * @copyright   2023 Andrew Lyons <andrew@nicols.co.uk>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */
var _default=new Promise((async resolve=>{const[tinyMCE,pluginMetadata]=await Promise.all([(0,_loader.getTinyMCE)(),(0,_utils.getPluginMetadata)(_common.component,_common.pluginName)]);tinyMCE.PluginManager.add(_common.pluginName,(()=>pluginMetadata)),resolve([_common.pluginName,{configure:(instanceConfig,options)=>{var _options$plugins$tiny,_options$plugins$tiny2;const nativePlugins=[],pluginFiles=null===(_options$plugins$tiny=options.plugins["tiny_native/plugin"])||void 0===_options$plugins$tiny||null===(_options$plugins$tiny2=_options$plugins$tiny.config)||void 0===_options$plugins$tiny2?void 0:_options$plugins$tiny2.pluginfiles;return pluginFiles?(Object.entries(pluginFiles).forEach((_ref=>{let[pluginName,pluginUrl]=_ref;tinyMCE.PluginManager.load(pluginName,pluginUrl),nativePlugins.push(pluginName)})),{plugins:[].concat(instanceConfig.plugins,...nativePlugins)}):{}}}])}));return _exports.default=_default,_exports.default}));

//# sourceMappingURL=plugin.min.js.map