{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Tiny tiny_native for Moodle.\n *\n * @module      plugintype_pluginname/plugin\n * @copyright   2023 Andrew Lyons <andrew@nicols.co.uk>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// eslint-disable-next-line no-unused-vars\nimport {getTinyMCE, baseUrl} from 'editor_tiny/loader';\nimport {getPluginMetadata} from 'editor_tiny/utils';\n\nimport {component, pluginName} from './common';\n\n// Setup the tiny_native Plugin.\nexport default new Promise(async(resolve) => {\n    // Note: The PluginManager.add function does not support asynchronous configuration.\n    // Perform any asynchronous configuration here, and then call the PluginManager.add function.\n    const [\n        tinyMCE,\n        pluginMetadata,\n    ] = await Promise.all([\n        getTinyMCE(),\n        getPluginMetadata(component, pluginName),\n    ]);\n\n    // tinyMCE.PluginManager.load('BootstrapTools', `${baseUrl}/plugins/tiny_native/bootstraptools/plugin.js`);\n\n    // Reminder: Any asynchronous code must be run before this point.\n    tinyMCE.PluginManager.add(pluginName, () => {\n        // Return the pluginMetadata object. This is used by TinyMCE to display a help link for your plugin.\n        return pluginMetadata;\n    });\n\n    resolve([pluginName, {\n        configure: (instanceConfig, options) => {\n            const nativePlugins = [];\n            const pluginFiles = options.plugins['tiny_native/plugin']?.config?.pluginfiles;\n            if (!pluginFiles) {\n                return {};\n            }\n            Object.entries(pluginFiles).forEach(([pluginName, pluginUrl]) => {\n                tinyMCE.PluginManager.load(pluginName, pluginUrl);\n                nativePlugins.push(pluginName);\n            });\n\n            return {\n                plugins: [].concat(instanceConfig.plugins, ...nativePlugins),\n            };\n        },\n    }]);\n});\n"],"names":["Promise","async","tinyMCE","pluginMetadata","all","component","pluginName","PluginManager","add","resolve","configure","instanceConfig","options","nativePlugins","pluginFiles","plugins","_options$plugins$tiny","config","_options$plugins$tiny2","pluginfiles","Object","entries","forEach","_ref","pluginUrl","load","push","concat"],"mappings":";;;;;;;;aA8Be,IAAIA,SAAQC,MAAAA,gBAInBC,QACAC,sBACMH,QAAQI,IAAI,EAClB,yBACA,4BAAkBC,kBAAWC,sBAMjCJ,QAAQK,cAAcC,IAAIF,oBAAY,IAE3BH,iBAGXM,QAAQ,CAACH,mBAAY,CACjBI,UAAW,CAACC,eAAgBC,kEAClBC,cAAgB,GAChBC,0CAAcF,QAAQG,QAAQ,uFAAhBC,sBAAuCC,gDAAvCC,uBAA+CC,mBAC9DL,aAGLM,OAAOC,QAAQP,aAAaQ,SAAQC,WAAEjB,WAAYkB,gBAC9CtB,QAAQK,cAAckB,KAAKnB,WAAYkB,WACvCX,cAAca,KAAKpB,eAGhB,CACHS,QAAS,GAAGY,OAAOhB,eAAeI,WAAYF,iBARvC"}