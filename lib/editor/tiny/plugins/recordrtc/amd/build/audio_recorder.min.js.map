{"version":3,"file":"audio_recorder.min.js","sources":["../src/audio_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Record RTC - audio recorder configuration.\n *\n * @module      tiny_recordrtc/audio\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport BaseClass from './base_recorder';\nimport Modal from './modal';\nimport ModalRegistry from 'core/modal_registry';\nimport {component} from 'tiny_recordrtc/common';\n\nexport default class Audio extends BaseClass {\n    configurePlayer() {\n        return this.modalRoot.querySelector('audio');\n    }\n\n    getSupportedTypes() {\n        return [\n            'audio/webm;codecs=opus',\n            'audio/ogg;codecs=opus',\n        ];\n    }\n\n    getParsedRecordingOptions() {\n        return {\n            audioBitsPerSecond: parseInt(this.config.audiobitrate),\n        };\n    }\n\n    getMediaConstraints() {\n        return {\n            audio: true,\n        };\n    }\n\n    getRecordingType() {\n        return 'audio';\n    }\n\n    getTimeLimit() {\n        return this.config.audiotimelimit;\n    }\n\n    getEmbedTemplateName() {\n        return 'tiny_recordrtc/embed_audio';\n    }\n\n    getFileName(prefix) {\n        return `${prefix}-audio.ogg`;\n    }\n\n    static getModalClass() {\n        const modalType = `${component}/audio_recorder`;\n        const registration = ModalRegistry.get(modalType);\n        if (registration) {\n            return registration.module;\n        }\n\n        const AudioModal = class extends Modal {\n            static TYPE = modalType;\n            static TEMPLATE = `${component}/audio_recorder`;\n        };\n\n        ModalRegistry.register(AudioModal.TYPE, AudioModal, AudioModal.TEMPLATE);\n        return AudioModal;\n    }\n}\n"],"names":["_base_recorder","_interopRequireDefault","_modal","_modal_registry","Audio","BaseClass","configurePlayer","this","modalRoot","querySelector","getSupportedTypes","getParsedRecordingOptions","audioBitsPerSecond","parseInt","config","audiobitrate","getMediaConstraints","audio","getRecordingType","getTimeLimit","audiotimelimit","getEmbedTemplateName","getFileName","prefix","concat","static","_class","modalType","component","registration","ModalRegistry","get","module","AudioModal","Modal","register","TYPE","TEMPLATE"],"mappings":"qgBAuBAA,eAAAC,uBAAAD,gBACAE,OAAAD,uBAAAC,QACAC,gBAAAF,uBAAAE,iBAGqBC,MAAAA,cAAcC,eAAAA,QAC/BC,kBACI,OAAOC,KAAKC,UAAUC,cAAc,QACvC,CAEDC,oBACI,MAAO,CACH,yBACA,wBAEP,CAEDC,4BACW,MAAA,CACHC,mBAAoBC,SAASN,KAAKO,OAAOC,cAEhD,CAEDC,sBACW,MAAA,CACHC,OAAO,EAEd,CAEDC,mBACI,MAAO,OACV,CAEDC,eACW,OAAAZ,KAAKO,OAAOM,cACtB,CAEDC,uBACI,MAAO,4BACV,CAEDC,YAAYC,QACR,MAAA,GAAAC,OAAUD,OAAV,aACH,CAEmBE,uBAAG,IAAAC,OACbC,MAAAA,UAAeC,GAAAA,OAAAA,QAAAA,UAArB,mBACMC,aAAeC,gBAAAA,QAAcC,IAAIJ,WACvC,GAAIE,aACOA,OAAAA,aAAaG,OAGxB,MAAMC,YACYN,gBADFD,OAAG,cAAcQ,OAAAA,UACfP,OAAAA,WACOC,gBAAAA,OAAAA,WAAAA,GAAAA,OAAAA,QAAAA,UAFzB,oBAAAF,QAMA,OADcS,gBAAAA,QAAAA,SAASF,WAAWG,KAAMH,WAAYA,WAAWI,UACxDJ,UACV"}