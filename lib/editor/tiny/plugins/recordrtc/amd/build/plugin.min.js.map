{"version":3,"file":"plugin.min.js","sources":["../src/plugin.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Record RTC plugin for Moodle.\n *\n * @module      tiny_recordrtc/plugin\n * @copyright   2022, Stevani Andolo <stevani@hotmail.com.au>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {getTinyMCE} from 'editor_tiny/loader';\nimport {getPluginMetadata} from 'editor_tiny/utils';\nimport getSetupAudioCommands from './commands_audio';\nimport getSetupVideoCommands from './commands_video';\nimport * as Configuration from './configuration';\nimport * as Options from './options';\nimport {\n    component,\n    pluginName\n} from './common';\n\nexport default new Promise(async(resolve) => {\n    const [\n        tinyMCE,\n        setupAudioCommands,\n        setupVideoCommands,\n        pluginMetadata,\n    ] = await Promise.all([\n        getTinyMCE(),\n        getSetupAudioCommands(),\n        getSetupVideoCommands(),\n        getPluginMetadata(component, pluginName),\n    ]);\n\n    tinyMCE.PluginManager.add(`${component}/plugin`, (editor) => {\n        // Register options.\n        Options.register(editor);\n\n        // Setup the Commands (buttons, menu items, and so on) for video.\n        setupVideoCommands(editor);\n\n        // Setup the Commands (buttons, menu items, and so on) for audio.\n        setupAudioCommands(editor);\n\n        return pluginMetadata;\n    });\n\n    // Resolve the Media Plugin and include configuration.\n    resolve([`${component}/plugin`, Configuration]);\n});\n"],"names":["_commands_audio","_interopRequireDefault","_commands_video","Configuration","_interopRequireWildcard","Options","_default","Promise","async","tinyMCE","setupAudioCommands","setupVideoCommands","pluginMetadata","all","_loader","getTinyMCE","default","component","pluginName","PluginManager","add","editor","register","resolve","concat"],"mappings":";;;;;;;qFAwBAA,gBAAAC,uBAAAD,iBACAE,gBAAAD,uBAAAC,iBACAC,cAAAC,wBAAAD,eACAE,QAAAD,wBAAAC,SAMe,IAAAC,SAAA,IAAIC,SAAQC,gBACjB,MACFC,QACAC,mBACAC,mBACAC,sBACML,QAAQM,IAAI,EAClB,EADkBC,QAAAC,eAElB,EAFkBf,gBAAAgB,YAGlB,EAHkBd,gBAAAc,YAIlB,EAAkBC,OAAAA,mBAAAA,QAAAA,UAAWC,QAAAA,cAGjCT,QAAQU,cAAcC,IAAOH,GAAAA,OAAAA,QAAAA,UAAqBI,YAAAA,SAE9ChB,QAAQiB,SAASD,QAGjBV,mBAAmBU,QAGnBX,mBAAmBW,QAEZT,kBAIXW,QAAQ,CAAA,GAAAC,OAAIP,kBAAoBd,WAAAA,eAAhC"}