{"version":3,"file":"configuration.min.js","sources":["../src/configuration.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Premium configuration.\n *\n * @module      tiny_premium/configuration\n * @copyright   2023 David Woloszyn <david.woloszyn@moodle.com>\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {\n    addToolbarButton,\n    //addMenubarItem,\n    addToolbarSection\n    //addContextmenuItem\n} from 'editor_tiny/utils';\nimport {getPremiumPlugins} from 'tiny_premium/external';\nimport Config from 'core/config';\n\nconst currentContextId = Config.contextid;\n\nconst configureToolbar = (toolbar) => {\n    // Add premium toolbar sections to house all the plugins with no natural home.\n    toolbar = addToolbarSection(toolbar, 'premium_a', 'advanced', true);\n    toolbar = addToolbarSection(toolbar, 'premium_b', 'formatting', true);\n    return toolbar;\n};\n\nexport const configure = (instanceConfig) => {\n    return insertPlugins(instanceConfig);\n};\n\nconst insertPlugins = (instanceConfig) => {\n    let plugins = instanceConfig.plugins;\n    let menu = instanceConfig.menu;\n    let toolbar = configureToolbar(instanceConfig.toolbar);\n    let contextmenu = instanceConfig.contextmenu;\n    let pluginsettings = {};\n\n    return getPremiumPlugins(currentContextId).then(function(data) {\n        // I am getting the plugin data I need here.\n        // I will eventually loop through it to add the plugins.\n        window.console.log(data);\n\n        // Advanced Typography.\n        plugins += ` typography`;\n        toolbar = addToolbarButton(toolbar, 'premium_b', 'typography');\n\n        // Case Change.\n        plugins += ` casechange`;\n        toolbar = addToolbarButton(toolbar, 'premium_a', 'casechange');\n\n        // Checklist.\n        plugins += ` checklist`;\n        toolbar = addToolbarButton(toolbar, 'lists', 'checklist');\n\n        return {\n            plugins,\n            toolbar,\n            menu,\n            contextmenu,\n            ...pluginsettings\n        };\n    });\n\n};"],"names":["currentContextId","contextid","instanceConfig","insertPlugins","plugins","menu","toolbar","configureToolbar","contextmenu","pluginsettings","then","data","window","console","log"],"mappings":";;;;;;;6FAgCMA,mFAA0BC,6BASNC,gBACfC,cAAcD,sBAGnBC,cAAiBD,qBACfE,QAAUF,eAAeE,QACzBC,KAAOH,eAAeG,KACtBC,QAdkBA,CAAAA,UAEtBA,SAAU,4BAAkBA,QAAS,YAAa,YAAY,IACpD,4BAAkBA,QAAS,YAAa,cAAc,IAWlDC,CAAiBL,eAAeI,SAC1CE,YAAcN,eAAeM,YAC7BC,eAAiB,UAEd,+BAAkBT,kBAAkBU,MAAK,SAASC,aAGrDC,OAAOC,QAAQC,IAAIH,MAGnBP,uBACAE,SAAU,2BAAiBA,QAAS,YAAa,cAGjDF,uBACAE,SAAU,2BAAiBA,QAAS,YAAa,cAGjDF,sBACAE,SAAU,2BAAiBA,QAAS,QAAS,aAEtC,CACHF,QAAAA,QACAE,QAAAA,QACAD,KAAAA,KACAG,YAAAA,eACGC"}