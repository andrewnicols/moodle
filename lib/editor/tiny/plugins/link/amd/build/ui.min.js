define("tiny_link/ui",["exports","core/modal_factory","core/modal_events","editor_tiny/utils","tiny_link/modal","tiny_link/options","tiny_link/link","tiny_link/selectors"],(function(_exports,_modal_factory,_modal_events,_utils,_modal,_options,_link,_selectors){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Tiny Link UI.
   *
   * @module      tiny_link/ui
   * @copyright   2023 Huong Nguyen <huongnv13@gmail.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */let currentForm;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.handleAction=void 0,_modal_factory=_interopRequireDefault(_modal_factory),_modal_events=_interopRequireDefault(_modal_events),_modal=_interopRequireDefault(_modal),_selectors=_interopRequireDefault(_selectors);let hasTextToDisplay=!1,isUpdating=!1;_exports.handleAction=function(editor){let unlink=arguments.length>1&&void 0!==arguments[1]&&arguments[1];unlink?(0,_link.unSetLink)(editor):displayDialogue(editor)};const displayDialogue=async editor=>{let data={};const currentLinkData=(0,_link.getCurrentLinkData)(editor);0!==Object.keys(currentLinkData).length&&(isUpdating=!0,Object.assign(data,currentLinkData),currentLinkData.hasTextToDisplay&&(hasTextToDisplay=!0));const modalPromises=await _modal_factory.default.create({type:_modal.default.TYPE,templateContext:getTemplateContext(editor,data),large:!1});modalPromises.show();const $root=await modalPromises.getRoot(),root=$root[0];currentForm=root.querySelector("form"),$root.on(_modal_events.default.hidden,(()=>{modalPromises.destroy()})),root.addEventListener("click",(e=>{const submitAction=e.target.closest(_selectors.default.actions.submit),linkBrowserAction=e.target.closest(_selectors.default.actions.linkBrowser);submitAction&&(e.preventDefault(),(0,_link.setLink)(currentForm,editor),modalPromises.destroy(),isUpdating=!1),linkBrowserAction&&(e.preventDefault(),(0,_utils.displayFilepicker)(editor,"link").then((params=>(filePickerCallback(params,currentForm,editor),modalPromises.destroy()))).catch())})),root.querySelector(_selectors.default.elements.urlEntry).addEventListener("keyup",(()=>{updateTextToDisplay(currentForm)})),root.querySelector(_selectors.default.elements.urlEntry).addEventListener("change",(()=>{updateTextToDisplay(currentForm)})),root.querySelector(_selectors.default.elements.urlText).addEventListener("keyup",(()=>{setTextToDisplayState(currentForm)}))},getTemplateContext=(editor,data)=>Object.assign({},{elementid:editor.id,showfilepicker:(0,_options.getPermissions)(editor).filepicker,isupdating:isUpdating},data),filePickerCallback=(params,currentForm,editor)=>{if(params.url){currentForm.querySelector(_selectors.default.elements.urlEntry).value=params.url,(0,_link.setLink)(currentForm,editor)}},updateTextToDisplay=currentForm=>{const urlEntry=currentForm.querySelector(_selectors.default.elements.urlEntry),urlText=currentForm.querySelector(_selectors.default.elements.urlText),urlEntryVal=urlEntry.value;hasTextToDisplay||(urlText.value=urlEntryVal)},setTextToDisplayState=currentForm=>{const urlTextVal=currentForm.querySelector(_selectors.default.elements.urlText).value;hasTextToDisplay=""!==urlTextVal}}));

//# sourceMappingURL=ui.min.js.map