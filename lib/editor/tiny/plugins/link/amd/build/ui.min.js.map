{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny Link UI.\n *\n * @module      tiny_link/ui\n * @copyright   2023 Huong Nguyen <huongnv13@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {displayFilepicker} from 'editor_tiny/utils';\nimport LinkModal from 'tiny_link/modal';\nimport {getPermissions} from \"tiny_link/options\";\nimport {setLink, getCurrentLinkData, unSetLink} from \"tiny_link/link\";\nimport Selectors from 'tiny_link/selectors';\n\nlet currentForm;\nlet hasTextToDisplay = false;\nlet isUpdating = false;\n\n/**\n * Handle action.\n *\n * @param {TinyMCE} editor\n * @param {boolean} unlink\n */\nexport const handleAction = (editor, unlink = false) => {\n    if (!unlink) {\n        displayDialogue(editor);\n    } else {\n        unSetLink(editor);\n    }\n};\n\n/**\n * Display the link dialogue.\n *\n * @param {TinyMCE} editor\n * @returns {Promise<void>}\n */\nconst displayDialogue = async(editor) => {\n    let data = {};\n    const currentLinkData = getCurrentLinkData(editor);\n    if (Object.keys(currentLinkData).length !== 0) {\n        isUpdating = true;\n        Object.assign(data, currentLinkData);\n        if (currentLinkData.hasTextToDisplay) {\n            hasTextToDisplay = true;\n        }\n    }\n\n    const modalPromises = await ModalFactory.create({\n        type: LinkModal.TYPE,\n        templateContext: getTemplateContext(editor, data),\n        large: false,\n    });\n\n    modalPromises.show();\n    const $root = await modalPromises.getRoot();\n    const root = $root[0];\n    currentForm = root.querySelector('form');\n\n    $root.on(ModalEvents.hidden, () => {\n        modalPromises.destroy();\n    });\n\n    root.addEventListener('click', (e) => {\n        const submitAction = e.target.closest(Selectors.actions.submit);\n        const linkBrowserAction = e.target.closest(Selectors.actions.linkBrowser);\n        if (submitAction) {\n            e.preventDefault();\n            setLink(currentForm, editor);\n            modalPromises.destroy();\n            isUpdating = false;\n        }\n        if (linkBrowserAction) {\n            e.preventDefault();\n            displayFilepicker(editor, 'link').then((params) => {\n                filePickerCallback(params, currentForm, editor);\n                return modalPromises.destroy();\n            }).catch();\n        }\n    });\n\n    root.querySelector(Selectors.elements.urlEntry).addEventListener('keyup', () => {\n        updateTextToDisplay(currentForm);\n    });\n\n    root.querySelector(Selectors.elements.urlEntry).addEventListener('change', () => {\n        updateTextToDisplay(currentForm);\n    });\n\n    root.querySelector(Selectors.elements.urlText).addEventListener('keyup', () => {\n        setTextToDisplayState(currentForm);\n    });\n};\n\n/**\n * Get template context.\n *\n * @param {TinyMCE} editor\n * @param {Object} data\n * @returns {Object}\n */\nconst getTemplateContext = (editor, data) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n        showfilepicker: getPermissions(editor).filepicker,\n        isupdating: isUpdating,\n    }, data);\n};\n\n/**\n * Update the dialogue after a link was selected in the File Picker.\n *\n * @param {Object} params\n * @param {Element} currentForm\n * @param {TinyMCE} editor\n */\nconst filePickerCallback = (params, currentForm, editor) => {\n    if (params.url) {\n        const inputUrl = currentForm.querySelector(Selectors.elements.urlEntry);\n        inputUrl.value = params.url;\n        setLink(currentForm, editor);\n    }\n};\n\n/**\n * Update the text to display if the user does not provide the custom text.\n *\n * @param {Element} currentForm\n */\nconst updateTextToDisplay = (currentForm) => {\n    const urlEntry = currentForm.querySelector(Selectors.elements.urlEntry);\n    const urlText = currentForm.querySelector(Selectors.elements.urlText);\n    const urlEntryVal = urlEntry.value;\n    if (!hasTextToDisplay) {\n        urlText.value = urlEntryVal;\n    }\n};\n\n/**\n * Set the current text to display state.\n *\n * @param {Element} currentForm\n */\nconst setTextToDisplayState = (currentForm) => {\n    const urlText = currentForm.querySelector(Selectors.elements.urlText);\n    const urlTextVal = urlText.value;\n    if (urlTextVal !== '') {\n        hasTextToDisplay = true;\n    } else {\n        hasTextToDisplay = false;\n    }\n};\n"],"names":["currentForm","hasTextToDisplay","isUpdating","editor","unlink","displayDialogue","async","data","currentLinkData","Object","keys","length","assign","modalPromises","ModalFactory","create","type","LinkModal","TYPE","templateContext","getTemplateContext","large","show","$root","getRoot","root","querySelector","on","ModalEvents","hidden","destroy","addEventListener","e","submitAction","target","closest","Selectors","actions","submit","linkBrowserAction","linkBrowser","preventDefault","then","params","filePickerCallback","catch","elements","urlEntry","updateTextToDisplay","urlText","setTextToDisplayState","elementid","id","showfilepicker","filepicker","isupdating","url","value","urlEntryVal","urlTextVal"],"mappings":";;;;;;;SA+BIA,mSACAC,kBAAmB,EACnBC,YAAa,wBAQW,SAACC,YAAQC,+DAC5BA,2BAGSD,QAFVE,gBAAgBF,eAYlBE,gBAAkBC,MAAAA,aAChBC,KAAO,SACLC,iBAAkB,4BAAmBL,QACC,IAAxCM,OAAOC,KAAKF,iBAAiBG,SAC7BT,YAAa,EACbO,OAAOG,OAAOL,KAAMC,iBAChBA,gBAAgBP,mBAChBA,kBAAmB,UAIrBY,oBAAsBC,uBAAaC,OAAO,CAC5CC,KAAMC,eAAUC,KAChBC,gBAAiBC,mBAAmBjB,OAAQI,MAC5Cc,OAAO,IAGXR,cAAcS,aACRC,YAAcV,cAAcW,UAC5BC,KAAOF,MAAM,GACnBvB,YAAcyB,KAAKC,cAAc,QAEjCH,MAAMI,GAAGC,sBAAYC,QAAQ,KACzBhB,cAAciB,aAGlBL,KAAKM,iBAAiB,SAAUC,UACtBC,aAAeD,EAAEE,OAAOC,QAAQC,mBAAUC,QAAQC,QAClDC,kBAAoBP,EAAEE,OAAOC,QAAQC,mBAAUC,QAAQG,aACzDP,eACAD,EAAES,mCACMzC,YAAaG,QACrBU,cAAciB,UACd5B,YAAa,GAEbqC,oBACAP,EAAES,8CACgBtC,OAAQ,QAAQuC,MAAMC,SACpCC,mBAAmBD,OAAQ3C,YAAaG,QACjCU,cAAciB,aACtBe,YAIXpB,KAAKC,cAAcU,mBAAUU,SAASC,UAAUhB,iBAAiB,SAAS,KACtEiB,oBAAoBhD,gBAGxByB,KAAKC,cAAcU,mBAAUU,SAASC,UAAUhB,iBAAiB,UAAU,KACvEiB,oBAAoBhD,gBAGxByB,KAAKC,cAAcU,mBAAUU,SAASG,SAASlB,iBAAiB,SAAS,KACrEmB,sBAAsBlD,iBAWxBoB,mBAAqB,CAACjB,OAAQI,OACzBE,OAAOG,OAAO,GAAI,CACrBuC,UAAWhD,OAAOiD,GAClBC,gBAAgB,2BAAelD,QAAQmD,WACvCC,WAAYrD,YACbK,MAUDqC,mBAAqB,CAACD,OAAQ3C,YAAaG,aACzCwC,OAAOa,IAAK,CACKxD,YAAY0B,cAAcU,mBAAUU,SAASC,UACrDU,MAAQd,OAAOa,sBAChBxD,YAAaG,UASvB6C,oBAAuBhD,oBACnB+C,SAAW/C,YAAY0B,cAAcU,mBAAUU,SAASC,UACxDE,QAAUjD,YAAY0B,cAAcU,mBAAUU,SAASG,SACvDS,YAAcX,SAASU,MACxBxD,mBACDgD,QAAQQ,MAAQC,cASlBR,sBAAyBlD,oBAErB2D,WADU3D,YAAY0B,cAAcU,mBAAUU,SAASG,SAClCQ,MAEvBxD,iBADe,KAAf0D"}