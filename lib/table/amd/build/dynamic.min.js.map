{"version":3,"sources":["../src/dynamic.js"],"names":["watching","checkTableIsDynamic","tableRoot","Error","matches","Selectors","main","region","getFiltersetFromTable","JSON","parse","dataset","tableFilters","refreshTableContent","resetContent","filterset","pendingPromise","Pending","tableComponent","tableHandler","tableUniqueid","sortData","tableSortData","joinType","jointype","filters","firstinitial","tableFirstInitial","lastinitial","tableLastInitial","pageNumber","tablePageNumber","pageSize","tablePageSize","hiddenColumns","tableHiddenColumns","then","data","placeholder","document","createElement","innerHTML","html","replaceWith","childNodes","getTableFromId","dispatchEvent","CustomEvent","Events","tableContentRefreshed","bubbles","resolve","updateTable","sortBy","sortOrder","firstInitial","lastInitial","refreshContent","tableConfigChanged","unshift","sortby","sortorder","parseInt","stringify","filterJson","columnJson","Promise","getTableData","setSortOrder","setPageNumber","setPageSize","setFirstInitial","setLastInitial","hideColumn","columnToHide","push","showColumn","columnToShow","filter","columnName","resetTablePreferences","init","addEventListener","e","target","closest","sortableLink","table","links","sortableColumn","preventDefault","catch","Notification","exception","firstInitialLink","initialsBar","initial","lastInitialLink","pageItem","paginationBar","hide","column","show","resetTablePreferencesLink","showCountLink","showCount","toggle","targetPageSize","tableRegionId","querySelector","fromRegionId"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Module to handle dynamic table features.\n *\n * @module     core_table/dynamic\n * @copyright  2020 Simey Lameze <simey@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from 'core_table/local/dynamic/selectors';\nimport Events from './local/dynamic/events';\nimport Pending from 'core/pending';\nimport {addIconToContainer} from 'core/loadingicon';\nimport {fetch as fetchTableData} from 'core_table/local/dynamic/repository';\nimport Notification from 'core/notification';\n\nlet watching = false;\n\n/**\n * Ensure that a table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Bool}\n */\nconst checkTableIsDynamic = tableRoot => {\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    if (!tableRoot.matches(Selectors.main.region)) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return true;\n};\n\n/**\n * Get the filterset data from a known dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nconst getFiltersetFromTable = tableRoot => {\n    return JSON.parse(tableRoot.dataset.tableFilters);\n};\n\n/**\n * Update the specified table based on its current values.\n *\n * @param {HTMLElement} tableRoot\n * @param {Bool} resetContent\n * @returns {Promise}\n */\nexport const refreshTableContent = (tableRoot, resetContent = false) => {\n    const filterset = getFiltersetFromTable(tableRoot);\n    addIconToContainer(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:refreshTableContent');\n\n    return fetchTableData(\n        tableRoot.dataset.tableComponent,\n        tableRoot.dataset.tableHandler,\n        tableRoot.dataset.tableUniqueid,\n        {\n            sortData: JSON.parse(tableRoot.dataset.tableSortData),\n            joinType: filterset.jointype,\n            filters: filterset.filters,\n            firstinitial: tableRoot.dataset.tableFirstInitial,\n            lastinitial: tableRoot.dataset.tableLastInitial,\n            pageNumber: tableRoot.dataset.tablePageNumber,\n            pageSize: tableRoot.dataset.tablePageSize,\n            hiddenColumns: JSON.parse(tableRoot.dataset.tableHiddenColumns),\n        },\n        resetContent,\n    )\n    .then(data => {\n        const placeholder = document.createElement('div');\n        placeholder.innerHTML = data.html;\n        tableRoot.replaceWith(...placeholder.childNodes);\n\n        // Update the tableRoot.\n        return getTableFromId(tableRoot.dataset.tableUniqueid);\n    }).then(tableRoot => {\n        tableRoot.dispatchEvent(new CustomEvent(Events.tableContentRefreshed, {\n            bubbles: true,\n        }));\n\n        return tableRoot;\n    })\n    .then(tableRoot => {\n        pendingPromise.resolve();\n\n        return tableRoot;\n    });\n};\n\nexport const updateTable = (tableRoot, {\n    sortBy = null,\n    sortOrder = null,\n    filters = null,\n    firstInitial = null,\n    lastInitial = null,\n    pageNumber = null,\n    pageSize = null,\n    hiddenColumns = null,\n} = {}, refreshContent = true) => {\n    checkTableIsDynamic(tableRoot);\n\n    const pendingPromise = new Pending('core_table/dynamic:updateTable');\n    let tableConfigChanged = false;\n\n    // Update sort fields.\n    if (sortBy && sortOrder) {\n        // Always update the table if requested and there were sort fields.\n        // These fields are only ever normalised in the backend.\n        tableConfigChanged = true;\n\n        const sortData = JSON.parse(tableRoot.dataset.tableSortData);\n        sortData.unshift({\n            sortby: sortBy,\n            sortorder: parseInt(sortOrder, 10),\n        });\n        tableRoot.dataset.tableSortData = JSON.stringify(sortData);\n    }\n\n    // Update initials.\n    if (firstInitial !== null) {\n        if (tableRoot.dataset.tableFirstInitial !== firstInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFirstInitial = firstInitial;\n    }\n\n    if (lastInitial !== null) {\n        if (tableRoot.dataset.tableLastInitial !== lastInitial) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableLastInitial = lastInitial;\n    }\n\n    if (pageSize !== null) {\n        if (tableRoot.dataset.tablePageSize != pageSize) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageSize = pageSize;\n    }\n\n    // Update filters.\n    if (filters) {\n        const filterJson = JSON.stringify(filters);\n\n        if (tableRoot.dataset.tableFilters !== filterJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableFilters = filterJson;\n    }\n\n    // Reset to page 1 when table content is being altered by filtering or sorting.\n    // This ensures the table page being loaded always exists, and gives a consistent experience.\n    if (tableConfigChanged) {\n        pageNumber = 1;\n    }\n\n    // Update hidden columns.\n    if (hiddenColumns) {\n        const columnJson = JSON.stringify(hiddenColumns);\n\n        if (tableRoot.dataset.tableHiddenColumns !== columnJson) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tableHiddenColumns = columnJson;\n    }\n\n    if (pageNumber !== null) {\n        if (tableRoot.dataset.tablePageNumber != pageNumber) {\n            tableConfigChanged = true;\n        }\n\n        tableRoot.dataset.tablePageNumber = pageNumber;\n    }\n\n    // Refresh.\n    if (refreshContent && tableConfigChanged) {\n        return refreshTableContent(tableRoot)\n        .then(tableRoot => {\n            pendingPromise.resolve();\n            return tableRoot;\n        });\n    } else {\n        pendingPromise.resolve();\n        return Promise.resolve(tableRoot);\n    }\n};\n\n/**\n * Get the table dataset for the specified tableRoot, ensuring that the provided table is a dynamic table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {DOMStringMap}\n */\nconst getTableData = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return tableRoot.dataset;\n};\n\n/**\n * Update the specified table using the new filters.\n *\n * @param {HTMLElement} tableRoot\n * @param {Object} filters\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFilters = (tableRoot, filters, refreshContent = true) =>\n    updateTable(tableRoot, {filters}, refreshContent);\n\n/**\n * Get the filter data for the specified table.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Object}\n */\nexport const getFilters = tableRoot => {\n    checkTableIsDynamic(tableRoot);\n\n    return getFiltersetFromTable(tableRoot);\n};\n\n/**\n * Update the sort order.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} sortBy\n * @param {Number} sortOrder\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setSortOrder = (tableRoot, sortBy, sortOrder, refreshContent = true) =>\n    updateTable(tableRoot, {sortBy, sortOrder}, refreshContent);\n\n/**\n * Set the page number.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} pageNumber\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageNumber = (tableRoot, pageNumber, refreshContent = true) =>\n    updateTable(tableRoot, {pageNumber}, refreshContent);\n\n/**\n * Get the current page number.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageNumber = tableRoot => getTableData(tableRoot).tablePageNumber;\n\n/**\n * Set the page size.\n *\n * @param {HTMLElement} tableRoot\n * @param {Number} pageSize\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setPageSize = (tableRoot, pageSize, refreshContent = true) =>\n    updateTable(tableRoot, {pageSize, pageNumber: 1}, refreshContent);\n\n/**\n * Get the current page size.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Number}\n */\nexport const getPageSize = tableRoot => getTableData(tableRoot).tablePageSize;\n\n/**\n * Update the first initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} firstInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setFirstInitial = (tableRoot, firstInitial, refreshContent = true) =>\n    updateTable(tableRoot, {firstInitial}, refreshContent);\n\n/**\n * Get the current first initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getFirstInitial = tableRoot => getTableData(tableRoot).tableFirstInitial;\n\n/**\n * Update the last initial to show.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} lastInitial\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const setLastInitial = (tableRoot, lastInitial, refreshContent = true) =>\n    updateTable(tableRoot, {lastInitial}, refreshContent);\n\n/**\n * Get the current last initial filter.\n *\n * @param {HTMLElement} tableRoot\n * @returns {String}\n */\nexport const getLastInitial = tableRoot => getTableData(tableRoot).tableLastInitial;\n\n/**\n * Hide a column in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToHide\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const hideColumn = (tableRoot, columnToHide, refreshContent = true) => {\n    const hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns.push(columnToHide);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Make a hidden column visible in the participants table.\n *\n * @param {HTMLElement} tableRoot\n * @param {String} columnToShow\n * @param {Bool} refreshContent\n * @returns {Promise}\n */\nexport const showColumn = (tableRoot, columnToShow, refreshContent = true) => {\n    let hiddenColumns = JSON.parse(tableRoot.dataset.tableHiddenColumns);\n    hiddenColumns = hiddenColumns.filter(columnName => columnName !== columnToShow);\n\n    return updateTable(tableRoot, {hiddenColumns}, refreshContent);\n};\n\n/**\n * Reset table preferences.\n *\n * @param {HTMLElement} tableRoot\n * @returns {Promise}\n */\nconst resetTablePreferences = tableRoot => refreshTableContent(tableRoot, true);\n\n/**\n * Set up listeners to handle table updates.\n */\nexport const init = () => {\n    if (watching) {\n        // Already watching.\n        return;\n    }\n    watching = true;\n\n    document.addEventListener('click', e => {\n        const tableRoot = e.target.closest(Selectors.main.region);\n\n        if (!tableRoot) {\n            return;\n        }\n\n        const sortableLink = e.target.closest(Selectors.table.links.sortableColumn);\n        if (sortableLink) {\n            e.preventDefault();\n\n            setSortOrder(tableRoot, sortableLink.dataset.sortby, sortableLink.dataset.sortorder)\n            .catch(Notification.exception);\n        }\n\n        const firstInitialLink = e.target.closest(Selectors.initialsBar.links.firstInitial);\n        if (firstInitialLink !== null) {\n            e.preventDefault();\n\n            setFirstInitial(tableRoot, firstInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const lastInitialLink = e.target.closest(Selectors.initialsBar.links.lastInitial);\n        if (lastInitialLink !== null) {\n            e.preventDefault();\n\n            setLastInitial(tableRoot, lastInitialLink.dataset.initial).catch(Notification.exception);\n        }\n\n        const pageItem = e.target.closest(Selectors.paginationBar.links.pageItem);\n        if (pageItem) {\n            e.preventDefault();\n\n            setPageNumber(tableRoot, pageItem.dataset.pageNumber).catch(Notification.exception);\n        }\n\n        const hide = e.target.closest(Selectors.table.links.hide);\n        if (hide) {\n            e.preventDefault();\n\n            hideColumn(tableRoot, hide.dataset.column).catch(Notification.exception);\n        }\n\n        const show = e.target.closest(Selectors.table.links.show);\n        if (show) {\n            e.preventDefault();\n\n            showColumn(tableRoot, show.dataset.column).catch(Notification.exception);\n        }\n\n        const resetTablePreferencesLink = e.target.closest('.resettable a');\n        if (resetTablePreferencesLink) {\n            e.preventDefault();\n\n            resetTablePreferences(tableRoot).catch(Notification.exception);\n        }\n\n        const showCountLink = e.target.closest(Selectors.showCount.links.toggle);\n        if (showCountLink) {\n            e.preventDefault();\n\n            setPageSize(tableRoot, showCountLink.dataset.targetPageSize).catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * Fetch the table via its table region id.\n *\n * @param {String} tableRegionId\n * @returns {HTMLElement}\n */\nexport const getTableFromId = tableRegionId => {\n    const tableRoot = document.querySelector(Selectors.main.fromRegionId(tableRegionId));\n\n\n    if (!tableRoot) {\n        // The table is not a dynamic table.\n        throw new Error(\"The table specified is not a dynamic table and cannot be updated\");\n    }\n\n    return tableRoot;\n};\n\nexport {\n    Events\n};\n"],"file":"dynamic.min.js"}