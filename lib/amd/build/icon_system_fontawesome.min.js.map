{"version":3,"file":"icon_system_fontawesome.min.js","sources":["../src/icon_system_fontawesome.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Competency rule points module.\n *\n * @module core/icon_system_fontawesome\n * @copyright  2017 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport IconSystem from 'core/icon_system';\nimport $ from 'jquery';\nimport {fetchOne} from 'core/fetch';\nimport Mustache from 'core/mustache';\nimport LocalStorage from 'core/localstorage';\nimport Url from 'core/url';\nimport MoodleConfig from 'core/config';\n\nconst getIconMap = () => fetchOne(\n    'core_output_load_fontawesome_icon_system_map',\n    {\n        themename: MoodleConfig.theme,\n    },\n    false,\n    {\n        cacheKey: MoodleConfig.themerev,\n    }\n);\n\n\n/**\n * IconSystemFontawesome\n * @class core/icon_system_fontawesome\n */\nexport default class IconSystemFontawesome extends IconSystem {\n    constructor() {\n        super();\n        this.staticMap = new Map();\n        this.fetchMap = null;\n    }\n\n    /**\n     * Prefetch resources so later calls to renderIcon can be resolved synchronously.\n     *\n     * @method init\n     * @returns {Promise}\n     */\n    init() {\n        if (this.staticMap) {\n            return $.when(this);\n        }\n\n        const currentTheme = MoodleConfig.theme;\n\n        let map = LocalStorage.get(`core_iconsystem/theme/${currentTheme}/core/iconmap-fontawesome`);\n        if (map) {\n            map = JSON.parse(map);\n        }\n\n        if (map) {\n            this.staticMap = new Map(map);\n            return $.when(this);\n        }\n\n        if (this.fetchMap === null) {\n            this.fetchMap = getIconMap();\n        }\n\n        return this.fetchMap.then((map) => {\n            this.staticMap = new Map();\n            map.forEach(({component, pix, to}) => {\n                this.staticMap.set(`${component}/${pix}`, to);\n            });\n            LocalStorage.set(\n                `core_iconsystem/theme/${currentTheme}/core/iconmap-fontawesome`,\n                JSON.stringify(this.staticMap)\n            );\n            return this;\n        });\n    }\n\n    /**\n     * Render an icon.\n     *\n     * @param {String} key\n     * @param {String} component\n     * @param {String} title\n     * @param {String} template\n     * @returns {String}\n     * @method renderIcon\n     */\n    renderIcon(key, component, title, template) {\n        const mappedIcon = this.staticMap.get(`${component}/${key}`);\n        let unmappedIcon = false;\n        if (typeof mappedIcon === \"undefined\") {\n            const url = Url.imageUrl(key, component);\n\n            unmappedIcon = {\n                attributes: [\n                    {name: 'src', value: url},\n                    {name: 'alt', value: title},\n                    {name: 'title', value: title}\n                ]\n            };\n        }\n\n        const context = {\n            key: mappedIcon,\n            title: title,\n            alt: title,\n            unmappedIcon: unmappedIcon\n        };\n\n        if (typeof title === \"undefined\" || title === '') {\n            context['aria-hidden'] = true;\n        }\n\n        return Mustache.render(template, context).trim();\n    }\n\n    /**\n     * Get the name of the template to pre-cache for this icon system.\n     *\n     * @returns {String}\n     */\n    getTemplateName() {\n        return 'core/pix_icon_fontawesome';\n    }\n}\n"],"names":["IconSystemFontawesome","IconSystem","constructor","staticMap","Map","fetchMap","init","this","$","when","currentTheme","MoodleConfig","theme","map","LocalStorage","get","JSON","parse","themename","cacheKey","themerev","then","forEach","_ref","component","pix","to","set","stringify","renderIcon","key","title","template","mappedIcon","unmappedIcon","attributes","name","value","Url","imageUrl","context","alt","Mustache","render","trim","getTemplateName"],"mappings":";;;;;;;+VA+CqBA,8BAA8BC,qBAC/CC,2BAESC,UAAY,IAAIC,SAChBC,SAAW,KASpBC,UACQC,KAAKJ,iBACEK,gBAAEC,KAAKF,YAGZG,aAAeC,gBAAaC,UAE9BC,IAAMC,sBAAaC,oCAA6BL,kDAChDG,MACAA,IAAMG,KAAKC,MAAMJ,MAGjBA,UACKV,UAAY,IAAIC,IAAIS,KAClBL,gBAAEC,KAAKF,QAGI,OAAlBA,KAAKF,gBACAA,UA/CQ,mBACrB,+CACA,CACIa,UAAWP,gBAAaC,QAE5B,EACA,CACIO,SAAUR,gBAAaS,YA2ChBb,KAAKF,SAASgB,MAAMR,WAClBV,UAAY,IAAIC,IACrBS,IAAIS,SAAQC,WAACC,UAACA,UAADC,IAAYA,IAAZC,GAAiBA,cACrBvB,UAAUwB,cAAOH,sBAAaC,KAAOC,6BAEjCC,oCACgBjB,0CACzBM,KAAKY,UAAUrB,KAAKJ,YAEjBI,SAcfsB,WAAWC,IAAKN,UAAWO,MAAOC,gBACxBC,WAAa1B,KAAKJ,UAAUY,cAAOS,sBAAaM,UAClDI,cAAe,UACO,IAAfD,WAA4B,CAGnCC,aAAe,CACXC,WAAY,CACR,CAACC,KAAM,MAAOC,MAJVC,aAAIC,SAAST,IAAKN,YAKtB,CAACY,KAAM,MAAOC,MAAON,OACrB,CAACK,KAAM,QAASC,MAAON,eAK7BS,QAAU,CACZV,IAAKG,WACLF,MAAOA,MACPU,IAAKV,MACLG,aAAcA,0BAGG,IAAVH,OAAmC,KAAVA,QAChCS,QAAQ,gBAAiB,GAGtBE,kBAASC,OAAOX,SAAUQ,SAASI,OAQ9CC,wBACW"}