define("core/icon_system_fontawesome",["exports","core/icon_system","jquery","core/fetch","core/mustache","core/localstorage","core/url","core/config"],(function(_exports,_icon_system,_jquery,_fetch,_mustache,_localstorage,_url,_config){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Competency rule points module.
   *
   * @module core/icon_system_fontawesome
   * @copyright  2017 Damyon Wiese
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_icon_system=_interopRequireDefault(_icon_system),_jquery=_interopRequireDefault(_jquery),_mustache=_interopRequireDefault(_mustache),_localstorage=_interopRequireDefault(_localstorage),_url=_interopRequireDefault(_url),_config=_interopRequireDefault(_config);class IconSystemFontawesome extends _icon_system.default{constructor(){super(),this.staticMap=new Map,this.fetchMap=null}init(){if(this.staticMap)return _jquery.default.when(this);const currentTheme=_config.default.theme;let map=_localstorage.default.get("core_iconsystem/theme/".concat(currentTheme,"/core/iconmap-fontawesome"));return map&&(map=JSON.parse(map)),map?(this.staticMap=new Map(map),_jquery.default.when(this)):(null===this.fetchMap&&(this.fetchMap=(0,_fetch.fetchOne)("core_output_load_fontawesome_icon_system_map",{themename:_config.default.theme},!1,{cacheKey:_config.default.themerev})),this.fetchMap.then((map=>(this.staticMap=new Map,map.forEach((_ref=>{let{component:component,pix:pix,to:to}=_ref;this.staticMap.set("".concat(component,"/").concat(pix),to)})),_localstorage.default.set("core_iconsystem/theme/".concat(currentTheme,"/core/iconmap-fontawesome"),JSON.stringify(this.staticMap)),this))))}renderIcon(key,component,title,template){const mappedIcon=this.staticMap.get("".concat(component,"/").concat(key));let unmappedIcon=!1;if(void 0===mappedIcon){unmappedIcon={attributes:[{name:"src",value:_url.default.imageUrl(key,component)},{name:"alt",value:title},{name:"title",value:title}]}}const context={key:mappedIcon,title:title,alt:title,unmappedIcon:unmappedIcon};return void 0!==title&&""!==title||(context["aria-hidden"]=!0),_mustache.default.render(template,context).trim()}getTemplateName(){return"core/pix_icon_fontawesome"}}return _exports.default=IconSystemFontawesome,_exports.default}));

//# sourceMappingURL=icon_system_fontawesome.min.js.map