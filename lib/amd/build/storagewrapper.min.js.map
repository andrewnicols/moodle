{"version":3,"file":"storagewrapper.min.js","sources":["../src/storagewrapper.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Wrap an instance of the browser's local or session storage to handle\n * cache expiry, key namespacing and other helpful things.\n *\n * @module     core/storagewrapper\n * @copyright  2017 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Config from 'core/config';\n\nexport default class StorageWrapper {\n\n    static cacheRevisionValue;\n\n    /**\n     * Constructor.\n     *\n     * @param {Storage} storage An instance of either window.localStorage or window.sessionStorage\n     */\n    constructor(storage) {\n        this.storage = storage;\n\n        this.hashSource = `${Config.wwwroot}/${this.cacheRevision}`;\n        this.hash = this.hashString(this.hashSource);\n        this.prefix = `${this.hash}`;\n        this.jsrevPrefix = `${this.hashString(Config.wwwroot)}/jsrev`;\n        this.validateCache();\n    }\n\n    /**\n     * Get the cache revision.\n     *\n     * @private\n     * @return {string}\n     */\n    get cacheRevision() {\n        if (!this.cacheRevisionValue) {\n            if (Config.jsrev !== -1) {\n                // If the jsrev is -1, then use the jsrev.\n                this.cacheRevisionValue = Config.jsrev;\n                return Config.jsrev;\n            }\n\n            // Use the current timestamp, rounded down to the nearest 10 seconds.\n            // This gives a short cache time, but allows the cache to have some effect and be tested.\n            this.cacheRevisionValue = 0 - Math.floor((Date.now() / 1000) / 10) * 10;\n        }\n\n        return this.cacheRevisionValue;\n    }\n\n    /**\n     * Check if the browser supports the type of storage.\n     *\n     * @return {boolean} Whether the browser supports storage.\n     * @private\n     */\n    get supported() {\n        if (typeof (this.storage) === \"undefined\") {\n            return false;\n        }\n        return this.storage !== null;\n    }\n\n    /**\n     * Add a unique prefix to all keys so multiple moodle sites do not share caches.\n     *\n     * @param {string} key The cache key to prefix.\n     * @return {string} The new key\n     * @private\n     */\n    prefixKey(key) {\n        return this.prefix + key;\n    }\n\n    /**\n     * Check the current jsrev version and clear the cache if it has been bumped.\n     * @private\n     */\n    validateCache() {\n        if (!this.supported) {\n            return;\n        }\n        const cacheVersion = this.storage.getItem(this.jsrevPrefix);\n        if (cacheVersion === null) {\n            this.storage.setItem(this.jsrevPrefix, this.cacheRevision);\n            return;\n        }\n\n        const moodleVersion = this.cacheRevision;\n        if (moodleVersion != cacheVersion) {\n            this.storage.clear();\n            this.storage.setItem(this.jsrevPrefix, this.cacheRevision);\n        }\n    }\n\n    /**\n     * Hash a string, used to make shorter key prefixes.\n     *\n     * @param {String} source The string to hash\n     * @return {Number}\n     * @private\n     */\n    hashString(source) {\n        // From http://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript-jquery.\n        /* eslint no-bitwise: \"off\" */\n        let hash = 0;\n        if (source.length === 0) {\n            return hash;\n        }\n        let i;\n        for (i = 0; i < source.length; i++) {\n            hash = ((hash << 5) - hash) + source.charCodeAt(i);\n            hash |= 0; // Convert to 32bit integer.\n        }\n        return hash;\n    }\n\n    /**\n     * Get a value from local storage. Remember - all values must be strings.\n     *\n     * @param {string} key The cache key to check.\n     * @return {boolean|string} False if the value is not in the cache, or some other error - a string otherwise.\n     */\n    get(key) {\n        if (!this.supported) {\n            return false;\n        }\n\n        return this.storage.getItem(this.prefixKey(key));\n    }\n\n    /**\n     * Get a value from the storage mechanism.\n     *\n     * @param {string} key The cache key to check.\n     * @returns {false|string} The value of the key or false if the value is not in the cache.\n     */\n    static get(key) {\n        const storage = new this();\n        return storage.get(key);\n    }\n\n    /**\n     * Set a value to local storage. Remember - all values must be strings.\n     *\n     * @param {string} key The cache key to set.\n     * @param {string} value The value to set.\n     * @return {boolean} False if the value can't be saved in the cache, or some other error - true otherwise.\n     */\n    set(key, value) {\n        if (!this.supported) {\n            return false;\n        }\n\n        // This can throw exceptions when the storage limit is reached.\n        try {\n            this.storage.setItem(\n                this.prefixKey(key),\n                value,\n            );\n        } catch (e) {\n            window.console.warn(`Error saving to storage: ${e.message}`);\n            return false;\n        }\n        return true;\n    }\n\n    /**\n     * Set a value to the storage mechanism.\n     *\n     * @param {string} key The cache key to set.\n     * @param {string} value The value to set.\n     * @returns {boolean} True if the value was saved, false otherwise.\n     */\n    static set(key, value) {\n        const storage = new this();\n        return storage.set(key, value);\n    }\n}\n"],"names":["StorageWrapper","constructor","storage","hashSource","Config","wwwroot","this","cacheRevision","hash","hashString","prefix","jsrevPrefix","validateCache","cacheRevisionValue","jsrev","Math","floor","Date","now","supported","prefixKey","key","cacheVersion","getItem","setItem","clear","source","i","length","charCodeAt","get","set","value","e","window","console","warn","message"],"mappings":"yOA0BqBA,eASjBC,YAAYC,cACHA,QAAUA,aAEVC,qBAAgBC,gBAAOC,oBAAWC,KAAKC,oBACvCC,KAAOF,KAAKG,WAAWH,KAAKH,iBAC5BO,iBAAYJ,KAAKE,WACjBG,sBAAiBL,KAAKG,WAAWL,gBAAOC,wBACxCO,gBASLL,wBACKD,KAAKO,mBAAoB,KACJ,IAAlBT,gBAAOU,kBAEFD,mBAAqBT,gBAAOU,MAC1BV,gBAAOU,WAKbD,mBAAqB,EAA2C,GAAvCE,KAAKC,MAAOC,KAAKC,MAAQ,IAAQ,WAG5DZ,KAAKO,mBASZM,4BAC8B,IAAlBb,KAAKJ,SAGO,OAAjBI,KAAKJ,QAUhBkB,UAAUC,YACCf,KAAKI,OAASW,IAOzBT,oBACSN,KAAKa,uBAGJG,aAAehB,KAAKJ,QAAQqB,QAAQjB,KAAKK,gBAC1B,OAAjBW,8BACKpB,QAAQsB,QAAQlB,KAAKK,YAAaL,KAAKC,eAI1BD,KAAKC,eACNe,oBACZpB,QAAQuB,aACRvB,QAAQsB,QAAQlB,KAAKK,YAAaL,KAAKC,gBAWpDE,WAAWiB,YAOHC,EAJAnB,KAAO,KACW,IAAlBkB,OAAOE,cACApB,SAGNmB,EAAI,EAAGA,EAAID,OAAOE,OAAQD,IAC3BnB,MAASA,MAAQ,GAAKA,KAAQkB,OAAOG,WAAWF,GAChDnB,MAAQ,SAELA,KASXsB,IAAIT,aACKf,KAAKa,WAIHb,KAAKJ,QAAQqB,QAAQjB,KAAKc,UAAUC,iBASpCA,YACS,IAAIf,MACLwB,IAAIT,KAUvBU,IAAIV,IAAKW,WACA1B,KAAKa,iBACC,WAKFjB,QAAQsB,QACTlB,KAAKc,UAAUC,KACfW,OAEN,MAAOC,UACLC,OAAOC,QAAQC,wCAAiCH,EAAEI,WAC3C,SAEJ,aAUAhB,IAAKW,cACI,IAAI1B,MACLyB,IAAIV,IAAKW,yLAvKXhC"}