define ("core/emoji/picker",["exports","core/localstorage","core/emoji/data","core/utils","core/str","core/templates"],function(_exports,_localstorage,EmojiData,_utils,_str,_templates){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.default=void 0;_localstorage=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(_localstorage);EmojiData=_interopRequireWildcard(EmojiData);function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireWildcard(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule){return obj}if(null===obj||"object"!=typeof obj&&"function"!=typeof obj){return{default:obj}}var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj)){return cache.get(obj)}var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if("default"!=key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc)}else{newObj[key]=obj[key]}}}newObj.default=obj;if(cache){cache.set(obj,newObj)}return newObj}const ROW_RENDER_BUFFER_COUNT=5,RECENT_EMOJIS_STORAGE_KEY="moodle-recent-emojis",ROW_HEIGHT_RAW=40,EMOJIS_PER_ROW=7,ROW_TYPE={EMOJI:0,HEADER:1},SELECTORS={CATEGORY_SELECTOR:"[data-action=\"show-category\"]",EMOJIS_CONTAINER:"[data-region=\"emojis-container\"]",EMOJI_PREVIEW:"[data-region=\"emoji-preview\"]",EMOJI_SHORT_NAME:"[data-region=\"emoji-short-name\"]",ROW_CONTAINER:"[data-region=\"row-container\"]",SEARCH_INPUT:"[data-region=\"search-input\"]",SEARCH_RESULTS_CONTAINER:"[data-region=\"search-results-container\"]"},createRowDataForCategory=(categoryName,categoryDisplayName,emojis,totalRowCount)=>{const rowData=[];rowData.push({index:totalRowCount+rowData.length,type:ROW_TYPE.HEADER,data:{name:categoryName,displayName:categoryDisplayName}});for(let i=0;i<emojis.length;i+=EMOJIS_PER_ROW){const rowEmojis=emojis.slice(i,i+EMOJIS_PER_ROW);rowData.push({index:totalRowCount+rowData.length,type:ROW_TYPE.EMOJI,data:rowEmojis})}return rowData},addIndexesToRowData=rowData=>{return rowData.map((data,index)=>{return{...data,index}})},getCategoryScrollPositionsFromRowData=rowData=>{return rowData.reduce((carry,row,index)=>{if(row.type===ROW_TYPE.HEADER){carry[row.data.name]=index*ROW_HEIGHT_RAW}return carry},{})},createHeaderRow=async(rowIndex,name)=>{const html=await(0,_templates.render)("core/emoji/header_row",{index:rowIndex,text:name}),temp=document.createElement("div");temp.innerHTML=html;return temp.firstChild},createEmojiRow=async(rowIndex,emojis)=>{const context={index:rowIndex,emojis:emojis.map(emojiData=>{const charCodes=emojiData.unified.split("-").map(code=>"0x".concat(code)),emojiText=String.fromCodePoint.apply(null,charCodes);return{shortnames:":".concat(emojiData.shortnames.join(": :"),":"),unified:emojiData.unified,text:emojiText,spacer:!1}}),spacers:Array(EMOJIS_PER_ROW-emojis.length).fill(!0)},html=await(0,_templates.render)("core/emoji/emoji_row",context),temp=document.createElement("div");temp.innerHTML=html;return temp.firstChild},isEmojiElement=element=>null!==element.getAttribute("data-short-names"),findCategorySelectorFromElement=element=>{if(!element){return null}if("show-category"===element.getAttribute("data-action")){return element}else{return findCategorySelectorFromElement(element.parentElement)}},getCategorySelectorByCategoryName=(root,name)=>{return root.querySelector("[data-category=\"".concat(name,"\"]"))},setCategorySelectorActive=(root,element)=>{const allCategorySelectors=root.querySelectorAll(SELECTORS.CATEGORY_SELECTOR);for(let i=0;i<allCategorySelectors.length;i++){const selector=allCategorySelectors[i];selector.classList.remove("selected")}element.classList.add("selected")},getCategoryByScrollPosition=(root,position,categoryScrollPositions)=>{let positions=[];if(0>position){position=0}for(const categoryName in categoryScrollPositions){const categoryPosition=categoryScrollPositions[categoryName];positions.push([categoryPosition,categoryName])}positions.sort((_ref,_ref2)=>{let[a]=_ref,[b]=_ref2;if(a<b){return-1}else if(a>b){return 1}else{return 0}});const{categoryName,previousPosition,nextPosition}=positions.reduce((carry,candidate)=>{const[categoryPosition,categoryName]=candidate;if(categoryPosition<=position){carry.categoryName=categoryName;carry.previousPosition=carry.currentPosition;carry.currentPosition=position}else if(null===carry.nextPosition){carry.nextPosition=categoryPosition}return carry},{categoryName:null,currentPosition:null,previousPosition:null,nextPosition:null});return[getCategorySelectorByCategoryName(root,categoryName),previousPosition,nextPosition]},getRecentEmojis=()=>{const storedData=_localstorage.default.get(RECENT_EMOJIS_STORAGE_KEY);return storedData?JSON.parse(storedData):[]},saveRecentEmoji=recentEmojis=>{_localstorage.default.set(RECENT_EMOJIS_STORAGE_KEY,JSON.stringify(recentEmojis))},addRecentEmoji=(rowData,recentEmojiRowCount,newEmoji)=>{const categoryName=rowData[0].data.name,categoryDisplayName=rowData[0].data.displayName,recentEmojis=getRecentEmojis();let newRecentEmojis=[newEmoji,...recentEmojis.filter(emoji=>emoji.unified!=newEmoji.unified)];newRecentEmojis=newRecentEmojis.slice(0,3*EMOJIS_PER_ROW);const newRecentEmojiRowData=createRowDataForCategory(categoryName,categoryDisplayName,newRecentEmojis);saveRecentEmoji(newRecentEmojis);return[addIndexesToRowData(newRecentEmojiRowData.concat(rowData.slice(recentEmojiRowCount))),newRecentEmojiRowData.length]},getRowsToRender=(scrollPosition,visibleRowCount,rowData)=>{const minVisibleRow=scrollPosition>ROW_HEIGHT_RAW?Math.floor(scrollPosition/ROW_HEIGHT_RAW):0,start=minVisibleRow>=ROW_RENDER_BUFFER_COUNT?minVisibleRow-ROW_RENDER_BUFFER_COUNT:minVisibleRow,rows=rowData.slice(start,minVisibleRow+visibleRowCount+ROW_RENDER_BUFFER_COUNT);return rows},createRowElement=async rowData=>{let row=null;if(rowData.type===ROW_TYPE.HEADER){row=await createHeaderRow(rowData.index,rowData.data.displayName)}else{row=await createEmojiRow(rowData.index,rowData.data)}row.style.position="absolute";row.style.left=0;row.style.right=0;row.style.top="".concat(rowData.index*ROW_HEIGHT_RAW,"px");return row},doRowsMatch=(a,b)=>{if(a.index!==b.index){return!1}if(a.type!==b.type){return!1}if(typeof a.data!=typeof b.data){return!1}if(a.type===ROW_TYPE.HEADER){return a.data.name===b.data.name}else{if(a.data.length!==b.data.length){return!1}for(let i=0;i<a.data.length;i++){if(a.data[i].unified!=b.data[i].unified){return!1}}}return!0},renderRows=async(rowContainer,currentRows,nextRows)=>{const toAdd=nextRows.filter(nextRow=>!currentRows.some(currentRow=>doRowsMatch(currentRow,nextRow)));let toKeep=currentRows.filter(currentRow=>nextRows.some(nextRow=>doRowsMatch(currentRow,nextRow)));const toRemove=currentRows.filter(currentRow=>!nextRows.some(nextRow=>doRowsMatch(currentRow,nextRow))),toRemoveElements=toRemove.map(rowData=>rowContainer.querySelectorAll("[data-row=\"".concat(rowData.index,"\"]"))),rows=await Promise.all(toAdd.map(rowData=>createRowElement(rowData)));rows.forEach((row,index)=>{const rowData=toAdd[index];let nextRowIndex=null;for(let i=0;i<toKeep.length;i++){const candidate=toKeep[i];if(candidate.index>rowData.index){nextRowIndex=i;break}}if(null!==nextRowIndex){const nextRowData=toKeep[nextRowIndex],nextRowNode=rowContainer.querySelector("[data-row=\"".concat(nextRowData.index,"\"]"));rowContainer.insertBefore(row,nextRowNode);toKeep.splice(nextRowIndex,0,toKeep)}else{toKeep.push(rowData);rowContainer.appendChild(row)}});toRemoveElements.forEach(rows=>{for(let i=0;i<rows.length;i++){const row=rows[i];rowContainer.removeChild(row)}})},generateRenderRowsAtPositionFunction=rowContainer=>{let currentRows=[],nextRows=[],rowCount=0,isRendering=!1;const renderNextRows=async()=>{if(!nextRows.length){return}if(isRendering){return}isRendering=!0;const nextRowsToRender=nextRows.slice();nextRows=[];await renderRows(rowContainer,currentRows,nextRowsToRender);currentRows=nextRowsToRender;isRendering=!1;renderNextRows()};return function(scrollPosition,rowData){let rowLimit=2<arguments.length&&arguments[2]!==void 0?arguments[2]:10;nextRows=getRowsToRender(scrollPosition,rowLimit,rowData);renderNextRows();if(rowCount!==rowData.length){rowContainer.style.height="".concat(rowData.length*ROW_HEIGHT_RAW,"px")}rowCount=rowData.length}},showSearchResults=(emojiContainer,searchResultsContainer)=>{searchResultsContainer.classList.remove("hidden");emojiContainer.classList.add("hidden")},clearSearch=(emojiContainer,searchResultsContainer,searchInput)=>{searchResultsContainer.classList.add("hidden");emojiContainer.classList.remove("hidden");searchInput.value=""},getHandleMouseEnter=(emojiPreview,emojiShortName)=>{return e=>{const target=e.target;if(isEmojiElement(target)){emojiShortName.textContent=target.getAttribute("data-short-names");emojiPreview.textContent=target.textContent}}},getHandleMouseLeave=(emojiPreview,emojiShortName)=>{return e=>{const target=e.target;if(isEmojiElement(target)){emojiShortName.textContent="";emojiPreview.textContent=""}}},getHandleClick=(recentEmojiRowCount,emojiContainer,searchResultsContainer,searchInput,selectCallback,renderAtPosition)=>{return(e,rowData,categoryScrollPositions)=>{const target=e.target;let newRowData=rowData,newCategoryScrollPositions=categoryScrollPositions;clearSearch(emojiContainer,searchResultsContainer,searchInput);if(isEmojiElement(target)){const unified=target.getAttribute("data-unified"),shortnames=target.getAttribute("data-short-names").replace(/:/g,"").split(" "),currentScrollTop=emojiContainer.scrollTop,isRecentEmojiRowVisible=null!==emojiContainer.querySelector("[data-row=\"".concat(recentEmojiRowCount-1,"\"]"));[newRowData,recentEmojiRowCount]=addRecentEmoji(rowData,recentEmojiRowCount,{unified,shortnames});newCategoryScrollPositions=getCategoryScrollPositionsFromRowData(newRowData);if(isRecentEmojiRowVisible){renderAtPosition(currentScrollTop,newRowData)}selectCallback(target.textContent);return[newRowData,newCategoryScrollPositions]}const categorySelector=findCategorySelectorFromElement(target);if(categorySelector){const selectedCategory=categorySelector.getAttribute("data-category"),position=categoryScrollPositions[selectedCategory];emojiContainer.scrollTop=position}return[newRowData,newCategoryScrollPositions]}},getHandleScroll=(root,currentVisibleRowScrollPosition,emojiContainer,initialCategoryScrollPositions,renderAtPosition)=>{let[currentCategoryElement,previousCategoryPosition,nextCategoryPosition]=getCategoryByScrollPosition(root,emojiContainer.scrollTop,initialCategoryScrollPositions);return(categoryScrollPositions,rowData)=>{const newScrollPosition=emojiContainer.scrollTop,upperScrollBound=currentVisibleRowScrollPosition+ROW_HEIGHT_RAW,lowerScrollBound=currentVisibleRowScrollPosition-ROW_HEIGHT_RAW,updateActiveCategory=newScrollPosition>=nextCategoryPosition||newScrollPosition<previousCategoryPosition;if(updateActiveCategory){[currentCategoryElement,previousCategoryPosition,nextCategoryPosition]=getCategoryByScrollPosition(root,newScrollPosition,categoryScrollPositions);setCategorySelectorActive(root,currentCategoryElement)}if(newScrollPosition<lowerScrollBound||newScrollPosition>upperScrollBound){requestAnimationFrame(()=>{renderAtPosition(newScrollPosition,rowData);currentVisibleRowScrollPosition=newScrollPosition})}}},getHandleSearch=(searchInput,searchResultsContainer,emojiContainer)=>{const rowContainer=searchResultsContainer.querySelector(SELECTORS.ROW_CONTAINER),renderSearchResultsAtPosition=generateRenderRowsAtPositionFunction(rowContainer);searchResultsContainer.appendChild(rowContainer);return async()=>{const searchTerm=searchInput.value.toLowerCase();if(searchTerm){showSearchResults(emojiContainer,searchResultsContainer);const matchingEmojis=Object.keys(EmojiData.byShortName).reduce((carry,shortName)=>{if(shortName.includes(searchTerm)){carry.push({shortnames:[shortName],unified:EmojiData.byShortName[shortName]})}return carry},[]),searchResultsString=await(0,_str.get_string)("searchresults","core"),rowData=createRowDataForCategory(searchResultsString,searchResultsString,matchingEmojis,0);renderSearchResultsAtPosition(0,rowData,rowData.length)}else{clearSearch(emojiContainer,searchResultsContainer,searchInput)}}},registerEventListeners=(root,emojiContainer,renderAtPosition,currentVisibleRowScrollPosition,selectCallback,categoryScrollPositions,rowData,recentEmojiRowCount)=>{const searchInput=root.querySelector(SELECTORS.SEARCH_INPUT),searchResultsContainer=root.querySelector(SELECTORS.SEARCH_RESULTS_CONTAINER),emojiPreview=root.querySelector(SELECTORS.EMOJI_PREVIEW),emojiShortName=root.querySelector(SELECTORS.EMOJI_SHORT_NAME),clickHandler=getHandleClick(recentEmojiRowCount,emojiContainer,searchResultsContainer,searchInput,selectCallback,renderAtPosition),scrollHandler=getHandleScroll(root,currentVisibleRowScrollPosition,emojiContainer,categoryScrollPositions,renderAtPosition),searchHandler=getHandleSearch(searchInput,searchResultsContainer,emojiContainer);root.addEventListener("focus",getHandleMouseEnter(emojiPreview,emojiShortName),!0);root.addEventListener("blur",getHandleMouseLeave(emojiPreview,emojiShortName),!0);root.addEventListener("mouseenter",getHandleMouseEnter(emojiPreview,emojiShortName),!0);root.addEventListener("mouseleave",getHandleMouseLeave(emojiPreview,emojiShortName),!0);root.addEventListener("click",e=>{[rowData,categoryScrollPositions]=clickHandler(e,rowData,categoryScrollPositions)});emojiContainer.addEventListener("scroll",(0,_utils.throttle)(()=>scrollHandler(categoryScrollPositions,rowData),50));searchInput.addEventListener("input",(0,_utils.debounce)(searchHandler,200))};var _default=(root,selectCallback)=>{const emojiContainer=root.querySelector(SELECTORS.EMOJIS_CONTAINER),rowContainer=emojiContainer.querySelector(SELECTORS.ROW_CONTAINER),recentEmojis=getRecentEmojis(),allData=[{name:"Recent",emojis:recentEmojis},...EmojiData.byCategory];let rowData=[],recentEmojiRowCount=0;allData.forEach(category=>{const categorySelector=getCategorySelectorByCategoryName(root,category.name),categoryDisplayName=categorySelector.title,categoryRowData=createRowDataForCategory(category.name,categoryDisplayName,category.emojis,rowData.length);if("Recent"===category.name){recentEmojiRowCount=categoryRowData.length}rowData=rowData.concat(categoryRowData)});rowData=addIndexesToRowData(rowData);const categoryScrollPositions=getCategoryScrollPositionsFromRowData(rowData),renderAtPosition=generateRenderRowsAtPositionFunction(rowContainer);renderAtPosition(0,rowData);registerEventListeners(root,emojiContainer,renderAtPosition,0,selectCallback,categoryScrollPositions,rowData,recentEmojiRowCount)};_exports.default=_default;return _exports.default});
//# sourceMappingURL=picker.min.js.map
