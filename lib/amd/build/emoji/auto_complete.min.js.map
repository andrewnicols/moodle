{"version":3,"file":"auto_complete.min.js","sources":["../../src/emoji/auto_complete.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Emoji auto complete.\n *\n * @module core/emoji/auto_complete\n * @copyright  2019 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as EmojiData from 'core/emoji/data';\nimport {render as renderTemplate} from 'core/templates';\nimport {debounce} from 'core/utils';\nimport LocalStorage from 'core/localstorage';\nimport KeyCodes from 'core/key_codes';\n\nconst INPUT_DEBOUNCE_TIMER = 200;\nconst SUGGESTION_LIMIT = 50;\nconst MAX_RECENT_COUNT = 27;\nconst RECENT_EMOJIS_STORAGE_KEY = 'moodle-recent-emojis';\n\nconst SELECTORS = {\n    EMOJI_BUTTON: '[data-region=\"emoji-button\"]',\n    ACTIVE_EMOJI_BUTTON: '[data-region=\"emoji-button\"].active',\n};\n\n/**\n * Get the list of recent emojis data from local storage.\n *\n * @return {Array}\n */\nconst getRecentEmojis = () => {\n    const storedData = LocalStorage.get(RECENT_EMOJIS_STORAGE_KEY);\n    return storedData ? JSON.parse(storedData) : [];\n};\n\n/**\n * Add an emoji data to the set of recent emojis. The new set of recent emojis are\n * saved in local storage.\n *\n * @param {String} unified The char chodes for the emoji\n * @param {String} shortName The emoji short name\n */\nconst addRecentEmoji = (unified, shortName) => {\n    const newEmoji = {\n        unified,\n        shortnames: [shortName]\n    };\n    const recentEmojis = getRecentEmojis();\n    // Add the new emoji to the start of the list of recent emojis.\n    let newRecentEmojis = [newEmoji, ...recentEmojis.filter(emoji => emoji.unified != newEmoji.unified)];\n    // Limit the number of recent emojis.\n    newRecentEmojis = newRecentEmojis.slice(0, MAX_RECENT_COUNT);\n\n    LocalStorage.set(RECENT_EMOJIS_STORAGE_KEY, JSON.stringify(newRecentEmojis));\n};\n\n/**\n * Get the actual emoji string from the short name.\n *\n * @param {String} shortName Emoji short name\n * @return {String|null}\n */\nconst getEmojiTextFromShortName = (shortName) => {\n    const unified = EmojiData.byShortName[shortName];\n\n    if (unified) {\n        const charCodes = unified.split('-').map(code => `0x${code}`);\n        return String.fromCodePoint.apply(null, charCodes);\n    } else {\n        return null;\n    }\n};\n\n/**\n * Render the auto complete list for the given short names.\n *\n * @param {Element} root The root container for the emoji auto complete\n * @param {Array} shortNames The list of short names for emoji suggestions to show\n */\nconst render = async(root, shortNames) => {\n    const renderContext = {\n        emojis: shortNames.map((shortName, index) => {\n            return {\n                active: index === 0,\n                emojitext: getEmojiTextFromShortName(shortName),\n                displayshortname: `:${shortName}:`,\n                shortname: shortName,\n                unified: EmojiData.byShortName[shortName]\n            };\n        })\n    };\n    const html = await renderTemplate('core/emoji/auto_complete', renderContext);\n    root.innerHTML = html;\n};\n\n/**\n * Get the list of emoji short names that include the given search term. If\n * the search term is an empty string then the list of recently used emojis\n * will be returned.\n *\n * @param {String} searchTerm Text to match on\n * @param {Number} limit Maximum number of results to return\n * @return {Array}\n */\nconst searchEmojis = (searchTerm, limit) => {\n    if (searchTerm === '') {\n        return getRecentEmojis().map(data => data.shortnames[0]).slice(0, limit);\n    } else {\n        searchTerm = searchTerm.toLowerCase();\n        return Object.keys(EmojiData.byShortName)\n                .filter(shortName => shortName.includes(searchTerm))\n                .slice(0, limit);\n    }\n};\n\n/**\n * Get the current word at the given position (index) within the text.\n *\n * @param {String} text The text to process\n * @param {Number} position The position (index) within the text to match the word\n * @return {String}\n */\nconst getWordFromPosition = (text, position) => {\n    const startMatches = text.slice(0, position).match(/(\\S*)$/);\n    const endMatches = text.slice(position).match(/^(\\S*)/);\n    let startText = '';\n    let endText = '';\n\n    if (startMatches) {\n        startText = startMatches[startMatches.length - 1];\n    }\n\n    if (endMatches) {\n        endText = endMatches[endMatches.length - 1];\n    }\n\n    return `${startText}${endText}`;\n};\n\n/**\n * Check if the given text is a full short name, i.e. has leading and trialing colon\n * characters.\n *\n * @param {String} text The text to process\n * @return {Bool}\n */\nconst isCompleteShortName = text => /^:[^:\\s]+:$/.test(text);\n\n/**\n * Check if the given text is a partial short name, i.e. has a leading colon but no\n * trailing colon.\n *\n * @param {String} text The text to process\n * @return {Bool}\n */\nconst isPartialShortName = text => /^:[^:\\s]*$/.test(text);\n\n/**\n * Remove the colon characters from the given text.\n *\n * @param {String} text The text to process\n * @return {String}\n */\nconst getShortNameFromText = text => text.replace(/:/g, '');\n\n/**\n * Get the currently active emoji button element in the list of suggestions.\n *\n * @param {Element} root The emoji auto complete container element\n * @return {Element|null}\n */\nconst getActiveEmojiSuggestion = (root) => {\n    return root.querySelector(SELECTORS.ACTIVE_EMOJI_BUTTON);\n};\n\n/**\n * Make the previous sibling of the current active emoji active.\n *\n * @param {Element} root The emoji auto complete container element\n */\nconst selectPreviousEmojiSuggestion = (root) => {\n    const activeEmojiSuggestion = getActiveEmojiSuggestion(root);\n    const previousSuggestion = activeEmojiSuggestion.previousElementSibling;\n\n    if (previousSuggestion) {\n        activeEmojiSuggestion.classList.remove('active');\n        previousSuggestion.classList.add('active');\n        previousSuggestion.scrollIntoView({behaviour: 'smooth', inline: 'center'});\n    }\n};\n\n/**\n * Make the next sibling to the current active emoji active.\n *\n * @param {Element} root The emoji auto complete container element\n */\nconst selectNextEmojiSuggestion = (root) => {\n    const activeEmojiSuggestion = getActiveEmojiSuggestion(root);\n    const nextSuggestion = activeEmojiSuggestion.nextElementSibling;\n\n    if (nextSuggestion) {\n        activeEmojiSuggestion.classList.remove('active');\n        nextSuggestion.classList.add('active');\n        nextSuggestion.scrollIntoView({behaviour: 'smooth', inline: 'center'});\n    }\n};\n\n/**\n * Trigger the select callback for the given emoji button element.\n *\n * @param {Element} element The emoji button element\n * @param {Function} selectCallback The callback for when the user selects an emoji\n */\nconst selectEmojiElement = (element, selectCallback) => {\n    const shortName = element.getAttribute('data-short-name');\n    const unified = element.getAttribute('data-unified');\n    addRecentEmoji(unified, shortName);\n    selectCallback(element.innerHTML.trim());\n};\n\n/**\n * Initialise the emoji auto complete.\n *\n * @method\n * @param {Element} root The root container element for the auto complete\n * @param {Element} textArea The text area element to monitor for auto complete\n * @param {Function} hasSuggestionCallback Callback for when there are auto-complete suggestions\n * @param {Function} selectCallback Callback for when the user selects an emoji\n */\nexport default (root, textArea, hasSuggestionCallback, selectCallback) => {\n    let hasSuggestions = false;\n    let previousSearchText = '';\n\n    // Debounce the listener so that each keypress delays the execution of the handler. The\n    // handler should only run 200 milliseconds after the last keypress.\n    textArea.addEventListener('keyup', debounce(() => {\n        // This is a \"keyup\" listener so that it only executes after the text area value\n        // has been updated.\n        const text = textArea.value;\n        const cursorPos = textArea.selectionStart;\n        const searchText = getWordFromPosition(text, cursorPos);\n\n        if (searchText === previousSearchText) {\n            // Nothing has changed so no need to take any action.\n            return;\n        } else {\n            previousSearchText = searchText;\n        }\n\n        if (isCompleteShortName(searchText)) {\n            // If the user has entered a full short name (with leading and trialing colons)\n            // then see if we can find a match for it and auto complete it.\n            const shortName = getShortNameFromText(searchText);\n            const emojiText = getEmojiTextFromShortName(shortName);\n            hasSuggestions = false;\n            if (emojiText) {\n                addRecentEmoji(EmojiData.byShortName[shortName], shortName);\n                selectCallback(emojiText);\n            }\n        } else if (isPartialShortName(searchText)) {\n            // If the user has entered a partial short name (leading colon but no trailing) then\n            // search on the text to see if we can find some suggestions for them.\n            const suggestions = searchEmojis(getShortNameFromText(searchText), SUGGESTION_LIMIT);\n\n            if (suggestions.length) {\n                render(root, suggestions);\n                hasSuggestions = true;\n            } else {\n                hasSuggestions = false;\n            }\n        } else {\n            hasSuggestions = false;\n        }\n\n        hasSuggestionCallback(hasSuggestions);\n    }, INPUT_DEBOUNCE_TIMER));\n\n    textArea.addEventListener('keydown', (e) => {\n        if (hasSuggestions) {\n            const isModifierPressed = (e.shiftKey || e.metaKey || e.altKey || e.ctrlKey);\n            if (!isModifierPressed) {\n                switch (e.which) {\n                    case KeyCodes.escape:\n                        // Escape key closes the auto complete.\n                        hasSuggestions = false;\n                        hasSuggestionCallback(false);\n                        break;\n                    case KeyCodes.arrowLeft:\n                        // Arrow keys navigate through the list of suggetions.\n                        selectPreviousEmojiSuggestion(root);\n                        e.preventDefault();\n                        break;\n                    case KeyCodes.arrowRight:\n                        // Arrow keys navigate through the list of suggetions.\n                        selectNextEmojiSuggestion(root);\n                        e.preventDefault();\n                        break;\n                    case KeyCodes.enter:\n                        // Enter key selects the current suggestion.\n                        selectEmojiElement(getActiveEmojiSuggestion(root), selectCallback);\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                }\n            }\n        }\n    });\n\n    root.addEventListener('click', (e) => {\n        const target = e.target;\n        if (target.matches(SELECTORS.EMOJI_BUTTON)) {\n            selectEmojiElement(target, selectCallback);\n        }\n    });\n};\n"],"names":["_interopRequireDefault","obj","__esModule","default","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_toConsumableArray","arr","_arrayWithoutHoles","Array","isArray","_arrayLikeToArray","from","_iterableToArray","o","minLen","n","toString","test","_unsupportedIterableToArray","_nonIterableSpread","len","arr2","EmojiData","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","set","_interopRequireWildcard","_localstorage","_key_codes","_ref","SELECTORS","getRecentEmojis","storedData","LocalStorage","JSON","parse","addRecentEmoji","unified","shortName","newEmoji","shortnames","recentEmojis","newRecentEmojis","concat","filter","emoji","stringify","getEmojiTextFromShortName","byShortName","charCodes","split","map","code","String","fromCodePoint","apply","render","_callee","root","shortNames","renderContext","html","_context","emojis","index","active","emojitext","displayshortname","shortname","renderTemplate","innerHTML","args","arguments","_x","_x2","getShortNameFromText","text","replace","getActiveEmojiSuggestion","querySelector","selectEmojiElement","element","selectCallback","getAttribute","trim","_exports","textArea","hasSuggestionCallback","hasSuggestions","previousSearchText","addEventListener","debounce","searchText","position","startMatches","match","endMatches","startText","endText","getWordFromPosition","selectionStart","isCompleteShortName","emojiText","isPartialShortName","suggestions","searchTerm","limit","data","toLowerCase","includes","e","shiftKey","metaKey","altKey","ctrlKey","which","KeyCodes","escape","arrowLeft","activeEmojiSuggestion","previousSuggestion","previousElementSibling","classList","remove","add","scrollIntoView","behaviour","inline","selectPreviousEmojiSuggestion","preventDefault","arrowRight","nextSuggestion","nextElementSibling","selectNextEmojiSuggestion","enter","stopPropagation","target","matches"],"mappings":"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"}