{"version":3,"sources":["../../src/emoji/auto_complete.js"],"names":["RECENT_EMOJIS_STORAGE_KEY","SELECTORS","EMOJI_BUTTON","ACTIVE_EMOJI_BUTTON","getRecentEmojis","storedData","LocalStorage","get","JSON","parse","addRecentEmoji","unified","shortName","newEmoji","shortnames","recentEmojis","newRecentEmojis","filter","emoji","slice","set","stringify","getEmojiTextFromShortName","EmojiData","byShortName","charCodes","split","map","code","String","fromCodePoint","apply","render","root","shortNames","renderContext","emojis","index","active","emojitext","displayshortname","shortname","html","innerHTML","searchEmojis","searchTerm","limit","data","toLowerCase","Object","keys","includes","getWordFromPosition","text","position","startMatches","match","endMatches","startText","endText","length","isCompleteShortName","test","isPartialShortName","getShortNameFromText","replace","getActiveEmojiSuggestion","querySelector","selectPreviousEmojiSuggestion","activeEmojiSuggestion","previousSuggestion","previousElementSibling","classList","remove","add","scrollIntoView","behaviour","inline","selectNextEmojiSuggestion","nextSuggestion","nextElementSibling","selectEmojiElement","element","selectCallback","getAttribute","trim","textArea","hasSuggestionCallback","hasSuggestions","previousSearchText","addEventListener","value","cursorPos","selectionStart","searchText","emojiText","suggestions","e","isModifierPressed","shiftKey","metaKey","altKey","ctrlKey","which","KeyCodes","escape","arrowLeft","preventDefault","arrowRight","enter","stopPropagation","target","matches"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Emoji auto complete.\n *\n * @module core/emoji/auto_complete\n * @copyright  2019 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as EmojiData from 'core/emoji/data';\nimport {render as renderTemplate} from 'core/templates';\nimport {debounce} from 'core/utils';\nimport LocalStorage from 'core/localstorage';\nimport KeyCodes from 'core/key_codes';\n\nconst INPUT_DEBOUNCE_TIMER = 200;\nconst SUGGESTION_LIMIT = 50;\nconst MAX_RECENT_COUNT = 27;\nconst RECENT_EMOJIS_STORAGE_KEY = 'moodle-recent-emojis';\n\nconst SELECTORS = {\n    EMOJI_BUTTON: '[data-region=\"emoji-button\"]',\n    ACTIVE_EMOJI_BUTTON: '[data-region=\"emoji-button\"].active',\n};\n\n/**\n * Get the list of recent emojis data from local storage.\n *\n * @return {Array}\n */\nconst getRecentEmojis = () => {\n    const storedData = LocalStorage.get(RECENT_EMOJIS_STORAGE_KEY);\n    return storedData ? JSON.parse(storedData) : [];\n};\n\n/**\n * Add an emoji data to the set of recent emojis. The new set of recent emojis are\n * saved in local storage.\n *\n * @param {String} unified The char chodes for the emoji\n * @param {String} shortName The emoji short name\n */\nconst addRecentEmoji = (unified, shortName) => {\n    const newEmoji = {\n        unified,\n        shortnames: [shortName]\n    };\n    const recentEmojis = getRecentEmojis();\n    // Add the new emoji to the start of the list of recent emojis.\n    let newRecentEmojis = [newEmoji, ...recentEmojis.filter(emoji => emoji.unified != newEmoji.unified)];\n    // Limit the number of recent emojis.\n    newRecentEmojis = newRecentEmojis.slice(0, MAX_RECENT_COUNT);\n\n    LocalStorage.set(RECENT_EMOJIS_STORAGE_KEY, JSON.stringify(newRecentEmojis));\n};\n\n/**\n * Get the actual emoji string from the short name.\n *\n * @param {String} shortName Emoji short name\n * @return {String|null}\n */\nconst getEmojiTextFromShortName = (shortName) => {\n    const unified = EmojiData.byShortName[shortName];\n\n    if (unified) {\n        const charCodes = unified.split('-').map(code => `0x${code}`);\n        return String.fromCodePoint.apply(null, charCodes);\n    } else {\n        return null;\n    }\n};\n\n/**\n * Render the auto complete list for the given short names.\n *\n * @param {Element} root The root container for the emoji auto complete\n * @param {Array} shortNames The list of short names for emoji suggestions to show\n */\nconst render = async(root, shortNames) => {\n    const renderContext = {\n        emojis: shortNames.map((shortName, index) => {\n            return {\n                active: index === 0,\n                emojitext: getEmojiTextFromShortName(shortName),\n                displayshortname: `:${shortName}:`,\n                shortname: shortName,\n                unified: EmojiData.byShortName[shortName]\n            };\n        })\n    };\n    const html = await renderTemplate('core/emoji/auto_complete', renderContext);\n    root.innerHTML = html;\n};\n\n/**\n * Get the list of emoji short names that include the given search term. If\n * the search term is an empty string then the list of recently used emojis\n * will be returned.\n *\n * @param {String} searchTerm Text to match on\n * @param {Number} limit Maximum number of results to return\n * @return {Array}\n */\nconst searchEmojis = (searchTerm, limit) => {\n    if (searchTerm === '') {\n        return getRecentEmojis().map(data => data.shortnames[0]).slice(0, limit);\n    } else {\n        searchTerm = searchTerm.toLowerCase();\n        return Object.keys(EmojiData.byShortName)\n                .filter(shortName => shortName.includes(searchTerm))\n                .slice(0, limit);\n    }\n};\n\n/**\n * Get the current word at the given position (index) within the text.\n *\n * @param {String} text The text to process\n * @param {Number} position The position (index) within the text to match the word\n * @return {String}\n */\nconst getWordFromPosition = (text, position) => {\n    const startMatches = text.slice(0, position).match(/(\\S*)$/);\n    const endMatches = text.slice(position).match(/^(\\S*)/);\n    let startText = '';\n    let endText = '';\n\n    if (startMatches) {\n        startText = startMatches[startMatches.length - 1];\n    }\n\n    if (endMatches) {\n        endText = endMatches[endMatches.length - 1];\n    }\n\n    return `${startText}${endText}`;\n};\n\n/**\n * Check if the given text is a full short name, i.e. has leading and trialing colon\n * characters.\n *\n * @param {String} text The text to process\n * @return {Bool}\n */\nconst isCompleteShortName = text => /^:[^:\\s]+:$/.test(text);\n\n/**\n * Check if the given text is a partial short name, i.e. has a leading colon but no\n * trailing colon.\n *\n * @param {String} text The text to process\n * @return {Bool}\n */\nconst isPartialShortName = text => /^:[^:\\s]*$/.test(text);\n\n/**\n * Remove the colon characters from the given text.\n *\n * @param {String} text The text to process\n * @return {String}\n */\nconst getShortNameFromText = text => text.replace(/:/g, '');\n\n/**\n * Get the currently active emoji button element in the list of suggestions.\n *\n * @param {Element} root The emoji auto complete container element\n * @return {Element|null}\n */\nconst getActiveEmojiSuggestion = (root) => {\n    return root.querySelector(SELECTORS.ACTIVE_EMOJI_BUTTON);\n};\n\n/**\n * Make the previous sibling of the current active emoji active.\n *\n * @param {Element} root The emoji auto complete container element\n */\nconst selectPreviousEmojiSuggestion = (root) => {\n    const activeEmojiSuggestion = getActiveEmojiSuggestion(root);\n    const previousSuggestion = activeEmojiSuggestion.previousElementSibling;\n\n    if (previousSuggestion) {\n        activeEmojiSuggestion.classList.remove('active');\n        previousSuggestion.classList.add('active');\n        previousSuggestion.scrollIntoView({behaviour: 'smooth', inline: 'center'});\n    }\n};\n\n/**\n * Make the next sibling to the current active emoji active.\n *\n * @param {Element} root The emoji auto complete container element\n */\nconst selectNextEmojiSuggestion = (root) => {\n    const activeEmojiSuggestion = getActiveEmojiSuggestion(root);\n    const nextSuggestion = activeEmojiSuggestion.nextElementSibling;\n\n    if (nextSuggestion) {\n        activeEmojiSuggestion.classList.remove('active');\n        nextSuggestion.classList.add('active');\n        nextSuggestion.scrollIntoView({behaviour: 'smooth', inline: 'center'});\n    }\n};\n\n/**\n * Trigger the select callback for the given emoji button element.\n *\n * @param {Element} element The emoji button element\n * @param {Function} selectCallback The callback for when the user selects an emoji\n */\nconst selectEmojiElement = (element, selectCallback) => {\n    const shortName = element.getAttribute('data-short-name');\n    const unified = element.getAttribute('data-unified');\n    addRecentEmoji(unified, shortName);\n    selectCallback(element.innerHTML.trim());\n};\n\n/**\n * Initialise the emoji auto complete.\n *\n * @method\n * @param {Element} root The root container element for the auto complete\n * @param {Element} textArea The text area element to monitor for auto complete\n * @param {Function} hasSuggestionCallback Callback for when there are auto-complete suggestions\n * @param {Function} selectCallback Callback for when the user selects an emoji\n */\nexport default (root, textArea, hasSuggestionCallback, selectCallback) => {\n    let hasSuggestions = false;\n    let previousSearchText = '';\n\n    // Debounce the listener so that each keypress delays the execution of the handler. The\n    // handler should only run 200 milliseconds after the last keypress.\n    textArea.addEventListener('keyup', debounce(() => {\n        // This is a \"keyup\" listener so that it only executes after the text area value\n        // has been updated.\n        const text = textArea.value;\n        const cursorPos = textArea.selectionStart;\n        const searchText = getWordFromPosition(text, cursorPos);\n\n        if (searchText === previousSearchText) {\n            // Nothing has changed so no need to take any action.\n            return;\n        } else {\n            previousSearchText = searchText;\n        }\n\n        if (isCompleteShortName(searchText)) {\n            // If the user has entered a full short name (with leading and trialing colons)\n            // then see if we can find a match for it and auto complete it.\n            const shortName = getShortNameFromText(searchText);\n            const emojiText = getEmojiTextFromShortName(shortName);\n            hasSuggestions = false;\n            if (emojiText) {\n                addRecentEmoji(EmojiData.byShortName[shortName], shortName);\n                selectCallback(emojiText);\n            }\n        } else if (isPartialShortName(searchText)) {\n            // If the user has entered a partial short name (leading colon but no trailing) then\n            // search on the text to see if we can find some suggestions for them.\n            const suggestions = searchEmojis(getShortNameFromText(searchText), SUGGESTION_LIMIT);\n\n            if (suggestions.length) {\n                render(root, suggestions);\n                hasSuggestions = true;\n            } else {\n                hasSuggestions = false;\n            }\n        } else {\n            hasSuggestions = false;\n        }\n\n        hasSuggestionCallback(hasSuggestions);\n    }, INPUT_DEBOUNCE_TIMER));\n\n    textArea.addEventListener('keydown', (e) => {\n        if (hasSuggestions) {\n            const isModifierPressed = (e.shiftKey || e.metaKey || e.altKey || e.ctrlKey);\n            if (!isModifierPressed) {\n                switch (e.which) {\n                    case KeyCodes.escape:\n                        // Escape key closes the auto complete.\n                        hasSuggestions = false;\n                        hasSuggestionCallback(false);\n                        break;\n                    case KeyCodes.arrowLeft:\n                        // Arrow keys navigate through the list of suggetions.\n                        selectPreviousEmojiSuggestion(root);\n                        e.preventDefault();\n                        break;\n                    case KeyCodes.arrowRight:\n                        // Arrow keys navigate through the list of suggetions.\n                        selectNextEmojiSuggestion(root);\n                        e.preventDefault();\n                        break;\n                    case KeyCodes.enter:\n                        // Enter key selects the current suggestion.\n                        selectEmojiElement(getActiveEmojiSuggestion(root), selectCallback);\n                        e.preventDefault();\n                        e.stopPropagation();\n                        break;\n                }\n            }\n        }\n    });\n\n    root.addEventListener('click', (e) => {\n        const target = e.target;\n        if (target.matches(SELECTORS.EMOJI_BUTTON)) {\n            selectEmojiElement(target, selectCallback);\n        }\n    });\n};\n"],"file":"auto_complete.min.js"}