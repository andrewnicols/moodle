{"version":3,"file":"modal_permalink.min.js","sources":["../src/modal_permalink.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport Modal from './modal';\nimport ModalFactory from './modal_factory';\nimport ModalRegistry from './modal_registry';\nimport 'core/copy_to_clipboard';\n\n/**\n * Permalink modal.\n *\n * @module     core/modal_permalink\n * @copyright  2023 Stephan Robotta <stephan.robotta@bfh.ch>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nexport default class PermalinkModal extends Modal {\n    static TYPE = 'core/permalink';\n    static TEMPLATE = 'core/modal_permalink';\n\n    constructor(...config) {\n        // Override the constructor to set the removeOnClose property, and show the modal.\n        super(...config);\n        this.setRemoveOnClose(true);\n        this.show();\n    }\n\n    /**\n     * Set up all of the event handling for the modal.\n     *\n     * This is an override of the parent method, adding an event listener to close upon the action.\n     *\n     * @param {array} args\n     */\n    registerEventListeners(...args) {\n        super.registerEventListeners(...args);\n\n        this.getRoot().get(0).addEventListener('click', (e) => {\n            if (!e.target.closest('[data-action=\"copytoclipboard\"]')) {\n                return;\n            }\n\n            if (!this.getRoot().get(0).contains(e.target)) {\n                return;\n            }\n\n            // Note: We must call destroy() here, because the copy-to-clipboard action listens on the document,\n            // which will be processed after this event listener has been processed.\n            // By placing this in a setTimeout we move its processing to after the event loop has finished.\n            setTimeout(this.destroy.bind(this));\n        });\n    }\n\n    /**\n     * Create an instance of the modal.\n     *\n     * @param {object} config\n     * @param {string} config.link The link to be copied to the clipboard.\n     * @param {string|Promise} title The title to use for the modal\n     */\n    static async create({link}, title) {\n        if (!ModalRegistry.get(this.TYPE)) {\n            ModalRegistry.register(this.TYPE, this, this.TEMPLATE);\n        }\n\n        const modal = await ModalFactory.create({\n            type: this.TYPE,\n            templateContext: {\n                link,\n            },\n        });\n\n        modal.setTitle(title);\n    }\n}\n"],"names":["PermalinkModal","Modal","constructor","setRemoveOnClose","show","registerEventListeners","getRoot","get","addEventListener","e","target","closest","this","contains","setTimeout","destroy","bind","title","link","ModalRegistry","TYPE","register","TEMPLATE","ModalFactory","create","type","templateContext","setTitle"],"mappings":";;;;;;;+OA2BqBA,uBAAuBC,eAIxCC,uCAGSC,kBAAiB,QACjBC,OAUTC,+BACUA,0CAEDC,UAAUC,IAAI,GAAGC,iBAAiB,SAAUC,IACxCA,EAAEC,OAAOC,QAAQ,oCAIjBC,KAAKN,UAAUC,IAAI,GAAGM,SAASJ,EAAEC,SAOtCI,WAAWF,KAAKG,QAAQC,KAAKJ,mCAWTK,WAARC,KAACA,WACZC,wBAAcZ,IAAIK,KAAKQ,+BACVC,SAAST,KAAKQ,KAAMR,KAAMA,KAAKU,iBAG7BC,uBAAaC,OAAO,CACpCC,KAAMb,KAAKQ,KACXM,gBAAiB,CACbR,KAAAA,SAIFS,SAASV,+DAxDFjB,sBACH,kCADGA,0BAEC"}