{"version":3,"sources":["../src/toast.js"],"names":["addToastRegion","parent","pendingPromise","Pending","Templates","renderForPromise","html","js","prependNodeContents","Notification","exception","resolve","add","message","configuration","closeButton","autohide","delay","templateName","getTargetNode","targetNode","regions","document","querySelectorAll","length","body"],"mappings":"2PAsBA,8CACA,oDACA,0C,mjDAQO,GAAMA,CAAAA,cAAc,+DAAG,iBAAMC,MAAN,yJACpBC,cADoB,CACH,GAAIC,iBAAJ,CAAY,gBAAZ,CADG,uCAIGC,oBAAUC,gBAAV,CAA2B,0BAA3B,CAAuD,EAAvD,CAJH,4CAIfC,IAJe,uBAIfA,IAJe,CAITC,EAJS,uBAITA,EAJS,CAKtBH,mBAAUI,mBAAV,CAA8BP,MAA9B,CAAsCK,IAAtC,CAA4CC,EAA5C,EALsB,iFAOtBE,sBAAaC,SAAb,cAPsB,QAU1BR,cAAc,CAACS,OAAf,GAV0B,oEAAH,0DAApB,C,uCAyCA,GAAMC,CAAAA,GAAG,gEAAG,kBAAMC,OAAN,CAAeC,aAAf,qLACTZ,cADS,CACQ,GAAIC,iBAAJ,CAAY,gBAAZ,CADR,CAEfW,aAAa,gBACTC,WAAW,GADF,CAETC,QAAQ,GAFC,CAGTC,KAAK,CAAE,GAHE,EAINH,aAJM,CAAb,CAOMI,YATS,oEAWcC,CAAAA,aAAa,EAX3B,QAWLC,UAXK,uCAYchB,oBAAUC,gBAAV,CAA2Ba,YAA3B,gBACrBL,OAAO,CAAPA,OADqB,EAElBC,aAFkB,EAZd,8CAYJR,IAZI,wBAYJA,IAZI,CAYEC,EAZF,wBAYEA,EAZF,CAgBXH,mBAAUI,mBAAV,CAA8BY,UAA9B,CAA0Cd,IAA1C,CAAgDC,EAAhD,EAhBW,qFAkBXE,sBAAaC,SAAb,eAlBW,QAqBfR,cAAc,CAACS,OAAf,GArBe,sEAAH,2DAAT,C,iBAwBP,GAAMQ,CAAAA,aAAa,gEAAG,yIACZE,OADY,CACFC,QAAQ,CAACC,gBAAT,CAA0B,gBAA1B,CADE,KAGdF,OAAO,CAACG,MAHM,0DAIPH,OAAO,CAACA,OAAO,CAACG,MAAR,CAAiB,CAAlB,CAJA,gCAOZxB,CAAAA,cAAc,CAACsB,QAAQ,CAACG,IAAV,CAAgB,cAAhB,CAPF,yCAQXN,aAAa,EARF,yDAAH,2D","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A system for displaying small snackbar notifications to users which disappear shortly after they are shown.\n *\n * @module     core/toast\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n/**\n * Add a new region to place toasts in, taking in a parent element.\n *\n * @method\n * @param {HTMLElement} parent\n */\nexport const addToastRegion = async(parent) => {\n    const pendingPromise = new Pending('addToastRegion');\n\n    try {\n        const {html, js} = await Templates.renderForPromise('core/local/toast/wrapper', {});\n        Templates.prependNodeContents(parent, html, js);\n    } catch (e) {\n        Notification.exception(e);\n    }\n\n    pendingPromise.resolve();\n};\n\n/**\n * Add a new toast or snackbar notification to the page.\n *\n * @method\n * @param {String} message\n * @param {Object} configuration\n * @param {String} [configuration.title]\n * @param {String} [configuration.subtitle]\n * @param {String} [configuration.type] Optional type of the toast notification ('success', 'info', 'warning' or 'danger')\n * @param {Boolean} [configuration.autohide=true]\n * @param {Boolean} [configuration.closeButton=false]\n * @param {Number} [configuration.delay=4000]\n *\n * @example\n * import {add as addToast} from 'core/toast';\n * import {get_string as getString} from 'core/str';\n *\n * getString('example', 'mod_myexample')\n * .then(str => {\n *     addToast(str, {\n *         type: 'warning',\n *         autohide: false,\n *         closeButton: true,\n *     });\n *     return;\n * })\n * .catch();\n */\nexport const add = async(message, configuration) => {\n    const pendingPromise = new Pending('addToastRegion');\n    configuration = {\n        closeButton: false,\n        autohide: true,\n        delay: 4000,\n        ...configuration,\n    };\n\n    const templateName = `core/local/toast/message`;\n    try {\n        const targetNode = await getTargetNode();\n        const {html, js} = await Templates.renderForPromise(templateName, {\n            message,\n            ...configuration\n        });\n        Templates.prependNodeContents(targetNode, html, js);\n    } catch (e) {\n        Notification.exception(e);\n    }\n\n    pendingPromise.resolve();\n};\n\nconst getTargetNode = async() => {\n    const regions = document.querySelectorAll('.toast-wrapper');\n\n    if (regions.length) {\n        return regions[regions.length - 1];\n    }\n\n    await addToastRegion(document.body, 'fixed-bottom');\n    return getTargetNode();\n};\n"],"file":"toast.min.js"}