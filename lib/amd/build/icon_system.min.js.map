{"version":3,"file":"icon_system.min.js","sources":["../src/icon_system.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Icon System base module.\n *\n * @module core/icon_system\n * @copyright  2017 Damyon Wiese\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\n\n\n/**\n * Icon System abstract class.\n*\n * Any icon system needs to define a module extending this one and return this module name from the php icon_system class.\n *\n * @class core/icon_system\n */\nexport default class IconSystem {\n    /**\n     * Initialise the icon system.\n     *\n     * @return {Promise}\n     * @method init\n     */\n    init() {\n        return $.when(this);\n    }\n\n    /**\n     * Render an icon.\n     *\n     * The key, component and title come from either the pix mustache helper tag, or the call to templates.renderIcon.\n     * The template is the pre-loaded template string matching the template from getTemplateName() in this class.\n     * This function must return a string (not a promise) because it is used during the internal rendering of the mustache\n     * template (which is unfortunately synchronous). To render the mustache template in this function call\n     * core/mustache.render() directly and do not use any partials, blocks or helper functions in the template.\n     *\n     * @param {String} key\n     * @param {String} component\n     * @param {String} title\n     * @param {String} template\n     * @returns {String}\n     * @method renderIcon\n     */\n    renderIcon(key, component, title, template) { // eslint-disable-line no-unused-vars\n        throw new Error('Abstract function not implemented.');\n    }\n\n    /**\n     * Get the template name to use.\n     *\n     * @returns {String}\n     */\n    getTemplateName() {\n        throw new Error('Abstract function not implemented.');\n    }\n}\n"],"names":["init","$","when","this","renderIcon","key","component","title","template","Error","getTemplateName"],"mappings":";;;;;;;2KAwCIA,cACWC,gBAAEC,KAAKC,MAmBlBC,WAAWC,IAAKC,UAAWC,MAAOC,gBACxB,IAAIC,MAAM,sCAQpBC,wBACU,IAAID,MAAM"}