define("core/fetch",["exports","core/config","./pending"],(function(_exports,_config,_pending){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _classPrivateMethodInitSpec(obj,privateSet){_checkPrivateRedeclaration(obj,privateSet),privateSet.add(obj)}function _classPrivateMethodGet(receiver,privateSet,fn){if(!privateSet.has(receiver))throw new TypeError("attempted to get private field on non-instance");return fn}function _classStaticPrivateMethodGet(receiver,classConstructor,method){return _classCheckPrivateStaticAccess(receiver,classConstructor),method}function _classStaticPrivateFieldSpecGet(receiver,classConstructor,descriptor){return _classCheckPrivateStaticAccess(receiver,classConstructor),_classCheckPrivateStaticFieldDescriptor(descriptor,"get"),_classApplyDescriptorGet(receiver,descriptor)}function _classCheckPrivateStaticFieldDescriptor(descriptor,action){if(void 0===descriptor)throw new TypeError("attempted to "+action+" private static field before its declaration")}function _classCheckPrivateStaticAccess(receiver,classConstructor){if(receiver!==classConstructor)throw new TypeError("Private static access of wrong provenance")}function _classPrivateFieldInitSpec(obj,privateMap,value){_checkPrivateRedeclaration(obj,privateMap),privateMap.set(obj,value)}function _checkPrivateRedeclaration(obj,privateCollection){if(privateCollection.has(obj))throw new TypeError("Cannot initialize the same private elements twice on an object")}function _classPrivateFieldGet(receiver,privateMap){return _classApplyDescriptorGet(receiver,_classExtractFieldDescriptor(receiver,privateMap,"get"))}function _classApplyDescriptorGet(receiver,descriptor){return descriptor.get?descriptor.get.call(receiver):descriptor.value}function _classPrivateFieldSet(receiver,privateMap,value){return _classApplyDescriptorSet(receiver,_classExtractFieldDescriptor(receiver,privateMap,"set"),value),value}function _classExtractFieldDescriptor(receiver,privateMap,action){if(!privateMap.has(receiver))throw new TypeError("attempted to "+action+" private field on non-instance");return privateMap.get(receiver)}function _classApplyDescriptorSet(receiver,descriptor,value){if(descriptor.set)descriptor.set.call(receiver,value);else{if(!descriptor.writable)throw new TypeError("attempted to set read only private field");descriptor.value=value}}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_config=_interopRequireDefault(_config),_pending=_interopRequireDefault(_pending);var _request=new WeakMap,_promise=new WeakMap,_resolve=new WeakMap,_reject=new WeakMap;class RequestWrapper{constructor(request){_classPrivateFieldInitSpec(this,_request,{writable:!0,value:null}),_classPrivateFieldInitSpec(this,_promise,{writable:!0,value:null}),_classPrivateFieldInitSpec(this,_resolve,{writable:!0,value:null}),_classPrivateFieldInitSpec(this,_reject,{writable:!0,value:null}),_classPrivateFieldSet(this,_request,request),_classPrivateFieldSet(this,_promise,new Promise(((resolve,reject)=>{_classPrivateFieldSet(this,_resolve,resolve),_classPrivateFieldSet(this,_reject,reject)})))}get request(){return _classPrivateFieldGet(this,_request)}get promise(){return _classPrivateFieldGet(this,_promise)}get reject(){return _classPrivateFieldGet(this,_reject)}handleResponse(response){response.ok?_classPrivateFieldGet(this,_resolve).call(this,response):_classPrivateFieldGet(this,_reject).call(this,response.statusText)}}var _requestMap=new WeakMap,_delayTimer=new WeakMap,_batchRequests=new WeakMap,_autoBatchTimeout=new WeakMap,_addRequest=new WeakSet,_queueExecution=new WeakSet,_getRequests=new WeakSet,_getResponseFromText=new WeakSet,_processBatchResponse=new WeakSet,_getGuid=new WeakSet;class Fetch{constructor(){let autoBatchTimeout=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;_classPrivateMethodInitSpec(this,_getGuid),_classPrivateMethodInitSpec(this,_processBatchResponse),_classPrivateMethodInitSpec(this,_getResponseFromText),_classPrivateMethodInitSpec(this,_getRequests),_classPrivateMethodInitSpec(this,_queueExecution),_classPrivateMethodInitSpec(this,_addRequest),_classPrivateFieldInitSpec(this,_requestMap,{writable:!0,value:new Map}),_classPrivateFieldInitSpec(this,_delayTimer,{writable:!0,value:null}),_classPrivateFieldInitSpec(this,_batchRequests,{writable:!0,value:!1}),_classPrivateFieldInitSpec(this,_autoBatchTimeout,{writable:!0,value:null}),_classPrivateFieldSet(this,_autoBatchTimeout,autoBatchTimeout),_classPrivateFieldSet(this,_batchRequests,_config.default.batchFetchRequests)}static getBatcher(){var receiver,classConstructor,descriptor,value;return _classStaticPrivateFieldSpecGet(this,Fetch,_batcher)||(receiver=this,classConstructor=Fetch,descriptor=_batcher,value=new this(50),_classCheckPrivateStaticAccess(receiver,classConstructor),_classCheckPrivateStaticFieldDescriptor(descriptor,"set"),_classApplyDescriptorSet(receiver,descriptor,value)),_classStaticPrivateFieldSpecGet(this,Fetch,_batcher)}static async request(component,action){let{params:params={},body:body=null,method:method="GET"}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};const pending=new _pending.default("Requesting ".concat(component,"/").concat(action," with ").concat(method)),requestWrapper=_classStaticPrivateMethodGet(Fetch,Fetch,_getRequest).call(Fetch,_classStaticPrivateMethodGet(Fetch,Fetch,_normaliseComponent).call(Fetch,component),action,{params:params,method:method,body:body}),result=await fetch(requestWrapper.request);return pending.resolve(),requestWrapper.handleResponse(result),requestWrapper.promise}static performGet(component,action){let{params:params={}}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request(component,action,{params:params,method:"GET"})}static performHead(component,action){let{params:params={}}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request(component,action,{params:params,method:"HEAD"})}static performPost(component,action){let{body:body}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request(component,action,{body:body,method:"POST"})}static performPut(component,action){let{body:body}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request(component,action,{body:body,method:"PUT"})}static performPatch(component,action){let{body:body}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request(component,action,{body:body,method:"PATCH"})}static performDelete(component,action){let{params:params={},body:body=null}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.request(component,action,{body:body,params:params,method:"DELETE"})}performGet(component,action){let{params:params={}}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return _classPrivateMethodGet(this,_addRequest,_addRequest2).call(this,component,action,{params:params,method:"GET"})}performHead(component,action){let{params:params={}}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return _classPrivateMethodGet(this,_addRequest,_addRequest2).call(this,component,action,{params:params,method:"HEAD"})}performPost(component,action){let{body:body}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return _classPrivateMethodGet(this,_addRequest,_addRequest2).call(this,component,action,{body:body,method:"POST"})}performPut(component,action){let{body:body}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return _classPrivateMethodGet(this,_addRequest,_addRequest2).call(this,component,action,{body:body,method:"PUT"})}performPatch(component,action){let{body:body}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return _classPrivateMethodGet(this,_addRequest,_addRequest2).call(this,component,action,{body:body,method:"PATCH"})}performDelete(component,action){let{params:params={},body:body=null}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return _classPrivateMethodGet(this,_addRequest,_addRequest2).call(this,component,action,{body:body,params:params,method:"DELETE"})}async execute(){const requestMap=_classPrivateFieldGet(this,_requestMap);if(_classPrivateFieldSet(this,_requestMap,new Map),0===requestMap.size)return Promise.resolve();if(1===requestMap.size){const requestWrapper=requestMap.values().next().value,result=await fetch(requestWrapper.request);return void requestWrapper.handleResponse(result)}const response=await fetch(await _classPrivateMethodGet(this,_getRequests,_getRequests2).call(this,requestMap));if(!response.ok)return void requestMap.forEach((requestWrapper=>requestWrapper.reject(response.statusText)));const responses=await _classPrivateMethodGet(this,_processBatchResponse,_processBatchResponse2).call(this,response);let index=0;requestMap.forEach((requestWrapper=>{if(responses[index]){const result=_classPrivateMethodGet(this,_getResponseFromText,_getResponseFromText2).call(this,responses[index]);requestWrapper.handleResponse(result)}else requestWrapper.reject("Request failed");index++}))}}function _normaliseComponent(component){return component.replace(/^core_/,"")}function _addRequest2(component,endpoint){let{params:params={},body:body=null,method:method="GET",id:id=null}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(_classPrivateFieldGet(this,_requestMap).length>20&&this.execute(),id){if(_classPrivateFieldGet(this,_requestMap).has(id))throw new Error("Request with ID ".concat(id," already exists."))}else do{id=_classPrivateMethodGet(this,_getGuid,_getGuid2).call(this)}while(_classPrivateFieldGet(this,_requestMap).has(id));const request=_classStaticPrivateMethodGet(Fetch,Fetch,_getRequest).call(Fetch,_classStaticPrivateMethodGet(Fetch,Fetch,_normaliseComponent).call(Fetch,component),endpoint,{params:params,method:method,body:body});return _classPrivateFieldGet(this,_requestMap).set(id,request),_classPrivateFieldGet(this,_batchRequests)?_classPrivateFieldGet(this,_autoBatchTimeout)&&_classPrivateMethodGet(this,_queueExecution,_queueExecution2).call(this):this.execute(),request.promise}function _queueExecution2(){_classPrivateFieldGet(this,_delayTimer)&&clearTimeout(_classPrivateFieldGet(this,_delayTimer)),_classPrivateFieldSet(this,_delayTimer,setTimeout((()=>this.execute()),_classPrivateFieldGet(this,_autoBatchTimeout)))}function _getRequest(component,endpoint,_ref){let{params:params={},body:body=null,method:method="GET"}=_ref;const url=new URL("".concat(_config.default.apibase,"/rest/v2/").concat(component,"/").concat(endpoint)),options={method:method,headers:{Accept:"application/json","Content-Type":"application/json"}};return Object.entries(params).forEach((_ref2=>{let[key,value]=_ref2;url.searchParams.append(key,value)})),body&&(body instanceof FormData?options.body=body:options.body=body instanceof Object?JSON.stringify(body):body),new RequestWrapper(new Request(url,options))}async function _getRequests2(requestMap){const boundary=_classPrivateMethodGet(this,_getGuid,_getGuid2).call(this),getBoundaryMarker=()=>"--".concat(boundary,"\n"),[...requestBodies]=await Promise.all(requestMap.entries().map((async _ref3=>{let[id,{request:request}]=_ref3;const thisBody=[];return thisBody.push(getBoundaryMarker(),"Content-Type: application/html\n\n"),thisBody.push("".concat(request.method," ").concat(request.url,"\n")),thisBody.push("Content-Type: ".concat(request.headers.get("Content-Type"),"\n")),thisBody.push("Content-ID: ".concat(id,"\n")),request.body&&(thisBody.push("\n"),thisBody.push(await request.text())),thisBody.push("\n"),thisBody}))),body=[...requestBodies.map((requestBody=>requestBody.join(""))),getBoundaryMarker()];return new Request("".concat(M.cfg.apibase,"/$batch"),{body:body.join(""),method:"POST",headers:{"Content-Type":"multipart/mixed;boundary=".concat(boundary)}})}function _getResponseFromText2(text){const parts=text.split("\n\n").map((part=>part.trim()));parts.shift(),parts.pop(),parts.push(null);const[headerText,body]=parts,headers=headerText.split("\n"),statusLine=headers.shift(),[,status,statusText]=statusLine.split(" "),headerList=headers.map((header=>header.split(":",2).map((value=>value.trim()))));return new Response(body,{status:status,statusText:statusText,headers:new Headers(headerList)})}async function _processBatchResponse2(response){const contentType=response.headers.get("Content-Type");if(contentType.startsWith("multipart/mixed")){const[,boundaryPart]=contentType.split(";").map((part=>part.trim())),boundary=boundaryPart.replace("boundary=","").trim();return(await response.text()).split("--".concat(boundary)).filter((value=>!!value.length))}if("application/json"===contentType)return await response.json();throw new Error("Unknown response type '".concat(contentType,"'"))}function _getGuid2(){let d=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(c){const r=(d+16*Math.random())%16|0;return d=Math.floor(d/16),("x"===c?r:3&r|8).toString(16)}))}_exports.default=Fetch;var _batcher={writable:!0,value:null};return _exports.default}));

//# sourceMappingURL=fetch.min.js.map