define("core/fetch",["exports","core/config"],(function(_exports,_config){var obj;
/**
   * TODO describe module fetch
   *
   * @module     core/fetch
   * @copyright  2023 Andrew Lyons <andrew@nicols.co.uk>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_config=(obj=_config)&&obj.__esModule?obj:{default:obj};const normaliseComponent=component=>component.replace(/^core_/,""),getRequest=(component,endpoint,params,method)=>{const url=new URL("".concat(_config.default.apibase,"rest/v2/").concat(component,"/").concat(endpoint)),options={method:method,headers:{"Content-Type":"application/json"}};return"GET"===method&&Object.entries(params).forEach((_ref=>{let[key,value]=_ref;url.searchParams.append(key,value)})),"POST"===method&&(options.body=JSON.stringify(params)),new Request(url,options)};return _exports.default=async function(component,action){let params=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},method=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"GET";const result=await fetch(getRequest(normaliseComponent(component),action,params,method));if(result.ok)return result.json()},_exports.default}));

//# sourceMappingURL=fetch.min.js.map