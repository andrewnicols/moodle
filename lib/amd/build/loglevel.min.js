function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}(function(root,definition){"use strict";if("function"==typeof define&&define.amd){define ("core/loglevel",definition)}else if("object"===("undefined"==typeof module?"undefined":_typeof(module))&&module.exports){module.exports=definition()}else{root.log=definition()}})(this,function(){"use strict";var noop=function(){},undefinedType="undefined",isIE=("undefined"==typeof window?"undefined":_typeof(window))!==undefinedType&&_typeof(window.navigator)!==undefinedType&&/Trident\/|MSIE /.test(window.navigator.userAgent),logMethods=["trace","debug","info","warn","error"];function bindMethod(obj,methodName){var method=obj[methodName];if("function"==typeof method.bind){return method.bind(obj)}else{try{return Function.prototype.bind.call(method,obj)}catch(e){return function(){return Function.prototype.apply.apply(method,[obj,arguments])}}}}function traceForIE(){if(console.log){if(console.log.apply){console.log.apply(console,arguments)}else{Function.prototype.apply.apply(console.log,[console,arguments])}}if(console.trace)console.trace()}function realMethod(methodName){if("debug"===methodName){methodName="log"}if(("undefined"==typeof console?"undefined":_typeof(console))===undefinedType){return!1}else if("trace"===methodName&&isIE){return traceForIE}else if(console[methodName]!==void 0){return bindMethod(console,methodName)}else if(console.log!==void 0){return bindMethod(console,"log")}else{return noop}}function replaceLoggingMethods(level,loggerName){for(var i=0,methodName;i<logMethods.length;i++){methodName=logMethods[i];this[methodName]=i<level?noop:this.methodFactory(methodName,level,loggerName)}this.log=this.debug}function enableLoggingWhenConsoleArrives(methodName,level,loggerName){return function(){if(("undefined"==typeof console?"undefined":_typeof(console))!==undefinedType){replaceLoggingMethods.call(this,level,loggerName);this[methodName].apply(this,arguments)}}}function defaultMethodFactory(methodName){return realMethod(methodName)||enableLoggingWhenConsoleArrives.apply(this,arguments)}function Logger(name,defaultLevel,factory){var self=this,currentLevel,storageKey="loglevel";if("string"==typeof name){storageKey+=":"+name}else if("symbol"===_typeof(name)){storageKey=void 0}function persistLevelIfPossible(levelNum){var levelName=(logMethods[levelNum]||"silent").toUpperCase();if(("undefined"==typeof window?"undefined":_typeof(window))===undefinedType||!storageKey)return;try{window.localStorage[storageKey]=levelName;return}catch(ignore){}try{window.document.cookie=encodeURIComponent(storageKey)+"="+levelName+";"}catch(ignore){}}function getPersistedLevel(){var storedLevel;if(("undefined"==typeof window?"undefined":_typeof(window))===undefinedType||!storageKey)return;try{storedLevel=window.localStorage[storageKey]}catch(ignore){}if(_typeof(storedLevel)===undefinedType){try{var cookie=window.document.cookie,location=cookie.indexOf(encodeURIComponent(storageKey)+"=");if(-1!==location){storedLevel=/^([^;]+)/.exec(cookie.slice(location))[1]}}catch(ignore){}}if(self.levels[storedLevel]===void 0){storedLevel=void 0}return storedLevel}self.name=name;self.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5};self.methodFactory=factory||defaultMethodFactory;self.getLevel=function(){return currentLevel};self.setLevel=function(level,persist){if("string"==typeof level&&self.levels[level.toUpperCase()]!==void 0){level=self.levels[level.toUpperCase()]}if("number"==typeof level&&0<=level&&level<=self.levels.SILENT){currentLevel=level;if(!1!==persist){persistLevelIfPossible(level)}replaceLoggingMethods.call(self,level,name);if(("undefined"==typeof console?"undefined":_typeof(console))===undefinedType&&level<self.levels.SILENT){return"No console available for logging"}}else{throw"log.setLevel() called with invalid level: "+level}};self.setDefaultLevel=function(level){if(!getPersistedLevel()){self.setLevel(level,!1)}};self.enableAll=function(persist){self.setLevel(self.levels.TRACE,persist)};self.disableAll=function(persist){self.setLevel(self.levels.SILENT,persist)};var initialLevel=getPersistedLevel();if(null==initialLevel){initialLevel=null==defaultLevel?"WARN":defaultLevel}self.setLevel(initialLevel,!1)}var defaultLogger=new Logger,_loggersByName={};defaultLogger.getLogger=function(name){if("symbol"!==_typeof(name)&&"string"!=typeof name||""===name){throw new TypeError("You must supply a name when creating a logger.")}var logger=_loggersByName[name];if(!logger){logger=_loggersByName[name]=new Logger(name,defaultLogger.getLevel(),defaultLogger.methodFactory)}return logger};var _log=("undefined"==typeof window?"undefined":_typeof(window))!==undefinedType?window.log:void 0;defaultLogger.noConflict=function(){if(("undefined"==typeof window?"undefined":_typeof(window))!==undefinedType&&window.log===defaultLogger){window.log=_log}return defaultLogger};defaultLogger.getLoggers=function(){return _loggersByName};defaultLogger["default"]=defaultLogger;return defaultLogger});
//# sourceMappingURL=loglevel.min.js.map
