define("core/fragment",["exports","jquery","core/fetch","core/normalise"],(function(_exports,_jquery,_fetch,_normalise){var obj;
/**
   * A way to call HTML fragments to be inserted as required via JavaScript.
   *
   * @module     core/fragment
   * @copyright  2016 Adrian Greeve <adrian@moodle.com>
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   * @since      3.1
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_jquery=(obj=_jquery)&&obj.__esModule?obj:{default:obj};const innerLoadFragment=(component,callback,contextid,params)=>{const args=(params=>null===params?[]:"object"==typeof params?Array.from(Object.entries(params)):[])(params).map((_ref=>{let[name,value]=_ref;return{name:name,value:value}}));return(0,_fetch.fetchOne)("core_get_fragment",{component:component,callback:callback,contextid:contextid,args:args})},processCollectedJavascript=js=>(0,_normalise.getList)((0,_jquery.default)(js)).map((scriptNode=>{var _scriptNode$tagName;const tagName=null===(_scriptNode$tagName=scriptNode.tagName)||void 0===_scriptNode$tagName?void 0:_scriptNode$tagName.toLowerCase();if(!tagName||"script"!==tagName)return null;if(!scriptNode.hasAttribute("src"))return scriptNode.text;return Array.from([...document.querySelectorAll("script")]).some((script=>script.getAttribute("src")===scriptNode.getAttribute("src")))?null:"{\n            node = document.createElement('script');\n            node.type = 'text/javascript';\n            node.src = decodeURI(\"".concat(encodeURI(scriptNode.getAttribute("src")),"\");\n            document.getElementsByTagName('head')[0].appendChild(node);\n        }")})).filter((script=>!!script)).join(" ");var _default={processCollectedJavascript:processCollectedJavascript,loadFragment:(component,callback,contextid,params)=>{const promise=_jquery.default.Deferred();return innerLoadFragment(component,callback,contextid,params).then((_ref2=>{let{html:html,javascript:javascript}=_ref2;return promise.resolve(html,processCollectedJavascript(javascript))})).catch((error=>{promise.reject(error)})),promise.promise()}};return _exports.default=_default,_exports.default}));

//# sourceMappingURL=fragment.min.js.map