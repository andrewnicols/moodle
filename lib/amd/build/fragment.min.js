define ("core/fragment",["jquery","core/ajax"],function($,ajax){var loadFragment=function(component,callback,contextid,params){var formattedparams=[];for(var index in params){formattedparams.push({name:index,value:params[index]})}return ajax.call([{methodname:"core_get_fragment",args:{component:component,callback:callback,contextid:contextid,args:formattedparams}}])[0]},processCollectedJavascript=function(js){var jsNodes=$(js),allScript="";jsNodes.each(function(index,scriptNode){scriptNode=$(scriptNode);var tagName=scriptNode.prop("tagName");if(tagName&&"script"==tagName.toLowerCase()){if(scriptNode.attr("src")){var exists=!1;$("script").each(function(index,s){if($(s).attr("src")==scriptNode.attr("src")){exists=!0}return!exists});if(!exists){allScript+=" { ";allScript+=" node = document.createElement(\"script\"); ";allScript+=" node.type = \"text/javascript\"; ";allScript+=" node.src = decodeURI(\""+encodeURI(scriptNode.attr("src"))+"\"); ";allScript+=" document.getElementsByTagName(\"head\")[0].appendChild(node); ";allScript+=" } "}}else{allScript+=" "+scriptNode.text()}}});return allScript};return{loadFragment:function(component,callback,contextid,params){var promise=$.Deferred();loadFragment(component,callback,contextid,params).then(function(data){promise.resolve(data.html,processCollectedJavascript(data.javascript))}).fail(function(ex){promise.reject(ex)});return promise.promise()},processCollectedJavascript:function(js){return processCollectedJavascript(js)}}});
//# sourceMappingURL=fragment.min.js.map
