define ("core/prefetch",["exports","core/config"],function(_exports,_config){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.default=void 0;_config=function(obj){return obj&&obj.__esModule?obj:{default:obj}}(_config);var _systemImportTransformerGlobalIdentifier="undefined"!=typeof window?window:"undefined"!=typeof self?self:"undefined"!=typeof global?global:{};let initialPrefetchComplete=!1,templateList=[],stringList={},prefetchTimer;const fetchQueue=()=>{if(templateList){const templatesToLoad=templateList.slice();templateList=[];("function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise(function(resolve,reject){_systemImportTransformerGlobalIdentifier.require(["core/templates"],resolve,reject)}):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require(("core/templates"))):Promise.resolve(_systemImportTransformerGlobalIdentifier["core/templates"])).then(Templates=>Templates.prefetchTemplates(templatesToLoad)).catch()}const mappedStringsToFetch=stringList;stringList={};const stringsToFetch=[];Object.keys(mappedStringsToFetch).forEach(component=>{stringsToFetch.push(...mappedStringsToFetch[component].map(key=>{return{component,key}}))});("function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise(function(resolve,reject){_systemImportTransformerGlobalIdentifier.require(["core/str"],resolve,reject)}):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require(("core/str"))):Promise.resolve(_systemImportTransformerGlobalIdentifier["core/str"])).then(Str=>Str.get_strings(stringsToFetch)).catch()},processQueue=()=>{if(prefetchTimer){return}if(initialPrefetchComplete){fetchQueue();return}prefetchTimer=setTimeout(()=>{initialPrefetchComplete=!0;prefetchTimer=null;("function"==typeof _systemImportTransformerGlobalIdentifier.define&&_systemImportTransformerGlobalIdentifier.define.amd?new Promise(function(resolve,reject){_systemImportTransformerGlobalIdentifier.require([_config.default.iconsystemmodule],resolve,reject)}):"undefined"!=typeof module&&module.exports&&"undefined"!=typeof require||"undefined"!=typeof module&&module.component&&_systemImportTransformerGlobalIdentifier.require&&"component"===_systemImportTransformerGlobalIdentifier.require.loader?Promise.resolve(require((_config.default.iconsystemmodule))):Promise.resolve(_systemImportTransformerGlobalIdentifier[_config.default.iconsystemmodule])).then(IconSystem=>{const iconSystem=new IconSystem;prefetchTemplate(iconSystem.getTemplateName());return iconSystem}).then(iconSystem=>{fetchQueue();iconSystem.init()}).catch()},500)},prefetchTemplates=templatesNames=>{templateList=templateList.concat(templatesNames);processQueue()},prefetchTemplate=templateName=>{prefetchTemplates([templateName])},prefetchStrings=(component,keys)=>{if(!stringList[component]){stringList[component]=[]}stringList[component]=stringList[component].concat(keys);processQueue()},prefetchString=(component,key)=>{if(!stringList[component]){stringList[component]=[]}stringList[component].push(key);processQueue()};prefetchTemplates([].concat(["core/loading"],["core/modal"],["core/modal_backdrop"]));prefetchStrings("core",["cancel","closebuttontitle","loading","savechanges"]);prefetchStrings("core_form",["showless","showmore"]);_exports.default={prefetchTemplate,prefetchTemplates,prefetchString,prefetchStrings};return _exports.default});
//# sourceMappingURL=prefetch.min.js.map
