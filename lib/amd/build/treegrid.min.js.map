{"version":3,"file":"treegrid.min.js","sources":["../src/treegrid.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport AriaSelectors from 'core/local/aria/selectors';\n\nexport default class TreeGrid {\n    static createTreeGrid(\n        treeElement,\n    ) {\n        return new TreeGrid(\n            treeElement,\n        );\n    }\n\n    /** @property {HTMLElement} treeElement */\n    treeElement;\n\n    constructor(\n        treeElement,\n    ) {\n        this.treeElement = treeElement;\n        this.registerEventListeners();\n        this.initialiseAttributes();\n    }\n\n    initialiseAttributes() {\n        this.treeElement.querySelectorAll(AriaSelectors.elements.focusable).forEach((element) => {\n            // Makes the element focusable without including it in the tab sequence of the page.\n            element.setAttribute('tabindex', '-1');\n        });\n\n        Array.from(this.treeElement.querySelectorAll('tr')).reverse().forEach((rowElement) => {\n            rowElement.setAttribute('tabindex', '-1');\n        });\n\n        // Includes the element in the tab sequence.\n        // Only one row or gridcell in the treegrid has tabindex = \"0\".\n        // In this implementation, the first row in the treegrid is included in the tab sequence when the page loads.\n        // When the user moves focus in the treegrid, the element included in the tab sequence changes to the element\n        // with focus as described in the practice for Managing Focus Within Components Using a Roving tabindex.\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex\n        this.getFirstRow().setAttribute('tabindex', '0');\n    }\n\n    registerEventListeners() {\n        this.treeElement.addEventListener('keydown', this.handleKeyDown.bind(this));\n        this.treeElement.addEventListener('click', this.handleClick.bind(this));\n        this.treeElement.addEventListener('focusin', this.handleFocusIn.bind(this));\n    }\n\n    handleFocusIn(event) {\n        // Get the focused item.\n        const focusedItem = event.target;\n        // const focusedRow = this.getRowForItem(focusedItem);\n\n        // Get all items currently with a tabindex.\n        const itemsWithTabIndex = Array.from(this.treeElement.querySelectorAll('[tabindex=\"0\"]'));\n        itemsWithTabIndex.filter((item) => item !== focusedItem).forEach((item) => {\n            // Remove the tabindex from all items except the focused item.\n            item.setAttribute('tabindex', -1);\n        });\n    }\n\n    handleClick(event) {\n        // Get the focusable element that was focused on.\n        const clickedItem = event.target;\n\n        const focusableParent = clickedItem.closest(AriaSelectors.elements.focusable);\n        if (focusableParent) {\n            // If the clicked element is focusable, then focus on it.\n            this.focus(focusableParent);\n\n            // Do not prevent default. If the item clicked was actionable, that action should be respected.\n            return;\n        }\n\n        const tabbableParent = clickedItem.closest(AriaSelectors.elements.tabbable);\n        if (tabbableParent) {\n            // If the clicked element is tabbable, then focus on it.\n            this.focus(tabbableParent);\n\n            // Do not prevent default. If the item clicked was actionable, that action should be respected.\n            return;\n        }\n    }\n\n    handleKeyDown(event) {\n        // eslint-disable-next-line no-debugger\n        debugger;\n        // https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/#keyboardinteraction\n        if (event.key === 'Enter') {\n            this.handleKeyEnter(event);\n            return;\n        }\n\n        if (event.key === 'ArrowRight') {\n            this.handleKeyArrowRight(event);\n            return;\n        }\n\n        if (event.key === 'ArrowLeft') {\n            this.handleKeyArrowLeft(event);\n            return;\n        }\n\n        if (event.key === 'ArrowUp') {\n            this.handleKeyArrowUp(event);\n            return;\n        }\n\n        if (event.key === 'ArrowDown') {\n            this.handleKeyArrowDown(event);\n            return;\n        }\n\n        if (event.key === 'Home') {\n            if (event.ctrl) {\n                this.handleKeyCtrlHome(event);\n                return;\n            } else {\n                this.handleKeyHome(event);\n                return;\n            }\n        }\n\n        if (event.key === 'End') {\n            if (event.ctrl) {\n                this.handleKeyCtrlEnd(event);\n                return;\n            } else {\n                this.handleKeyEnd(event);\n                return;\n            }\n        }\n    }\n\n    handleKeyEnter(event) {\n        // If cell-only focus is enabled and focus is on the first cell with the aria-expanded property,\n        // opens or closes the child rows.\n        // Otherwise, performs the default action for the cell.\n        event.preventDefault();\n    }\n\n    handleKeyArrowRight(event) {\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a collapsed row, expands the row.\n        if (focusedItem.getAttribute('aria-expanded') === 'false') {\n            event.preventDefault();\n            this.expandRow(focusedItem);\n            return;\n        }\n\n        // If focus is on an expanded row or is on a row that does not have child rows, moves focus to the first cell in the row.\n        if (focusedItem.getAttribute('aria-expanded') === 'true' || this.isRow(focusedItem)) {\n            event.preventDefault();\n            this.focusFirstCell(focusedItem);\n            return;\n        }\n\n        // If focus is on the right-most cell in a row, focus does not move.\n        if (!focusedItem.nextElementSibling) {\n            return;\n        }\n\n        // If focus is on any other cell, moves focus one cell to the right.\n        this.focusNextCell(focusedItem);\n        event.preventDefault();\n    }\n\n    handleKeyArrowLeft(event) {\n        const focusedItem = this.getFocusedItem();\n        const isRow = this.isRow(focusedItem);\n        const isCell = this.isCell(focusedItem);\n\n        if (isRow) {\n            // If focus is on an expanded row, collapses the row.\n            if (focusedItem.getAttribute('aria-expanded') === 'true') {\n                event.preventDefault();\n                this.collapseRow(focusedItem);\n                return;\n            }\n\n            // If focus is on a collapsed row or on a row that does not have child rows, focus does not move.\n            if (focusedItem.getAttribute('aria-expanded') === 'false') {\n                return;\n            }\n        }\n\n        if (isCell) {\n            if (focusedItem.previousElementSibling === null) {\n                if (this.rowFocusSupported()) {\n                    // If focus is on the first cell in a row and row focus is supported, moves focus to the row.\n                    event.preventDefault();\n                    this.focusCurrentRow(focusedItem);\n                    return;\n                } else {\n                    // If focus is on the first cell in a row and row focus is not supported, focus does not move.\n                    return;\n                }\n            }\n\n            // If focus is on any other cell, moves focus one cell to the left.\n            this.focusPreviousCell(this.getCellWithItem(focusedItem));\n            event.preventDefault();\n        }\n    }\n\n    handleKeyArrowUp(event) {\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus one row up.\n        if (this.isRow(focusedItem)) {\n            if (focusedItem.previousElementSibling === null) {\n                // If focus is on the first row, focus does not move.\n                return;\n            }\n            this.focusRowAbove(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        // If focus is on a cell, moves focus one cell up.\n        if (this.isCell(focusedItem)) {\n            const owningRow = this.getRowForItem(focusedItem);\n            if (owningRow.previousElementSibling === null) {\n                // If focus is on the top cell in the column, focus does not move.\n                return;\n            }\n            this.focusCellAbove(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyArrowDown(event) {\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus one row down.\n        if (this.isRow(focusedItem)) {\n            if (focusedItem.nextElementSibling === null) {\n                // If focus is on the last row, focus does not move.\n                return;\n            }\n            this.focusRowBelow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        // If focus is on a cell, moves focus one cell down.\n        if (this.isCell(focusedItem)) {\n            const owningRow = this.getRowForItem(focusedItem);\n            if (owningRow.nextElementSibling === null) {\n                // If focus is on the bottom cell in the column, focus does not move.\n                return;\n            }\n            this.focusCellBelow(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyHome(event) {\n        // TODO Check these.\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus to the first row.\n        if (this.isRow(focusedItem)) {\n            if (focusedItem.previousElementSibling === null) {\n                // If focus is in the first row, focus does not move.\n                return;\n            }\n            this.focusFirstRow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        if (this.isCell(focusedItem)) {\n            // If focus is on a cell, moves focus to the first cell in the row.\n            if (focusedItem.previousElementSibling === null) {\n                // If focus is in the first cell of the row, focus does not move.\n                return;\n            }\n            this.focusFirstCell(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyEnd(event) {\n        // TODO Check these.\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus to the last row.\n        if (this.isRow(focusedItem)) {\n            if (focusedItem.nextElementSibling === null) {\n                // If focus is in the last row, focus does not move.\n                return;\n            }\n            this.focusLastRow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        if (this.isCell(focusedItem)) {\n            // If focus is on a cell, moves focus to the last cell in the row.\n            if (focusedItem.nextElementSibling === null) {\n                // If focus is in the last cell of the row, focus does not move.\n                return;\n            }\n            this.focusLastCell(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyControlHome(event) {\n        // TODO Check these.\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus to the first row.\n        if (this.isRow(focusedItem)) {\n            if (this.getRowForItem(focusedItem).previousElementSibling === null) {\n                // If focus is in the first row, focus does not move.\n                return;\n            }\n            this.focusFirstRow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        // If focus is on a cell, moves focus to the first cell in the column.\n        if (this.isCell(focusedItem)) {\n            if (this.getRowForItem(focusedItem).previousElementSibling === null) {\n                // If focus is in the first row, focus does not move.\n                return;\n            }\n            this.focusFirstCellInRow(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyControlEnd(event) {\n        // TODO Check these.\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus to the last row.\n        if (this.isRow(focusedItem)) {\n            if (this.getRowForItem(focusedItem).nextElementSibling === null) {\n                // If focus is in the last row, focus does not move.\n                return;\n            }\n            this.focusLastRow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        // If focus is on a cell, moves focus to the last cell in the column.\n        if (this.isCell(focusedItem)) {\n            if (this.getRowForItem(focusedItem).nextElementSibling === null) {\n                // If focus is in the last row, focus does not move.\n                return;\n            }\n            this.focusLastCellInRow(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    getFocusedItem() {\n        return document.activeElement;\n    }\n\n    getFocusableElements(parent) {\n        return Array.from(parent.closest(AriaSelectors.elements.focusable));\n    }\n\n    isRow(item) {\n        return !!item.matches('tr');\n    }\n\n    isCell(item) {\n        return !!this.getCellWithItem(item);\n    }\n\n    focusCell(cell) {\n        // Check for focusable child such as link or textbox\n        // and use that if available\n        const focusableChildren = this.getFocusableElements(cell);\n        this.focus(focusableChildren[0] || cell);\n    }\n\n    focus(item) {\n        // Ensure focusable.\n        item.tabIndex = 0;\n        item.focus();\n    }\n\n    getRowForItem(item) {\n        return item.closest('tr');\n    }\n\n    expandRow(item) {\n        const row = this.getRowForItem(item);\n        row.setAttribute('aria-expanded', true);\n        this.getChildRows(row).forEach((childRow) => {\n            childRow.setAttribute('aria-hidden', false);\n        });\n    }\n\n    collapseRow(item) {\n        const row = this.getRowForItem(item);\n        this.getChildRows(row).forEach((childRow) => {\n            childRow.setAttribute('aria-hidden', true);\n        });\n        row.setAttribute('aria-expanded', false);\n    }\n\n    getChildRows(parent) {\n        const parentRow = this.getRowForItem(parent);\n        const parentRowLevel = this.getRowLevel(parentRow);\n\n        const allRows = this.getAllRows();\n        const parentRowIndex = allRows.indexOf(parentRow);\n\n        const possibleChildren = allRows.slice(parentRowIndex + 1);\n        const childRows = [];\n        for (const childRow of possibleChildren) {\n            if (this.getRowLevel(childRow) === parentRowLevel + 1) {\n                childRows.push(childRow);\n            } else {\n                break;\n            }\n        }\n\n        return childRows;\n    }\n\n    getCellWithItem(item) {\n        return item.closest('td');\n    }\n\n    getNavigableRows() {\n        // Fetch all TR elements which are not in a THEAD.\n        return this.getAllRows()\n            .filter((row) => !row.closest('thead'));\n    }\n\n    getAllRows() {\n        // Fetch all TR elements which are not in a THEAD.\n        return Array.from(this.treeElement.querySelectorAll('tr'))\n            .filter((row) => !row.closest('thead'));\n    }\n\n    getNavigableColumns(row) {\n        return Array.from(row.getElementsByTagName('td'));\n    }\n\n    getFirstRow() {\n        return this.getNavigableRows()?.shift();\n    }\n\n    getLastRow() {\n        return this.getNavigableRows()?.pop();\n    }\n\n    getPreviousRow(item) {\n        const allRows = this.getNavigableRows();\n        const currentRow = this.getRowForItem(item);\n\n        const index = allRows.indexOf(currentRow);\n        if (index === 0) {\n            return null;\n        }\n\n        return allRows[index - 1];\n    }\n\n    getNextRow(item) {\n        const allRows = this.getNavigableRows();\n        const currentRow = this.getRowForItem(item);\n\n        const index = allRows.indexOf(currentRow);\n        if (index >= allRows.length - 1) {\n            return null;\n        }\n\n        return allRows[index + 1];\n    }\n\n    focusSameCellInRow(currentItem, targetRow) {\n        if (!targetRow) {\n            // The target row does nto exist.\n            return;\n        }\n        const currentRow = this.getRowForItem(currentItem);\n        const currentCols = this.getNavigableColumns(currentRow);\n        const currentIndex = currentCols.indexOf(this.getCellWithItem(currentItem));\n\n        const targetCols = this.getNavigableColumns(targetRow);\n        this.focusCell(targetCols[currentIndex]);\n    }\n\n    focusCellAbove(item) {\n        this.focusSameCellInRow(item, this.getPreviousRow(item));\n    }\n\n    focusCellBelow(item) {\n        this.focusSameCellInRow(item, this.getNextRow(item));\n    }\n\n    focusCurrentRow(rowChild) {\n        this.focus(this.getRowForItem(rowChild));\n    }\n\n    focusRowAbove(item) {\n        this.focus(this.getPreviousRow(item));\n    }\n\n    focusRowBelow(item) {\n        this.focus(this.getNextRow(item));\n    }\n\n    focusFirstCell(row) {\n        this.focus(row.querySelector('td'));\n    }\n\n    focusLastCell(row) {\n        this.focus(row.querySelectorAll('td').pop());\n    }\n\n    focusFirstCellInRow(item) {\n        this.focusFirstCell(this.getRowForItem(item));\n    }\n\n    focusLastCellInRow(item) {\n        this.focusLastCell(this.getRowForItem(item));\n    }\n\n    focusNextCell(item) {\n        this.focus(item.nextElementSibling);\n    }\n\n    focusPreviousCell(item) {\n        this.focus(item.previousElementSibling);\n    }\n\n    rowFocusSupported() {\n        if ('focusRows' in this.treeElement.dataset) {\n            // TODO Consider what a falsty value may look like...\n            return this.treeElement.dataset.focusRows;\n        }\n        return true;\n    }\n\n    getRowLevel(row) {\n        return parseInt(row.getAttribute('aria-level'));\n    }\n}\n"],"names":["TreeGrid","treeElement","constructor","registerEventListeners","initialiseAttributes","querySelectorAll","AriaSelectors","elements","focusable","forEach","element","setAttribute","Array","from","this","reverse","rowElement","getFirstRow","addEventListener","handleKeyDown","bind","handleClick","handleFocusIn","event","focusedItem","target","filter","item","clickedItem","focusableParent","closest","focus","tabbableParent","tabbable","key","ctrl","handleKeyCtrlHome","handleKeyHome","handleKeyCtrlEnd","handleKeyEnd","handleKeyArrowDown","handleKeyArrowUp","handleKeyArrowLeft","handleKeyArrowRight","handleKeyEnter","preventDefault","getFocusedItem","getAttribute","expandRow","isRow","focusFirstCell","nextElementSibling","focusNextCell","isCell","collapseRow","previousElementSibling","rowFocusSupported","focusCurrentRow","focusPreviousCell","getCellWithItem","focusRowAbove","getRowForItem","focusCellAbove","focusRowBelow","focusCellBelow","focusFirstRow","focusLastRow","focusLastCell","handleKeyControlHome","focusFirstCellInRow","handleKeyControlEnd","focusLastCellInRow","document","activeElement","getFocusableElements","parent","matches","focusCell","cell","focusableChildren","tabIndex","row","getChildRows","childRow","parentRow","parentRowLevel","getRowLevel","allRows","getAllRows","parentRowIndex","indexOf","possibleChildren","slice","childRows","push","getNavigableRows","getNavigableColumns","getElementsByTagName","_this$getNavigableRow","shift","getLastRow","_this$getNavigableRow2","pop","getPreviousRow","currentRow","index","getNextRow","length","focusSameCellInRow","currentItem","targetRow","currentIndex","targetCols","rowChild","querySelector","dataset","focusRows","parseInt"],"mappings":"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"}