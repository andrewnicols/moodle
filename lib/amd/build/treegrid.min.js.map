{"version":3,"file":"treegrid.min.js","sources":["../src/treegrid.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport AriaSelectors from 'core/local/aria/selectors';\n\nexport default class TreeGrid {\n    static createTreeGrid(\n        treeElement,\n    ) {\n        return new TreeGrid(\n            treeElement,\n        );\n    }\n\n    /** @property {HTMLElement} treeElement */\n    treeElement;\n\n    constructor(\n        treeElement,\n    ) {\n        this.treeElement = treeElement;\n        this.registerEventListeners();\n        this.initialiseAttributes();\n    }\n\n    initialiseAttributes() {\n        this.treeElement.querySelectorAll(AriaSelectors.elements.focusable).forEach((element) => {\n            // Makes the element focusable without including it in the tab sequence of the page.\n            element.setAttribute('tabindex', '-1');\n        });\n\n        Array.from(this.treeElement.querySelectorAll('tr')).reverse().forEach((rowElement) => {\n            rowElement.setAttribute('tabindex', '-1');\n        });\n\n        // Includes the element in the tab sequence.\n        // Only one row or gridcell in the treegrid has tabindex = \"0\".\n        // In this implementation, the first row in the treegrid is included in the tab sequence when the page loads.\n        // When the user moves focus in the treegrid, the element included in the tab sequence changes to the element\n        // with focus as described in the practice for Managing Focus Within Components Using a Roving tabindex.\n        // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_roving_tabindex\n        this.getFirstRow().setAttribute('tabindex', '0');\n    }\n\n    registerEventListeners() {\n        this.treeElement.addEventListener('keydown', this.handleKeyDown.bind(this));\n        this.treeElement.addEventListener('click', this.handleClick.bind(this));\n    }\n\n    handleClick(event) {\n        // Get the focusable element that was focused on.\n        const clickedItem = event.target;\n\n        const focusableParent = clickedItem.closest(AriaSelectors.elements.focusable);\n        if (focusableParent) {\n            // If the clicked element is focusable, then focus on it.\n            focusableParent.focus();\n\n            // Do not prevent default. If the item clicked was actionable, that action should be respected.\n            return;\n        }\n\n        const tabbableParent = clickedItem.closest(AriaSelectors.elements.tabbable);\n        if (tabbableParent) {\n            // If the clicked element is tabbable, then focus on it.\n            tabbableParent.focus();\n\n            // Do not prevent default. If the item clicked was actionable, that action should be respected.\n            return;\n        }\n    }\n\n    handleKeyDown(event) {\n        window.console.log(this);\n        // eslint-disable-next-line no-debugger\n        debugger;\n        // https://www.w3.org/WAI/ARIA/apg/patterns/treegrid/#keyboardinteraction\n        if (event.key === 'Enter') {\n            return this.handleKeyEnter(event);\n        }\n\n        if (event.key === 'ArrowRight') {\n            return this.handleKeyArrowRight(event);\n        }\n\n        if (event.key === 'ArrowLeft') {\n            return this.handleKeyArrowLeft(event);\n        }\n\n        if (event.key === 'ArrowUp') {\n            return this.handleKeyArrowUp(event);\n        }\n\n        if (event.key === 'ArrowDown') {\n            return this.handleKeyArrowDown(event);\n        }\n\n        if (event.key === 'Home') {\n            if (event.ctrl) {\n                return this.handleKeyCtrlHome(event);\n            } else {\n                return this.handleKeyHome(event);\n            }\n        }\n\n        if (event.key === 'End') {\n            if (event.ctrl) {\n                return this.handleKeyCtrlEnd(event);\n            } else {\n                return this.handleKeyEnd(event);\n            }\n        }\n    }\n\n    handleKeyEnter(event) {\n        // If cell-only focus is enabled and focus is on the first cell with the aria-expanded property,\n        // opens or closes the child rows.\n        // Otherwise, performs the default action for the cell.\n        event.preventDefault();\n    }\n\n    handleKeyArrowRight(event) {\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a collapsed row, expands the row.\n        if (focusedItem.getAttribute('aria-expanded') === 'false') {\n            event.preventDefault();\n            this.expandRow(focusedItem);\n            return;\n        }\n\n        // If focus is on an expanded row or is on a row that does not have child rows, moves focus to the first cell in the row.\n        if (focusedItem.getAttribute('aria-expanded') === 'true') {\n            event.preventDefault();\n            this.focusFirstCell(focusedItem);\n            return;\n        }\n\n        // If focus is on the right-most cell in a row, focus does not move.\n        if (!focusedItem.nextElementSibling) {\n            return;\n        }\n\n        // If focus is on any other cell, moves focus one cell to the right.\n        this.focusNextCell(focusedItem);\n        event.preventDefault();\n    }\n\n    handleKeyArrowLeft(event) {\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on an expanded row, collapses the row.\n        if (focusedItem.getAttribute('aria-expanded') === 'true') {\n            event.preventDefault();\n            this.collapseRow(focusedItem);\n            return;\n        }\n\n        // If focus is on a collapsed row or on a row that does not have child rows, focus does not move.\n        if (focusedItem.getAttribute('aria-expanded') === 'false') {\n            return;\n        }\n\n        if (focusedItem.previousElementSibling === null) {\n            if (this.rowFocusSupported()) {\n                // If focus is on the first cell in a row and row focus is supported, moves focus to the row.\n                event.preventDefault();\n                this.focusRow(focusedItem);\n                return;\n            } else {\n                // If focus is on the first cell in a row and row focus is not supported, focus does not move.\n                return;\n            }\n        }\n\n        // If focus is on any other cell, moves focus one cell to the left.\n        this.focusPreviousCell(focusedItem);\n        event.preventDefault();\n    }\n\n    handleKeyArrowUp(event) {\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus one row up.\n        if (this.isRow(focusedItem)) {\n            if (focusedItem.previousElementSibling === null) {\n                // If focus is on the first row, focus does not move.\n                return;\n            }\n            this.focusRowAbove(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        // If focus is on a cell, moves focus one cell up.\n        if (this.isCell(focusedItem)) {\n            if (focusedItem.previousElementSibling === null) {\n                // If focus is on the top cell in the column, focus does not move.\n                return;\n            }\n            this.focusCellAbove(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyArrowDown(event) {\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus one row down.\n        if (this.isRow(focusedItem)) {\n            if (focusedItem.nextElementSibling === null) {\n                // If focus is on the last row, focus does not move.\n                return;\n            }\n            this.focusRowBelow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        // If focus is on a cell, moves focus one cell down.\n        if (this.isCell(focusedItem)) {\n            if (focusedItem.nextElementSibling === null) {\n                // If focus is on the bottom cell in the column, focus does not move.\n                return;\n            }\n            this.focusCellBelow(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyHome(event) {\n        // TODO Check these.\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus to the first row.\n        if (this.isRow(focusedItem)) {\n            if (focusedItem.previousElementSibling === null) {\n                // If focus is in the first row, focus does not move.\n                return;\n            }\n            this.focusFirstRow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        if (this.isCell(focusedItem)) {\n            // If focus is on a cell, moves focus to the first cell in the row.\n            if (focusedItem.previousElementSibling === null) {\n                // If focus is in the first cell of the row, focus does not move.\n                return;\n            }\n            this.focusFirstCell(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyEnd(event) {\n        // TODO Check these.\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus to the last row.\n        if (this.isRow(focusedItem)) {\n            if (focusedItem.nextElementSibling === null) {\n                // If focus is in the last row, focus does not move.\n                return;\n            }\n            this.focusLastRow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        if (this.isCell(focusedItem)) {\n            // If focus is on a cell, moves focus to the last cell in the row.\n            if (focusedItem.nextElementSibling === null) {\n                // If focus is in the last cell of the row, focus does not move.\n                return;\n            }\n            this.focusLastCell(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyControlHome(event) {\n        // TODO Check these.\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus to the first row.\n        if (this.isRow(focusedItem)) {\n            if (this.getRowForItem(focusedItem).previousElementSibling === null) {\n                // If focus is in the first row, focus does not move.\n                return;\n            }\n            this.focusFirstRow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        // If focus is on a cell, moves focus to the first cell in the column.\n        if (this.isCell(focusedItem)) {\n            if (this.getRowForItem(focusedItem).previousElementSibling === null) {\n                // If focus is in the first row, focus does not move.\n                return;\n            }\n            this.focusFirstCellInRow(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    handleKeyControlEnd(event) {\n        // TODO Check these.\n        const focusedItem = this.getFocusedItem();\n\n        // If focus is on a row, moves focus to the last row.\n        if (this.isRow(focusedItem)) {\n            if (this.getRowForItem(focusedItem).nextElementSibling === null) {\n                // If focus is in the last row, focus does not move.\n                return;\n            }\n            this.focusLastRow(focusedItem);\n            event.preventDefault();\n            return;\n        }\n\n        // If focus is on a cell, moves focus to the last cell in the column.\n        if (this.isCell(focusedItem)) {\n            if (this.getRowForItem(focusedItem).nextElementSibling === null) {\n                // If focus is in the last row, focus does not move.\n                return;\n            }\n            this.focusLastCellInRow(focusedItem);\n            event.preventDefault();\n        }\n    }\n\n    getFocusedItem() {\n        return document.activeElement;\n    }\n\n    getFocusableElements(parent) {\n        return Array.from(parent.closest(AriaSelectors.elements.focusable));\n    }\n\n    isRow(item) {\n        return item.matches('tr');\n    }\n\n    isCell(item) {\n        return item.closest('td');\n    }\n\n    focusCell(cell) {\n        // Check for focusable child such as link or textbox\n        // and use that if available\n        const focusableChildren = this.getFocusableElements(cell);\n        focus(focusableChildren[0] || cell);\n    }\n\n    focus(item) {\n        // Ensure focusable.\n        item.tabIndex = 0;\n        item.focus();\n    }\n\n    getRowForItem(item) {\n        return item.closest('tr');\n    }\n\n    expandRow(item) {\n        item.setAttribute('aria-expanded', 'true');\n    }\n\n    collapseRow(item) {\n        item.setAttribute('aria-expanded', 'false');\n    }\n\n    getCellWithItem(item) {\n        return item.closest('td');\n    }\n\n    getNavigableColumns(row) {\n        return Array.from(row.getElementsByTagName('td'));\n    }\n\n    getFirstRow() {\n        return this.treeElement.querySelector('tr');\n    }\n\n    getLastRow() {\n        return this.treeElement.querySelector('tr:last-child');\n    }\n\n    getPreviousRow(item) {\n        return this.getRowForItem(item).previousElementSibling;\n    }\n\n    getNextRow(item) {\n        return this.getRowForItem(item).nextElementSibling;\n    }\n\n    focusSameCellInRow(currentItem, targetRow) {\n        const currentRow = this.getRowForItem(currentItem);\n        const currentCols = this.getNavigableColumns(currentRow);\n        const currentIndex = currentCols.indexOf(this.getCellWithItem(currentItem));\n\n        const targetCols = this.getNavigableColumns(targetRow);\n        this.focusCell(targetCols[currentIndex]);\n    }\n\n    focusCellAbove(item) {\n        this.focusSameCellInRow(item, this.getPreviousRow(item));\n    }\n\n    focusCellBelow(item) {\n        this.focusSameCellInRow(item, this.getNextRow(item));\n    }\n\n    focusRowAbove(item) {\n        this.focus(this.getPreviousRow(item));\n    }\n\n    focusRowBelow(item) {\n        this.focus(this.getNextRow(item));\n    }\n\n    focusFirstCell(row) {\n        this.focus(row.querySelector('td'));\n    }\n\n    focusLastCell(row) {\n        this.focus(row.querySelectorAll('td').pop());\n    }\n\n    focusFirstCellInRow(item) {\n        this.focusFirstCell(this.getRowForItem(item));\n    }\n\n    focusLastCellInRow(item) {\n        this.focusLastCell(this.getRowForItem(item));\n    }\n\n    focusNextCell(item) {\n        this.focus(item.nextElementSibling);\n    }\n\n    focusPreviousCell(item) {\n        focus(item.previousElementSibling);\n    }\n\n    rowFocusSupported() {\n        if ('focusRows' in this.treeElement.dataset) {\n            // TODO Consider what a falsty value may look like...\n            return this.treeElement.dataset.focusRows;\n        }\n        return true;\n    }\n}\n"],"names":["TreeGrid","treeElement","constructor","registerEventListeners","initialiseAttributes","querySelectorAll","AriaSelectors","elements","focusable","forEach","element","setAttribute","Array","from","this","reverse","rowElement","getFirstRow","addEventListener","handleKeyDown","bind","handleClick","event","clickedItem","target","focusableParent","closest","focus","tabbableParent","tabbable","window","console","log","key","handleKeyEnter","handleKeyArrowRight","handleKeyArrowLeft","handleKeyArrowUp","handleKeyArrowDown","ctrl","handleKeyCtrlHome","handleKeyHome","handleKeyCtrlEnd","handleKeyEnd","preventDefault","focusedItem","getFocusedItem","getAttribute","expandRow","focusFirstCell","nextElementSibling","focusNextCell","collapseRow","previousElementSibling","rowFocusSupported","focusRow","focusPreviousCell","isRow","focusRowAbove","isCell","focusCellAbove","focusRowBelow","focusCellBelow","focusFirstRow","focusLastRow","focusLastCell","handleKeyControlHome","getRowForItem","focusFirstCellInRow","handleKeyControlEnd","focusLastCellInRow","document","activeElement","getFocusableElements","parent","item","matches","focusCell","cell","focusableChildren","tabIndex","getCellWithItem","getNavigableColumns","row","getElementsByTagName","querySelector","getLastRow","getPreviousRow","getNextRow","focusSameCellInRow","currentItem","targetRow","currentRow","currentIndex","indexOf","targetCols","pop","dataset","focusRows"],"mappings":"0PAiBqBA,+BAEbC,oBAEO,IAAID,SACPC,aAORC,YACID,wLAEKA,YAAcA,iBACdE,8BACAC,uBAGTA,4BACSH,YAAYI,iBAAiBC,mBAAcC,SAASC,WAAWC,SAASC,UAEzEA,QAAQC,aAAa,WAAY,SAGrCC,MAAMC,KAAKC,KAAKb,YAAYI,iBAAiB,OAAOU,UAAUN,SAASO,aACnEA,WAAWL,aAAa,WAAY,cASnCM,cAAcN,aAAa,WAAY,KAGhDR,8BACSF,YAAYiB,iBAAiB,UAAWJ,KAAKK,cAAcC,KAAKN,YAChEb,YAAYiB,iBAAiB,QAASJ,KAAKO,YAAYD,KAAKN,OAGrEO,YAAYC,aAEFC,YAAcD,MAAME,OAEpBC,gBAAkBF,YAAYG,QAAQpB,mBAAcC,SAASC,cAC/DiB,4BAEAA,gBAAgBE,cAMdC,eAAiBL,YAAYG,QAAQpB,mBAAcC,SAASsB,UAC9DD,gBAEAA,eAAeD,QAOvBR,cAAcG,cACVQ,OAAOC,QAAQC,IAAIlB,MAID,UAAdQ,MAAMW,IACCnB,KAAKoB,eAAeZ,OAGb,eAAdA,MAAMW,IACCnB,KAAKqB,oBAAoBb,OAGlB,cAAdA,MAAMW,IACCnB,KAAKsB,mBAAmBd,OAGjB,YAAdA,MAAMW,IACCnB,KAAKuB,iBAAiBf,OAGf,cAAdA,MAAMW,IACCnB,KAAKwB,mBAAmBhB,OAGjB,SAAdA,MAAMW,IACFX,MAAMiB,KACCzB,KAAK0B,kBAAkBlB,OAEvBR,KAAK2B,cAAcnB,OAIhB,QAAdA,MAAMW,IACFX,MAAMiB,KACCzB,KAAK4B,iBAAiBpB,OAEtBR,KAAK6B,aAAarB,cAKrCY,eAAeZ,OAIXA,MAAMsB,iBAGVT,oBAAoBb,aACVuB,YAAc/B,KAAKgC,uBAGyB,UAA9CD,YAAYE,aAAa,kBACzBzB,MAAMsB,2BACDI,UAAUH,cAK+B,SAA9CA,YAAYE,aAAa,kBACzBzB,MAAMsB,2BACDK,eAAeJ,mBAKnBA,YAAYK,0BAKZC,cAAcN,aACnBvB,MAAMsB,mBAGVR,mBAAmBd,aACTuB,YAAc/B,KAAKgC,oBAGyB,SAA9CD,YAAYE,aAAa,wBACzBzB,MAAMsB,2BACDQ,YAAYP,gBAK6B,UAA9CA,YAAYE,aAAa,qBAIc,OAAvCF,YAAYQ,8BACRvC,KAAKwC,qBAELhC,MAAMsB,2BACDW,SAASV,0BASjBW,kBAAkBX,aACvBvB,MAAMsB,kBAGVP,iBAAiBf,aACPuB,YAAc/B,KAAKgC,oBAGrBhC,KAAK2C,MAAMZ,aAAc,IACkB,OAAvCA,YAAYQ,0CAIXK,cAAcb,kBACnBvB,MAAMsB,oBAKN9B,KAAK6C,OAAOd,aAAc,IACiB,OAAvCA,YAAYQ,mCAIXO,eAAef,aACpBvB,MAAMsB,kBAIdN,mBAAmBhB,aACTuB,YAAc/B,KAAKgC,oBAGrBhC,KAAK2C,MAAMZ,aAAc,IACc,OAAnCA,YAAYK,sCAIXW,cAAchB,kBACnBvB,MAAMsB,oBAKN9B,KAAK6C,OAAOd,aAAc,IACa,OAAnCA,YAAYK,+BAIXY,eAAejB,aACpBvB,MAAMsB,kBAIdH,cAAcnB,aAEJuB,YAAc/B,KAAKgC,oBAGrBhC,KAAK2C,MAAMZ,aAAc,IACkB,OAAvCA,YAAYQ,0CAIXU,cAAclB,kBACnBvB,MAAMsB,oBAIN9B,KAAK6C,OAAOd,aAAc,IAEiB,OAAvCA,YAAYQ,mCAIXJ,eAAeJ,aACpBvB,MAAMsB,kBAIdD,aAAarB,aAEHuB,YAAc/B,KAAKgC,oBAGrBhC,KAAK2C,MAAMZ,aAAc,IACc,OAAnCA,YAAYK,sCAIXc,aAAanB,kBAClBvB,MAAMsB,oBAIN9B,KAAK6C,OAAOd,aAAc,IAEa,OAAnCA,YAAYK,+BAIXe,cAAcpB,aACnBvB,MAAMsB,kBAIdsB,qBAAqB5C,aAEXuB,YAAc/B,KAAKgC,oBAGrBhC,KAAK2C,MAAMZ,aAAc,IACsC,OAA3D/B,KAAKqD,cAActB,aAAaQ,0CAI/BU,cAAclB,kBACnBvB,MAAMsB,oBAKN9B,KAAK6C,OAAOd,aAAc,IACqC,OAA3D/B,KAAKqD,cAActB,aAAaQ,mCAI/Be,oBAAoBvB,aACzBvB,MAAMsB,kBAIdyB,oBAAoB/C,aAEVuB,YAAc/B,KAAKgC,oBAGrBhC,KAAK2C,MAAMZ,aAAc,IACkC,OAAvD/B,KAAKqD,cAActB,aAAaK,sCAI/Bc,aAAanB,kBAClBvB,MAAMsB,oBAKN9B,KAAK6C,OAAOd,aAAc,IACiC,OAAvD/B,KAAKqD,cAActB,aAAaK,+BAI/BoB,mBAAmBzB,aACxBvB,MAAMsB,kBAIdE,wBACWyB,SAASC,cAGpBC,qBAAqBC,eACV9D,MAAMC,KAAK6D,OAAOhD,QAAQpB,mBAAcC,SAASC,YAG5DiD,MAAMkB,aACKA,KAAKC,QAAQ,MAGxBjB,OAAOgB,aACIA,KAAKjD,QAAQ,MAGxBmD,UAAUC,YAGAC,kBAAoBjE,KAAK2D,qBAAqBK,MACpDnD,MAAMoD,kBAAkB,IAAMD,MAGlCnD,MAAMgD,MAEFA,KAAKK,SAAW,EAChBL,KAAKhD,QAGTwC,cAAcQ,aACHA,KAAKjD,QAAQ,MAGxBsB,UAAU2B,MACNA,KAAKhE,aAAa,gBAAiB,QAGvCyC,YAAYuB,MACRA,KAAKhE,aAAa,gBAAiB,SAGvCsE,gBAAgBN,aACLA,KAAKjD,QAAQ,MAGxBwD,oBAAoBC,YACTvE,MAAMC,KAAKsE,IAAIC,qBAAqB,OAG/CnE,qBACWH,KAAKb,YAAYoF,cAAc,MAG1CC,oBACWxE,KAAKb,YAAYoF,cAAc,iBAG1CE,eAAeZ,aACJ7D,KAAKqD,cAAcQ,MAAMtB,uBAGpCmC,WAAWb,aACA7D,KAAKqD,cAAcQ,MAAMzB,mBAGpCuC,mBAAmBC,YAAaC,iBACtBC,WAAa9E,KAAKqD,cAAcuB,aAEhCG,aADc/E,KAAKoE,oBAAoBU,YACZE,QAAQhF,KAAKmE,gBAAgBS,cAExDK,WAAajF,KAAKoE,oBAAoBS,gBACvCd,UAAUkB,WAAWF,eAG9BjC,eAAee,WACNc,mBAAmBd,KAAM7D,KAAKyE,eAAeZ,OAGtDb,eAAea,WACNc,mBAAmBd,KAAM7D,KAAK0E,WAAWb,OAGlDjB,cAAciB,WACLhD,MAAMb,KAAKyE,eAAeZ,OAGnCd,cAAcc,WACLhD,MAAMb,KAAK0E,WAAWb,OAG/B1B,eAAekC,UACNxD,MAAMwD,IAAIE,cAAc,OAGjCpB,cAAckB,UACLxD,MAAMwD,IAAI9E,iBAAiB,MAAM2F,OAG1C5B,oBAAoBO,WACX1B,eAAenC,KAAKqD,cAAcQ,OAG3CL,mBAAmBK,WACVV,cAAcnD,KAAKqD,cAAcQ,OAG1CxB,cAAcwB,WACLhD,MAAMgD,KAAKzB,oBAGpBM,kBAAkBmB,MACdhD,MAAMgD,KAAKtB,wBAGfC,4BACQ,cAAexC,KAAKb,YAAYgG,UAEzBnF,KAAKb,YAAYgG,QAAQC"}