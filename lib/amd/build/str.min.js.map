{"version":3,"sources":["../src/str.js"],"names":["promiseCache","key","component","param","lang","get_strings","then","results","requests","requestData","pageLang","attr","replace","getCacheKey","stringPromises","map","request","cacheKey","buildReturn","promise","M","str","Promise","resolve","util","get_string","cached","LocalStorage","get","reject","push","methodname","args","stringid","stringparams","done","set","fail","length","Ajax","call","cfg","langrev","$","when","apply","strings","cache_strings","defaultLang","forEach","value","join","Deferred"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Fetch and return language strings.\n *\n * @module     core/str\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n *\n */\nimport $ from 'jquery';\nimport Ajax from 'core/ajax';\nimport LocalStorage from 'core/localstorage';\n\n// Module cache for the promises so that we don't make multiple\n// unnecessary requests.\nlet promiseCache = [];\n\n/* eslint-disable no-restricted-properties */\n\n/**\n * Return a Promise that resolves to a string.\n *\n * If the string has previously been cached, then the Promise will be resolved immediately, otherwise it will be fetched\n * from the server and resolved when available.\n *\n * @method get_string\n * @param {string} key The language string key\n * @param {string} component The language string component\n * @param {string} param The param for variable expansion in the string.\n * @param {string} lang The users language - if not passed it is deduced.\n * @return {Promise}\n *\n * @example <caption>Fetching a string</caption>\n *\n * import {get_string as getString} from 'core/str';\n * get_string('cannotfindteacher', 'error')\n * .then(str => {\n *     window.console.log(str); // Cannot find teacher\n * })\n * .catch();\n */\n// eslint-disable-next-line camelcase\nexport const get_string = (key, component, param, lang) => {\n    return get_strings([{key, component, param, lang}])\n        .then(results => results[0]);\n};\n\n/**\n * Make a batch request to load a set of strings.\n *\n * Any missing string will be fetched from the server.\n * The Promise will only be resolved once all strings are available, or an attempt has been made to fetch them.\n *\n * @method get_strings\n * @param {Object[]} requests List of strings to fetch\n * @param {string} requests.key The string identifer to fetch\n * @param {string} [requests.component='core'] The componet to fetch from\n * @param {string} [requests.lang] The language to fetch a string for. Defaults to current page language.\n * @param {object|string} [requests.param] The param for variable expansion in the string.\n * @return {Promise[]}\n *\n * @example <caption>Fetching a set of strings</caption>\n *\n * import {get_strings as getStrings} from 'core/str';\n * get_strings([\n *     {\n *         key: 'cannotfindteacher',\n *         component: 'error',\n *     },\n *     {\n *         key: 'yes',\n *         component: 'core',\n *     },\n *     {\n *         key: 'no',\n *         component: 'core',\n *     },\n * ])\n * .then((cannotFindTeacher, yes, no) => {\n *     window.console.log(cannotFindTeacher); // Cannot find teacher\n *     window.console.log(yes); // Yes\n *     window.console.log(no); // No\n * })\n * .catch();\n */\n// eslint-disable-next-line camelcase\nexport const get_strings = (requests) => {\n    let requestData = [];\n    const pageLang = $('html').attr('lang').replace(/-/g, '_');\n    // Helper function to construct the cache key.\n    const getCacheKey = ({key, component, lang = pageLang}) => {\n        if (!component) {\n            component = 'core';\n        }\n        return `core_str/${key}/${component}/${lang}`;\n    };\n\n    const stringPromises = requests.map((request) => {\n        const cacheKey = getCacheKey(request);\n        const {component, key, param, lang = pageLang} = request;\n        // Helper function to add the promise to cache.\n        const buildReturn = (promise) => {\n            // Make sure the promise cache contains our promise.\n            promiseCache[cacheKey] = promise;\n            return promise;\n        };\n\n        // Check if we can serve the string straight from M.str.\n        if (component in M.str && key in M.str[component]) {\n            return buildReturn(new Promise((resolve) => {\n                resolve(M.util.get_string(key, component, param, lang));\n            }));\n        }\n\n        // Check if the string is in the browser's local storage.\n        const cached = LocalStorage.get(cacheKey);\n        if (cached) {\n            M.str[component] = {...M.str[component], [key]: cached};\n            return buildReturn(new Promise((resolve) => {\n                resolve(M.util.get_string(key, component, param, lang));\n            }));\n        }\n\n        // Check if we've already loaded this string from the server.\n        if (cacheKey in promiseCache) {\n            return buildReturn(promiseCache[cacheKey]).then(() => {\n                return M.util.get_string(key, component, param, lang);\n            });\n        } else {\n            // We're going to have to ask the server for the string so\n            // add this string to the list of requests to be sent.\n            return buildReturn(new Promise((resolve, reject) => {\n                requestData.push({\n                    methodname: 'core_get_string',\n                    args: {\n                        stringid: key,\n                        stringparams: [],\n                        component,\n                        lang,\n                    },\n                    done: (str) => {\n                        // When we get the response from the server\n                        // we should update M.str and the browser's\n                        // local storage before resolving this promise.\n                        M.str[component] = {...M.str[component], [key]: str};\n                        LocalStorage.set(cacheKey, str);\n                        resolve(M.util.get_string(key, component, param, lang));\n                    },\n                    fail: reject\n                });\n            }));\n        }\n    });\n\n    if (requestData.length) {\n        // If we need to load any strings from the server then send\n        // off the request.\n        Ajax.call(requestData, true, false, false, 0, M.cfg.langrev);\n    }\n\n    // We need to use jQuery here because some calling code uses the\n    // .done handler instead of the .then handler.\n    return $.when.apply($, stringPromises)\n        .then((...strings) => strings);\n};\n\n/**\n * Add a list of strings to the caches.\n *\n * This function should typically only be called from core APIs to pre-cache values.\n *\n * @method cache_strings\n * @protected\n * @param {Object[]} strings List of strings to fetch\n * @param {string} strings.key The string identifer to fetch\n * @param {string} strings.value The string value\n * @param {string} [strings.component='core'] The componet to fetch from\n * @param {string} [strings.lang] The language to fetch a string for. Defaults to current page language.\n */\n// eslint-disable-next-line camelcase\nexport const cache_strings = (strings) => {\n    const defaultLang = $('html').attr('lang').replace(/-/g, '_');\n\n    strings.forEach(({key, component, value, lang = defaultLang}) => {\n        const cacheKey = ['core_str', key, component, lang].join('/');\n\n        // Check M.str caching.\n        if (!(component in M.str) || !(key in M.str[component])) {\n            if (!(component in M.str)) {\n                M.str[component] = {};\n            }\n\n            M.str[component][key] = value;\n        }\n\n        // Check local storage.\n        if (!LocalStorage.get(cacheKey)) {\n            LocalStorage.set(cacheKey, value);\n        }\n\n        // Check the promises cache.\n        if (!(cacheKey in promiseCache)) {\n            promiseCache[cacheKey] = $.Deferred().resolve(value).promise();\n        }\n    });\n};\n/* eslint-enable no-restricted-properties */\n"],"file":"str.min.js"}