{"version":3,"sources":["../src/copy_to_clipboard.js"],"names":["addEventListeners","document","addEventListener","e","copyButton","target","closest","dataset","clipboardTarget","copyTarget","querySelector","preventDefault","textToCopy","getTextFromContainer","displayFailureToast","navigator","clipboard","writeText","then","displaySuccessToast","catch","HTMLInputElement","HTMLTextAreaElement","focus","copyNodeContentToClipboard","copyRegion","createElement","value","classList","add","body","appendChild","remove","select","execCommand","getSuccessText","successMessage","getFailureText","message","clipboardSuccessMessage","Promise","resolve","container","innerText","loaded"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module that enhances a button and text container to support copy-to-clipboard functionality.\n *\n * @module     core/copy_to_clipboard\n * @copyright  2021 Jun Pataleta\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport {prefetchStrings} from 'core/prefetch';\n\n/**\n * Add event listeners to trigger elements through event delegation.\n */\nconst addEventListeners = () => {\n    document.addEventListener('click', e => {\n        const copyButton = e.target.closest('[data-action=\"copytoclipboard\"]');\n        if (!copyButton) {\n            return;\n        }\n\n        if (!copyButton.dataset.clipboardTarget) {\n            return;\n        }\n\n        const copyTarget = document.querySelector(copyButton.dataset.clipboardTarget);\n        if (!copyTarget) {\n            return;\n        }\n\n        // This is a copy target and there is content.\n        // Prevent the default action.\n        e.preventDefault();\n\n        // We have a copy target - great. Let's copy its content.\n        const textToCopy = getTextFromContainer(copyTarget);\n        if (!textToCopy) {\n            displayFailureToast();\n            return;\n        }\n\n        if (navigator.clipboard) {\n            navigator.clipboard.writeText(textToCopy)\n                .then(() => displaySuccessToast(copyButton)).catch();\n\n            return;\n        }\n\n        // The clipboard API is not available.\n        // This may happen when the page is not served over SSL.\n        // Try to fall back to document.execCommand() approach of copying the text.\n        // WARNING: This is deprecated functionality that may get dropped at anytime by browsers.\n\n        if (copyTarget instanceof HTMLInputElement || copyTarget instanceof HTMLTextAreaElement) {\n            // Focus and select the text in the target element.\n            // If the execCommand fails, at least the user can readily copy the text.\n            copyTarget.focus();\n\n            if (copyNodeContentToClipboard(copyButton, copyTarget)) {\n                // If the copy was successful then focus back on the copy button.\n                copyButton.focus();\n            }\n        } else {\n            // This copyTarget is not an input, or text area so cannot be used with the execCommand('copy') command.\n            // To work around this we create a new textarea and copy that.\n            // This textarea must be part of the DOM and must be visible.\n            // We (ab)use the sr-only tag to ensure that it is considered visible to the browser, whilst being\n            // hidden from view by the user.\n            const copyRegion = document.createElement('textarea');\n            copyRegion.value = textToCopy;\n            copyRegion.classList.add('sr-only');\n            document.body.appendChild(copyRegion);\n\n            copyNodeContentToClipboard(copyButton, copyRegion);\n\n            // After copying, remove the temporary element and move focus back to the triggering button.\n            copyRegion.remove();\n            copyButton.focus();\n\n            return;\n        }\n    });\n};\n\n/**\n * Copy the content of the selected element to the clipboard, and display a notifiction if successful.\n *\n * @param {HTMLElement} copyButton\n * @param {HTMLElement} copyTarget\n * @returns {boolean}\n * @private\n */\nconst copyNodeContentToClipboard = (copyButton, copyTarget) => {\n    copyTarget.select();\n\n    // Try to copy the text from the target element.\n    if (document.execCommand('copy')) {\n        displaySuccessToast(copyButton);\n        return true;\n    }\n\n    displayFailureToast();\n    return false;\n};\n\nconst displaySuccessToast = copyButton => getSuccessText(copyButton)\n    .then(successMessage => addToast(successMessage, {}));\n\nconst displayFailureToast = () => getFailureText()\n    .then(message => addToast(message, {}));\n\nconst getFailureText = () => getString('unabletocopytoclipboard', 'core');\n\nconst getSuccessText = copyButton => {\n    if (copyButton.dataset.clipboardSuccessMessage) {\n        return Promise.resolve(copyButton.dataset.clipboardSuccessMessage);\n    }\n\n    return getString('textcopiedtoclipboard', 'core');\n};\n\n/**\n * Fetches the text to be copied from the container.\n *\n * @param {HTMLElement} container The element containing the text to be copied.\n * @returns {null|string}\n * @private\n */\nconst getTextFromContainer = container => {\n    if (container.value) {\n        // For containers which are form elements (e.g. text area, text input), get the element's value.\n        return container.value;\n    } else if (container.innerText) {\n        // For other elements, try to use the innerText attribute.\n        return container.innerText;\n    }\n\n    return null;\n};\n\nlet loaded = false;\nif (!loaded) {\n    prefetchStrings('core', [\n        'textcopiedtoclipboard',\n        'unabletocopytoclipboard',\n    ]);\n\n    // Add event listeners.\n    addEventListeners();\n    loaded = true;\n}\n"],"file":"copy_to_clipboard.min.js"}