{"version":3,"sources":["../src/copy_to_clipboard.js"],"names":["addEventListeners","document","addEventListener","e","copyButton","target","closest","dataset","clipboardTarget","copyTarget","querySelector","preventDefault","textToCopy","getTextFromContainer","messageIdentifier","clipboardSuccessMessageIdentifier","messageComponent","clipboardSuccessMessageComponent","navigator","clipboard","writeText","then","message","catch","displayException","HTMLInputElement","focus","select","container","value","innerText","loaded"],"mappings":"+GA0BMA,CAAAA,CAAiB,CAAG,UAAM,CAC5BC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAAAC,CAAC,CAAI,CACpC,GAAMC,CAAAA,CAAU,CAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiB,mCAAjB,CAAnB,CACA,GAAI,CAACF,CAAL,CAAiB,CACb,MACH,CAED,GAAI,CAACA,CAAU,CAACG,OAAX,CAAmBC,eAAxB,CAAyC,CACrC,MACH,CAED,GAAMC,CAAAA,CAAU,CAAGR,QAAQ,CAACS,aAAT,CAAuBN,CAAU,CAACG,OAAX,CAAmBC,eAA1C,CAAnB,CACA,GAAI,CAACC,CAAL,CAAiB,CACb,MACH,CAIDN,CAAC,CAACQ,cAAF,GAGA,GAAMC,CAAAA,CAAU,CAAGC,CAAoB,CAACJ,CAAD,CAAvC,CACA,GAAIG,CAAJ,CAAgB,IACNE,CAAAA,CAAiB,CAAGV,CAAU,CAACG,OAAX,CAAmBQ,iCAAnB,EAAwD,mBADtE,CAENC,CAAgB,CAAGZ,CAAU,CAACG,OAAX,CAAmBU,gCAAnB,EAAuD,MAFpE,CAIZ,GAAIC,SAAS,CAACC,SAAd,CAAyB,CACrBD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BR,CAA9B,EACCS,IADD,CACM,iBAAM,iBAAUP,CAAV,CAA6BE,CAA7B,CAAN,CADN,EAECK,IAFD,CAEM,SAAAC,CAAO,QAAI,UAASA,CAAT,CAAJ,CAFb,EAGCC,KAHD,CAGOC,WAHP,EAKA,MACH,CAGJ,CAED,GAAIf,CAAU,WAAYgB,CAAAA,gBAA1B,CAA4C,CACxChB,CAAU,CAACiB,KAAX,GACAjB,CAAU,CAACkB,MAAX,EACH,CAED,iBAAU,yBAAV,CAAqC,MAArC,EACCN,IADD,CACM,SAAAC,CAAO,QAAI,UAASA,CAAT,CAAJ,CADb,EAECC,KAFD,CAEOC,WAFP,CAGH,CA7CD,CA8CH,C,CAEKX,CAAoB,CAAG,SAAAe,CAAS,CAAI,CACtC,GAAIA,CAAS,CAACC,KAAd,CAAqB,CAEjB,MAAOD,CAAAA,CAAS,CAACC,KACpB,CAHD,IAGO,IAAID,CAAS,CAACE,SAAd,CAAyB,CAE5B,MAAOF,CAAAA,CAAS,CAACE,SACpB,CAED,MAAO,KACV,C,CAEGC,CAAM,G,CACV,GAAI,CAACA,CAAL,CAAa,CACT/B,CAAiB,GACjB+B,CAAM,GACT,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A javascript module that enhances a button and text container to support copy-to-clipboard functionality.\n *\n * @module     core/copy_to_clipboard\n * @copyright  2021 Jun Pataleta\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport {exception as displayException} from 'core/notification';\n\nconst addEventListeners = () => {\n    document.addEventListener('click', e => {\n        const copyButton = e.target.closest('[data-action=\"copytoclipboard\"]');\n        if (!copyButton) {\n            return;\n        }\n\n        if (!copyButton.dataset.clipboardTarget) {\n            return;\n        }\n\n        const copyTarget = document.querySelector(copyButton.dataset.clipboardTarget);\n        if (!copyTarget) {\n            return;\n        }\n\n        // This is a copy target and there is content.\n        // Prevent the default action.\n        e.preventDefault();\n\n        // We have a copy target - great. Let's copy it's content.\n        const textToCopy = getTextFromContainer(copyTarget);\n        if (textToCopy) {\n            const messageIdentifier = copyButton.dataset.clipboardSuccessMessageIdentifier || 'copiedtoclipboard';\n            const messageComponent = copyButton.dataset.clipboardSuccessMessageComponent || 'core';\n\n            if (navigator.clipboard) {\n                navigator.clipboard.writeText(textToCopy)\n                .then(() => getString(messageIdentifier, messageComponent))\n                .then(message => addToast(message))\n                .catch(displayException);\n\n                return;\n            }\n            // The clipboard API is not available.\n            // This may happen when the page is not served over SSL.\n        }\n\n        if (copyTarget instanceof HTMLInputElement) {\n            copyTarget.focus();\n            copyTarget.select();\n        }\n\n        getString('unabletocopytoclipboard', 'core')\n        .then(message => addToast(message))\n        .catch(displayException);\n    });\n};\n\nconst getTextFromContainer = container => {\n    if (container.value) {\n        // For containers which are form elements (e.g. text area, text input), get the element's value.\n        return container.value;\n    } else if (container.innerText) {\n        // For other elements, try to use the innerText attribute.\n        return container.innerText;\n    }\n\n    return null;\n};\n\nlet loaded = false;\nif (!loaded) {\n    addEventListeners();\n    loaded = true;\n}\n"],"file":"copy_to_clipboard.min.js"}