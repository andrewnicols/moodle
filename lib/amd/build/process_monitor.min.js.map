{"version":3,"file":"process_monitor.min.js","sources":["../src/process_monitor.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Process monitor includer.\n *\n * @module     core/process_monitor\n * @copyright  2022 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport log from 'core/log';\nimport {manager} from 'core/local/process_monitor/manager';\nimport {LoadingProcess} from 'core/local/process_monitor/loadingprocess';\nimport {ProcessQueue} from 'core/local/process_monitor/processqueue';\nimport Templates from 'core/templates';\n\nlet initialized = false;\n\n/**\n * Get the parent container.\n * @private\n * @return {HTMLelement} the process monitor container.\n */\nconst getParentContainer = () => {\n    // The footer pop over depends on the theme.\n    return document.querySelector(`#page`) ?? document.body;\n};\n\nexport const processMonitor = {\n    /**\n     * Adds a new process to the monitor.\n     * @param {Object} definition the process definition\n     * @param {String} definition.name the process name\n     * @param {Number} definition.percentage the current percentage (0 - 100)\n     * @param {String} definition.error the error message if any\n     * @param {String} definition.url possible link url if any\n     * @returns {LoadingProcess} the loading process\n     */\n    addLoadingProcess: function(definition) {\n        this.initProcessMonitor();\n        const process = new LoadingProcess(manager, definition);\n        return process;\n    },\n\n    /**\n     * Remove all processes form the current monitor.\n     */\n    removeAllProcesses: function() {\n        manager.getInitialStatePromise().then(() => {\n            manager.dispatch('removeAllProcesses');\n            return;\n        }).catch(() => {\n            log.error(`Cannot update process monitor.`);\n        });\n    },\n\n    /**\n     * Initialize the process monitor.\n     */\n    initProcessMonitor: async function() {\n        if (initialized) {\n            return;\n        }\n        initialized = true;\n        const container = getParentContainer();\n        if (document.getElementById(`#processMonitor`)) {\n            return;\n        }\n        try {\n            const {html, js} = await Templates.renderForPromise('core/local/process_monitor/monitor', {});\n            Templates.appendNodeContents(container, html, js);\n        } catch (error) {\n            log.error(`Cannot load the process monitor`);\n        }\n    },\n\n    /**\n     * Return the process monitor initial state promise.\n     * @returns {Promise} Promise of the initial state fully loaded\n     */\n    getInitialStatePromise: function() {\n        return manager.getInitialStatePromise();\n    },\n\n    /**\n     * Load the load queue monitor.\n     *\n     * @return {Promise<ProcessQueue>} when the file uploader is ready to be used.\n     */\n    createProcessQueue: async function() {\n        processMonitor.initProcessMonitor();\n        const processQueue = new ProcessQueue(manager);\n        await processMonitor.getInitialStatePromise();\n        return processQueue;\n    }\n};\n"],"names":["_log","_interopRequireDefault","_templates","initialized","getParentContainer","processMonitor","addLoadingProcess","definition","this","initProcessMonitor","LoadingProcess","manager","removeAllProcesses","getInitialStatePromise","then","dispatch","catch","log","error","async","container","document","_document$querySelect","querySelector","body","getElementById","html","js","Templates","renderForPromise","appendNodeContents","createProcessQueue","processQueue","ProcessQueue"],"mappings":";;;;;;;4FAuBAA,KAAAC,uBAAAD,MAIAE,WAAAD,uBAAAC,YAEIC,IAAAA,aAAc,EAOZC,MAKOC,eAAiB,CAU1BC,kBAAmB,SAASC,YACxBC,KAAKC,qBAEL,OADgB,IAAIC,gBAAAA,eAAeC,SAAnBA,QAA4BJ,WAZtB,EAmB1BK,mBAAoB,WAChBD,SAAAA,QAAQE,yBAAyBC,MAAK,KAC1BC,SAAAA,QAAAA,SAAS,qBACjB,IACDC,OAAM,KACLC,KAAAA,QAAIC,MAAJ,iCAAA,GAxBkB,EA+B1BT,mBAAoBU,iBAChB,GAAIhB,YACA,OAEJA,aAAc,EACRiB,MAAAA,UAvCgCC,QAA1CC,sBAAOD,SAASE,8BAA0BF,IAAAA,sBAAAA,sBAAAA,SAASG,KAF5B,IAAMF,sBA0CzB,IAAID,SAASI,eAAT,mBAGA,IACM,MAAAC,KAACA,KAADC,GAAOA,UAAYC,WAAUC,QAAAA,iBAAiB,qCAAsC,CAAjE,GACzBD,WAAAA,QAAUE,mBAAmBV,UAAWM,KAAMC,GAFlD,CAGE,MAAOT,OACLD,KAAAA,QAAIC,MAAJ,kCACH,CA7CqB,EAoD1BL,uBAAwB,WACbF,OAAAA,SAAAA,QAAQE,wBArDO,EA6D1BkB,mBAAoBZ,iBAChBd,eAAeI,qBACf,MAAMuB,aAAe,IAAIC,cAAJA,aAAiBtB,kBAEtC,aADMN,eAAeQ,yBACdmB,YACV"}