{"version":3,"sources":["../src/addblockmodal.js"],"names":["SELECTORS","ADD_BLOCK","addBlockModal","registerListenerEvents","pageType","pageLayout","addBlockUrl","subPage","document","addEventListener","e","target","closest","preventDefault","show","buildAddBlockModal","then","modal","modalBody","renderBlocks","setBody","catch","destroy","ModalFactory","create","type","types","CANCEL","title","getAddableBlocks","blocks","Templates","render","url","request","methodname","args","pagecontextid","M","cfg","contextid","pagetype","pagelayout","subpage","Ajax","call","init"],"mappings":"wPAuBA,sDACA,8CAEA,oC,woBAEMA,CAAAA,SAAS,CAAG,CACdC,SAAS,CAAE,yBADG,C,CAIdC,aAAa,CAAG,I,CAWdC,sBAAsB,CAAG,SAACC,QAAD,CAAWC,UAAX,CAAuBC,WAAvB,CAAoCC,OAApC,CAAgD,CAC3EC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAAAC,CAAC,CAAI,CAEpC,GAAIA,CAAC,CAACC,MAAF,CAASC,OAAT,CAAiBZ,SAAS,CAACC,SAA3B,CAAJ,CAA2C,CACvCS,CAAC,CAACG,cAAF,GAEA,GAAIX,aAAJ,CAAmB,CAEfA,aAAa,CAACY,IAAd,EACH,CAHD,IAGO,CACHC,kBAAkB,GACjBC,IADD,CACM,SAAAC,KAAK,CAAI,CACXf,aAAa,CAAGe,KAAhB,CACA,GAAMC,CAAAA,SAAS,CAAGC,YAAY,CAACb,WAAD,CAAcF,QAAd,CAAwBC,UAAxB,CAAoCE,OAApC,CAA9B,CACAU,KAAK,CAACG,OAAN,CAAcF,SAAd,EACAD,KAAK,CAACH,IAAN,GAEA,MAAOI,CAAAA,SACV,CARD,EASCG,KATD,CASO,UAAM,CACTnB,aAAa,CAACoB,OAAd,GAEApB,aAAa,CAAG,IACnB,CAbD,CAcH,CACJ,CACJ,CAzBD,CA0BH,C,CAQKa,kBAAkB,CAAG,UAAM,CAC7B,MAAOQ,wBAAaC,MAAb,CAAoB,CACvBC,IAAI,CAAEF,uBAAaG,KAAb,CAAmBC,MADF,CAEvBC,KAAK,CAAE,oBAAU,UAAV,CAFgB,CAApB,CAIV,C,CAYKT,YAAY,+DAAG,iBAAMb,WAAN,CAAmBF,QAAnB,CAA6BC,UAA7B,CAAyCE,OAAzC,yIAEIsB,CAAAA,gBAAgB,CAACzB,QAAD,CAAWC,UAAX,CAAuBE,OAAvB,CAFpB,QAEXuB,MAFW,+CAIVC,mBAAUC,MAAV,CAAiB,qBAAjB,CAAwC,CAC3CF,MAAM,CAAEA,MADmC,CAE3CG,GAAG,CAAE3B,WAFsC,CAAxC,CAJU,uDAAH,0D,CAmBZuB,gBAAgB,gEAAG,kBAAMzB,QAAN,CAAgBC,UAAhB,CAA4BE,OAA5B,uHACf2B,OADe,CACL,CACZC,UAAU,CAAE,iCADA,CAEZC,IAAI,CAAE,CACFC,aAAa,CAAEC,CAAC,CAACC,GAAF,CAAMC,SADnB,CAEFC,QAAQ,CAAErC,QAFR,CAGFsC,UAAU,CAAErC,UAHV,CAIFsC,OAAO,CAAEpC,OAJP,CAFM,CADK,kCAWdqC,cAAKC,IAAL,CAAU,CAACX,OAAD,CAAV,EAAqB,CAArB,CAXc,yDAAH,2D,eAuBF,QAAPY,CAAAA,IAAO,CAAC1C,QAAD,CAAWC,UAAX,CAAuBC,WAAvB,CAAqD,IAAjBC,CAAAA,OAAiB,wDAAP,EAAO,CACrEJ,sBAAsB,CAACC,QAAD,CAAWC,UAAX,CAAuBC,WAAvB,CAAoCC,OAApC,CACzB,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Show an add block modal instead of doing it on a separate page.\n *\n * @module     core/addblockmodal\n * @copyright  2016 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport Ajax from 'core/ajax';\n\nconst SELECTORS = {\n    ADD_BLOCK: '[data-key=\"addblock\"]'\n};\n\nlet addBlockModal = null;\n\n/**\n * Register related event listeners.\n *\n * @method registerListenerEvents\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String} addBlockUrl The add block URL\n * @param {String} subPage The subpage identifier\n */\nconst registerListenerEvents = (pageType, pageLayout, addBlockUrl, subPage) => {\n    document.addEventListener('click', e => {\n\n        if (e.target.closest(SELECTORS.ADD_BLOCK)) {\n            e.preventDefault();\n\n            if (addBlockModal) { // The 'add block' modal has been already created.\n                // Display the 'add block' modal.\n                addBlockModal.show();\n            } else {\n                buildAddBlockModal()\n                .then(modal => {\n                    addBlockModal = modal;\n                    const modalBody = renderBlocks(addBlockUrl, pageType, pageLayout, subPage);\n                    modal.setBody(modalBody);\n                    modal.show();\n\n                    return modalBody;\n                })\n                .catch(() => {\n                    addBlockModal.destroy();\n                    // Unset the addBlockModal in case this is a transient error and it goes away on a relaunch.\n                    addBlockModal = null;\n                });\n            }\n        }\n    });\n};\n\n/**\n * Method that creates the 'add block' modal.\n *\n * @method buildAddBlockModal\n * @returns {Promise} The modal promise (modal's body will be rendered later).\n */\nconst buildAddBlockModal = () => {\n    return ModalFactory.create({\n        type: ModalFactory.types.CANCEL,\n        title: getString('addblock')\n    });\n};\n\n/**\n * Method that renders the list of available blocks.\n *\n * @method renderBlocks\n * @param {String} addBlockUrl The add block URL\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String} subPage The subpage identifier\n * @return {Promise}\n */\nconst renderBlocks = async(addBlockUrl, pageType, pageLayout, subPage) => {\n    // Fetch all addable blocks in the given page.\n    const blocks = await getAddableBlocks(pageType, pageLayout, subPage);\n\n    return Templates.render('core/add_block_body', {\n        blocks: blocks,\n        url: addBlockUrl\n    });\n};\n\n/**\n * Method that fetches all addable blocks in a given page.\n *\n * @method getAddableBlocks\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String} subPage The subpage identifier\n * @return {Promise}\n */\nconst getAddableBlocks = async(pageType, pageLayout, subPage) => {\n    const request = {\n        methodname: 'core_block_fetch_addable_blocks',\n        args: {\n            pagecontextid: M.cfg.contextid,\n            pagetype: pageType,\n            pagelayout: pageLayout,\n            subpage: subPage,\n        },\n    };\n\n    return Ajax.call([request])[0];\n};\n\n/**\n * Set up the actions.\n *\n * @method init\n * @param {String} pageType The type of the page\n * @param {String} pageLayout The layout of the page\n * @param {String} addBlockUrl The add block URL\n * @param {String} subPage The subpage identifier\n */\nexport const init = (pageType, pageLayout, addBlockUrl, subPage = '') => {\n    registerListenerEvents(pageType, pageLayout, addBlockUrl, subPage);\n};\n"],"file":"addblockmodal.min.js"}