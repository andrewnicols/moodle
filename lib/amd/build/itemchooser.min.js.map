{"version":3,"sources":["../src/itemchooser.js"],"names":["chooserConfig","tabConfig","items","filterFunction","visibleFunction","visible","itemData","filter","identifier","isFavourited","Error","body","chooserBody","footer","chooserFooter","large","isDialogueLarge","scrollable","isDialogueScrollable","templateContext","getChooserTemplateContext","title","getDialogueTitle","type","modalTypes","DEFAULT","modal","getModal","show","hide","tabList","Promise","reject","data","getPopulatedTab","allItemsTab","favouriteTab","name","item","isFavourite","length","getTabList","Templates","render","chooserData","resolve","chooseConfig"],"mappings":"+cA2BA,O,urCAgBI,YAAgC,IAApBA,CAAAA,CAAoB,wDAAJ,EAAI,WAC5B,KAAKA,aAAL,CAAqBA,CACxB,C,4DAgFC,IAPEC,CAAAA,CAOF,wDAPc,CACRC,KAAK,CAAE,EADC,CAERC,cAAc,CAAE,IAFR,CAGRC,eAAe,CAAE,IAHT,CAIRC,OAAO,GAJC,CAOd,CADEC,CACF,wDADa,EACb,CACEL,CAAS,CAACC,KAAV,CAAkBI,CAAlB,CACA,GAAIL,CAAS,CAACE,cAAd,CAA8B,CAC1BF,CAAS,CAACC,KAAV,CAAkBD,CAAS,CAACC,KAAV,CAAgBK,MAAhB,CAAuBN,CAAS,CAACE,cAAjC,CACrB,CAED,GAAIF,CAAS,CAACG,eAAd,CAA+B,CAC3BH,CAAS,CAACI,OAAV,CAAoBJ,CAAS,CAACG,eAAV,CAA0BH,CAA1B,CACvB,CAED,MAAOA,CAAAA,CACV,C,4DA2BiBO,C,CAAiC,IAArBC,CAAAA,CAAqB,2DAC/C,KAAM,IAAIC,CAAAA,KAAJ,uDAAyDF,CAAzD,gBAA0EC,CAA1E,EACT,C,2CAOU,CACP,MAAO,aAAY,CACfE,IAAI,CAAE,KAAKC,WAAL,EADS,CAEfC,MAAM,CAAE,KAAKC,aAAL,EAFO,CAGfC,KAAK,CAAE,KAAKC,eAAL,EAHQ,CAIfC,UAAU,CAAE,KAAKC,oBAAL,EAJG,CAKfC,eAAe,CAAE,KAAKC,yBAAL,EALF,CAMfC,KAAK,CAAE,KAAKC,gBAAL,EANQ,CAOfC,IAAI,CAAEC,QAAWC,OAPF,CAAZ,CASV,C,yDAqCiB,CACd,QACH,C,mEAOsB,CACnB,QACH,C,mKAuBSC,C,CAAQ,KAAKC,QAAL,E,CACdD,CAAK,CAACE,IAAN,G,2RAIoB,MAAKD,QAAL,E,QAAdD,C,QACNA,CAAK,CAACG,IAAN,G,gJAbc,CACd,MAAO,CACHC,OAAO,CAAE,KAAKA,OADX,CAGV,C,sCAzLgB,CACb,MAAOC,CAAAA,OAAO,CAACC,MAAR,CAAe,GAAItB,CAAAA,KAAJ,mBAAf,CACV,C,mCASa,CACV,GAAMJ,CAAAA,CAAQ,CAAG,KAAK2B,IAAtB,CAEA,MAAO,CACH,KAAKC,eAAL,CAAqB,KAAKC,WAA1B,CAAuC7B,CAAvC,CADG,CAEH,KAAK4B,eAAL,CAAqB,KAAKE,YAA1B,CAAwC9B,CAAxC,CAFG,CAIV,C,uCAOiB,CACd,MAAO,CACH+B,IAAI,CAAE,KADH,CAEHhC,OAAO,GAFJ,CAIV,C,wCAOkB,CACf,MAAO,CACHgC,IAAI,CAAE,YADH,CAEHlC,cAAc,CAAE,wBAAAmC,CAAI,QAAIA,CAAAA,CAAI,CAACC,WAAT,CAFjB,CAGHnC,eAAe,CAAE,yBAAAH,CAAS,QAAIA,CAAAA,CAAS,CAACC,KAAV,CAAgBsC,MAApB,CAHvB,CAKV,C,uCAoCiB,CACd,MAAO,MAAKC,UAAL,EACV,C,wCAOkB,CACf,MAAO,6BACV,C,yCAkCmB,CAChB,MAAOV,CAAAA,OAAO,CAACC,MAAR,CAAe,GAAItB,CAAAA,KAAJ,qCAAf,CACV,C,uCAOiB,CACd,MAAOgC,CAAAA,CAAS,CAACC,MAAV,CACH,6BADG,CAEH,KAAKC,WAFF,CAIV,C,yCAOmB,CAChB,MAAOb,CAAAA,OAAO,CAACc,OAAR,EACV,C,kDAyB4B,CACzB,MAAO,EACV,C,yCA4BmB,CAChB,MAAO,MAAKC,YACf,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A type of dialogue used as for choosing modules in a course.\n *\n * @module     core_course/activitychooser\n * @copyright  2021 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {\n    create as createModal,\n    types as modalTypes,\n} from 'core/modal_factory';\nimport * as Templates from 'core/templates';\n\n/**\n * @typedef tabConfig\n * @property {string} name\n * @property {function} [filterFunction]\n * @property {function} [visibleFunction]\n * @property {bool} [visible=false] Calculated from visibleFunction if not specified\n */\n\nexport default class {\n    /**\n     * Constructor for a new Item Chooser.\n     *\n     * @param {object} chooserConfig\n     */\n    constructor(chooserConfig = {}) {\n        this.chooserConfig = chooserConfig;\n    }\n\n    /**\n     * Fetch the cached data.\n     *\n     * @returns {Promise<object>}\n     */\n    get chooserData() {\n        if (!this.cachedData) {\n            this.cachedData = this.fetchRemoteData();\n        }\n\n        return this.cachedData;\n    }\n\n    /**\n     * Fetch the remote data to display.\n     *\n     * @returns {Promise<object>}\n     */\n    get remoteData() {\n        return Promise.reject(new Error(`TODO: Implement`));\n    }\n\n    /**\n     * Get an ordered list of tabs for this chooser.\n     *\n     * To be extended by the child class.\n     *\n     * @returns {tabConfig[]}\n     */\n    get tabList() {\n        const itemData = this.data;\n\n        return [\n            this.getPopulatedTab(this.allItemsTab, itemData),\n            this.getPopulatedTab(this.favouriteTab, itemData),\n        ];\n    }\n\n    /**\n     * Get the data for the all items tab.\n     *\n     * @returns {tabConfig}\n     */\n    get allItemsTab() {\n        return {\n            name: 'all',\n            visible: true,\n        };\n    }\n\n    /**\n     * Get the data for the favourite items tab.\n     *\n     * @returns {tabConfig}\n     */\n    get favouriteTab() {\n        return {\n            name: 'favourites',\n            filterFunction: item => item.isFavourite,\n            visibleFunction: tabConfig => tabConfig.items.length,\n        };\n    }\n\n    /**\n     * Get the populated tab data for the given configuration.\n     *\n     * @param {tabConfig} tabConfig\n     * @param {object[]} itemData\n     * @returns {tabConfig}\n     */\n    getPopulatedTab(\n        tabConfig = {\n            items: [],\n            filterFunction: null,\n            visibleFunction: null,\n            visible: false,\n        },\n        itemData = []\n    ) {\n        tabConfig.items = itemData;\n        if (tabConfig.filterFunction) {\n            tabConfig.items = tabConfig.items.filter(tabConfig.filterFunction);\n        }\n\n        if (tabConfig.visibleFunction) {\n            tabConfig.visible = tabConfig.visibleFunction(tabConfig);\n        }\n\n        return tabConfig;\n    }\n\n\n    /**\n     * Get the list of enabled (active) tabs.\n     *\n     * @returns {tabConfig[]}\n     */\n    get enabledTabs() {\n        return this.getTabList();\n    }\n\n    /**\n     * Get the template to use for the body.\n     *\n     * @returns {string} The template name\n     */\n    get templateName() {\n        return 'core/local/itemchooser/body';\n    }\n\n    /**\n     * Mark the specified item as a favourite.\n     *\n     * @param {string} identifier The identifier of the favourite\n     * @param {bool} [isFavourited=true]\n     */\n    setFavouriteState(identifier, isFavourited = true) {\n        throw new Error(`TODO: Implement setting favourite state for ${identifier} to ${isFavourited}`);\n    }\n\n    /**\n     * Get the modal.\n     *\n     * @returns {Promise}\n     */\n    getModal() {\n        return createModal({\n            body: this.chooserBody(),\n            footer: this.chooserFooter(),\n            large: this.isDialogueLarge(),\n            scrollable: this.isDialogueScrollable(),\n            templateContext: this.getChooserTemplateContext(),\n            title: this.getDialogueTitle(),\n            type: modalTypes.DEFAULT,\n        });\n    }\n\n    /**\n     * Get the title for the item chooser dialogue.\n     *\n     * @returns {Promise<string>}\n     */\n    get dialogueTitle() {\n        return Promise.reject(new Error(`TODO: Implement the title fetcher`));\n    }\n\n    /**\n     * Get the Chooser body.\n     *\n     * @returns {Promise<string>}\n     */\n    get chooserBody() {\n        return Templates.render(\n            'core_course/activitychooser',\n            this.chooserData\n        );\n    }\n\n    /**\n     * Get the Chooser footer.\n     *\n     * @returns {Promise<string>}\n     */\n    get chooserFooter() {\n        return Promise.resolve();\n    }\n\n    /**\n     * Whether to make the dialogue large.\n     *\n     * @returns {boolean}\n     */\n    isDialogueLarge() {\n        return true;\n    }\n\n    /**\n     * Whether to make the dialogue scrollable.\n     *\n     * @returns {boolean}\n     */\n    isDialogueScrollable() {\n        return false;\n    }\n\n    /**\n     * Get any context data for the dialogue.\n     *\n     * @returns {object}\n     */\n    get chooserTemplateContext() {\n        return {};\n    }\n\n    /**\n     * Format the data for the item chooser.\n     *\n     * @returns {object}\n     */\n    get chooserData() {\n        return {\n            tabList: this.tabList,\n        };\n    }\n\n    async show() {\n        const modal = this.getModal();\n        modal.show();\n    }\n\n    async hide() {\n        const modal = await this.getModal();\n        modal.hide();\n    }\n\n    /**\n     * Get the chooser dialogue configuration for this chooser.\n     *\n     * @return {object}\n     */\n    get chooserConfig() {\n        return this.chooseConfig;\n    }\n}\n"],"file":"itemchooser.min.js"}