{"version":3,"sources":["../../../src/local/event/legacylistener.js"],"names":["supportsMutationObservers","MutationObserver","listen","targetSelector","applyCallback","newNodeObserver","mutationList","forEach","mutation","addedNodes","node","Element","matches","observe","document","childList","subtree"],"mappings":"mJA8BMA,CAAAA,CAAyB,CAAG,iBAAOC,CAAAA,gBAAgB,EAAgC,UAA5B,QAAOA,CAAAA,gBAAlC,C,UAMZ,QAATC,CAAAA,MAAS,CAACC,CAAD,CAAiBC,CAAjB,CAAmC,CACrD,GAAIJ,CAAyB,EAA7B,CAAiC,CAE7B,GAAMK,CAAAA,CAAe,CAAG,GAAIJ,CAAAA,gBAAJ,CAAqB,SAAAK,CAAY,CAAI,CACzDA,CAAY,CAACC,OAAb,CAAqB,SAAAC,CAAQ,QAAIA,CAAAA,CAAQ,CAACC,UAAT,CAAoBF,OAApB,CAA4B,SAAAG,CAAI,CAAI,CACjE,GAAIA,CAAI,WAAYC,CAAAA,OAAhB,EAA2BD,CAAI,CAACE,OAAL,CAAaT,CAAb,CAA/B,CAA6D,CACzDC,CAAa,CAACM,CAAD,CAChB,CACJ,CAJgC,CAAJ,CAA7B,CAKH,CANuB,CAAxB,CAQAL,CAAe,CAACQ,OAAhB,CAAwBC,QAAxB,CAAkC,CAACC,SAAS,GAAV,CAAkBC,OAAO,GAAzB,CAAlC,CACH,CACJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper to watch for a node type to help register a legacy listener.\n *\n * @module     core/local/event/legacylistener\n * @class      legacylistener\n * @package    core\n * @copyright  2021 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Determine whether the browser supports the MutationObserver system.\n *\n * @returns {Bool}\n */\nconst supportsMutationObservers = () => (MutationObserver && typeof MutationObserver === 'function');\n\n/**\n * @param {String} targetSelector The selector to apply\n * @param {Function} applyCallback The function to call on the found node\n */\nexport const listen = (targetSelector, applyCallback) => {\n    if (supportsMutationObservers()) {\n        // Add a MutationObserver to check for new children to the tree.\n        const newNodeObserver = new MutationObserver(mutationList => {\n            mutationList.forEach(mutation => mutation.addedNodes.forEach(node => {\n                if (node instanceof Element && node.matches(targetSelector)) {\n                    applyCallback(node);\n                }\n            }));\n        });\n\n        newNodeObserver.observe(document, {childList: true, subtree: true});\n    }\n};\n"],"file":"legacylistener.min.js"}