{"version":3,"sources":["../../../src/local/itemchooser/item.js"],"names":["Item","name","selectors","favourite","items","id","element","dataset","addEventListener","getElement","_toggleFavourite","itemName","target","closest","e","favouriteButton","isFavouriteButton","preventDefault","wasFavourite","favourited","reactive","dispatch","getItemName","watch","handler","_refreshItem","_updateFavouriteState","_updateVisibility","targetState","querySelector","icon","classList","toggle","ariaPressed","visible","BaseComponent"],"mappings":"8xDAyBqBA,CAAAA,C,+HACR,CACL,KAAKC,IAAL,CAAY,MAAZ,CAEA,KAAKC,SAAL,CAAiB,CACbC,SAAS,CAAE,6BADE,CAGbC,KAAK,CAAE,qBAHM,CAAjB,CAMA,KAAKC,EAAL,CAAU,KAAKC,OAAL,CAAaC,OAAb,CAAqBF,EAClC,C,+CAEY,CACT,KAAKG,gBAAL,CACI,KAAKC,UAAL,EADJ,CAEI,OAFJ,CAGI,KAAKC,gBAHT,CAKH,C,iDAEa,CACV,MAAO,MAAKD,UAAL,GAAkBF,OAAlB,CAA0BI,QACpC,C,4DAEiBC,C,CAAQ,CACtB,MAAOA,CAAAA,CAAM,CAACC,OAAP,CAAe,KAAKX,SAAL,CAAeC,SAA9B,CACV,C,0DAKgBW,C,CAAG,CAChB,GAAMC,CAAAA,CAAe,CAAG,KAAKC,iBAAL,CAAuBF,CAAC,CAACF,MAAzB,CAAxB,CACA,GAAIG,CAAJ,CAAqB,CACjBD,CAAC,CAACG,cAAF,GAEA,GAAMC,CAAAA,CAAY,CAA0C,MAAvC,GAAAH,CAAe,CAACR,OAAhB,CAAwBY,UAA7C,CACA,KAAKC,QAAL,CAAcC,QAAd,CACI,iBADJ,CAEI,KAAKC,WAAL,EAFJ,CAGIJ,CAHJ,CAKH,CACJ,C,iDAEa,CACV,MAAO,CACH,CACIK,KAAK,iBAAW,KAAKlB,EAAhB,aADT,CAEImB,OAAO,CAAE,KAAKC,YAFlB,CADG,CAMV,C,oDAEuB,IAAVnB,CAAAA,CAAU,GAAVA,OAAU,CAEdM,CAAM,CAAG,KAAKH,UAAL,EAFK,CAIpB,KAAKiB,qBAAL,CAA2BpB,CAA3B,CAAoCM,CAApC,EACA,KAAKe,iBAAL,CAAuBrB,CAAvB,CAAgCM,CAAhC,CACH,C,oEAEqBgB,C,CAAahB,C,CAAQ,IACjCG,CAAAA,CAAe,CAAGH,CAAM,CAACiB,aAAP,CAAqB,KAAK3B,SAAL,CAAeC,SAApC,CADe,CAEjC2B,CAAI,CAAGf,CAAe,CAACc,aAAhB,KAF0B,CAIvCC,CAAI,CAACC,SAAL,CAAeC,MAAf,CAAsB,SAAtB,CAAiCJ,CAAW,CAACzB,SAA7C,EACA2B,CAAI,CAACC,SAAL,CAAeC,MAAf,CAAsB,WAAtB,CAAmC,CAACJ,CAAW,CAACzB,SAAhD,EACAY,CAAe,CAACgB,SAAhB,CAA0BC,MAA1B,CAAiC,cAAjC,CAAiDJ,CAAW,CAACzB,SAA7D,EACAY,CAAe,CAACgB,SAAhB,CAA0BC,MAA1B,CAAiC,YAAjC,CAA+C,CAACJ,CAAW,CAACzB,SAA5D,EACAY,CAAe,CAACR,OAAhB,CAAwBY,UAAxB,CAAqCS,CAAW,CAACzB,SAAjD,CACAY,CAAe,CAACkB,WAAhB,CAA8BL,CAAW,CAACzB,SAC7C,C,4DAEiByB,C,CAAahB,C,CAAQ,CACnCA,CAAM,CAACmB,SAAP,CAAiBC,MAAjB,CAAwB,QAAxB,CAAkC,CAACJ,CAAW,CAACM,OAA/C,CACH,C,cA7E6BC,e","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * An individual item.\n *\n * @module     core_course/local/modchooser/item\n * @copyright  2021 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent} from 'core/reactive';\n\nexport default class Item extends BaseComponent {\n    create() {\n        this.name = 'item';\n\n        this.selectors = {\n            favourite: '[data-toggle=\"favourite\"]',\n            // TODO Fix this to not use menuitem.\n            items: '[role=\"menuitem\"]',\n        };\n\n        this.id = this.element.dataset.id;\n    }\n\n    stateReady() {\n        this.addEventListener(\n            this.getElement(),\n            'click',\n            this._toggleFavourite,\n        );\n    }\n\n    getItemName() {\n        return this.getElement().dataset.itemName;\n    }\n\n    isFavouriteButton(target) {\n        return target.closest(this.selectors.favourite);\n    }\n\n    /**\n     * @param {Event} e The click event\n     */\n    _toggleFavourite(e) {\n        const favouriteButton = this.isFavouriteButton(e.target);\n        if (favouriteButton) {\n            e.preventDefault();\n\n            const wasFavourite = favouriteButton.dataset.favourited === 'true';\n            this.reactive.dispatch(\n                'toggleFavourite',\n                this.getItemName(),\n                wasFavourite,\n            );\n        }\n    }\n\n    getWatchers() {\n        return [\n            {\n                watch: `items[${this.id}]:updated`,\n                handler: this._refreshItem,\n            },\n        ];\n    }\n\n    _refreshItem({element}) {\n        // There must be a better way of doing this!\n        const target = this.getElement();\n\n        this._updateFavouriteState(element, target);\n        this._updateVisibility(element, target);\n    }\n\n    _updateFavouriteState(targetState, target) {\n        const favouriteButton = target.querySelector(this.selectors.favourite);\n        const icon = favouriteButton.querySelector(`i`);\n\n        icon.classList.toggle('fa-star', targetState.favourite);\n        icon.classList.toggle('fa-star-o', !targetState.favourite);\n        favouriteButton.classList.toggle('text-primary', targetState.favourite);\n        favouriteButton.classList.toggle('text-muted', !targetState.favourite);\n        favouriteButton.dataset.favourited = targetState.favourite;\n        favouriteButton.ariaPressed = targetState.favourite;\n    }\n\n    _updateVisibility(targetState, target) {\n        target.classList.toggle('d-none', !targetState.visible);\n    }\n}\n"],"file":"item.min.js"}