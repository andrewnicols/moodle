{"version":3,"file":"renderer.min.js","sources":["../../../src/local/templates/renderer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as Log from 'core/log';\nimport * as Truncate from 'core/truncate';\nimport * as UserDate from 'core/user_date';\nimport Pending from 'core/pending';\nimport * as str from 'core/str';\nimport IconSystem from 'core/icon_system';\nimport config from 'core/config';\nimport mustache from 'core/mustache';\nimport Loader from './loader';\n\n/**\n * Normalise the provided component such that '', 'moodle', and 'core' are treated consistently.\n *\n * @param   {String} component\n * @returns {String}\n */\nconst getNormalisedComponent = (component) => {\n    if (component) {\n        if (component !== 'moodle' && component !== 'core') {\n            return component;\n        }\n    }\n\n    return 'core';\n};\n\n/**\n * Template Renderer Class.\n *\n * @module     core/local/templates/renderer\n * @copyright  2023 Andrew Lyons <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      4.2\n */\nexport default class Renderer {\n    /** @var {string[]} requiredStrings - Collection of strings found during the rendering of one template */\n    requiredStrings = null;\n\n    /** @var {object[]} requiredDates - Collection of dates found during the rendering of one template */\n    requiredDates = [];\n\n    /** @var {string[]} requiredJS - Collection of js blocks found during the rendering of one template */\n    requiredJS = null;\n\n    /** @var {String} themeName for the current render */\n    currentThemeName = '';\n\n    /** @var {Number} uniqInstances Count of times this constructor has been called. */\n    static uniqInstances = 0;\n\n    /** @var {Object[]} loadTemplateBuffer - List of templates to be loaded */\n    static loadTemplateBuffer = [];\n\n    /** @var {Bool} isLoadingTemplates - Whether templates are currently being loaded */\n    static isLoadingTemplates = false;\n\n    /** @var {Object} iconSystem - Object extending core/iconsystem */\n    iconSystem = null;\n\n    /** @var {Array} disallowedNestedHelpers - List of helpers that can't be called within other helpers */\n    static disallowedNestedHelpers = [\n        'js',\n    ];\n\n    /** @var {String[]} templateCache - Cache of already loaded template strings */\n    static templateCache = {};\n\n    /**\n     * Cache of already loaded template promises.\n     *\n     * @type {Promise[]}\n     * @static\n     * @private\n     */\n    static templatePromises = {};\n\n    /**\n     * The loader used to fetch templates.\n     * @type {Loader}\n     * @static\n     * @private\n     */\n    static loader = Loader;\n\n    /**\n     * Constructor\n     *\n     * Each call to templates.render gets it's own instance of this class.\n     */\n    constructor () {\n        this.requiredStrings = [];\n        this.requiredJS = [];\n        this.requiredDates = [];\n        this.currentThemeName = '';\n    }\n\n    /**\n     * Set the template loader to use for all Template renderers.\n     *\n     * @param {Loader} loader\n     */\n    static setLoader (loader) {\n        this.loader = loader;\n    }\n\n    /**\n     * Get the Loader used to fetch templates.\n     *\n     * @returns {Loader}\n     */\n    static getLoader () {\n        return this.loader;\n    }\n\n    /**\n     * Render a single image icon.\n     *\n     * @method renderIcon\n     * @private\n     * @param {string} key The icon key.\n     * @param {string} component The component name.\n     * @param {string} title The icon title\n     * @return {Promise}\n     */\n    async renderIcon (key, component, title) {\n        // Preload the module to do the icon rendering based on the theme iconsystem.\n        component = getNormalisedComponent(component);\n\n        await this.setupIconSystem();\n        const template = await Renderer.getLoader().getTemplate(\n            this.iconSystem.getTemplateName(),\n            this.currentThemeName,\n        );\n\n        return this.iconSystem.renderIcon(\n            key,\n            component,\n            title,\n            template\n        );\n    }\n\n    /**\n     * Helper to set up the icon system.\n     */\n    async setupIconSystem () {\n        let System = await import(config.iconsystemmodule);\n        if (System.default) {\n            System = System.default;\n        }\n        const instance = new System();\n        if (!(instance instanceof IconSystem)) {\n            throw new Error(`Invalid icon system specified ${config.iconsystemmodule}`);\n        }\n        instance.init();\n\n        this.iconSystem = instance;\n    }\n\n    /**\n     * Render image icons.\n     *\n     * @method pixHelper\n     * @private\n     * @param {object} context The mustache context\n     * @param {string} sectionText The text to parse arguments from.\n     * @param {function} helper Used to render the alt attribute of the text.\n     * @return {string}\n     */\n    async pixHelper (context, sectionText, helper) {\n        const parts = sectionText.split(',');\n        let key = '';\n        let component = '';\n        let text = '';\n\n        if (parts.length > 0) {\n            key = helper(parts.shift().trim(), context);\n        }\n        if (parts.length > 0) {\n            component = helper(parts.shift().trim(), context);\n        }\n        if (parts.length > 0) {\n            text = helper(parts.join(',').trim(), context);\n        }\n\n        const template = await Renderer.getLoader().getTemplate(\n            this.iconSystem.getTemplateName(),\n            this.currentTheme\n        );\n\n        component = getNormalisedComponent(component);\n\n        // The key might have been escaped by the JS Mustache engine which\n        // converts forward slashes to HTML entities. Let us undo that here.\n        key = key.replace(/&#x2F;/gi, '/');\n\n        return this.iconSystem.renderIcon(\n            key,\n            component,\n            text,\n            template\n        );\n    }\n\n    /**\n     * Render blocks of javascript and save them in an array.\n     *\n     * @method jsHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to save as a js block.\n     * @param {function} helper Used to render the block.\n     * @return {string}\n     */\n    jsHelper (context, sectionText, helper) {\n        this.requiredJS.push(helper(sectionText, context));\n        return '';\n    }\n\n    /**\n     * String helper used to render {{#str}}abd component { a : 'fish'}{{/str}}\n     * into a get_string call.\n     *\n     * @method stringHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    stringHelper (context, sectionText, helper) {\n        var parts = sectionText.split(',');\n        var key = '';\n        var component = '';\n        var param = '';\n        if (parts.length > 0) {\n            key = parts.shift().trim();\n        }\n        if (parts.length > 0) {\n            component = parts.shift().trim();\n        }\n        if (parts.length > 0) {\n            param = parts.join(',').trim();\n        }\n\n        component = getNormalisedComponent(component);\n\n        if (param !== '') {\n            // Allow variable expansion in the param part only.\n            param = helper(param, context);\n        }\n\n        // Allow json formatted $a arguments.\n        // Added double quote after left curly bracket to differentiate between string and JSON string.\n        if (param.indexOf('{\"') === 0) {\n            // If it can't be parsed then the string is not a JSON format.\n            try {\n                const parsedParam = JSON.parse(param);\n                // Handle non-exception-throwing cases, e.g. null, integer, boolean.\n                if (parsedParam && typeof parsedParam === \"object\") {\n                    param = parsedParam;\n                }\n            } catch (err) {\n                // This was probably not JSON.\n                // Keep the error message visible.\n                window.console.warn(err.message);\n            }\n        }\n\n        var index = this.requiredStrings.length;\n        this.requiredStrings.push({\n            key: key,\n            component: component,\n            param: param\n        });\n\n        // The placeholder must not use {{}} as those can be misinterpreted by the engine.\n        return '[[_s' + index + ']]';\n    }\n\n    /**\n     * String helper to render {{#cleanstr}}abd component { a : 'fish'}{{/cleanstr}}\n     * into a get_string following by an HTML escape.\n     *\n     * @method cleanStringHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    cleanStringHelper (context, sectionText, helper) {\n        var str = this.stringHelper(context, sectionText, helper);\n\n        // We're going to use [[_cx]] format for clean strings, where x is a number.\n        // Hence, replacing 's' with 'c' in the placeholder that stringHelper returns.\n        return str.replace('s', 'c');\n    }\n\n    /**\n     * Quote helper used to wrap content in quotes, and escape all special JSON characters present in the content.\n     *\n     * @method quoteHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    quoteHelper (context, sectionText, helper) {\n        var content = helper(sectionText.trim(), context);\n\n        // Escape the {{ and JSON encode.\n        // This involves wrapping {{, and }} in change delimeter tags.\n        content = JSON.stringify(content);\n        content = content.replace(/([{}]{2,3})/g, '{{=<% %>=}}$1<%={{ }}=%>');\n        return content;\n    }\n\n    /**\n     * Shorten text helper to truncate text and append a trailing ellipsis.\n     *\n     * @method shortenTextHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    shortenTextHelper (context, sectionText, helper) {\n        // Non-greedy split on comma to grab section text into the length and\n        // text parts.\n        var regex = /(.*?),(.*)/;\n        var parts = sectionText.match(regex);\n        // The length is the part matched in the first set of parethesis.\n        var length = parts[1].trim();\n        // The length is the part matched in the second set of parethesis.\n        var text = parts[2].trim();\n        var content = helper(text, context);\n        return Truncate.truncate(content, {\n            length: length,\n            words: true,\n            ellipsis: '...'\n        });\n    }\n\n    /**\n     * User date helper to render user dates from timestamps.\n     *\n     * @method userDateHelper\n     * @private\n     * @param {object} context The current mustache context.\n     * @param {string} sectionText The text to parse the arguments from.\n     * @param {function} helper Used to render subsections of the text.\n     * @return {string}\n     */\n    userDateHelper (context, sectionText, helper) {\n        // Non-greedy split on comma to grab the timestamp and format.\n        var regex = /(.*?),(.*)/;\n        var parts = sectionText.match(regex);\n        var timestamp = helper(parts[1].trim(), context);\n        var format = helper(parts[2].trim(), context);\n        var index = this.requiredDates.length;\n\n        this.requiredDates.push({\n            timestamp: timestamp,\n            format: format\n        });\n\n        return '[[_t_' + index + ']]';\n    }\n\n    /**\n     * Return a helper function to be added to the context for rendering the a\n     * template.\n     *\n     * This will parse the provided text before giving it to the helper function\n     * in order to remove any disallowed nested helpers to prevent one helper\n     * from calling another.\n     *\n     * In particular to prevent the JS helper from being called from within another\n     * helper because it can lead to security issues when the JS portion is user\n     * provided.\n     *\n     * @param  {function} helperFunction The helper function to add\n     * @param  {object} context The template context for the helper function\n     * @return {Function} To be set in the context\n     */\n    addHelperFunction (helperFunction, context) {\n        return function () {\n            return function (sectionText, helper) {\n                // Override the disallowed helpers in the template context with\n                // a function that returns an empty string for use when executing\n                // other helpers. This is to prevent these helpers from being\n                // executed as part of the rendering of another helper in order to\n                // prevent any potential security issues.\n                var originalHelpers = Renderer.disallowedNestedHelpers.reduce(function (carry, name) {\n                    if (context.hasOwnProperty(name)) {\n                        carry[name] = context[name];\n                    }\n\n                    return carry;\n                }, {});\n\n                Renderer.disallowedNestedHelpers.forEach(function (helperName) {\n                    context[helperName] = function () {\n                        return '';\n                    };\n                });\n\n                // Execute the helper with the modified context that doesn't include\n                // the disallowed nested helpers. This prevents the disallowed\n                // helpers from being called from within other helpers.\n                var result = helperFunction.apply(this, [context, sectionText, helper]);\n\n                // Restore the original helper implementation in the context so that\n                // any further rendering has access to them again.\n                for (var name in originalHelpers) {\n                    context[name] = originalHelpers[name];\n                }\n\n                return result;\n            }.bind(this);\n        }.bind(this);\n    }\n\n    /**\n     * Add some common helper functions to all context objects passed to templates.\n     * These helpers match exactly the helpers available in php.\n     *\n     * @method addHelpers\n     * @private\n     * @param {Object} context Simple types used as the context for the template.\n     * @param {String} themeName We set this multiple times, because there are async calls.\n     */\n    addHelpers (context, themeName) {\n        this.currentThemeName = themeName;\n        this.requiredStrings = [];\n        this.requiredJS = [];\n        context.uniqid = (Renderer.uniqInstances++);\n        context.str = this.addHelperFunction(this.stringHelper, context);\n        context.cleanstr = this.addHelperFunction(this.cleanStringHelper, context);\n        context.pix = this.addHelperFunction(this.pixHelper, context);\n        context.js = this.addHelperFunction(this.jsHelper, context);\n        context.quote = this.addHelperFunction(this.quoteHelper, context);\n        context.shortentext = this.addHelperFunction(this.shortenTextHelper, context);\n        context.userdate = this.addHelperFunction(this.userDateHelper, context);\n        context.globals = {config: config};\n        context.currentTheme = themeName;\n    }\n\n    /**\n     * Get all the JS blocks from the last rendered template.\n     *\n     * @method getJS\n     * @private\n     * @return {string}\n     */\n    getJS () {\n        var js = '';\n        if (this.requiredJS.length > 0) {\n            js = this.requiredJS.join(\";\\n\");\n        }\n\n        return js;\n    }\n\n    /**\n     * Treat strings in content.\n     *\n     * The purpose of this method is to replace the placeholders found in a string\n     * with the their respective translated strings.\n     *\n     * Previously we were relying on String.replace() but the complexity increased with\n     * the numbers of strings to replace. Now we manually walk the string and stop at each\n     * placeholder we find, only then we replace it. Most of the time we will\n     * replace all the placeholders in a single run, at times we will need a few\n     * more runs when placeholders are replaced with strings that contain placeholders\n     * themselves.\n     *\n     * @param {String} content The content in which string placeholders are to be found.\n     * @param {Array} strings The strings to replace with.\n     * @return {String} The treated content.\n     */\n    treatStringsInContent (content, strings) {\n        var pattern = /\\[\\[_(s|c)\\d+\\]\\]/;\n        var treated;\n        var index;\n        var strIndex;\n        var walker;\n        var char;\n        var strFinal;\n        var isClean;\n\n        do {\n            treated = '';\n            index = content.search(pattern);\n            while (index && index > -1) {\n\n                // Copy the part prior to the placeholder to the treated string.\n                treated += content.substring(0, index);\n                content = content.substr(index);\n                isClean = content[3] == 'c';\n                strIndex = '';\n                walker = 4; // 4 is the length of either '[[_s' or '[[_c'.\n\n                // Walk the characters to manually extract the index of the string from the placeholder.\n                char = content.substr(walker, 1);\n                do {\n                    strIndex += char;\n                    walker++;\n                    char = content.substr(walker, 1);\n                } while (char != ']');\n\n                // Get the string, add it to the treated result, and remove the placeholder from the content to treat.\n                strFinal = strings[parseInt(strIndex, 10)];\n                if (typeof strFinal === 'undefined') {\n                    Log.debug('Could not find string for pattern [[_' + (isClean ? 'c' : 's') + strIndex + ']].');\n                    strFinal = '';\n                }\n                if (isClean) {\n                    strFinal = mustache.escape(strFinal);\n                }\n                treated += strFinal;\n                content = content.substr(6 + strIndex.length); // 6 is the length of the placeholder without the index.\n                                                                // That's either '[[_s]]' or '[[_c]]'.\n\n                // Find the next placeholder.\n                index = content.match(pattern);\n            }\n\n            // The content becomes the treated part with the rest of the content.\n            content = treated + content;\n\n            // Check if we need to walk the content again, in case strings contained placeholders.\n            index = content.search(pattern);\n\n        } while (index > -1);\n\n        return content;\n    }\n\n    /**\n     * Treat strings in content.\n     *\n     * The purpose of this method is to replace the date placeholders found in the\n     * content with the their respective translated dates.\n     *\n     * @param {String} content The content in which string placeholders are to be found.\n     * @param {Array} dates The dates to replace with.\n     * @return {String} The treated content.\n     */\n    treatDatesInContentfunction (content, dates) {\n        dates.forEach(function (date, index) {\n            var key = '\\\\[\\\\[_t_' + index + '\\\\]\\\\]';\n            var re = new RegExp(key, 'g');\n            content = content.replace(re, date);\n        });\n\n        return content;\n    }\n\n    /**\n     * Render a template and then call the callback with the result.\n     *\n     * @method doRender\n     * @private\n     * @param {string} templateSource The mustache template to render.\n     * @param {Object} context Simple types used as the context for the template.\n     * @param {String} themeName Name of the current theme.\n     * @return {Promise} object\n     */\n    doRender (templateSource, context, themeName) {\n        this.currentThemeName = themeName;\n        const iconTemplate = this.iconSystem.getTemplateName();\n\n        var pendingPromise = new Pending('core/templates:doRender');\n        return Renderer.getLoader().getTemplate(iconTemplate, themeName)\n        .then(() => {\n            this.addHelpers(context, themeName);\n            return templateSource;\n        })\n        .then((source) => mustache.render(source, context, (partialName) => {\n            return Renderer.getLoader().partialHelper(partialName, themeName);\n        }))\n        .then((result) => {\n            return {\n                html: result.trim(),\n                js: this.getJS(),\n            };\n        })\n        .then(function ({html, js}) {\n            if (this.requiredStrings.length > 0) {\n                return str.get_strings(this.requiredStrings).then(function (strings) {\n\n                    // Make sure string substitutions are done for the userdate\n                    // values as well.\n                    this.requiredDates = this.requiredDates.map(function (date) {\n                        return {\n                            timestamp: this.treatStringsInContent(date.timestamp, strings),\n                            format: this.treatStringsInContent(date.format, strings)\n                        };\n                    }.bind(this));\n\n                    // Why do we not do another call the render here?\n                    //\n                    // Because that would expose DOS holes. E.g.\n                    // I create an assignment called \"{{fish\" which\n                    // would get inserted in the template in the first pass\n                    // and cause the template to die on the second pass (unbalanced).\n                    html = this.treatStringsInContent(html, strings);\n                    js = this.treatStringsInContent(js, strings);\n                    return {html, js};\n                }.bind(this));\n            }\n\n            return {html, js};\n        }.bind(this))\n        .then(({html, js}) => {\n            // This has to happen after the strings replacement because you can\n            // use the string helper in content for the user date helper.\n            if (this.requiredDates.length > 0) {\n                return UserDate.get(this.requiredDates).then(function (dates) {\n                    html = this.treatDatesInContent(html, dates);\n                    js = this.treatDatesInContent(js, dates);\n                    return {html, js};\n                }.bind(this));\n            }\n\n            return {html, js};\n        })\n        .then(({html, js}) => {\n            pendingPromise.resolve();\n            return {html, js};\n        });\n    }\n\n    /**\n     * Load a template and call doRender on it.\n     *\n     * @method render\n     * @private\n     * @param {string} templateName - should consist of the component and the name of the template like this:\n     *                              core/menu (lib/templates/menu.mustache) or\n     *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n     * @param {Object} context - Could be array, string or simple value for the context of the template.\n     * @param {string} themeName - Name of the current theme.\n     * @returns {Promise<object>} Native promise object resolved when the template has been rendered.}\n     */\n    async render (templateName, context, themeName = config.theme) {\n        this.currentThemeName = themeName;\n\n        // Preload the module to do the icon rendering based on the theme iconsystem.\n        await this.setupIconSystem();\n\n        const templateSource = Renderer.getLoader().cachePartials(templateName, themeName);\n        return this.doRender(templateSource, context, themeName);\n    }\n}\n"],"names":["getNormalisedComponent","component","Renderer","constructor","requiredStrings","requiredJS","requiredDates","currentThemeName","loader","this","key","title","setupIconSystem","template","getLoader","getTemplate","iconSystem","getTemplateName","renderIcon","System","config","iconsystemmodule","default","instance","IconSystem","Error","init","context","sectionText","helper","parts","split","text","length","shift","trim","join","currentTheme","replace","jsHelper","push","stringHelper","param","indexOf","parsedParam","JSON","parse","err","window","console","warn","message","index","cleanStringHelper","quoteHelper","content","stringify","shortenTextHelper","match","Truncate","truncate","words","ellipsis","userDateHelper","timestamp","format","addHelperFunction","helperFunction","originalHelpers","disallowedNestedHelpers","reduce","carry","name","hasOwnProperty","forEach","helperName","result","apply","bind","addHelpers","themeName","uniqid","uniqInstances","str","cleanstr","pix","pixHelper","js","quote","shortentext","userdate","globals","getJS","treatStringsInContent","strings","treated","strIndex","walker","char","strFinal","isClean","pattern","search","substring","substr","parseInt","Log","debug","mustache","escape","treatDatesInContentfunction","dates","date","re","RegExp","doRender","templateSource","iconTemplate","pendingPromise","Pending","then","source","render","partialName","partialHelper","html","get_strings","map","_ref2","UserDate","get","treatDatesInContent","_ref3","resolve","templateName","theme","cachePartials","Loader"],"mappings":"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"}