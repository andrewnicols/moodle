define ("core/local/reactive/debug",["exports","core/local/reactive/reactive","core/log"],function(_exports,_reactive,_log){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.initDebug=void 0;_reactive=_interopRequireDefault(_reactive);_log=_interopRequireDefault(_log);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const reactiveInstances={},reactiveDebuggers={};class Debug extends _reactive.default{setInitialState(stateData){super.setInitialState(stateData);_log.default.debug("Debug module \"M.reactive\" loaded.")}get list(){return JSON.parse(JSON.stringify(this.state.reactives))}registerNewInstance(instance){var _instance$name;let name=null!==(_instance$name=instance.name)&&void 0!==_instance$name?_instance$name:"instance".concat(this.state.reactives.length);name=name.replace(/\W/g,"");_log.default.debug("Registering new reactive instance \"M.reactive.".concat(name,"\""));reactiveInstances[name]=instance;reactiveDebuggers[name]=new DebugInstance(reactiveInstances[name]);this.dispatch("putInstance",name,instance);const refreshMethod=()=>{this.dispatch("putInstance",name,instance)};instance.target.addEventListener("readmode:on",refreshMethod);instance.target.addEventListener("readmode:off",refreshMethod);instance.target.addEventListener("registerComponent:success",refreshMethod);instance.target.addEventListener("transaction:end",refreshMethod);const storeTransaction=_ref=>{let{detail}=_ref;const changes=null===detail||void 0===detail?void 0:detail.changes;this.dispatch("lastTransaction",name,changes)};instance.target.addEventListener("transaction:start",storeTransaction)}debug(name){return reactiveDebuggers[name]}}class Mutations{putInstance(stateManager,name,instance){const state=stateManager.state;stateManager.setReadOnly(!1);if(state.reactives.has(name)){state.reactives.get(name).countcomponents=instance.components.length;state.reactives.get(name).readOnly=instance.stateManager.readonly;state.reactives.get(name).modified=new Date().getTime()}else{state.reactives.add({id:name,countcomponents:instance.components.length,readOnly:instance.stateManager.readonly,lastChanges:[],modified:new Date().getTime()})}stateManager.setReadOnly(!0)}lastTransaction(stateManager,name,changes){if(!changes||0===changes.length){return}const state=stateManager.state,lastChanges=["transaction:start"];changes.forEach(change=>{lastChanges.push(change.eventName)});lastChanges.push("transaction:end");stateManager.setReadOnly(!1);state.reactives.get(name).lastChanges=lastChanges;stateManager.setReadOnly(!0)}}class DebugInstance{constructor(instance){this.instance=instance;if(instance._reactiveDebugData===void 0){instance._reactiveDebugData={highlighted:!1}}}set readOnly(value){this.instance.stateManager.setReadOnly(value)}get readOnly(){return this.instance.stateManager.readonly}get state(){return this.instance.state}set highlight(value){this.instance._reactiveDebugData.highlighted=value;this.instance.components.forEach(_ref2=>{let{element}=_ref2;const border=value?"thick solid #0000FF":"";element.style.border=border})}get highlight(){return this.instance._reactiveDebugData.highlighted}get components(){return[...this.instance.components]}get changes(){const result=[];this.instance.stateManager.eventsToPublish.forEach(element=>{result.push(element.eventName)});return result}async dispatch(){this.instance.dispatch(...arguments)}get elements(){const result=[];this.instance.components.forEach(_ref3=>{let{element}=_ref3;result.push(element)});return result}get stateData(){return JSON.parse(JSON.stringify(this.state))}processUpdates(updates){this.instance.stateManager.processUpdates(updates)}}const stateChangedEventName="core_reactive_debug:stateChanged";function dispatchStateChangedEvent(detail,target){if(target===void 0){target=document}target.dispatchEvent(new CustomEvent(stateChangedEventName,{bubbles:!0,detail:detail}))}_exports.initDebug=()=>{const debug=new Debug({name:"CoreReactiveDebug",eventName:stateChangedEventName,eventDispatch:dispatchStateChangedEvent,mutations:new Mutations,state:{reactives:[]}});reactiveDebuggers.registerNewInstance=debug.registerNewInstance.bind(debug);return{debug,debuggers:reactiveDebuggers}}});
//# sourceMappingURL=debug.min.js.map
