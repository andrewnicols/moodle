{"version":3,"sources":["../../../src/local/reactive/debugpanel.js"],"names":["target","selectors","element","document","getElementById","debug","remove","GlobalDebugPanel","reactive","DebugInstanceSubpanel","BaseComponent","create","name","LOADERS","SUBPANEL","LOG","stateReady","state","reactives","size","getElement","innerHTML","forEach","instance","_createLoader","loaders","btn","createElement","id","dataset","appendChild","addEventListener","_openPanel","data","renderComponent","error","log","NAME","CLOSE","READMODE","HIGHLIGHT","STATE","CLEAN","PIN","SAVE","INVALID","controller","M","draggable","relativeDrag","strings","savewarning","dragdrop","DragDrop","highlight","_toggleButtonText","_toggleEditMode","_cleanAreas","_togglePin","disabled","_checkJSON","_saveState","_refreshState","destroy","unregister","getWatchers","watch","handler","_refreshLog","_refreshReadOnly","list","lastChanges","logContent","join","value","scrollTop","scrollHeight","JSON","stringify","readonly","readOnly","alt","invalid","save","edited","currentStateData","stateData","style","color","newState","parse","result","_generateStateUpdates","message","updates","processUpdates","newStateData","ids","key","newValue","Object","entries","Array","isArray","Error","push","action","fields","index","valueOf","oldValue","deleteField","deleteEntry","getDraggableData","dragEnd","dropdata","event","top","newFixedTop","left","newFixedLeft","setDraggable","_unpin","_pin","pageCenterY","window","innerHeight","pageCenterX","innerWidth","position","resize","overflow","height","width","assign","prop","removeProperty"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reactive module debug panel.\n *\n * This module contains all the UI components for the reactive debug tools.\n * Those tools are only available if the debug is enables and could be used\n * from the footer.\n *\n * @module     core/local/reactive/debugpanel\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent, DragDrop, debug} from 'core/reactive';\nimport log from 'core/log';\nimport {debounce} from 'core/utils';\n\n/**\n * Init the main reactive panel.\n *\n * @param {element|string} target the DOM main element or its ID\n * @param {object} selectors optional css selector overrides\n */\nexport const init = (target, selectors) => {\n    const element = document.getElementById(target);\n    // Check if the debug reactive module is available.\n    if (debug === undefined) {\n        element.remove();\n        return;\n    }\n    // Create the main component.\n    new GlobalDebugPanel({\n        element,\n        reactive: debug,\n        selectors,\n    });\n};\n\n/**\n * Init an instance reactive subpanel.\n *\n * @param {element|string} target the DOM main element or its ID\n * @param {object} selectors optional css selector overrides\n */\nexport const initsubpanel = (target, selectors) => {\n    const element = document.getElementById(target);\n    // Check if the debug reactive module is available.\n    if (debug === undefined) {\n        element.remove();\n        return;\n    }\n    // Create the main component.\n    new DebugInstanceSubpanel({\n        element,\n        reactive: debug,\n        selectors,\n    });\n};\n\n/**\n * Component for the main reactive dev panel.\n *\n * This component shows the list of reactive instances and handle the buttons\n * to open a specific instance panel.\n */\nclass GlobalDebugPanel extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'GlobalDebugPanel';\n        // Default query selectors.\n        this.selectors = {\n            LOADERS: `[data-for='loaders']`,\n            SUBPANEL: `[data-for='subpanel']`,\n            LOG: `[data-for='log']`,\n        };\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady(state) {\n        if (state.reactives.size > 0) {\n            this.getElement(this.selectors.LOADERS).innerHTML = '';\n        }\n        // Generate loading buttons.\n        state.reactives.forEach(\n            instance => {\n                this._createLoader(instance);\n            }\n        );\n        // Remove loading wheel.\n        this.getElement(this.selectors.SUBPANEL).innerHTML = '';\n    }\n\n    /**\n     * Create a debug panel button for a specific reactive instance.\n     *\n     * @param {object} instance hte instance data\n     */\n    _createLoader(instance) {\n        const loaders = this.getElement(this.selectors.LOADERS);\n        const btn = document.createElement(\"button\");\n        btn.innerHTML = instance.id;\n        btn.dataset.id = instance.id;\n        loaders.appendChild(btn);\n        // Add click event.\n        this.addEventListener(btn, 'click', () => this._openPanel(btn, instance));\n    }\n\n    /**\n     * Open a debug panel.\n     *\n     * @param {Element} btn the button element\n     * @param {object} instance the instance data\n     */\n    async _openPanel(btn, instance) {\n        try {\n            const target = this.getElement(this.selectors.SUBPANEL);\n            const data = {...instance};\n            await this.renderComponent(target, 'core/local/reactive/debuginstancepanel', data);\n        } catch (error) {\n            log.error('Cannot load reactive debug subpanel');\n            throw error;\n        }\n    }\n}\n\n/**\n * Component for the main reactive dev panel.\n *\n * This component shows the list of reactive instances and handle the buttons\n * to open a specific instance panel.\n */\nclass DebugInstanceSubpanel extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'DebugInstanceSubpanel';\n        // Default query selectors.\n        this.selectors = {\n            NAME: `[data-for='name']`,\n            CLOSE: `[data-for='close']`,\n            READMODE: `[data-for='readmode']`,\n            HIGHLIGHT: `[data-for='highlight']`,\n            LOG: `[data-for='log']`,\n            STATE: `[data-for='state']`,\n            CLEAN: `[data-for='clean']`,\n            PIN: `[data-for='pin']`,\n            SAVE: `[data-for='save']`,\n            INVALID: `[data-for='invalid']`,\n        };\n        this.id = this.element.dataset.id;\n        this.controller = M.reactive[this.id];\n\n        // The component is created always pinned.\n        this.draggable = false;\n        // We want the element to be dragged like modal.\n        this.relativeDrag = true;\n        // Save warning (will be loaded when state is ready.\n        this.strings = {\n            savewarning: '',\n        };\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     */\n    stateReady() {\n        // Enable drag and drop.\n        this.dragdrop = new DragDrop(this);\n\n        // Close button.\n        this.addEventListener(\n            this.getElement(this.selectors.CLOSE),\n            'click',\n            this.remove\n        );\n        // Highlight button.\n        if (this.controller.highlight) {\n            this._toggleButtonText(this.getElement(this.selectors.HIGHLIGHT));\n        }\n        this.addEventListener(\n            this.getElement(this.selectors.HIGHLIGHT),\n            'click',\n            () => {\n                this.controller.highlight = !this.controller.highlight;\n                this._toggleButtonText(this.getElement(this.selectors.HIGHLIGHT));\n            }\n        );\n        // Edit mode button.\n        this.addEventListener(\n            this.getElement(this.selectors.READMODE),\n            'click',\n            this._toggleEditMode\n        );\n        // Clean log and state.\n        this.addEventListener(\n            this.getElement(this.selectors.CLEAN),\n            'click',\n            this._cleanAreas\n        );\n        // Unpin panel butotn.\n        this.addEventListener(\n            this.getElement(this.selectors.PIN),\n            'click',\n            this._togglePin\n        );\n        // Save button, state format error message and state textarea.\n        this.getElement(this.selectors.SAVE).disabled = true;\n\n        this.addEventListener(\n            this.getElement(this.selectors.STATE),\n            'keyup',\n            debounce(this._checkJSON, 500)\n        );\n\n        this.addEventListener(\n            this.getElement(this.selectors.SAVE),\n            'click',\n            this._saveState\n        );\n        // Save the default save warning message.\n        this.strings.savewarning = this.getElement(this.selectors.INVALID)?.innerHTML ?? '';\n        // Add current state.\n        this._refreshState();\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `reactives[${this.id}].lastChanges:updated`, handler: this._refreshLog},\n            {watch: `reactives[${this.id}].modified:updated`, handler: this._refreshState},\n            {watch: `reactives[${this.id}].readOnly:updated`, handler: this._refreshReadOnly},\n        ];\n    }\n\n    /**\n     * Wtacher method to refresh the log panel.\n     *\n     * @param {object} args\n     * @param {HTMLElement} args.element\n     */\n    _refreshLog({element}) {\n        const list = element?.lastChanges ?? [];\n\n        const logContent = list.join(\"\\n\");\n        // Append last log.\n        const target = this.getElement(this.selectors.LOG);\n        target.value += `\\n\\n= Transaction =\\n ${logContent}`;\n        target.scrollTop = target.scrollHeight;\n    }\n\n    /**\n     * Listener method to clean the log area.\n     */\n    _cleanAreas() {\n        let target = this.getElement(this.selectors.LOG);\n        target.value = '';\n\n        this._refreshState();\n    }\n\n    /**\n     * Watcher to refresh the state information.\n     */\n    _refreshState() {\n        const target = this.getElement(this.selectors.STATE);\n        target.value = JSON.stringify(this.controller.state, null, 4);\n    }\n\n    /**\n     * Watcher to update the read only information.\n     */\n    _refreshReadOnly() {\n        // Toggle the read mode button.\n        const target = this.getElement(this.selectors.READMODE);\n        if (target.dataset.readonly === undefined) {\n            target.dataset.readonly = target.innerHTML;\n        }\n        if (this.controller.readOnly) {\n            target.innerHTML = target.dataset.readonly;\n        } else {\n            target.innerHTML = target.dataset.alt;\n        }\n    }\n\n    /**\n     * Listener to toggle the edit mode of the component.\n     */\n    _toggleEditMode() {\n        this.controller.readOnly = !this.controller.readOnly;\n    }\n\n    /**\n     * Check that the edited state JSON is valid.\n     *\n     * Not all valid JSON are suitable for transforming the state. For example,\n     * the first level attributes cannot change the type.\n     *\n     * @return {undefined|array} Array of state updates.\n     */\n    _checkJSON() {\n        const invalid = this.getElement(this.selectors.INVALID);\n        const save = this.getElement(this.selectors.SAVE);\n\n        const edited = this.getElement(this.selectors.STATE).value;\n\n        const currentStateData = this.controller.stateData;\n\n        // Check if the json is tha same as state.\n        if (edited == JSON.stringify(this.controller.state, null, 4)) {\n            invalid.style.color = '';\n            invalid.innerHTML = '';\n            save.disabled = true;\n            return undefined;\n        }\n\n        // Check if the json format is valid.\n        try {\n            const newState = JSON.parse(edited);\n            // Check the first level did not change types.\n            const result = this._generateStateUpdates(currentStateData, newState);\n            // Enable save button.\n            invalid.style.color = '';\n            invalid.innerHTML = this.strings.savewarning;\n            save.disabled = false;\n            return result;\n        } catch (error) {\n            invalid.style.color = 'red';\n            invalid.innerHTML = error.message ?? 'Invalid JSON sctructure';\n            save.disabled = true;\n            return undefined;\n        }\n    }\n\n    /**\n     * Listener to save the current edited state into the real state.\n     */\n    _saveState() {\n        const updates = this._checkJSON();\n        if (!updates) {\n            return;\n        }\n        // Sent the updates to the state manager.\n        this.controller.processUpdates(updates);\n    }\n\n    /**\n     * Check that the edited state JSON is valid.\n     *\n     * Not all valid JSON are suitable for transforming the state. For example,\n     * the first level attributes cannot change the type. This method do a two\n     * steps comparison between the current state data and the new state data.\n     *\n     * A reactive state cannot be overridden like any other variable. To keep\n     * the watchers updated is necessary to transform the current state into\n     * the new one. As a result, this method generates all the necessary state\n     * updates to convert the state into the new state.\n     *\n     * @param {object} currentStateData\n     * @param {object} newStateData\n     * @return {array} Array of state updates.\n     * @throws {Error} is the structure is not compatible\n     */\n    _generateStateUpdates(currentStateData, newStateData) {\n\n        const updates = [];\n\n        const ids = {};\n\n        // Step 1: Add all overrides newStateData.\n        for (const [key, newValue] of Object.entries(newStateData)) {\n            // Check is it is new.\n            if (Array.isArray(newValue)) {\n                ids[key] = {};\n                newValue.forEach(element => {\n                    if (element.id === undefined) {\n                        throw Error(`Array ${key} element without id attribute`);\n                    }\n                    updates.push({\n                        name: key,\n                        action: 'override',\n                        fields: element,\n                    });\n                    const index = String(element.id).valueOf();\n                    ids[key][index] = true;\n                });\n            } else {\n                updates.push({\n                    name: key,\n                    action: 'override',\n                    fields: newValue,\n                });\n            }\n        }\n        // Step 2: delete unnecesary data from currentStateData.\n        for (const [key, oldValue] of Object.entries(currentStateData)) {\n            let deleteField = false;\n            // Check if the attribute is still there.\n            if (newStateData[key] === undefined) {\n                deleteField = true;\n            }\n            if (Array.isArray(oldValue)) {\n                if (!deleteField && ids[key] === undefined) {\n                    throw Error(`Array ${key} cannot change to object.`);\n                }\n                oldValue.forEach(element => {\n                    const index = String(element.id).valueOf();\n                    let deleteEntry = deleteField;\n                    // Check if the id is there.\n                    if (!deleteEntry && ids[key][index] === undefined) {\n                        deleteEntry = true;\n                    }\n                    if (deleteEntry) {\n                        updates.push({\n                            name: key,\n                            action: 'delete',\n                            fields: element,\n                        });\n                    }\n                });\n            } else {\n                if (!deleteField && ids[key] !== undefined) {\n                    throw Error(`Object ${key} cannot change to array.`);\n                }\n                if (deleteField) {\n                    updates.push({\n                        name: key,\n                        action: 'delete',\n                        fields: oldValue,\n                    });\n                }\n            }\n        }\n        // Delete all elements without action.\n        return updates;\n    }\n\n    // Drag and drop methods.\n\n    /**\n     * Get the draggable data of this component.\n     *\n     * @returns {Object} exported course module drop data\n     */\n    getDraggableData() {\n        return this.draggable;\n    }\n\n    /**\n     * The element drop end hook.\n     *\n     * @param {Object} dropdata the dropdata\n     * @param {Event} event the dropdata\n     */\n    dragEnd(dropdata, event) {\n        this.element.style.top = `${event.newFixedTop}px`;\n        this.element.style.left = `${event.newFixedLeft}px`;\n    }\n\n    /**\n     * Pin and unpin the panel.\n     */\n    _togglePin() {\n        this.draggable = !this.draggable;\n        this.dragdrop.setDraggable(this.draggable);\n        if (this.draggable) {\n            this._unpin();\n        } else {\n            this._pin();\n        }\n    }\n\n    /**\n     * Unpin the panel form the footer.\n     */\n    _unpin() {\n        // Find the initial spot.\n        const pageCenterY = window.innerHeight / 2;\n        const pageCenterX = window.innerWidth / 2;\n        // Put the element in the middle of the screen\n        const style = {\n            position: 'fixed',\n            resize: 'both',\n            overflow: 'auto',\n            height: '400px',\n            width: '400px',\n            top: `${pageCenterY - 200}px`,\n            left: `${pageCenterX - 200}px`,\n        };\n        Object.assign(this.element.style, style);\n        // Small also the text areas.\n        this.getElement(this.selectors.STATE).style.height = '50px';\n        this.getElement(this.selectors.LOG).style.height = '50px';\n\n        this._toggleButtonText(this.getElement(this.selectors.PIN));\n    }\n\n    /**\n     * Pin the panel into the footer.\n     */\n    _pin() {\n        const props = [\n            'position',\n            'resize',\n            'overflow',\n            'top',\n            'left',\n            'height',\n            'width',\n        ];\n        props.forEach(\n            prop => this.element.style.removeProperty(prop)\n        );\n        this._toggleButtonText(this.getElement(this.selectors.PIN));\n    }\n\n    /**\n     * Toogle the button text with the data-alt value.\n     *\n     * @param {Element} element the button element\n     */\n    _toggleButtonText(element) {\n        [element.innerHTML, element.dataset.alt] = [element.dataset.alt, element.innerHTML];\n    }\n\n}\n"],"file":"debugpanel.min.js"}