{"version":3,"sources":["../../../src/local/reactive/debugpanel.js"],"names":["init","target","selectors","element","document","getElementById","debug","remove","GlobalDebugPanel","reactive","initsubpanel","DebugInstanceSubpanel","name","LOADERS","SUBPANEL","LOG","state","reactives","size","getElement","innerHTML","forEach","instance","_createLoader","loaders","btn","createElement","id","dataset","appendChild","addEventListener","_openPanel","data","renderComponent","log","error","BaseComponent","NAME","CLOSE","READMODE","HIGHLIGHT","STATE","CLEAN","PIN","SAVE","INVALID","controller","M","draggable","relativeDrag","strings","savewarning","dragdrop","DragDrop","highlight","_toggleButtonText","_toggleEditMode","_cleanAreas","_togglePin","disabled","_checkJSON","_saveState","_refreshState","unregister","watch","handler","_refreshLog","_refreshReadOnly","list","lastChanges","logContent","join","value","scrollTop","scrollHeight","JSON","stringify","readonly","readOnly","alt","invalid","save","edited","currentStateData","stateData","style","color","newState","parse","result","_generateStateUpdates","message","updates","processUpdates","newStateData","ids","key","newValue","Array","isArray","Error","push","action","fields","index","valueOf","Object","entries","oldValue","deleteField","deleteEntry","dropdata","event","top","newFixedTop","left","newFixedLeft","setDraggable","_unpin","_pin","pageCenterY","window","innerHeight","pageCenterX","innerWidth","position","resize","overflow","height","width","assign","prop","removeProperty"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Reactive module debug panel.\n *\n * This module contains all the UI components for the reactive debug tools.\n * Those tools are only available if the debug is enables and could be used\n * from the footer.\n *\n * @module     core/local/reactive/debugpanel\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {BaseComponent, DragDrop, debug} from 'core/reactive';\nimport log from 'core/log';\nimport {debounce} from 'core/utils';\n\n/**\n * Init the main reactive panel.\n *\n * @param {element|string} target the DOM main element or its ID\n * @param {object} selectors optional css selector overrides\n */\nexport const init = (target, selectors) => {\n    const element = document.getElementById(target);\n    // Check if the debug reactive module is available.\n    if (debug === undefined) {\n        element.remove();\n        return;\n    }\n    // Create the main component.\n    new GlobalDebugPanel({\n        element,\n        reactive: debug,\n        selectors,\n    });\n};\n\n/**\n * Init an instance reactive subpanel.\n *\n * @param {element|string} target the DOM main element or its ID\n * @param {object} selectors optional css selector overrides\n */\nexport const initsubpanel = (target, selectors) => {\n    const element = document.getElementById(target);\n    // Check if the debug reactive module is available.\n    if (debug === undefined) {\n        element.remove();\n        return;\n    }\n    // Create the main component.\n    new DebugInstanceSubpanel({\n        element,\n        reactive: debug,\n        selectors,\n    });\n};\n\n/**\n * Component for the main reactive dev panel.\n *\n * This component shows the list of reactive instances and handle the buttons\n * to open a specific instance panel.\n */\nclass GlobalDebugPanel extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'GlobalDebugPanel';\n        // Default query selectors.\n        this.selectors = {\n            LOADERS: `[data-for='loaders']`,\n            SUBPANEL: `[data-for='subpanel']`,\n            LOG: `[data-for='log']`,\n        };\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {object} state the initial state\n     */\n    stateReady(state) {\n        if (state.reactives.size > 0) {\n            this.getElement(this.selectors.LOADERS).innerHTML = '';\n        }\n        // Generate loading buttons.\n        state.reactives.forEach(\n            instance => {\n                this._createLoader(instance);\n            }\n        );\n        // Remove loading wheel.\n        this.getElement(this.selectors.SUBPANEL).innerHTML = '';\n    }\n\n    /**\n     * Create a debug panel button for a specific reactive instance.\n     *\n     * @param {object} instance hte instance data\n     */\n    _createLoader(instance) {\n        const loaders = this.getElement(this.selectors.LOADERS);\n        const btn = document.createElement(\"button\");\n        btn.innerHTML = instance.id;\n        btn.dataset.id = instance.id;\n        loaders.appendChild(btn);\n        // Add click event.\n        this.addEventListener(btn, 'click', () => this._openPanel(btn, instance));\n    }\n\n    /**\n     * Open a debug panel.\n     *\n     * @param {Element} btn the button element\n     * @param {object} instance the instance data\n     */\n    async _openPanel(btn, instance) {\n        try {\n            const target = this.getElement(this.selectors.SUBPANEL);\n            const data = {...instance};\n            await this.renderComponent(target, 'core/local/reactive/debuginstancepanel', data);\n        } catch (error) {\n            log.error('Cannot load reactive debug subpanel');\n            throw error;\n        }\n    }\n}\n\n/**\n * Component for the main reactive dev panel.\n *\n * This component shows the list of reactive instances and handle the buttons\n * to open a specific instance panel.\n */\nclass DebugInstanceSubpanel extends BaseComponent {\n\n    /**\n     * Constructor hook.\n     */\n    create() {\n        // Optional component name for debugging.\n        this.name = 'DebugInstanceSubpanel';\n        // Default query selectors.\n        this.selectors = {\n            NAME: `[data-for='name']`,\n            CLOSE: `[data-for='close']`,\n            READMODE: `[data-for='readmode']`,\n            HIGHLIGHT: `[data-for='highlight']`,\n            LOG: `[data-for='log']`,\n            STATE: `[data-for='state']`,\n            CLEAN: `[data-for='clean']`,\n            PIN: `[data-for='pin']`,\n            SAVE: `[data-for='save']`,\n            INVALID: `[data-for='invalid']`,\n        };\n        this.id = this.element.dataset.id;\n        this.controller = M.reactive[this.id];\n\n        // The component is created always pinned.\n        this.draggable = false;\n        // We want the element to be dragged like modal.\n        this.relativeDrag = true;\n        // Save warning (will be loaded when state is ready.\n        this.strings = {\n            savewarning: '',\n        };\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     */\n    stateReady() {\n        // Enable drag and drop.\n        this.dragdrop = new DragDrop(this);\n\n        // Close button.\n        this.addEventListener(\n            this.getElement(this.selectors.CLOSE),\n            'click',\n            this.remove\n        );\n        // Highlight button.\n        if (this.controller.highlight) {\n            this._toggleButtonText(this.getElement(this.selectors.HIGHLIGHT));\n        }\n        this.addEventListener(\n            this.getElement(this.selectors.HIGHLIGHT),\n            'click',\n            () => {\n                this.controller.highlight = !this.controller.highlight;\n                this._toggleButtonText(this.getElement(this.selectors.HIGHLIGHT));\n            }\n        );\n        // Edit mode button.\n        this.addEventListener(\n            this.getElement(this.selectors.READMODE),\n            'click',\n            this._toggleEditMode\n        );\n        // Clean log and state.\n        this.addEventListener(\n            this.getElement(this.selectors.CLEAN),\n            'click',\n            this._cleanAreas\n        );\n        // Unpin panel butotn.\n        this.addEventListener(\n            this.getElement(this.selectors.PIN),\n            'click',\n            this._togglePin\n        );\n        // Save button, state format error message and state textarea.\n        this.getElement(this.selectors.SAVE).disabled = true;\n\n        this.addEventListener(\n            this.getElement(this.selectors.STATE),\n            'keyup',\n            debounce(this._checkJSON, 500)\n        );\n\n        this.addEventListener(\n            this.getElement(this.selectors.SAVE),\n            'click',\n            this._saveState\n        );\n        // Save the default save warning message.\n        this.strings.savewarning = this.getElement(this.selectors.INVALID)?.innerHTML ?? '';\n        // Add current state.\n        this._refreshState();\n    }\n\n    /**\n     * Remove all subcomponents dependencies.\n     */\n    destroy() {\n        if (this.dragdrop !== undefined) {\n            this.dragdrop.unregister();\n        }\n    }\n\n    /**\n     * Component watchers.\n     *\n     * @returns {Array} of watchers\n     */\n    getWatchers() {\n        return [\n            {watch: `reactives[${this.id}].lastChanges:updated`, handler: this._refreshLog},\n            {watch: `reactives[${this.id}].modified:updated`, handler: this._refreshState},\n            {watch: `reactives[${this.id}].readOnly:updated`, handler: this._refreshReadOnly},\n        ];\n    }\n\n    /**\n     * Wtacher method to refresh the log panel.\n     *\n     * @param {object} args\n     * @param {HTMLElement} args.element\n     */\n    _refreshLog({element}) {\n        const list = element?.lastChanges ?? [];\n\n        const logContent = list.join(\"\\n\");\n        // Append last log.\n        const target = this.getElement(this.selectors.LOG);\n        target.value += `\\n\\n= Transaction =\\n ${logContent}`;\n        target.scrollTop = target.scrollHeight;\n    }\n\n    /**\n     * Listener method to clean the log area.\n     */\n    _cleanAreas() {\n        let target = this.getElement(this.selectors.LOG);\n        target.value = '';\n\n        this._refreshState();\n    }\n\n    /**\n     * Watcher to refresh the state information.\n     */\n    _refreshState() {\n        const target = this.getElement(this.selectors.STATE);\n        target.value = JSON.stringify(this.controller.state, null, 4);\n    }\n\n    /**\n     * Watcher to update the read only information.\n     */\n    _refreshReadOnly() {\n        // Toggle the read mode button.\n        const target = this.getElement(this.selectors.READMODE);\n        if (target.dataset.readonly === undefined) {\n            target.dataset.readonly = target.innerHTML;\n        }\n        if (this.controller.readOnly) {\n            target.innerHTML = target.dataset.readonly;\n        } else {\n            target.innerHTML = target.dataset.alt;\n        }\n    }\n\n    /**\n     * Listener to toggle the edit mode of the component.\n     */\n    _toggleEditMode() {\n        this.controller.readOnly = !this.controller.readOnly;\n    }\n\n    /**\n     * Check that the edited state JSON is valid.\n     *\n     * Not all valid JSON are suitable for transforming the state. For example,\n     * the first level attributes cannot change the type.\n     *\n     * @return {undefined|array} Array of state updates.\n     */\n    _checkJSON() {\n        const invalid = this.getElement(this.selectors.INVALID);\n        const save = this.getElement(this.selectors.SAVE);\n\n        const edited = this.getElement(this.selectors.STATE).value;\n\n        const currentStateData = this.controller.stateData;\n\n        // Check if the json is tha same as state.\n        if (edited == JSON.stringify(this.controller.state, null, 4)) {\n            invalid.style.color = '';\n            invalid.innerHTML = '';\n            save.disabled = true;\n            return undefined;\n        }\n\n        // Check if the json format is valid.\n        try {\n            const newState = JSON.parse(edited);\n            // Check the first level did not change types.\n            const result = this._generateStateUpdates(currentStateData, newState);\n            // Enable save button.\n            invalid.style.color = '';\n            invalid.innerHTML = this.strings.savewarning;\n            save.disabled = false;\n            return result;\n        } catch (error) {\n            invalid.style.color = 'red';\n            invalid.innerHTML = error.message ?? 'Invalid JSON sctructure';\n            save.disabled = true;\n            return undefined;\n        }\n    }\n\n    /**\n     * Listener to save the current edited state into the real state.\n     */\n    _saveState() {\n        const updates = this._checkJSON();\n        if (!updates) {\n            return;\n        }\n        // Sent the updates to the state manager.\n        this.controller.processUpdates(updates);\n    }\n\n    /**\n     * Check that the edited state JSON is valid.\n     *\n     * Not all valid JSON are suitable for transforming the state. For example,\n     * the first level attributes cannot change the type. This method do a two\n     * steps comparison between the current state data and the new state data.\n     *\n     * A reactive state cannot be overridden like any other variable. To keep\n     * the watchers updated is necessary to transform the current state into\n     * the new one. As a result, this method generates all the necessary state\n     * updates to convert the state into the new state.\n     *\n     * @param {object} currentStateData\n     * @param {object} newStateData\n     * @return {array} Array of state updates.\n     * @throws {Error} is the structure is not compatible\n     */\n    _generateStateUpdates(currentStateData, newStateData) {\n\n        const updates = [];\n\n        const ids = {};\n\n        // Step 1: Add all overrides newStateData.\n        for (const [key, newValue] of Object.entries(newStateData)) {\n            // Check is it is new.\n            if (Array.isArray(newValue)) {\n                ids[key] = {};\n                newValue.forEach(element => {\n                    if (element.id === undefined) {\n                        throw Error(`Array ${key} element without id attribute`);\n                    }\n                    updates.push({\n                        name: key,\n                        action: 'override',\n                        fields: element,\n                    });\n                    const index = String(element.id).valueOf();\n                    ids[key][index] = true;\n                });\n            } else {\n                updates.push({\n                    name: key,\n                    action: 'override',\n                    fields: newValue,\n                });\n            }\n        }\n        // Step 2: delete unnecesary data from currentStateData.\n        for (const [key, oldValue] of Object.entries(currentStateData)) {\n            let deleteField = false;\n            // Check if the attribute is still there.\n            if (newStateData[key] === undefined) {\n                deleteField = true;\n            }\n            if (Array.isArray(oldValue)) {\n                if (!deleteField && ids[key] === undefined) {\n                    throw Error(`Array ${key} cannot change to object.`);\n                }\n                oldValue.forEach(element => {\n                    const index = String(element.id).valueOf();\n                    let deleteEntry = deleteField;\n                    // Check if the id is there.\n                    if (!deleteEntry && ids[key][index] === undefined) {\n                        deleteEntry = true;\n                    }\n                    if (deleteEntry) {\n                        updates.push({\n                            name: key,\n                            action: 'delete',\n                            fields: element,\n                        });\n                    }\n                });\n            } else {\n                if (!deleteField && ids[key] !== undefined) {\n                    throw Error(`Object ${key} cannot change to array.`);\n                }\n                if (deleteField) {\n                    updates.push({\n                        name: key,\n                        action: 'delete',\n                        fields: oldValue,\n                    });\n                }\n            }\n        }\n        // Delete all elements without action.\n        return updates;\n    }\n\n    // Drag and drop methods.\n\n    /**\n     * Get the draggable data of this component.\n     *\n     * @returns {Object} exported course module drop data\n     */\n    getDraggableData() {\n        return this.draggable;\n    }\n\n    /**\n     * The element drop end hook.\n     *\n     * @param {Object} dropdata the dropdata\n     * @param {Event} event the dropdata\n     */\n    dragEnd(dropdata, event) {\n        this.element.style.top = `${event.newFixedTop}px`;\n        this.element.style.left = `${event.newFixedLeft}px`;\n    }\n\n    /**\n     * Pin and unpin the panel.\n     */\n    _togglePin() {\n        this.draggable = !this.draggable;\n        this.dragdrop.setDraggable(this.draggable);\n        if (this.draggable) {\n            this._unpin();\n        } else {\n            this._pin();\n        }\n    }\n\n    /**\n     * Unpin the panel form the footer.\n     */\n    _unpin() {\n        // Find the initial spot.\n        const pageCenterY = window.innerHeight / 2;\n        const pageCenterX = window.innerWidth / 2;\n        // Put the element in the middle of the screen\n        const style = {\n            position: 'fixed',\n            resize: 'both',\n            overflow: 'auto',\n            height: '400px',\n            width: '400px',\n            top: `${pageCenterY - 200}px`,\n            left: `${pageCenterX - 200}px`,\n        };\n        Object.assign(this.element.style, style);\n        // Small also the text areas.\n        this.getElement(this.selectors.STATE).style.height = '50px';\n        this.getElement(this.selectors.LOG).style.height = '50px';\n\n        this._toggleButtonText(this.getElement(this.selectors.PIN));\n    }\n\n    /**\n     * Pin the panel into the footer.\n     */\n    _pin() {\n        const props = [\n            'position',\n            'resize',\n            'overflow',\n            'top',\n            'left',\n            'height',\n            'width',\n        ];\n        props.forEach(\n            prop => this.element.style.removeProperty(prop)\n        );\n        this._toggleButtonText(this.getElement(this.selectors.PIN));\n    }\n\n    /**\n     * Toogle the button text with the data-alt value.\n     *\n     * @param {Element} element the button element\n     */\n    _toggleButtonText(element) {\n        [element.innerHTML, element.dataset.alt] = [element.dataset.alt, element.innerHTML];\n    }\n\n}\n"],"file":"debugpanel.min.js"}