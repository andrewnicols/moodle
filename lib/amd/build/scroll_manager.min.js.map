{"version":3,"sources":["../src/scroll_manager.js"],"names":["scrollingElement","isScrollable","element","hasScrollableContent","scrollHeight","clientHeight","elementOverflow","window","getComputedStyle","overflowY","isOverflowHidden","indexOf","getScrollingElement","page","document","getElementById","getScrollPos","scrollTop","saveScrollPos","elementId","form","closest","scrollPos","querySelector","createElement","type","name","appendChild","value","initLinksScrollPos","links","querySelectorAll","Array","prototype","forEach","call","link","addEventListener","e","preventDefault","url","target","href","location","scrollToSavedPos","matches","match","scrollTo"],"mappings":"sLAoCIA,CAAAA,CAAgB,CAAG,I,CAQjBC,CAAY,CAAG,SAASC,CAAT,CAAkB,IAE7BC,CAAAA,CAAoB,CAAGD,CAAO,CAACE,YAAR,CAAuBF,CAAO,CAACG,YAFzB,CAK7BC,CAAe,CAAGC,MAAM,CAACC,gBAAP,CAAwBN,CAAxB,EAAiCO,SALtB,CAM7BC,CAAgB,CAAyC,CAAC,CAAvC,GAAAJ,CAAe,CAACK,OAAhB,CAAwB,QAAxB,CANU,CAQnC,MAAOR,CAAAA,CAAoB,EAAI,CAACO,CACnC,C,CAOKE,CAAmB,CAAG,UAAM,CAC9B,GAAyB,IAArB,GAAAZ,CAAJ,CAA+B,CAC3B,GAAMa,CAAAA,CAAI,CAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAb,CACA,GAAId,CAAY,CAACY,CAAD,CAAhB,CAAwB,CACpBb,CAAgB,CAAGa,CACtB,CAFD,IAEO,CACHb,CAAgB,CAAGc,QAAQ,CAACd,gBAC/B,CACJ,CAED,MAAOA,CAAAA,CACV,C,CAOKgB,CAAY,CAAG,UAAM,CACvB,GAAMhB,CAAAA,CAAgB,CAAGY,CAAmB,EAA5C,CAEA,MAAOZ,CAAAA,CAAgB,CAACiB,SAC3B,C,iBAS4B,QAAhBC,CAAAA,aAAgB,CAACC,CAAD,CAAe,IAClCjB,CAAAA,CAAO,CAAGY,QAAQ,CAACC,cAAT,CAAwBI,CAAxB,CADwB,CAElCC,CAAI,CAAGlB,CAAO,CAACmB,OAAR,CAAgB,MAAhB,CAF2B,CAGxC,GAAI,CAACD,CAAL,CAAW,CACP,MACH,CACD,GAAIE,CAAAA,CAAS,CAAGF,CAAI,CAACG,aAAL,CAAmB,yBAAnB,CAAhB,CACA,GAAI,CAACD,CAAL,CAAgB,CACZA,CAAS,CAAGR,QAAQ,CAACU,aAAT,CAAuB,OAAvB,CAAZ,CACAF,CAAS,CAACG,IAAV,CAAiB,QAAjB,CACAH,CAAS,CAACI,IAAV,CAAiB,aAAjB,CACAN,CAAI,CAACO,WAAL,CAAiBL,CAAjB,CACH,CACDA,CAAS,CAACM,KAAV,CAAkBZ,CAAY,EACjC,C,sBAOiC,QAArBa,CAAAA,kBAAqB,EAAM,CACpC,GAAMC,CAAAA,CAAK,CAAGhB,QAAQ,CAACiB,gBAAT,CAA0B,0BAA1B,CAAd,CACAC,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BL,CAA7B,CAAoC,SAASM,CAAT,CAAe,CAC/CA,CAAI,CAACC,gBAAL,CAAsB,OAAtB,CAA+B,SAACC,CAAD,CAAO,CAClCA,CAAC,CAACC,cAAF,GACA,GAAIC,CAAAA,CAAG,CAAGF,CAAC,CAACG,MAAF,CAASC,IAAnB,CACAF,CAAG,CAAGA,CAAG,CAAG,eAAN,CAAwBxB,CAAY,EAA1C,CACAT,MAAM,CAACoC,QAAP,CAAkBH,CACrB,CALD,CAMH,CAPD,CAQH,C,oBAK+B,QAAnBI,CAAAA,gBAAmB,EAAM,CAClC,GAAIC,CAAAA,CAAO,CAAGtC,MAAM,CAACoC,QAAP,CAAgBD,IAAhB,CAAqBI,KAArB,CAA2B,sCAA3B,CAAmE,IAAnE,CAAd,CACA,GAAID,CAAJ,CAAa,CAGT,GAAM7C,CAAAA,CAAgB,CAAGY,CAAmB,EAA5C,CACAZ,CAAgB,CAAC+C,QAAjB,CAA0B,CAA1B,CAA6BF,CAAO,CAAC,CAAD,CAApC,EACA/B,QAAQ,CAACuB,gBAAT,CAA0B,kBAA1B,CAA8C,UAAM,CAChDrC,CAAgB,CAAC+C,QAAjB,CAA0B,CAA1B,CAA6BF,CAAO,CAAC,CAAD,CAApC,CACH,CAFD,CAGH,CACJ,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Scroll manager is a class that help with saving the scroll positing when you\n * click on an action icon, and then when the page is reloaded after processing\n * the action, it scrolls you to exactly where you were. This is much nicer for\n * the user.\n *\n * To use this in your code, you need to ensure that:\n * 1. The button that triggers the action has to have a click event handler that\n *    calls saveScrollPos()\n * 2. After doing the processing, the redirect() function will add 'mdlscrollto'\n *    parameter into the redirect url automatically.\n * 3. Finally, on the page that is reloaded (which should be the same as the one\n *    the user started on) you need to call scrollToSavedPos()\n *    on page load.\n *\n * @module     core/scroll_manager\n * @copyright  2021 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/** @property {HTMLElement} scrollingElement the current scrolling element. */\nlet scrollingElement = null;\n\n/**\n * Is the element scrollable?\n *\n * @param {HTMLElement} element Element.\n * @returns {boolean}.\n */\nconst isScrollable = function(element) {\n    // Check if the element has scrollable content.\n    const hasScrollableContent = element.scrollHeight > element.clientHeight;\n\n    // If 'overflow-y' is set to hidden, the scroll bar is't show.\n    const elementOverflow = window.getComputedStyle(element).overflowY;\n    const isOverflowHidden = elementOverflow.indexOf('hidden') !== -1;\n\n    return hasScrollableContent && !isOverflowHidden;\n};\n\n/**\n * Get the scrolling element.\n *\n * @returns {HTMLElement}.\n */\nconst getScrollingElement = () => {\n    if (scrollingElement === null) {\n        const page = document.getElementById('page');\n        if (isScrollable(page)) {\n            scrollingElement = page;\n        } else {\n            scrollingElement = document.scrollingElement;\n        }\n    }\n\n    return scrollingElement;\n};\n\n/**\n * Get current scroll position.\n *\n * @returns {int} Scroll position.\n */\nconst getScrollPos = () => {\n    const scrollingElement = getScrollingElement();\n\n    return scrollingElement.scrollTop;\n};\n\n/**\n * In the form that contains the element, set the value of the form field with\n * name mdlscrollto to the current scroll position. If there is no element with\n * that name, it creates a hidden form field with that name within the form.\n *\n * @param {string} elementId The element in the form.\n */\nexport const saveScrollPos = (elementId) => {\n    const element = document.getElementById(elementId);\n    const form = element.closest('form');\n    if (!form) {\n        return;\n    }\n    let scrollPos = form.querySelector('input[name=mdlscrollto]');\n    if (!scrollPos) {\n        scrollPos = document.createElement('input');\n        scrollPos.type = 'hidden';\n        scrollPos.name = 'mdlscrollto';\n        form.appendChild(scrollPos);\n    }\n    scrollPos.value = getScrollPos();\n};\n\n/**\n * Init event handlers for all links with data-save-scroll=true.\n * Handle to add mdlscrollto parameter to link using js when we click on the link.\n *\n */\nexport const initLinksScrollPos = () => {\n    const links = document.querySelectorAll('a[data-save-scroll=true]');\n    Array.prototype.forEach.call(links, function(link) {\n        link.addEventListener('click', (e) => {\n            e.preventDefault();\n            let url = e.target.href;\n            url = url + '&mdlscrollto=' + getScrollPos();\n            window.location = url;\n        });\n    });\n};\n\n/**\n * If there is a parameter like mdlscrollto=123 in the URL, scroll to that saved position.\n */\nexport const scrollToSavedPos = () => {\n    let matches = window.location.href.match(/^.*[?&]mdlscrollto=(\\d*)(?:&|$|#).*$/, '$1');\n    if (matches) {\n        // Event onDOMReady is the effective one here. I am leaving the immediate call to\n        // window.scrollTo in case it reduces flicker.\n        const scrollingElement = getScrollingElement();\n        scrollingElement.scrollTo(0, matches[1]);\n        document.addEventListener('DOMContentLoaded', () => {\n            scrollingElement.scrollTo(0, matches[1]);\n        });\n    }\n};\n"],"file":"scroll_manager.min.js"}