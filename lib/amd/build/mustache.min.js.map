{"version":3,"file":"mustache.min.js","sources":["../src/mustache.js"],"sourcesContent":["// The MIT License\n//\n// Copyright (c) 2009 Chris Wanstrath (Ruby)\n// Copyright (c) 2010-2014 Jan Lehnardt (JavaScript)\n// Copyright (c) 2010-2015 The mustache.js community\n//\n// Permission is hereby granted, free of charge, to any person obtaining\n// a copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to\n// the following conditions:\n//\n// The above copyright notice and this permission notice shall be\n// included in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n\n// Description of import into Moodle:\n// Checkout from https://github.com/moodle/custom-mustache.js Branch: LAMBDA_ARGS (see note below)\n// Rebase onto latest release tag from https://github.com/janl/mustache.js\n// Copy mustache.js into lib/amd/src/ in Moodle folder.\n// Add the license as a comment to the file and these instructions.\n// Make sure that you have not removed the custom code for '$' and '<'.\n// Run unit tests.\n// NOTE:\n// Check if pull request from branch lambdaUpgrade420 has been accepted\n// by moodle/custom-mustache.js repo. If not, create one and use lambdaUpgrade420\n// as your branch in place of LAMBDA_ARGS.\n\n/*!\n * mustache.js - Logic-less {{mustache}} templates with JavaScript\n * http://github.com/janl/mustache.js\n */\n\nvar objectToString = Object.prototype.toString;\nvar isArray = Array.isArray || function isArrayPolyfill (object) {\n  return objectToString.call(object) === '[object Array]';\n};\n\nfunction isFunction (object) {\n  return typeof object === 'function';\n}\n\n/**\n * More correct typeof string handling array\n * which normally returns typeof 'object'\n */\nfunction typeStr (obj) {\n  return isArray(obj) ? 'array' : typeof obj;\n}\n\nfunction escapeRegExp (string) {\n  return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n}\n\n/**\n * Null safe way of checking whether or not an object,\n * including its prototype, has a given property\n */\nfunction hasProperty (obj, propName) {\n  return obj != null && typeof obj === 'object' && (propName in obj);\n}\n\n/**\n * Safe way of detecting whether or not the given thing is a primitive and\n * whether it has the given property\n */\nfunction primitiveHasOwnProperty (primitive, propName) {\n  return (\n    primitive != null\n    && typeof primitive !== 'object'\n    && primitive.hasOwnProperty\n    && primitive.hasOwnProperty(propName)\n  );\n}\n\n// Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n// See https://github.com/janl/mustache.js/issues/189\nvar regExpTest = RegExp.prototype.test;\nfunction testRegExp (re, string) {\n  return regExpTest.call(re, string);\n}\n\nvar nonSpaceRe = /\\S/;\nfunction isWhitespace (string) {\n  return !testRegExp(nonSpaceRe, string);\n}\n\nvar entityMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n  '/': '&#x2F;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nfunction escapeHtml (string) {\n  return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n    return entityMap[s];\n  });\n}\n\nvar whiteRe = /\\s*/;\nvar spaceRe = /\\s+/;\nvar equalsRe = /\\s*=/;\nvar curlyRe = /\\s*\\}/;\nvar tagRe = /#|\\^|\\/|>|\\{|&|=|!|\\$|</;\n\n/**\n * Breaks up the given `template` string into a tree of tokens. If the `tags`\n * argument is given here it must be an array with two string values: the\n * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n * course, the default is to use mustaches (i.e. mustache.tags).\n *\n * A token is an array with at least 4 elements. The first element is the\n * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n * all text that appears outside a symbol this element is \"text\".\n *\n * The second element of a token is its \"value\". For mustache tags this is\n * whatever else was inside the tag besides the opening symbol. For text tokens\n * this is the text itself.\n *\n * The third and fourth elements of the token are the start and end indices,\n * respectively, of the token in the original template.\n *\n * Tokens that are the root node of a subtree contain two more elements: 1) an\n * array of tokens in the subtree and 2) the index in the original template at\n * which the closing tag for that section begins.\n *\n * Tokens for partials also contain two more elements: 1) a string value of\n * indendation prior to that tag and 2) the index of that tag on that line -\n * eg a value of 2 indicates the partial is the third tag on this line.\n */\nfunction parseTemplate (template, tags) {\n  if (!template)\n    return [];\n  var lineHasNonSpace = false;\n  var sections = [];     // Stack to hold section tokens\n  var tokens = [];       // Buffer to hold the tokens\n  var spaces = [];       // Indices of whitespace tokens on the current line\n  var hasTag = false;    // Is there a {{tag}} on the current line?\n  var nonSpace = false;  // Is there a non-space char on the current line?\n  var indentation = '';  // Tracks indentation for tags that use it\n  var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n  // Strips all whitespace tokens array for the current line\n  // if there was a {{#tag}} on it and otherwise only space.\n  function stripSpace () {\n    if (hasTag && !nonSpace) {\n      while (spaces.length)\n        delete tokens[spaces.pop()];\n    } else {\n      spaces = [];\n    }\n\n    hasTag = false;\n    nonSpace = false;\n  }\n\n  var openingTagRe, closingTagRe, closingCurlyRe;\n  function compileTags (tagsToCompile) {\n    if (typeof tagsToCompile === 'string')\n      tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n    if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n      throw new Error('Invalid tags: ' + tagsToCompile);\n\n    openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n    closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n    closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n  }\n\n  compileTags(tags || mustache.tags);\n\n  var scanner = new Scanner(template);\n\n  var start, type, value, chr, token, openSection, tagName, endTagName;\n  while (!scanner.eos()) {\n    start = scanner.pos;\n\n    // Match any text between tags.\n    value = scanner.scanUntil(openingTagRe);\n\n    if (value) {\n      for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n        chr = value.charAt(i);\n\n        if (isWhitespace(chr)) {\n          spaces.push(tokens.length);\n          indentation += chr;\n        } else {\n          nonSpace = true;\n          lineHasNonSpace = true;\n          indentation += ' ';\n        }\n\n        tokens.push([ 'text', chr, start, start + 1 ]);\n        start += 1;\n\n        // Check for whitespace on the current line.\n        if (chr === '\\n') {\n          stripSpace();\n          indentation = '';\n          tagIndex = 0;\n          lineHasNonSpace = false;\n        }\n      }\n    }\n\n    // Match the opening tag.\n    if (!scanner.scan(openingTagRe))\n      break;\n\n    hasTag = true;\n\n    // Get the tag type.\n    type = scanner.scan(tagRe) || 'name';\n    scanner.scan(whiteRe);\n\n    // Get the tag value.\n    if (type === '=') {\n      value = scanner.scanUntil(equalsRe);\n      scanner.scan(equalsRe);\n      scanner.scanUntil(closingTagRe);\n    } else if (type === '{') {\n      value = scanner.scanUntil(closingCurlyRe);\n      scanner.scan(curlyRe);\n      scanner.scanUntil(closingTagRe);\n      type = '&';\n    } else {\n      value = scanner.scanUntil(closingTagRe);\n    }\n\n    // Match the closing tag.\n    if (!scanner.scan(closingTagRe))\n      throw new Error('Unclosed tag at ' + scanner.pos);\n\n    if (type == '>') {\n      token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n    } else {\n      token = [ type, value, start, scanner.pos ];\n    }\n    tagIndex++;\n    tokens.push(token);\n\n    if (type === '#' || type === '^' || type === '$' || type === '<') {\n      sections.push(token);\n    } else if (type === '/') {\n      // Check section nesting.\n      openSection = sections.pop();\n\n      if (!openSection)\n        throw new Error('Unopened section \"' + value + '\" at ' + start);\n      tagName = openSection[1].split(' ', 1)[0];\n      endTagName = value.split(' ', 1)[0];\n      if (tagName !== endTagName)\n        throw new Error('Unclosed section \"' + tagName + '\" at ' + start);\n    } else if (type === 'name' || type === '{' || type === '&') {\n      nonSpace = true;\n    } else if (type === '=') {\n      // Set the tags for the next time around.\n      compileTags(value);\n    }\n  }\n\n  stripSpace();\n\n  // Make sure there are no open sections when we're done.\n  openSection = sections.pop();\n\n  if (openSection)\n    throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n  return nestTokens(squashTokens(tokens));\n}\n\n/**\n * Combines the values of consecutive text tokens in the given `tokens` array\n * to a single token.\n */\nfunction squashTokens (tokens) {\n  var squashedTokens = [];\n\n  var token, lastToken;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    if (token) {\n      if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n        lastToken[1] += token[1];\n        lastToken[3] = token[3];\n      } else {\n        squashedTokens.push(token);\n        lastToken = token;\n      }\n    }\n  }\n\n  return squashedTokens;\n}\n\n/**\n * Forms the given array of `tokens` into a nested tree structure where\n * tokens that represent a section have two additional items: 1) an array of\n * all tokens that appear in that section and 2) the index in the original\n * template that represents the end of that section.\n */\nfunction nestTokens (tokens) {\n  var nestedTokens = [];\n  var collector = nestedTokens;\n  var sections = [];\n\n  var token, section;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    token = tokens[i];\n\n    switch (token[0]) {\n      case '$':\n      case '<':\n      case '#':\n      case '^':\n        collector.push(token);\n        sections.push(token);\n        collector = token[4] = [];\n        break;\n      case '/':\n        section = sections.pop();\n        section[5] = token[2];\n        collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n        break;\n      default:\n        collector.push(token);\n    }\n  }\n\n  return nestedTokens;\n}\n\n/**\n * A simple string scanner that is used by the template parser to find\n * tokens in template strings.\n */\nfunction Scanner (string) {\n  this.string = string;\n  this.tail = string;\n  this.pos = 0;\n}\n\n/**\n * Returns `true` if the tail is empty (end of string).\n */\nScanner.prototype.eos = function eos () {\n  return this.tail === '';\n};\n\n/**\n * Tries to match the given regular expression at the current position.\n * Returns the matched text if it can match, the empty string otherwise.\n */\nScanner.prototype.scan = function scan (re) {\n  var match = this.tail.match(re);\n\n  if (!match || match.index !== 0)\n    return '';\n\n  var string = match[0];\n\n  this.tail = this.tail.substring(string.length);\n  this.pos += string.length;\n\n  return string;\n};\n\n/**\n * Skips all text until the given regular expression can be matched. Returns\n * the skipped string, which is the entire tail if no match can be made.\n */\nScanner.prototype.scanUntil = function scanUntil (re) {\n  var index = this.tail.search(re), match;\n\n  switch (index) {\n    case -1:\n      match = this.tail;\n      this.tail = '';\n      break;\n    case 0:\n      match = '';\n      break;\n    default:\n      match = this.tail.substring(0, index);\n      this.tail = this.tail.substring(index);\n  }\n\n  this.pos += match.length;\n\n  return match;\n};\n\n/**\n * Represents a rendering context by wrapping a view object and\n * maintaining a reference to the parent context.\n */\nfunction Context (view, parentContext) {\n  this.view = view;\n  this.blocks = {};\n  this.cache = { '.': this.view };\n  this.parent = parentContext;\n}\n\n/**\n * Creates a new context using the given view with this context\n * as the parent.\n */\nContext.prototype.push = function push (view) {\n  return new Context(view, this);\n};\n\n/**\n * Set a value in the current block context.\n */\nContext.prototype.setBlockVar = function set (name, value) {\n  var blocks = this.blocks;\n  blocks[name] = value;\n  return value;\n};\n/**\n * Clear all current block vars.\n */\nContext.prototype.clearBlockVars = function clearBlockVars () {\n  this.blocks = {};\n};\n/**\n * Get a value only from the current block context.\n */\nContext.prototype.getBlockVar = function getBlockVar (name) {\n  var blocks = this.blocks;\n  var value;\n  if (blocks.hasOwnProperty(name)) {\n    value = blocks[name];\n  } else {\n    if (this.parent) {\n      value = this.parent.getBlockVar(name);\n    }\n  }\n  // Can return undefined.\n  return value;\n};\n\n/**\n * Parse a tag name into an array of name and arguments (space separated, quoted strings allowed).\n */\nContext.prototype.parseNameAndArgs = function parseNameAndArgs (name) {\n  var parts = name.split(' ');\n  var inString = false;\n  var first = true;\n  var i = 0;\n  var arg;\n  var unescapedArg;\n  var argbuffer;\n  var finalArgs = [];\n\n  for (i = 0; i < parts.length; i++) {\n    arg = parts[i];\n    argbuffer = '';\n\n    if (inString) {\n      unescapedArg = arg.replace('\\\\\\\\', '');\n      if (unescapedArg.search(/^\"$|[^\\\\]\"$/) !== -1) {\n        finalArgs[finalArgs.length] = argbuffer + ' ' + arg.substr(0, arg.length - 1);\n        argbuffer = '';\n        inString = false;\n      } else {\n        argbuffer += ' ' + arg;\n      }\n    } else {\n      if (arg.search(/^\"/) !== -1 && !first) {\n        unescapedArg = arg.replace('\\\\\\\\', '');\n        if (unescapedArg.search(/^\".*[^\\\\]\"$/) !== -1) {\n          finalArgs[finalArgs.length] = arg.substr(1, arg.length - 2);\n        } else {\n          inString = true;\n          argbuffer = arg.substr(1);\n        }\n      } else {\n        if (arg.search(/^\\d+(\\.\\d*)?$/) !== -1) {\n          finalArgs[finalArgs.length] = parseFloat(arg);\n        } else if (arg === 'true') {\n          finalArgs[finalArgs.length] = 1;\n        } else if (arg === 'false') {\n          finalArgs[finalArgs.length] = 0;\n        } else if (first) {\n          finalArgs[finalArgs.length] = arg;\n        } else {\n          finalArgs[finalArgs.length] = this.lookup(arg);\n        }\n        first = false;\n      }\n    }\n  }\n\n  return finalArgs;\n};\n\n/**\n * Returns the value of the given name in this context, traversing\n * up the context hierarchy if the value is absent in this context's view.\n */\nContext.prototype.lookup = function lookup (name) {\n  var cache = this.cache;\n  var lambdaArgs = this.parseNameAndArgs(name);\n  name= lambdaArgs.shift();\n\n  var value;\n  if (cache.hasOwnProperty(name)) {\n    value = cache[name];\n  } else {\n    var context = this, intermediateValue, names, index, lookupHit = false;\n\n    while (context) {\n      if (name.indexOf('.') > 0) {\n        intermediateValue = context.view;\n        names = name.split('.');\n        index = 0;\n\n        /**\n         * Using the dot notion path in `name`, we descend through the\n         * nested objects.\n         *\n         * To be certain that the lookup has been successful, we have to\n         * check if the last object in the path actually has the property\n         * we are looking for. We store the result in `lookupHit`.\n         *\n         * This is specially necessary for when the value has been set to\n         * `undefined` and we want to avoid looking up parent contexts.\n         *\n         * In the case where dot notation is used, we consider the lookup\n         * to be successful even if the last \"object\" in the path is\n         * not actually an object but a primitive (e.g., a string, or an\n         * integer), because it is sometimes useful to access a property\n         * of an autoboxed primitive, such as the length of a string.\n         **/\n        while (intermediateValue != null && index < names.length) {\n          if (index === names.length - 1)\n            lookupHit = (\n              hasProperty(intermediateValue, names[index])\n              || primitiveHasOwnProperty(intermediateValue, names[index])\n            );\n\n          intermediateValue = intermediateValue[names[index++]];\n        }\n      } else {\n        intermediateValue = context.view[name];\n\n        /**\n         * Only checking against `hasProperty`, which always returns `false` if\n         * `context.view` is not an object. Deliberately omitting the check\n         * against `primitiveHasOwnProperty` if dot notation is not used.\n         *\n         * Consider this example:\n         * ```\n         * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n         * ```\n         *\n         * If we were to check also against `primitiveHasOwnProperty`, as we do\n         * in the dot notation case, then render call would return:\n         *\n         * \"The length of a football field is 9.\"\n         *\n         * rather than the expected:\n         *\n         * \"The length of a football field is 100 yards.\"\n         **/\n        lookupHit = hasProperty(context.view, name);\n      }\n\n      if (lookupHit) {\n        value = intermediateValue;\n        break;\n      }\n\n      context = context.parent;\n    }\n\n    cache[name] = value;\n  }\n\n  if (isFunction(value))\n    value = value.call(this.view, lambdaArgs);\n\n  return value;\n};\n\n/**\n * A Writer knows how to take a stream of tokens and render them to a\n * string, given a context. It also maintains a cache of templates to\n * avoid the need to parse the same template twice.\n */\nfunction Writer () {\n  this.templateCache = {\n    _cache: {},\n    set: function set (key, value) {\n      this._cache[key] = value;\n    },\n    get: function get (key) {\n      return this._cache[key];\n    },\n    clear: function clear () {\n      this._cache = {};\n    }\n  };\n}\n\n/**\n * Clears all cached templates in this writer.\n */\nWriter.prototype.clearCache = function clearCache () {\n  if (typeof this.templateCache !== 'undefined') {\n    this.templateCache.clear();\n  }\n};\n\n/**\n * Parses and caches the given `template` according to the given `tags` or\n * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n * that is generated from the parse.\n */\nWriter.prototype.parse = function parse (template, tags) {\n  var cache = this.templateCache;\n  var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n  var isCacheEnabled = typeof cache !== 'undefined';\n  var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n  if (tokens == undefined) {\n    tokens = parseTemplate(template, tags);\n    isCacheEnabled && cache.set(cacheKey, tokens);\n  }\n  return tokens;\n};\n\n/**\n * High-level method that is used to render the given `template` with\n * the given `view`.\n *\n * The optional `partials` argument may be an object that contains the\n * names and templates of partials that are used in the template. It may\n * also be a function that is used to load partial templates on the fly\n * that takes a single argument: the name of the partial.\n *\n * If the optional `config` argument is given here, then it should be an\n * object with a `tags` attribute or an `escape` attribute or both.\n * If an array is passed, then it will be interpreted the same way as\n * a `tags` attribute on a `config` object.\n *\n * The `tags` attribute of a `config` object must be an array with two\n * string values: the opening and closing tags used in the template (e.g.\n * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n *\n * The `escape` attribute of a `config` object must be a function which\n * accepts a string as input and outputs a safely escaped string.\n * If an `escape` function is not provided, then an HTML-safe string\n * escaping function is used as the default.\n */\nWriter.prototype.render = function render (template, view, partials, config) {\n  var tags = this.getConfigTags(config);\n  var tokens = this.parse(template, tags);\n  var context = (view instanceof Context) ? view : new Context(view, undefined);\n  return this.renderTokens(tokens, context, partials, template, config);\n};\n\n/**\n * Low-level method that renders the given array of `tokens` using\n * the given `context` and `partials`.\n *\n * Note: The `originalTemplate` is only ever used to extract the portion\n * of the original template that was contained in a higher-order section.\n * If the template doesn't use higher-order sections, this argument may\n * be omitted.\n */\nWriter.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, config) {\n  var buffer = '';\n\n  var token, symbol, value;\n  for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n    value = undefined;\n    token = tokens[i];\n    symbol = token[0];\n\n    if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate, config);\n    else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate, config);\n    else if (symbol === '>') value = this.renderPartial(token, context, partials, config);\n    else if (symbol === '<') value = this.renderBlock(token, context, partials, originalTemplate, config);\n    else if (symbol === '$') value = this.renderBlockVariable(token, context, partials, originalTemplate, config);\n    else if (symbol === '&') value = this.unescapedValue(token, context);\n    else if (symbol === 'name') value = this.escapedValue(token, context, config);\n    else if (symbol === 'text') value = this.rawValue(token);\n\n    if (value !== undefined)\n      buffer += value;\n  }\n\n  return buffer;\n};\n\nWriter.prototype.renderSection = function renderSection (token, context, partials, originalTemplate, config) {\n  var self = this;\n  var buffer = '';\n  var lambdaArgs = context.parseNameAndArgs(token[1]);\n  var name = lambdaArgs.shift();\n  var value = context.lookup(name);\n\n  // This function is used to render an arbitrary template\n  // in the current context by higher-order sections.\n  function subRender (template) {\n    return self.render(template, context, partials, config);\n  }\n\n  if (!value) return;\n\n  if (isArray(value)) {\n    for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n      buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate, config);\n    }\n  } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n    buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate, config);\n  } else if (isFunction(value)) {\n    if (typeof originalTemplate !== 'string')\n      throw new Error('Cannot use higher-order sections without the original template');\n\n    // Extract the portion of the original template that the section contains.\n    value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender, lambdaArgs);\n\n    if (value != null)\n      buffer += value;\n  } else {\n    buffer += this.renderTokens(token[4], context, partials, originalTemplate, config);\n  }\n  return buffer;\n};\n\nWriter.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate, config) {\n  var value = context.lookup(token[1]);\n\n  // Use JavaScript's definition of falsy. Include empty arrays.\n  // See https://github.com/janl/mustache.js/issues/186\n  if (!value || (isArray(value) && value.length === 0))\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\n};\n\nWriter.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n  var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n  var partialByNl = partial.split('\\n');\n  for (var i = 0; i < partialByNl.length; i++) {\n    if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n      partialByNl[i] = filteredIndentation + partialByNl[i];\n    }\n  }\n  return partialByNl.join('\\n');\n};\n\nWriter.prototype.renderPartial = function renderPartial (token, context, partials, config) {\n  if (!partials) return;\n  var tags = this.getConfigTags(config);\n\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n  if (value != null) {\n    var lineHasNonSpace = token[6];\n    var tagIndex = token[5];\n    var indentation = token[4];\n    var indentedValue = value;\n    if (tagIndex == 0 && indentation) {\n      indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n    }\n    var tokens = this.parse(indentedValue, tags);\n    return this.renderTokens(tokens, context, partials, indentedValue, config);\n  }\n};\n\nWriter.prototype.renderBlock = function renderBlock (token, context, partials, originalTemplate, config) {\n  if (!partials) return;\n\n  var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n  if (value != null)\n    // Ignore any wrongly set block vars before we started.\n    context.clearBlockVars();\n    // We are only rendering to record the default block variables.\n    this.renderTokens(token[4], context, partials, originalTemplate, config);\n    // Now we render and return the result.\n    var result = this.renderTokens(this.parse(value), context, partials, value, config);\n    // Don't leak the block variables outside this include.\n    context.clearBlockVars();\n    return result;\n};\n\nWriter.prototype.renderBlockVariable = function renderBlockVariable (token, context, partials, originalTemplate, config) {\n  var value = token[1];\n\n  var exists = context.getBlockVar(value);\n  if (!exists) {\n    context.setBlockVar(value, originalTemplate.slice(token[3], token[5]));\n    return this.renderTokens(token[4], context, partials, originalTemplate, config);\n  } else {\n    return this.renderTokens(this.parse(exists), context, partials, exists, config);\n  }\n};\n\nWriter.prototype.unescapedValue = function unescapedValue (token, context) {\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return value;\n};\n\nWriter.prototype.escapedValue = function escapedValue (token, context, config) {\n  var escape = this.getConfigEscape(config) || mustache.escape;\n  var value = context.lookup(token[1]);\n  if (value != null)\n    return (typeof value === 'number' && escape === mustache.escape) ? String(value) : escape(value);\n};\n\nWriter.prototype.rawValue = function rawValue (token) {\n  return token[1];\n};\n\nWriter.prototype.getConfigTags = function getConfigTags (config) {\n  if (isArray(config)) {\n    return config;\n  }\n  else if (config && typeof config === 'object') {\n    return config.tags;\n  }\n  else {\n    return undefined;\n  }\n};\n\nWriter.prototype.getConfigEscape = function getConfigEscape (config) {\n  if (config && typeof config === 'object' && !isArray(config)) {\n    return config.escape;\n  }\n  else {\n    return undefined;\n  }\n};\n\nvar mustache = {\n  name: 'mustache.js',\n  version: '4.2.0',\n  tags: [ '{{', '}}' ],\n  clearCache: undefined,\n  escape: undefined,\n  parse: undefined,\n  render: undefined,\n  Scanner: undefined,\n  Context: undefined,\n  Writer: undefined,\n  /**\n   * Allows a user to override the default caching strategy, by providing an\n   * object with set, get and clear methods. This can also be used to disable\n   * the cache by setting it to the literal `undefined`.\n   */\n  set templateCache (cache) {\n    defaultWriter.templateCache = cache;\n  },\n  /**\n   * Gets the default or overridden caching object from the default writer.\n   */\n  get templateCache () {\n    return defaultWriter.templateCache;\n  }\n};\n\n// All high-level mustache.* functions use this writer.\nvar defaultWriter = new Writer();\n\n/**\n * Clears all cached templates in the default writer.\n */\nmustache.clearCache = function clearCache () {\n  return defaultWriter.clearCache();\n};\n\n/**\n * Parses and caches the given template in the default writer and returns the\n * array of tokens it contains. Doing this ahead of time avoids the need to\n * parse templates on the fly as they are rendered.\n */\nmustache.parse = function parse (template, tags) {\n  return defaultWriter.parse(template, tags);\n};\n\n/**\n * Renders the `template` with the given `view`, `partials`, and `config`\n * using the default writer.\n */\nmustache.render = function render (template, view, partials, config) {\n  if (typeof template !== 'string') {\n    throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                        'but \"' + typeStr(template) + '\" was given as the first ' +\n                        'argument for mustache#render(template, view, partials)');\n  }\n\n  return defaultWriter.render(template, view, partials, config);\n};\n\n// Export the escaping function so that the user may override it.\n// See https://github.com/janl/mustache.js/issues/244\nmustache.escape = escapeHtml;\n\n// Export these mainly for testing, but also for advanced usage.\nmustache.Scanner = Scanner;\nmustache.Context = Context;\nmustache.Writer = Writer;\n\nexport default mustache;\n"],"names":["objectToString","Object","prototype","toString","isArray","Array","object","call","isFunction","escapeRegExp","string","replace","hasProperty","obj","propName","regExpTest","RegExp","test","nonSpaceRe","isWhitespace","re","testRegExp","entityMap","whiteRe","spaceRe","equalsRe","curlyRe","tagRe","Scanner","tail","pos","Context","view","parentContext","blocks","this","cache","parent","Writer","templateCache","_cache","set","key","value","get","clear","eos","scan","match","index","substring","length","scanUntil","search","push","setBlockVar","name","clearBlockVars","getBlockVar","hasOwnProperty","parseNameAndArgs","arg","argbuffer","parts","split","inString","first","i","finalArgs","substr","parseFloat","lookup","primitive","lambdaArgs","shift","context","intermediateValue","names","lookupHit","indexOf","clearCache","parse","template","tags","cacheKey","mustache","join","isCacheEnabled","tokens","undefined","lineHasNonSpace","openingTagRe","closingTagRe","closingCurlyRe","sections","spaces","hasTag","nonSpace","indentation","tagIndex","stripSpace","pop","compileTags","tagsToCompile","Error","start","type","chr","token","openSection","tagName","scanner","valueLength","charAt","nestTokens","nestedTokens","collector","numTokens","squashTokens","squashedTokens","lastToken","parseTemplate","render","partials","config","getConfigTags","renderTokens","originalTemplate","buffer","symbol","renderSection","renderInverted","renderPartial","renderBlock","renderBlockVariable","unescapedValue","escapedValue","rawValue","self","j","slice","subRender","indentPartial","partial","filteredIndentation","partialByNl","indentedValue","result","exists","escape","getConfigEscape","String","version","defaultWriter","TypeError","typeStr","escapeHtml","s"],"mappings":"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"}