{"version":3,"file":"templates.min.js","sources":["../src/templates.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Template renderer for Moodle. Load and render Moodle templates with Mustache.\n *\n * @module     core/templates\n * @copyright  2015 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      2.9\n */\nimport mustache from 'core/mustache';\nimport $ from 'jquery';\nimport * as str from 'core/str';\nimport * as notification from 'core/notification';\nimport * as config from 'core/config';\nimport * as storage from 'core/localstorage';\nimport IconSystem from 'core/icon_system';\nimport * as filterEvents from 'core_filters/events';\nimport * as Y from 'core/yui';\nimport * as Log from 'core/log';\nimport * as Truncate from 'core/truncate';\nimport * as UserDate from 'core/user_date';\nimport Pending from 'core/pending';\nimport {fetchMany} from 'core/fetch';\n\n\n// Module variables.\n/** @var {Number} uniqInstances Count of times this constructor has been called. */\nvar uniqInstances = 0;\n\n/** @var {String[]} templateCache - Cache of already loaded template strings */\nvar templateCache = {};\n\n/** @var {Promise[]} templatePromises - Cache of already loaded template promises */\nvar templatePromises = {};\n\n/** @var {Promise[]} cachePartialPromises - Cache of already loaded template partial promises */\nvar cachePartialPromises = {};\n\n/** @var {Object} iconSystem - Object extending core/iconsystem */\nvar iconSystem = {};\n\n/** @var {Object[]} loadTemplateBuffer - List of templates to be loaded */\nvar loadTemplateBuffer = [];\n\n/** @var {Bool} isLoadingTemplates - Whether templates are currently being loaded */\nvar isLoadingTemplates = false;\n\n/** @var {Array} disallowedNestedHelpers - List of helpers that can't be called within other helpers */\nvar disallowedNestedHelpers = ['js'];\n\n/**\n * Normalise the provided component such that '', 'moodle', and 'core' are treated consistently.\n *\n * @param   {String} component\n * @returns {String}\n */\nvar getNormalisedComponent = function (component) {\n    if (component) {\n        if (component !== 'moodle' && component !== 'core') {\n            return component;\n        }\n    }\n\n    return 'core';\n};\n\n/**\n * Search the various caches for a template promise for the given search key.\n * The search key should be in the format <theme>/<component>/<template> e.g. boost/core/modal.\n *\n * If the template is found in any of the caches it will populate the other caches with\n * the same data as well.\n *\n * @param {String} searchKey The template search key in the format <theme>/<component>/<template> e.g. boost/core/modal\n * @return {Object} jQuery promise resolved with the template source\n */\nvar getTemplatePromiseFromCache = function (searchKey) {\n    // First try the cache of promises.\n    if (searchKey in templatePromises) {\n        return templatePromises[searchKey];\n    }\n\n    // Check the module cache.\n    if (searchKey in templateCache) {\n        // Add this to the promises cache for future.\n        templatePromises[searchKey] = $.Deferred().resolve(templateCache[searchKey]).promise();\n        return templatePromises[searchKey];\n    }\n\n    if (M.cfg.templaterev <= 0) {\n        // Template caching is disabled. Do not store in persistent storage.\n        return null;\n    }\n\n    // Now try local storage.\n    var cached = storage.get('core_template/' + M.cfg.templaterev + ':' + searchKey);\n    if (cached) {\n        // Add this to the module cache for future.\n        templateCache[searchKey] = cached;\n        // Add this to the promises cache for future.\n        templatePromises[searchKey] = $.Deferred().resolve(cached).promise();\n        return templatePromises[searchKey];\n    }\n\n    return null;\n};\n\n/**\n * Take all of the templates waiting in the buffer and load them from the server\n * or from the cache.\n *\n * All of the templates that need to be loaded from the server will be batched up\n * and sent in a single network request.\n */\nvar processLoadTemplateBuffer = function () {\n    if (!loadTemplateBuffer.length) {\n        return;\n    }\n\n    if (isLoadingTemplates) {\n        return;\n    }\n\n    isLoadingTemplates = true;\n    // Grab any templates waiting in the buffer.\n    var templatesToLoad = loadTemplateBuffer.slice();\n    // This will be resolved with the list of promises for the server request.\n    var serverRequestsDeferred = $.Deferred();\n    var requests = [];\n    // Get a list of promises for each of the templates we need to load.\n    var templatePromises = templatesToLoad.map(function (templateData) {\n        var component = getNormalisedComponent(templateData.component);\n        var name = templateData.name;\n        var searchKey = templateData.searchKey;\n        var theme = templateData.theme;\n        var templateDeferred = templateData.deferred;\n        var promise = null;\n\n        // Double check to see if this template happened to have landed in the\n        // cache as a dependency of an earlier template.\n        var cachedPromise = getTemplatePromiseFromCache(searchKey);\n        if (cachedPromise) {\n            // We've seen this template so immediately resolve the existing promise.\n            promise = cachedPromise;\n        } else {\n            // We haven't seen this template yet so we need to request it from\n            // the server.\n            requests.push({\n                methodname: 'core_output_load_template_with_dependencies',\n                args: {\n                    component: component,\n                    template: name,\n                    themename: theme,\n                    lang: $('html').attr('lang').replace(/-/g, '_')\n                }\n            });\n            // Remember the index in the requests list for this template so that\n            // we can get the appropriate promise back.\n            var index = requests.length - 1;\n\n            // The server deferred will be resolved with a list of all of the promises\n            // that were sent in the order that they were added to the requests array.\n            promise = serverRequestsDeferred.promise()\n                .then(function (promises) {\n                    // The promise for this template will be the one that matches the index\n                    // for it's entry in the requests array.\n                    //\n                    // Make sure the promise is added to the promises cache for this template\n                    // search key so that we don't request it again.\n                    templatePromises[searchKey] = promises[index].then(function (response) {\n                        var templateSource = null;\n\n                        // Process all of the template dependencies for this template and add\n                        // them to the caches so that we don't request them again later.\n                        response.templates.forEach(function (data) {\n                            data.component = getNormalisedComponent(data.component);\n                            // Generate the search key for this template in the response so that we\n                            // can add it to the caches.\n                            var tempSearchKey = [theme, data.component, data.name].join('/');\n                            // Cache all of the dependent templates because we'll need them to render\n                            // the requested template.\n                            templateCache[tempSearchKey] = data.value;\n\n                            if (M.cfg.templaterev > 0) {\n                                // The template cache is enabled - set the value there.\n                                storage.set('core_template/' + M.cfg.templaterev + ':' + tempSearchKey, data.value);\n                            }\n\n                            if (data.component == component && data.name == name) {\n                                // This is the original template that was requested so remember it to return.\n                                templateSource = data.value;\n                            }\n                        });\n\n                        if (response.strings.length) {\n                            // If we have strings that the template needs then warm the string cache\n                            // with them now so that we don't need to re-fetch them.\n                            str.cache_strings(response.strings.map(function (data) {\n                                return {\n                                    component: getNormalisedComponent(data.component),\n                                    key: data.name,\n                                    value: data.value\n                                };\n                            }));\n                        }\n\n                        // Return the original template source that the user requested.\n                        return templateSource;\n                    });\n\n                    return templatePromises[searchKey];\n                });\n        }\n\n        return promise\n            .then(function (source) {\n                // When we've successfully loaded the template then resolve the deferred\n                // in the buffer so that all of the calling code can proceed.\n                return templateDeferred.resolve(source);\n            })\n            .catch(function (error) {\n                // If there was an error loading the template then reject the deferred\n                // in the buffer so that all of the calling code can proceed.\n                templateDeferred.reject(error);\n                // Rethrow for anyone else listening.\n                throw error;\n            });\n    });\n\n    if (requests.length) {\n        // We have requests to send so resolve the deferred with the promises.\n        serverRequestsDeferred.resolve(\n            fetchMany(requests, false, {\n                cacheKey: config.templaterev,\n            })\n        );\n    } else {\n        // Nothing to load so we can resolve our deferred.\n        serverRequestsDeferred.resolve();\n    }\n\n    // Once we've finished loading all of the templates then recurse to process\n    // any templates that may have been added to the buffer in the time that we\n    // were fetching.\n    $.when.apply(null, templatePromises)\n        .then(function () {\n            // Remove the templates we've loaded from the buffer.\n            loadTemplateBuffer.splice(0, templatesToLoad.length);\n            isLoadingTemplates = false;\n            processLoadTemplateBuffer();\n            return;\n        })\n        .catch(function () {\n            // Remove the templates we've loaded from the buffer.\n            loadTemplateBuffer.splice(0, templatesToLoad.length);\n            isLoadingTemplates = false;\n            processLoadTemplateBuffer();\n        });\n};\n\n/**\n * Constructor\n *\n * Each call to templates.render gets it's own instance of this class.\n */\nvar Renderer = function () {\n    this.requiredStrings = [];\n    this.requiredJS = [];\n    this.requiredDates = [];\n    this.currentThemeName = '';\n};\n// Class variables and functions.\n\n/** @var {string[]} requiredStrings - Collection of strings found during the rendering of one template */\nRenderer.prototype.requiredStrings = null;\n\n/** @var {object[]} requiredDates - Collection of dates found during the rendering of one template */\nRenderer.prototype.requiredDates = [];\n\n/** @var {string[]} requiredJS - Collection of js blocks found during the rendering of one template */\nRenderer.prototype.requiredJS = null;\n\n/** @var {String} themeName for the current render */\nRenderer.prototype.currentThemeName = '';\n\n/**\n * Load a template.\n *\n * @method getTemplate\n * @private\n * @param {string} templateName - should consist of the component and the name of the template like this:\n *                              core/menu (lib/templates/menu.mustache) or\n *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n * @return {Promise} JQuery promise object resolved when the template has been fetched.\n */\nRenderer.prototype.getTemplate = function (templateName) {\n    var currentTheme = this.currentThemeName;\n    var searchKey = currentTheme + '/' + templateName;\n\n    // If we haven't already seen this template then buffer it.\n    var cachedPromise = getTemplatePromiseFromCache(searchKey);\n    if (cachedPromise) {\n        return cachedPromise;\n    }\n\n    // Check the buffer to see if this template has already been added.\n    var existingBufferRecords = loadTemplateBuffer.filter(function (record) {\n        return record.searchKey == searchKey;\n    });\n    if (existingBufferRecords.length) {\n        // This template is already in the buffer so just return the existing\n        // promise. No need to add it to the buffer again.\n        return existingBufferRecords[0].deferred.promise();\n    }\n\n    // This is the first time this has been requested so let's add it to the buffer\n    // to be loaded.\n    var parts = templateName.split('/');\n    var component = getNormalisedComponent(parts.shift());\n    var name = parts.join('/');\n    var deferred = $.Deferred();\n\n    // Add this template to the buffer to be loaded.\n    loadTemplateBuffer.push({\n        component: component,\n        name: name,\n        theme: currentTheme,\n        searchKey: searchKey,\n        deferred: deferred\n    });\n\n    // We know there is at least one thing in the buffer so kick off a processing run.\n    processLoadTemplateBuffer();\n    return deferred.promise();\n};\n\n/**\n * Prefetch a set of templates without rendering them.\n *\n * @param {Array} templateNames The list of templates to fetch\n * @param {String} currentTheme\n */\nRenderer.prototype.prefetchTemplates = function (templateNames, currentTheme) {\n    templateNames.forEach(function (templateName) {\n        var searchKey = currentTheme + '/' + templateName;\n\n        // If we haven't already seen this template then buffer it.\n        if (getTemplatePromiseFromCache(searchKey)) {\n            return;\n        }\n\n        // Check the buffer to see if this template has already been added.\n        var existingBufferRecords = loadTemplateBuffer.filter(function (record) {\n            return record.searchKey == searchKey;\n        });\n\n        if (existingBufferRecords.length) {\n            // This template is already in the buffer so just return the existing promise.\n            // No need to add it to the buffer again.\n            return;\n        }\n\n        // This is the first time this has been requested so let's add it to the buffer to be loaded.\n        var parts = templateName.split('/');\n        var component = getNormalisedComponent(parts.shift());\n        var name = parts.join('/');\n\n        // Add this template to the buffer to be loaded.\n        loadTemplateBuffer.push({\n            component: component,\n            name: name,\n            theme: currentTheme,\n            searchKey: searchKey,\n            deferred: $.Deferred(),\n        });\n    });\n\n    processLoadTemplateBuffer();\n};\n\n/**\n * Load a partial from the cache or ajax.\n *\n * @method partialHelper\n * @private\n * @param {string} name The partial name to load.\n * @return {string}\n */\nRenderer.prototype.partialHelper = function (name) {\n\n    var searchKey = this.currentThemeName + '/' + name;\n\n    if (!(searchKey in templateCache)) {\n        notification.exception(new Error('Failed to pre-fetch the template: ' + name));\n    }\n\n    return templateCache[searchKey];\n};\n\n/**\n * Render a single image icon.\n *\n * @method renderIcon\n * @private\n * @param {string} key The icon key.\n * @param {string} component The component name.\n * @param {string} title The icon title\n * @return {Promise}\n */\nRenderer.prototype.renderIcon = function (key, component, title) {\n    // Preload the module to do the icon rendering based on the theme iconsystem.\n    var modulename = config.iconsystemmodule;\n    component = getNormalisedComponent(component);\n\n    // RequireJS does not return a promise.\n    var ready = $.Deferred();\n    require([modulename], function (System) {\n        var system = new System();\n        if (!(system instanceof IconSystem)) {\n            ready.reject('Invalid icon system specified' + config.iconsystemmodule);\n        } else {\n            iconSystem = system;\n            system.init().then(ready.resolve).catch(notification.exception);\n        }\n    });\n\n    return ready.then(function (iconSystem) {\n        return this.getTemplate(iconSystem.getTemplateName());\n    }.bind(this)).then(function (template) {\n        return iconSystem.renderIcon(\n            key,\n            component,\n            title,\n            template\n        );\n    });\n};\n\n/**\n * Render image icons.\n *\n * @method pixHelper\n * @private\n * @param {object} context The mustache context\n * @param {string} sectionText The text to parse arguments from.\n * @param {function} helper Used to render the alt attribute of the text.\n * @return {string}\n */\nRenderer.prototype.pixHelper = function (context, sectionText, helper) {\n    var parts = sectionText.split(',');\n    var key = '';\n    var component = '';\n    var text = '';\n\n    if (parts.length > 0) {\n        key = helper(parts.shift().trim(), context);\n    }\n    if (parts.length > 0) {\n        component = helper(parts.shift().trim(), context);\n    }\n    if (parts.length > 0) {\n        text = helper(parts.join(',').trim(), context);\n    }\n\n    var templateName = iconSystem.getTemplateName();\n    var searchKey = this.currentThemeName + '/' + templateName;\n    var template = templateCache[searchKey];\n\n    component = getNormalisedComponent(component);\n\n    // The key might have been escaped by the JS Mustache engine which\n    // converts forward slashes to HTML entities. Let us undo that here.\n    key = key.replace(/&#x2F;/gi, '/');\n\n    return iconSystem.renderIcon(\n        key,\n        component,\n        text,\n        template\n    );\n};\n\n/**\n * Render blocks of javascript and save them in an array.\n *\n * @method jsHelper\n * @private\n * @param {object} context The current mustache context.\n * @param {string} sectionText The text to save as a js block.\n * @param {function} helper Used to render the block.\n * @return {string}\n */\nRenderer.prototype.jsHelper = function (context, sectionText, helper) {\n    this.requiredJS.push(helper(sectionText, context));\n    return '';\n};\n\n/**\n * String helper used to render {{#str}}abd component { a : 'fish'}{{/str}}\n * into a get_string call.\n *\n * @method stringHelper\n * @private\n * @param {object} context The current mustache context.\n * @param {string} sectionText The text to parse the arguments from.\n * @param {function} helper Used to render subsections of the text.\n * @return {string}\n */\nRenderer.prototype.stringHelper = function (context, sectionText, helper) {\n    var parts = sectionText.split(',');\n    var key = '';\n    var component = '';\n    var param = '';\n    if (parts.length > 0) {\n        key = parts.shift().trim();\n    }\n    if (parts.length > 0) {\n        component = parts.shift().trim();\n    }\n    if (parts.length > 0) {\n        param = parts.join(',').trim();\n    }\n\n    component = getNormalisedComponent(component);\n\n    if (param !== '') {\n        // Allow variable expansion in the param part only.\n        param = helper(param, context);\n    }\n\n    // Allow json formatted $a arguments.\n    if (param.match(/^{\\s*\"/gm)) {\n        // If it can't be parsed then the string is not a JSON format.\n        try {\n            const parsedParam = JSON.parse(param);\n            // Handle non-exception-throwing cases, e.g. null, integer, boolean.\n            if (parsedParam && typeof parsedParam === \"object\") {\n                param = parsedParam;\n            }\n        } catch (err) {\n            // This was probably not JSON.\n            // Keep the error message visible.\n            window.console.warn(err.message);\n        }\n    }\n\n    var index = this.requiredStrings.length;\n    this.requiredStrings.push({\n        key: key,\n        component: component,\n        param: param\n    });\n\n    // The placeholder must not use {{}} as those can be misinterpreted by the engine.\n    return '[[_s' + index + ']]';\n};\n\n/**\n * String helper to render {{#cleanstr}}abd component { a : 'fish'}{{/cleanstr}}\n * into a get_string following by an HTML escape.\n *\n * @method cleanStringHelper\n * @private\n * @param {object} context The current mustache context.\n * @param {string} sectionText The text to parse the arguments from.\n * @param {function} helper Used to render subsections of the text.\n * @return {string}\n */\nRenderer.prototype.cleanStringHelper = function (context, sectionText, helper) {\n    var str = this.stringHelper(context, sectionText, helper);\n\n    // We're going to use [[_cx]] format for clean strings, where x is a number.\n    // Hence, replacing 's' with 'c' in the placeholder that stringHelper returns.\n    return str.replace('s', 'c');\n};\n\n/**\n * Quote helper used to wrap content in quotes, and escape all special JSON characters present in the content.\n *\n * @method quoteHelper\n * @private\n * @param {object} context The current mustache context.\n * @param {string} sectionText The text to parse the arguments from.\n * @param {function} helper Used to render subsections of the text.\n * @return {string}\n */\nRenderer.prototype.quoteHelper = function (context, sectionText, helper) {\n    var content = helper(sectionText.trim(), context);\n\n    // Escape the {{ and JSON encode.\n    // This involves wrapping {{, and }} in change delimeter tags.\n    content = JSON.stringify(content);\n    content = content.replace(/([{}]{2,3})/g, '{{=<% %>=}}$1<%={{ }}=%>');\n    return content;\n};\n\n/**\n * Shorten text helper to truncate text and append a trailing ellipsis.\n *\n * @method shortenTextHelper\n * @private\n * @param {object} context The current mustache context.\n * @param {string} sectionText The text to parse the arguments from.\n * @param {function} helper Used to render subsections of the text.\n * @return {string}\n */\nRenderer.prototype.shortenTextHelper = function (context, sectionText, helper) {\n    // Non-greedy split on comma to grab section text into the length and\n    // text parts.\n    var regex = /(.*?),(.*)/;\n    var parts = sectionText.match(regex);\n    // The length is the part matched in the first set of parethesis.\n    var length = parts[1].trim();\n    // The length is the part matched in the second set of parethesis.\n    var text = parts[2].trim();\n    var content = helper(text, context);\n    return Truncate.truncate(content, {\n        length: length,\n        words: true,\n        ellipsis: '...'\n    });\n};\n\n/**\n * User date helper to render user dates from timestamps.\n *\n * @method userDateHelper\n * @private\n * @param {object} context The current mustache context.\n * @param {string} sectionText The text to parse the arguments from.\n * @param {function} helper Used to render subsections of the text.\n * @return {string}\n */\nRenderer.prototype.userDateHelper = function (context, sectionText, helper) {\n    // Non-greedy split on comma to grab the timestamp and format.\n    var regex = /(.*?),(.*)/;\n    var parts = sectionText.match(regex);\n    var timestamp = helper(parts[1].trim(), context);\n    var format = helper(parts[2].trim(), context);\n    var index = this.requiredDates.length;\n\n    this.requiredDates.push({\n        timestamp: timestamp,\n        format: format\n    });\n\n    return '[[_t_' + index + ']]';\n};\n\n/**\n * Return a helper function to be added to the context for rendering the a\n * template.\n *\n * This will parse the provided text before giving it to the helper function\n * in order to remove any disallowed nested helpers to prevent one helper\n * from calling another.\n *\n * In particular to prevent the JS helper from being called from within another\n * helper because it can lead to security issues when the JS portion is user\n * provided.\n *\n * @param  {function} helperFunction The helper function to add\n * @param  {object} context The template context for the helper function\n * @return {Function} To be set in the context\n */\nRenderer.prototype.addHelperFunction = function (helperFunction, context) {\n    return function () {\n        return function (sectionText, helper) {\n            // Override the disallowed helpers in the template context with\n            // a function that returns an empty string for use when executing\n            // other helpers. This is to prevent these helpers from being\n            // executed as part of the rendering of another helper in order to\n            // prevent any potential security issues.\n            var originalHelpers = disallowedNestedHelpers.reduce(function (carry, name) {\n                if (context.hasOwnProperty(name)) {\n                    carry[name] = context[name];\n                }\n\n                return carry;\n            }, {});\n\n            disallowedNestedHelpers.forEach(function (helperName) {\n                context[helperName] = function () {\n                    return '';\n                };\n            });\n\n            // Execute the helper with the modified context that doesn't include\n            // the disallowed nested helpers. This prevents the disallowed\n            // helpers from being called from within other helpers.\n            var result = helperFunction.apply(this, [context, sectionText, helper]);\n\n            // Restore the original helper implementation in the context so that\n            // any further rendering has access to them again.\n            for (var name in originalHelpers) {\n                context[name] = originalHelpers[name];\n            }\n\n            return result;\n        }.bind(this);\n    }.bind(this);\n};\n\n/**\n * Add some common helper functions to all context objects passed to templates.\n * These helpers match exactly the helpers available in php.\n *\n * @method addHelpers\n * @private\n * @param {Object} context Simple types used as the context for the template.\n * @param {String} themeName We set this multiple times, because there are async calls.\n */\nRenderer.prototype.addHelpers = function (context, themeName) {\n    this.currentThemeName = themeName;\n    this.requiredStrings = [];\n    this.requiredJS = [];\n    context.uniqid = (uniqInstances++);\n    context.str = this.addHelperFunction(this.stringHelper, context);\n    context.cleanstr = this.addHelperFunction(this.cleanStringHelper, context);\n    context.pix = this.addHelperFunction(this.pixHelper, context);\n    context.js = this.addHelperFunction(this.jsHelper, context);\n    context.quote = this.addHelperFunction(this.quoteHelper, context);\n    context.shortentext = this.addHelperFunction(this.shortenTextHelper, context);\n    context.userdate = this.addHelperFunction(this.userDateHelper, context);\n    context.globals = {config: config};\n    context.currentTheme = themeName;\n};\n\n/**\n * Get all the JS blocks from the last rendered template.\n *\n * @method getJS\n * @private\n * @return {string}\n */\nRenderer.prototype.getJS = function () {\n    var js = '';\n    if (this.requiredJS.length > 0) {\n        js = this.requiredJS.join(\";\\n\");\n    }\n\n    return js;\n};\n\n/**\n * Treat strings in content.\n *\n * The purpose of this method is to replace the placeholders found in a string\n * with the their respective translated strings.\n *\n * Previously we were relying on String.replace() but the complexity increased with\n * the numbers of strings to replace. Now we manually walk the string and stop at each\n * placeholder we find, only then we replace it. Most of the time we will\n * replace all the placeholders in a single run, at times we will need a few\n * more runs when placeholders are replaced with strings that contain placeholders\n * themselves.\n *\n * @param {String} content The content in which string placeholders are to be found.\n * @param {Array} strings The strings to replace with.\n * @return {String} The treated content.\n */\nRenderer.prototype.treatStringsInContent = function (content, strings) {\n    var pattern = /\\[\\[_(s|c)\\d+\\]\\]/,\n        treated,\n        index,\n        strIndex,\n        walker,\n        char,\n        strFinal,\n        isClean;\n\n    do {\n        treated = '';\n        index = content.search(pattern);\n        while (index > -1) {\n\n            // Copy the part prior to the placeholder to the treated string.\n            treated += content.substring(0, index);\n            content = content.substr(index);\n            isClean = content[3] == 'c';\n            strIndex = '';\n            walker = 4; // 4 is the length of either '[[_s' or '[[_c'.\n\n            // Walk the characters to manually extract the index of the string from the placeholder.\n            char = content.substr(walker, 1);\n            do {\n                strIndex += char;\n                walker++;\n                char = content.substr(walker, 1);\n            } while (char != ']');\n\n            // Get the string, add it to the treated result, and remove the placeholder from the content to treat.\n            strFinal = strings[parseInt(strIndex, 10)];\n            if (typeof strFinal === 'undefined') {\n                Log.debug('Could not find string for pattern [[_' + (isClean ? 'c' : 's') + strIndex + ']].');\n                strFinal = '';\n            }\n            if (isClean) {\n                strFinal = mustache.escape(strFinal);\n            }\n            treated += strFinal;\n            content = content.substr(6 + strIndex.length); // 6 is the length of the placeholder without the index.\n                                                            // That's either '[[_s]]' or '[[_c]]'.\n\n            // Find the next placeholder.\n            index = content.search(pattern);\n        }\n\n        // The content becomes the treated part with the rest of the content.\n        content = treated + content;\n\n        // Check if we need to walk the content again, in case strings contained placeholders.\n        index = content.search(pattern);\n\n    } while (index > -1);\n\n    return content;\n};\n\n/**\n * Treat strings in content.\n *\n * The purpose of this method is to replace the date placeholders found in the\n * content with the their respective translated dates.\n *\n * @param {String} content The content in which string placeholders are to be found.\n * @param {Array} dates The dates to replace with.\n * @return {String} The treated content.\n */\nRenderer.prototype.treatDatesInContent = function (content, dates) {\n    dates.forEach(function (date, index) {\n        var key = '\\\\[\\\\[_t_' + index + '\\\\]\\\\]';\n        var re = new RegExp(key, 'g');\n        content = content.replace(re, date);\n    });\n\n    return content;\n};\n\n/**\n * Render a template and then call the callback with the result.\n *\n * @method doRender\n * @private\n * @param {string} templateSource The mustache template to render.\n * @param {Object} context Simple types used as the context for the template.\n * @param {String} themeName Name of the current theme.\n * @return {Promise} object\n */\nRenderer.prototype.doRender = function (templateSource, context, themeName) {\n    this.currentThemeName = themeName;\n    var iconTemplate = iconSystem.getTemplateName();\n\n    var pendingPromise = new Pending('core/templates:doRender');\n    return this.getTemplate(iconTemplate).then(function () {\n        this.addHelpers(context, themeName);\n        var result = mustache.render(templateSource, context, this.partialHelper.bind(this));\n        return $.Deferred().resolve(result.trim(), this.getJS()).promise();\n    }.bind(this))\n    .then(function (html, js) {\n        if (this.requiredStrings.length > 0) {\n            return str.get_strings(this.requiredStrings).then(function (strings) {\n\n                // Make sure string substitutions are done for the userdate\n                // values as well.\n                this.requiredDates = this.requiredDates.map(function (date) {\n                    return {\n                        timestamp: this.treatStringsInContent(date.timestamp, strings),\n                        format: this.treatStringsInContent(date.format, strings)\n                    };\n                }.bind(this));\n\n                // Why do we not do another call the render here?\n                //\n                // Because that would expose DOS holes. E.g.\n                // I create an assignment called \"{{fish\" which\n                // would get inserted in the template in the first pass\n                // and cause the template to die on the second pass (unbalanced).\n                html = this.treatStringsInContent(html, strings);\n                js = this.treatStringsInContent(js, strings);\n                return $.Deferred().resolve(html, js).promise();\n            }.bind(this));\n        }\n\n        return $.Deferred().resolve(html, js).promise();\n    }.bind(this))\n    .then(function (html, js) {\n        // This has to happen after the strings replacement because you can\n        // use the string helper in content for the user date helper.\n        if (this.requiredDates.length > 0) {\n            return UserDate.get(this.requiredDates).then(function (dates) {\n                html = this.treatDatesInContent(html, dates);\n                js = this.treatDatesInContent(js, dates);\n                return $.Deferred().resolve(html, js).promise();\n            }.bind(this));\n        }\n\n        return $.Deferred().resolve(html, js).promise();\n    }.bind(this))\n    .then(function (html, js) {\n        pendingPromise.resolve();\n        return $.Deferred().resolve(html, js).promise();\n    });\n};\n\n/**\n * Execute a block of JS returned from a template.\n * Call this AFTER adding the template HTML into the DOM so the nodes can be found.\n *\n * @method runTemplateJS\n * @param {string} source - A block of javascript.\n */\nvar runTemplateJS = function (source) {\n    if (source.trim() !== '') {\n        var newscript = $('<script>').attr('type', 'text/javascript').html(source);\n        $('head').append(newscript);\n    }\n};\n\n/**\n * Do some DOM replacement and trigger correct events and fire javascript.\n *\n * @method domReplace\n * @private\n * @param {JQuery} element - Element or selector to replace.\n * @param {String} newHTML - HTML to insert / replace.\n * @param {String} newJS - Javascript to run after the insertion.\n * @param {Boolean} replaceChildNodes - Replace only the childnodes, alternative is to replace the entire node.\n * @return {Array} The list of new DOM Nodes\n * @fires event:filterContentUpdated\n */\nvar domReplace = function (element, newHTML, newJS, replaceChildNodes) {\n    var replaceNode = $(element);\n    if (replaceNode.length) {\n        // First create the dom nodes so we have a reference to them.\n        var newNodes = $(newHTML);\n        var yuiNodes = null;\n        // Do the replacement in the page.\n        if (replaceChildNodes) {\n            // Cleanup any YUI event listeners attached to any of these nodes.\n            yuiNodes = new Y.NodeList(replaceNode.children().get());\n            yuiNodes.destroy(true);\n\n            // JQuery will cleanup after itself.\n            replaceNode.empty();\n            replaceNode.append(newNodes);\n        } else {\n            // Cleanup any YUI event listeners attached to any of these nodes.\n            yuiNodes = new Y.NodeList(replaceNode.get());\n            yuiNodes.destroy(true);\n\n            // JQuery will cleanup after itself.\n            replaceNode.replaceWith(newNodes);\n        }\n        // Run any javascript associated with the new HTML.\n        runTemplateJS(newJS);\n        // Notify all filters about the new content.\n        filterEvents.notifyFilterContentUpdated(newNodes);\n\n        return newNodes.get();\n    }\n\n    return [];\n};\n\n/**\n * Scan a template source for partial tags and return a list of the found partials.\n *\n * @method scanForPartials\n * @private\n * @param {string} templateSource - source template to scan.\n * @return {Array} List of partials.\n */\nRenderer.prototype.scanForPartials = function (templateSource) {\n    var tokens = mustache.parse(templateSource),\n        partials = [];\n\n    var findPartial = function (tokens, partials) {\n        var i, token;\n        for (i = 0; i < tokens.length; i++) {\n            token = tokens[i];\n            if (token[0] == '>' || token[0] == '<') {\n                partials.push(token[1]);\n            }\n            if (token.length > 4) {\n                findPartial(token[4], partials);\n            }\n        }\n    };\n\n    findPartial(tokens, partials);\n\n    return partials;\n};\n\n/**\n * Load a template and scan it for partials. Recursively fetch the partials.\n *\n * @method cachePartials\n * @private\n * @param {string} templateName - should consist of the component and the name of the template like this:\n *                              core/menu (lib/templates/menu.mustache) or\n *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n * @param {Array} parentage - A list of requested partials in this render chain.\n * @return {Promise} JQuery promise object resolved when all partials are in the cache.\n */\nRenderer.prototype.cachePartials = function (templateName, parentage) {\n    var searchKey = this.currentThemeName + '/' + templateName;\n\n    if (searchKey in cachePartialPromises) {\n        return cachePartialPromises[searchKey];\n    }\n\n    // This promise will not be resolved until all child partials are also resolved and ready.\n    // We create it here to allow us to check for recursive inclusion of templates.\n    // Keep track of the requested partials in this chain.\n    parentage = parentage || [searchKey];\n\n    cachePartialPromises[searchKey] = $.Deferred();\n\n    this.getTemplate(templateName)\n    .then(function (templateSource) {\n        var partials = this.scanForPartials(templateSource);\n        var uniquePartials = partials.filter(function (partialName) {\n            // Check for recursion.\n\n            if (parentage.indexOf(this.currentThemeName + '/' + partialName) >= 0) {\n                // Ignore templates which include a parent template already requested in the current chain.\n                return false;\n            }\n\n            // Ignore templates that include themselves.\n            return partialName != templateName;\n        }.bind(this));\n\n        // Fetch any partial which has not already been fetched.\n        var fetchThemAll = uniquePartials.map(function (partialName) {\n            parentage.push(this.currentThemeName + '/' + partialName);\n            return this.cachePartials(partialName, parentage);\n        }.bind(this));\n\n        // Resolve the templateName promise when all of the children are resolved.\n        return $.when.apply($, fetchThemAll)\n        .then(function () {\n            return cachePartialPromises[searchKey].resolve(templateSource);\n        });\n    }.bind(this))\n    .catch(cachePartialPromises[searchKey].reject);\n\n    return cachePartialPromises[searchKey];\n};\n\n/**\n * Load a template and call doRender on it.\n *\n * @method render\n * @private\n * @param {string} templateName - should consist of the component and the name of the template like this:\n *                              core/menu (lib/templates/menu.mustache) or\n *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n * @param {Object} context - Could be array, string or simple value for the context of the template.\n * @param {string} themeName - Name of the current theme.\n * @return {Promise} JQuery promise object resolved when the template has been rendered.\n */\nRenderer.prototype.render = function (templateName, context, themeName) {\n    if (typeof (themeName) === \"undefined\") {\n        // System context by default.\n        themeName = config.theme;\n    }\n\n    this.currentThemeName = themeName;\n\n    // Preload the module to do the icon rendering based on the theme iconsystem.\n    var modulename = config.iconsystemmodule;\n\n    var ready = $.Deferred();\n    require([modulename], function (System) {\n        var system = new System();\n        if (!(system instanceof IconSystem)) {\n            ready.reject('Invalid icon system specified' + config.iconsystem);\n        } else {\n            iconSystem = system;\n            system.init().then(ready.resolve).catch(notification.exception);\n        }\n    });\n\n    return ready.then(function () {\n            return this.cachePartials(templateName);\n        }.bind(this)).then(function (templateSource) {\n            return this.doRender(templateSource, context, themeName);\n        }.bind(this));\n};\n\n/**\n * Prepend some HTML to a node and trigger events and fire javascript.\n *\n * @method domPrepend\n * @private\n * @param {jQuery|String} element - Element or selector to prepend HTML to\n * @param {String} html - HTML to prepend\n * @param {String} js - Javascript to run after we prepend the html\n * @return {Array} The list of new DOM Nodes\n * @fires event:filterContentUpdated\n */\nvar domPrepend = function (element, html, js) {\n    var node = $(element);\n    if (node.length) {\n        // Prepend the html.\n        var newContent = $(html);\n        node.prepend(newContent);\n        // Run any javascript associated with the new HTML.\n        runTemplateJS(js);\n        // Notify all filters about the new content.\n        filterEvents.notifyFilterContentUpdated(node);\n\n        return newContent.get();\n    }\n\n    return [];\n};\n\n/**\n * Append some HTML to a node and trigger events and fire javascript.\n *\n * @method domAppend\n * @private\n * @param {jQuery|String} element - Element or selector to append HTML to\n * @param {String} html - HTML to append\n * @param {String} js - Javascript to run after we append the html\n * @return {Array} The list of new DOM Nodes\n * @fires event:filterContentUpdated\n */\nvar domAppend = function (element, html, js) {\n    var node = $(element);\n    if (node.length) {\n        // Append the html.\n        var newContent = $(html);\n        node.append(newContent);\n        // Run any javascript associated with the new HTML.\n        runTemplateJS(js);\n        // Notify all filters about the new content.\n        filterEvents.notifyFilterContentUpdated(node);\n\n        return newContent.get();\n    }\n\n    return [];\n};\n\nexport default {\n    // Public variables and functions.\n    /**\n     * Every call to render creates a new instance of the class and calls render on it. This\n     * means each render call has it's own class variables.\n     *\n     * @method render\n     * @private\n     * @param {string} templateName - should consist of the component and the name of the template like this:\n     *                              core/menu (lib/templates/menu.mustache) or\n     *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n     * @param {Object} context - Could be array, string or simple value for the context of the template.\n     * @param {string} themeName - Name of the current theme.\n     * @return {Promise} JQuery promise object resolved when the template has been rendered.\n     */\n    render: function (templateName, context, themeName) {\n        var renderer = new Renderer();\n        return renderer.render(templateName, context, themeName);\n    },\n\n    /**\n     * Prefetch a set of templates without rendering them.\n     *\n     * @method getTemplate\n     * @param {Array} templateNames The list of templates to fetch\n     * @param {String} themeName\n     * @returns {Promise}\n     */\n    prefetchTemplates: function (templateNames, themeName) {\n        var renderer = new Renderer();\n\n        if (typeof themeName === \"undefined\") {\n            // System context by default.\n            themeName = config.theme;\n        }\n\n        return renderer.prefetchTemplates(templateNames, themeName);\n    },\n\n    /**\n     * Every call to render creates a new instance of the class and calls render on it. This\n     * means each render call has it's own class variables.\n     *\n     * This alernate to the standard .render() function returns the html and js in a single object suitable for a\n     * native Promise.\n     *\n     * @method renderForPromise\n     * @private\n     * @param {string} templateName - should consist of the component and the name of the template like this:\n     *                              core/menu (lib/templates/menu.mustache) or\n     *                              tool_bananas/yellow (admin/tool/bananas/templates/yellow.mustache)\n     * @param {Object} context - Could be array, string or simple value for the context of the template.\n     * @param {string} themeName - Name of the current theme.\n     * @return {Promise} JQuery promise object resolved when the template has been rendered.\n     */\n    renderForPromise: function (templateName, context, themeName) {\n        var renderer = new Renderer();\n        return renderer.render(templateName, context, themeName)\n        .then(function (html, js) {\n            return {\n                html: html,\n                js: js,\n            };\n        });\n    },\n\n    /**\n     * Every call to renderIcon creates a new instance of the class and calls renderIcon on it. This\n     * means each render call has it's own class variables.\n     *\n     * @method renderIcon\n     * @public\n     * @param {string} key - Icon key.\n     * @param {string} component - Icon component\n     * @param {string} title - Icon title\n     * @return {Promise} JQuery promise object resolved when the pix has been rendered.\n     */\n    renderPix: function (key, component, title) {\n        var renderer = new Renderer();\n        return renderer.renderIcon(\n            key,\n            getNormalisedComponent(component),\n            title\n        );\n    },\n\n    /**\n     * Execute a block of JS returned from a template.\n     * Call this AFTER adding the template HTML into the DOM so the nodes can be found.\n     *\n     * @method runTemplateJS\n     * @param {string} source - A block of javascript.\n     */\n    runTemplateJS: runTemplateJS,\n\n    /**\n     * Replace a node in the page with some new HTML and run the JS.\n     *\n     * @method replaceNodeContents\n     * @param {JQuery} element - Element or selector to replace.\n     * @param {String} newHTML - HTML to insert / replace.\n     * @param {String} newJS - Javascript to run after the insertion.\n     * @return {Array} The list of new DOM Nodes\n     */\n    replaceNodeContents: function (element, newHTML, newJS) {\n        return domReplace(element, newHTML, newJS, true);\n    },\n\n    /**\n     * Insert a node in the page with some new HTML and run the JS.\n     *\n     * @method replaceNode\n     * @param {JQuery} element - Element or selector to replace.\n     * @param {String} newHTML - HTML to insert / replace.\n     * @param {String} newJS - Javascript to run after the insertion.\n     * @return {Array} The list of new DOM Nodes\n     */\n    replaceNode: function (element, newHTML, newJS) {\n        return domReplace(element, newHTML, newJS, false);\n    },\n\n    /**\n     * Prepend some HTML to a node and trigger events and fire javascript.\n     *\n     * @method prependNodeContents\n     * @param {jQuery|String} element - Element or selector to prepend HTML to\n     * @param {String} html - HTML to prepend\n     * @param {String} js - Javascript to run after we prepend the html\n     * @return {Array} The list of new DOM Nodes\n     */\n    prependNodeContents: function (element, html, js) {\n        return domPrepend(element, html, js);\n    },\n\n    /**\n     * Append some HTML to a node and trigger events and fire javascript.\n     *\n     * @method appendNodeContents\n     * @param {jQuery|String} element - Element or selector to append HTML to\n     * @param {String} html - HTML to append\n     * @param {String} js - Javascript to run after we append the html\n     * @return {Array} The list of new DOM Nodes\n     */\n    appendNodeContents: function (element, html, js) {\n        return domAppend(element, html, js);\n    },\n};\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireWildcard","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_interopRequireDefault","_mustache","_jquery","str","notification","config","storage","_icon_system","filterEvents","Y","Log","Truncate","UserDate","_pending","uniqInstances","templateCache","templatePromises","cachePartialPromises","iconSystem","loadTemplateBuffer","isLoadingTemplates","disallowedNestedHelpers","getNormalisedComponent","component","getTemplatePromiseFromCache","searchKey","$","Deferred","resolve","promise","M","cfg","templaterev","cached","processLoadTemplateBuffer","length","templatesToLoad","slice","serverRequestsDeferred","requests","map","templateData","name","theme","templateDeferred","deferred","cachedPromise","push","methodname","args","template","themename","lang","attr","replace","index","then","promises","response","templateSource","templates","forEach","data","tempSearchKey","join","value","strings","cache_strings","source","catch","error","reject","fetchMany","cacheKey","when","apply","splice","Renderer","this","requiredStrings","requiredJS","requiredDates","currentThemeName","getTemplate","templateName","currentTheme","existingBufferRecords","filter","record","parts","split","shift","prefetchTemplates","templateNames","partialHelper","exception","Error","renderIcon","title","modulename","iconsystemmodule","ready","require","System","system","IconSystem","init","getTemplateName","bind","pixHelper","context","sectionText","helper","text","trim","jsHelper","stringHelper","param","match","parsedParam","JSON","parse","err","window","console","warn","message","cleanStringHelper","quoteHelper","content","stringify","shortenTextHelper","truncate","words","ellipsis","userDateHelper","timestamp","format","addHelperFunction","helperFunction","originalHelpers","reduce","carry","helperName","result","addHelpers","themeName","uniqid","cleanstr","pix","js","quote","shortentext","userdate","globals","getJS","treatStringsInContent","treated","strIndex","walker","char","strFinal","isClean","pattern","search","substring","substr","parseInt","debug","mustache","escape","treatDatesInContent","dates","date","re","RegExp","doRender","iconTemplate","pendingPromise","Pending","render","html","get_strings","runTemplateJS","newscript","append","domReplace","element","newHTML","newJS","replaceChildNodes","replaceNode","newNodes","NodeList","children","destroy","empty","replaceWith","notifyFilterContentUpdated","scanForPartials","tokens","partials","findPartial","i","token","cachePartials","parentage","fetchThemAll","partialName","indexOf","iconsystem","_default","renderer","renderForPromise","renderPix","replaceNodeContents","prependNodeContents","node","newContent","prepend","domPrepend","appendNodeContents","domAppend","_exports"],"mappings":"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"}