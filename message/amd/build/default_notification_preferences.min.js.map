{"version":3,"sources":["../src/default_notification_preferences.js"],"names":["selectors","provider","lockSetting","enabledSetting","allSettings","registerEventListeners","toggleLockSetting","lockedElement","isEnabled","checked","enabledId","id","replace","enabledElement","document","getElementById","closest","classList","toggle","toggleEnableProviderSettings","providerEnabledElement","parentRow","elements","querySelectorAll","forEach","element","toggleAttribute","container","querySelector","addEventListener","e","target","init"],"mappings":"yLA0BMA,CAAAA,SAAS,CAAG,CACdC,QAAQ,CAAE,0CADI,CAEdC,WAAW,CAAE,yBAFC,CAGdC,cAAc,CAAE,0BAHF,CAIdC,WAAW,CAAE,mDAJC,C,CAUZC,sBAAsB,CAAG,IAAM,MAO3BC,CAAAA,iBAAiB,CAAIC,aAAD,EAAmB,MACnCC,CAAAA,SAAS,CAAGD,aAAa,CAACE,OAAd,IADuB,CAEnCC,SAAS,CAAGH,aAAa,CAACI,EAAd,CAAiBC,OAAjB,CAAyB,UAAzB,CAAqC,WAArC,CAFuB,CAInCC,cAAc,CAAGC,QAAQ,CAACC,cAAT,CAAwBL,SAAxB,EAAmCM,OAAnC,CAA2C,oBAA3C,CAJkB,CAKzCH,cAAc,CAACI,SAAf,CAAyBC,MAAzB,CAAgC,aAAhC,CAA+CV,SAA/C,CACH,CAbgC,CAoB3BW,4BAA4B,CAAIC,sBAAD,EAA4B,MACvDZ,CAAAA,SAAS,CAAGY,sBAAsB,CAACX,OAAvB,IAD2C,CAEvDY,SAAS,CAAGD,sBAAsB,CAACJ,OAAvB,CAA+B,IAA/B,CAF2C,CAIvDM,QAAQ,CAAGD,SAAS,CAACE,gBAAV,CAA2BvB,SAAS,CAACI,WAArC,CAJ4C,CAK7DkB,QAAQ,CAACE,OAAT,CAAkBC,OAAD,EAAa,CAC1BA,OAAO,CAACC,eAAR,CAAwB,UAAxB,CAAoC,CAAClB,SAArC,CACH,CAFD,CAGH,CA5BgC,CA8B3BmB,SAAS,CAAGb,QAAQ,CAACc,aAAT,CAAuB,wBAAvB,CA9Be,CAgCjCD,SAAS,CAACJ,gBAAV,CAA2BvB,SAAS,CAACC,QAArC,EAA+CuB,OAA/C,CAAwDJ,sBAAD,EAA4B,CAE/E,GAAI,CAACA,sBAAsB,CAACX,OAA5B,CAAqC,CACjCU,4BAA4B,CAACC,sBAAD,CAC/B,CAEDA,sBAAsB,CAACS,gBAAvB,CAAwC,QAAxC,CAAmDC,CAAD,EAAO,CACrDX,4BAA4B,CAACW,CAAC,CAACC,MAAH,CAC/B,CAFD,CAGH,CATD,EAWAJ,SAAS,CAACJ,gBAAV,CAA2BvB,SAAS,CAACE,WAArC,EAAkDsB,OAAlD,CAA2DjB,aAAD,EAAmB,CAEzE,GAAIA,aAAa,CAACE,OAAlB,CAA2B,CACvBH,iBAAiB,CAACC,aAAD,CACpB,CAEDA,aAAa,CAACsB,gBAAd,CAA+B,QAA/B,CAA0CC,CAAD,EAAO,CAC5CxB,iBAAiB,CAACwB,CAAC,CAACC,MAAH,CACpB,CAFD,CAGH,CATD,CAUH,C,kBASc,CACXC,IAAI,CALK,IAAM,CACf3B,sBAAsB,EACzB,CAEc,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the default settings for the list of notification types on the\n * notifications admin page\n *\n * @module     core_message/default_notification_preferences\n * @class      default_notification_preferences\n * @copyright  2021 Moodle\n * @author     Pau Ferrer Oca√±a <pau@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst selectors = {\n    provider: '.defaultmessageoutputs .provider_enabled',\n    lockSetting: '.locked_message_setting',\n    enabledSetting: '.enabled_message_setting',\n    allSettings: '.locked_message_setting, .enabled_message_setting'\n};\n\n/**\n * Register event listeners for the default_notification_preferences page.\n */\nconst registerEventListeners = () => {\n\n    /**\n     * Update the dimmed status of the \"enabled\" toggle on the notification setting.\n     *\n     * @param {HTMLElement} lockedElement Element that receives the event.\n     */\n    const toggleLockSetting = (lockedElement) => {\n        const isEnabled = lockedElement.checked || false;\n        const enabledId = lockedElement.id.replace('_locked[', '_enabled[');\n\n        const enabledElement = document.getElementById(enabledId).closest('div.custom-control');\n        enabledElement.classList.toggle('dimmed_text', isEnabled);\n    };\n\n    /**\n     * Enable/Disable all settings of the provider.\n     *\n     * @param {HTMLElement} providerEnabledElement Element that receives the event.\n     */\n    const toggleEnableProviderSettings = (providerEnabledElement) => {\n        const isEnabled = providerEnabledElement.checked || false;\n        const parentRow = providerEnabledElement.closest('tr');\n\n        const elements = parentRow.querySelectorAll(selectors.allSettings);\n        elements.forEach((element) => {\n            element.toggleAttribute('disabled', !isEnabled);\n        });\n    };\n\n    const container = document.querySelector('.preferences-container');\n\n    container.querySelectorAll(selectors.provider).forEach((providerEnabledElement) => {\n        // Set the initial statuses.\n        if (!providerEnabledElement.checked) {\n            toggleEnableProviderSettings(providerEnabledElement);\n        }\n\n        providerEnabledElement.addEventListener('change', (e) => {\n            toggleEnableProviderSettings(e.target);\n        });\n    });\n\n    container.querySelectorAll(selectors.lockSetting).forEach((lockedElement) => {\n        // Set the initial statuses.\n        if (lockedElement.checked) {\n            toggleLockSetting(lockedElement);\n        }\n\n        lockedElement.addEventListener('change', (e) => {\n            toggleLockSetting(e.target);\n        });\n    });\n};\n\n/**\n * Initialize the page.\n */\nconst init = () => {\n    registerEventListeners();\n};\n\nexport default {\n    init: init,\n};\n"],"file":"default_notification_preferences.min.js"}