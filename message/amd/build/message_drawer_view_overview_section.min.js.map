{"version":3,"sources":["../src/message_drawer_view_overview_section.js"],"names":["define","$","CustomEvents","Notification","PubSub","Str","Pending","Templates","UserDate","MessageRepository","MessageDrawerEvents","MessageDrawerRouter","MessageDrawerRoutes","LazyLoadList","MessageDrawerViewConversationContants","SELECTORS","TOGGLE","CONVERSATION","BLOCKED_ICON_CONTAINER","LAST_MESSAGE","LAST_MESSAGE_DATE","MUTED_ICON_CONTAINER","UNREAD_COUNT","SECTION_TOTAL_COUNT","SECTION_TOTAL_COUNT_CONTAINER","SECTION_UNREAD_COUNT","PLACEHOLDER_CONTAINER","TEMPLATES","CONVERSATIONS_LIST","CONVERSATIONS_LIST_ITEMS_PLACEHOLDER","LOAD_LIMIT","loadedConversationsById","deletedConversationsById","loadedTotalCounts","loadedUnreadCounts","isVisible","root","getRoot","hasClass","setExpanded","addClass","setCollapsed","removeClass","renderTotalCount","count","container","find","countElement","text","get_string","done","string","attr","numPlaceholders","placeholders","Array","apply","map","render","then","html","placeholderContainer","catch","renderUnreadCount","formatConversationFromEvent","conversation","recursivelyLowercaseKeys","object","Object","keys","reduce","carry","key","isArray","toLowerCase","formatted","messages","message","useridfrom","userfrom","id","conversations","userId","pending","formatMessagePreview","lastMessage","tmpElement","document","createElement","innerHTML","replace","isMedia","querySelector","messagePreview","indexOf","pix","label","includes","labelString","renderPix","icon","exception","mapPromises","length","formattedConversation","imageurl","name","subname","unreadcount","ismuted","lastmessagedate","timecreated","sentfromcurrentuser","lastmessage","otherUser","type","CONVERSATION_TYPES","SELF","members","PRIVATE","member","userid","showonlinestatus","isonline","isblocked","PUBLIC","lastsendername","fullname","Promise","all","formattedConversations","forEach","Date","toDateString","istoday","js","resolve","Deferred","error","getLoadCallback","types","includeFavourites","offset","includeSelfConversations","nonSelfConversationTypes","filter","candidate","getConversations","response","slice","setLoadedAll","getTotalConversationCountElement","getTotalUnreadConversationCountElement","incrementTotalConversationCount","element","parseInt","decrementTotalConversationCount","decrementTotalUnreadConversationCount","getConversationElement","conversationId","getConversationElementFromUserId","muteConversation","conversationElement","unmuteConversation","blockContact","unblockContact","createNewConversationFromEvent","existingConversations","listRoot","showContent","hideEmptyMessage","contentContainer","getContentContainer","prepend","deleteConversation","remove","hideContent","showEmptyMessage","markConversationAsRead","unreadCount","registerEventListeners","namespace","loadCallback","fromPanel","conversationBelongsToThisSection","conversationType","isFavourite","toggle","css","outerHeight","on","show","append","subscribe","CONTACT_BLOCKED","CONTACT_UNBLOCKED","CONVERSATION_SET_MUTED","CONVERSATION_UNSET_MUTED","CONVERSATION_NEW_LAST_MESSAGE","pendingPromise","loggedInUserId","timeadded","CONVERSATION_DELETED","CONVERSATION_READ","CONVERSATION_SET_FAVOURITE","CONVERSATION_UNSET_FAVOURITE","events","activate","e","data","target","closest","go","VIEW_CONVERSATION","originalEvent","preventDefault","header","body","footer","totalCountPromise","unreadCountPromise"],"mappings":"mjBAsBAA,OAAM,qDACN,CACI,QADJ,CAEI,gCAFJ,CAGI,mBAHJ,CAII,aAJJ,CAKI,UALJ,CAMI,cANJ,CAOI,gBAPJ,CAQI,gBARJ,CASI,iCATJ,CAUI,oCAVJ,CAWI,oCAXJ,CAYI,oCAZJ,CAaI,4CAbJ,CAcI,yDAdJ,CADM,CAiBN,SACIC,CADJ,CAEIC,YAFJ,CAGIC,YAHJ,CAIIC,MAJJ,CAKIC,GALJ,CAMIC,OANJ,CAOIC,SAPJ,CAQIC,QARJ,CASIC,iBATJ,CAUIC,mBAVJ,CAWIC,mBAXJ,CAYIC,mBAZJ,CAaIC,YAbJ,CAcIC,qCAdJ,CAeE,IAEMC,CAAAA,SAAS,CAAG,CACZC,MAAM,CAAE,0BADI,CAEZC,YAAY,CAAE,wBAFF,CAGZC,sBAAsB,CAAE,wCAHZ,CAIZC,YAAY,CAAE,gCAJF,CAKZC,iBAAiB,CAAE,qCALP,CAMZC,oBAAoB,CAAE,wCANV,CAOZC,YAAY,CAAE,gCAPF,CAQZC,mBAAmB,CAAE,uCART,CASZC,6BAA6B,CAAE,iDATnB,CAUZC,oBAAoB,CAAE,wCAVV,CAWZC,qBAAqB,CAAE,yCAXX,CAFlB,CAgBMC,SAAS,CAAG,CACZC,kBAAkB,CAAE,gDADR,CAEZC,oCAAoC,CAAE,kEAF1B,CAhBlB,CAqBMC,UAAU,CAAG,EArBnB,CAsBMC,uBAAuB,CAAG,EAtBhC,CAuBMC,wBAAwB,CAAG,EAvBjC,CAwBMC,iBAAiB,GAxBvB,CAyBMC,kBAAkB,GAzBxB,CAiCMC,SAAS,CAAG,SAASC,IAAT,CAAe,CAC3B,MAAOvB,CAAAA,YAAY,CAACwB,OAAb,CAAqBD,IAArB,EAA2BE,QAA3B,CAAoC,MAApC,CACV,CAnCH,CA0CMC,WAAW,CAAG,SAASH,IAAT,CAAe,CAC7BA,IAAI,CAACI,QAAL,CAAc,UAAd,CACH,CA5CH,CAmDMC,YAAY,CAAG,SAASL,IAAT,CAAe,CAC9BA,IAAI,CAACM,WAAL,CAAiB,UAAjB,CACH,CArDH,CA8DMC,gBAAgB,CAAG,SAASP,IAAT,CAAeQ,KAAf,CAAsB,IACrCC,CAAAA,SAAS,CAAGT,IAAI,CAACU,IAAL,CAAU/B,SAAS,CAACS,6BAApB,CADyB,CAErCuB,YAAY,CAAGF,SAAS,CAACC,IAAV,CAAe/B,SAAS,CAACQ,mBAAzB,CAFsB,CAGzCwB,YAAY,CAACC,IAAb,CAAkBJ,KAAlB,EACAC,SAAS,CAACH,WAAV,CAAsB,QAAtB,EACArC,GAAG,CAAC4C,UAAJ,CAAe,oBAAf,CAAqC,cAArC,CAAqDL,KAArD,EAA4DM,IAA5D,CAAiE,SAASC,MAAT,CAAiB,CAC9EN,SAAS,CAACO,IAAV,CAAe,YAAf,CAA6BD,MAA7B,CACH,CAFD,EALyC,GASrCE,CAAAA,eAAe,CAAW,EAAR,CAAAT,KAAK,CAAQ,EAAR,CAAaA,KATC,CAWrCU,YAAY,CAAGC,KAAK,CAACC,KAAN,CAAY,IAAZ,CAAkBD,KAAK,CAACF,eAAD,CAAvB,EAA0CI,GAA1C,CAA8C,UAAW,CACxE,QACH,CAFkB,CAXsB,CAiBzClD,SAAS,CAACmD,MAAV,CAAiB/B,SAAS,CAACE,oCAA3B,CAAiE,CAACyB,YAAY,CAAEA,YAAf,CAAjE,EACKK,IADL,CACU,SAASC,IAAT,CAAe,CACjB,GAAIC,CAAAA,oBAAoB,CAAGzB,IAAI,CAACU,IAAL,CAAU/B,SAAS,CAACW,qBAApB,CAA3B,CACAmC,oBAAoB,CAACD,IAArB,CAA0BA,IAA1B,CAEH,CALL,EAMKE,KANL,CAMW,UAAW,CAEjB,CARL,CASH,CAxFH,CAgGMC,iBAAiB,CAAG,SAAS3B,IAAT,CAAeQ,KAAf,CAAsB,CAC1C,GAAIG,CAAAA,YAAY,CAAGX,IAAI,CAACU,IAAL,CAAU/B,SAAS,CAACU,oBAApB,CAAnB,CACAsB,YAAY,CAACC,IAAb,CAAkBJ,KAAlB,EAEAvC,GAAG,CAAC4C,UAAJ,CAAe,qBAAf,CAAsC,cAAtC,CAAsDL,KAAtD,EAA6DM,IAA7D,CAAkE,SAASC,MAAT,CAAiB,CAC/EJ,YAAY,CAACK,IAAb,CAAkB,YAAlB,CAAgCD,MAAhC,CACH,CAFD,EAIA,GAAY,CAAR,CAAAP,KAAJ,CAAe,CACXG,YAAY,CAACL,WAAb,CAAyB,QAAzB,CACH,CACJ,CA3GH,CAoHMsB,2BAA2B,CAAG,SAASC,YAAT,CAAuB,IAEjDC,CAAAA,wBAAwB,CAAG,SAASC,MAAT,CAAiB,CAC5C,MAAOC,CAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAApB,CAA2B,SAASC,KAAT,CAAgBC,GAAhB,CAAqB,CACnD,GAAIvE,CAAC,CAACwE,OAAF,CAAUN,MAAM,CAACK,GAAD,CAAhB,CAAJ,CAA4B,CACxBD,KAAK,CAACC,GAAG,CAACE,WAAJ,EAAD,CAAL,CAA2BP,MAAM,CAACK,GAAD,CAAN,CAAYf,GAAZ,CAAgBS,wBAAhB,CAC9B,CAFD,IAEO,CACHK,KAAK,CAACC,GAAG,CAACE,WAAJ,EAAD,CAAL,CAA2BP,MAAM,CAACK,GAAD,CACpC,CAED,MAAOD,CAAAA,KACV,CARM,CAQJ,EARI,CASV,CAZoD,CAejDI,SAAS,CAAGT,wBAAwB,CAACD,YAAD,CAfa,CAkBrDU,SAAS,CAACC,QAAV,CAAqBD,SAAS,CAACC,QAAV,CAAmBnB,GAAnB,CAAuB,SAASoB,OAAT,CAAkB,CAC1DA,OAAO,CAACC,UAAR,CAAqBD,OAAO,CAACE,QAAR,CAAiBC,EAAtC,CACA,MAAOH,CAAAA,OACV,CAHoB,CAArB,CAKA,MAAOF,CAAAA,SACV,CA5IH,CAqJMjB,MAAM,CAAG,SAASuB,aAAT,CAAwBC,MAAxB,CAAgC,IAKrCC,CAAAA,OAAO,CAAG,GAAI7E,CAAAA,OALuB,CAOrC8E,oBAAoB,+DAAG,iBAAeC,WAAf,4KAClBA,WADkB,wDAEZ,IAFY,SAMnBC,UANmB,CAMNC,QAAQ,CAACC,aAAT,CAAuB,SAAvB,CANM,CAOvBF,UAAU,CAACG,SAAX,CAAuBJ,WAAW,CAACrC,IAAZ,CAAiB0C,OAAjB,CAAyB,QAAzB,CAAmC,SAAnC,CAAvB,CACIC,OARmB,CAQTL,UAAU,CAACM,aAAX,CAAyB,OAAzB,KARS,IAUlBD,OAVkB,yBAafE,cAbe,CAaE5F,CAAC,CAACoF,WAAW,CAACrC,IAAb,CAAD,CAAoBA,IAApB,EAbF,KAcf6C,cAde,8BAgBoB,CAAC,CAAhC,EAAAA,cAAc,CAACC,OAAf,CAAuB,GAAvB,CAhBW,0DAiBJD,cAjBI,UAuBnBE,GAvBmB,CAuBb,mCAvBa,CAwBnBC,KAxBmB,CAwBX,iCAxBW,CA0BvB,GAAIX,WAAW,CAACrC,IAAZ,CAAiBiD,QAAjB,CAA0B,MAA1B,CAAJ,CAAuC,CACnCF,GAAG,CAAG,uBAAN,CACAC,KAAK,CAAG,qBACX,CAHD,IAGO,IAAIX,WAAW,CAACrC,IAAZ,CAAiBiD,QAAjB,CAA0B,QAA1B,CAAJ,CAAyC,CAC5CF,GAAG,CAAG,uBAAN,CACAC,KAAK,CAAG,qBACX,CAHM,IAGA,IAAIX,WAAW,CAACrC,IAAZ,CAAiBiD,QAAjB,CAA0B,QAA1B,CAAJ,CAAyC,CAC5CF,GAAG,CAAG,uBAAN,CACAC,KAAK,CAAG,qBACX,CAnCsB,wCAsCK3F,CAAAA,GAAG,CAAC4C,UAAJ,CAAe+C,KAAf,CAAsB,cAAtB,CAtCL,SAsCfE,WAtCe,sCAuCF3F,CAAAA,SAAS,CAAC4F,SAAV,CAAoBJ,GAApB,CAAyB,MAAzB,CAAiCG,WAAjC,CAvCE,SAuCfE,IAvCe,+CAwCZA,IAAI,CAAG,GAAP,CAAaF,WAxCD,6DA0CnB/F,YAAY,CAACkG,SAAb,cA1CmB,gCA2CZ,IA3CY,uEAAH,0DAPiB,CAsDrCC,WAAW,CAAGrB,aAAa,CAACxB,GAAd,CAAkB,SAASQ,YAAT,CAAuB,CAEvD,GAAIoB,CAAAA,WAAW,CAAGpB,YAAY,CAACW,QAAb,CAAsB2B,MAAtB,CAA+BtC,YAAY,CAACW,QAAb,CAAsBX,YAAY,CAACW,QAAb,CAAsB2B,MAAtB,CAA+B,CAArD,CAA/B,CAAyF,IAA3G,CAEA,MAAOnB,CAAAA,oBAAoB,CAACC,WAAD,CAApB,CACF1B,IADE,CACG,SAASkC,cAAT,CAAyB,IACvBW,CAAAA,qBAAqB,CAAG,CACxBxB,EAAE,CAAEf,YAAY,CAACe,EADO,CAExByB,QAAQ,CAAExC,YAAY,CAACwC,QAFC,CAGxBC,IAAI,CAAEzC,YAAY,CAACyC,IAHK,CAIxBC,OAAO,CAAE1C,YAAY,CAAC0C,OAJE,CAKxBC,WAAW,CAAE3C,YAAY,CAAC2C,WALF,CAMxBC,OAAO,CAAE5C,YAAY,CAAC4C,OANE,CAOxBC,eAAe,CAAEzB,WAAW,CAAGA,WAAW,CAAC0B,WAAf,CAA6B,IAPjC,CAQxBC,mBAAmB,CAAE3B,WAAW,CAAGA,WAAW,CAACP,UAAZ,EAA0BI,MAA7B,CAAsC,IAR9C,CASxB+B,WAAW,CAAEpB,cATW,CADD,CAavBqB,SAAS,CAAG,IAbW,CAc3B,GAAIjD,YAAY,CAACkD,IAAb,EAAqBrG,qCAAqC,CAACsG,kBAAtC,CAAyDC,IAAlF,CAAwF,CAEpFH,SAAS,CAAGjD,YAAY,CAACqD,OAAb,CAAqB,CAArB,CACf,CAHD,IAGO,IAAIrD,YAAY,CAACkD,IAAb,EAAqBrG,qCAAqC,CAACsG,kBAAtC,CAAyDG,OAAlF,CAA2F,CAE9FL,SAAS,CAAGjD,YAAY,CAACqD,OAAb,CAAqBhD,MAArB,CAA4B,SAASC,KAAT,CAAgBiD,MAAhB,CAAwB,CAC5D,GAAI,CAACjD,KAAD,EAAUiD,MAAM,CAACxC,EAAP,EAAaE,MAA3B,CAAmC,CAC/BX,KAAK,CAAGiD,MACX,CACD,MAAOjD,CAAAA,KACV,CALW,CAKT,IALS,CAMf,CAED,GAAkB,IAAd,GAAA2C,SAAJ,CAAwB,CACpBV,qBAAqB,CAACiB,MAAtB,CAA+BP,SAAS,CAAClC,EAAzC,CACAwB,qBAAqB,CAACkB,gBAAtB,CAAyCR,SAAS,CAACQ,gBAAnD,CACAlB,qBAAqB,CAACmB,QAAtB,CAAiCT,SAAS,CAACS,QAA3C,CACAnB,qBAAqB,CAACoB,SAAtB,CAAkCV,SAAS,CAACU,SAC/C,CAED,GAAI3D,YAAY,CAACkD,IAAb,EAAqBrG,qCAAqC,CAACsG,kBAAtC,CAAyDS,MAAlF,CAA0F,CACtFrB,qBAAqB,CAACsB,cAAtB,CAAuC7D,YAAY,CAACqD,OAAb,CAAqBhD,MAArB,CAA4B,SAASC,KAAT,CAAgBiD,MAAhB,CAAwB,CACvF,GAAI,CAACjD,KAAD,EAAUc,WAAV,EAAyBmC,MAAM,CAACxC,EAAP,EAAaK,WAAW,CAACP,UAAtD,CAAkE,CAC9DP,KAAK,CAAGiD,MAAM,CAACO,QAClB,CACD,MAAOxD,CAAAA,KACV,CALsC,CAKpC,IALoC,CAM1C,CAED,MAAOiC,CAAAA,qBACV,CA7CE,EA6CA1C,KA7CA,CA6CM3D,YAAY,CAACkG,SA7CnB,CA8CV,CAlDiB,CAtDuB,CA0GzC,MAAO2B,CAAAA,OAAO,CAACC,GAAR,CAAY3B,WAAZ,EACF3C,IADE,CACG,SAASuE,sBAAT,CAAiC,CACnCA,sBAAsB,CAACC,OAAvB,CAA+B,SAASlE,YAAT,CAAuB,CAClD,GAAI,GAAImE,CAAAA,IAAJ,GAAWC,YAAX,IAA6B,GAAID,CAAAA,IAAJ,CAAwC,GAA/B,CAAAnE,YAAY,CAAC6C,eAAtB,EAA8CuB,YAA9C,EAAjC,CAA+F,CAC3FpE,YAAY,CAACqE,OAAb,GACH,CACJ,CAJD,EAMA,MAAO/H,CAAAA,SAAS,CAACmD,MAAV,CAAiB/B,SAAS,CAACC,kBAA3B,CAA+C,CAACqD,aAAa,CAAEiD,sBAAhB,CAA/C,CACV,CATE,EASAvE,IATA,CASK,SAASC,IAAT,CAAe2E,EAAf,CAAmB,CACvBpD,OAAO,CAACqD,OAAR,GACA,MAAOvI,CAAAA,CAAC,CAACwI,QAAF,GAAaD,OAAb,CAAqB5E,IAArB,CAA2B2E,EAA3B,CACV,CAZE,EAYAzE,KAZA,CAYM,SAAS4E,KAAT,CAAgB,CACrBvD,OAAO,CAACqD,OAAR,GACArI,YAAY,CAACkG,SAAb,CAAuBqC,KAAvB,CACH,CAfE,CAgBV,CA/QH,CAyRMC,eAAe,CAAG,SAASC,KAAT,CAAgBC,iBAAhB,CAAmCC,MAAnC,CAA2C,IAOzD3B,CAAAA,IAAI,CAAG,IAPkD,CASzD4B,wBAAwB,GATiC,CAU7D,GAAIH,KAAK,EAAIA,KAAK,CAACrC,MAAnB,CAA2B,CAEvB,GAAIyC,CAAAA,wBAAwB,CAAGJ,KAAK,CAACK,MAAN,CAAa,SAASC,SAAT,CAAoB,CAC5D,MAAOA,CAAAA,SAAS,EAAIpI,qCAAqC,CAACsG,kBAAtC,CAAyDC,IAChF,CAF8B,CAA/B,CAKA0B,wBAAwB,CAAGH,KAAK,CAACrC,MAAN,EAAgByC,wBAAwB,CAACzC,MAApE,CAGAY,IAAI,CAAG6B,wBAAwB,CAAC,CAAD,CAClC,CAED,MAAO,UAAS5G,IAAT,CAAe8C,MAAf,CAAuB,CAC1B,MAAOzE,CAAAA,iBAAiB,CAAC0I,gBAAlB,CACCjE,MADD,CAECiC,IAFD,CAGCrF,UAAU,CAAG,CAHd,CAICgH,MAJD,CAKCD,iBALD,CAMCE,wBAND,EAQFpF,IARE,CAQG,SAASyF,QAAT,CAAmB,CACrB,GAAInE,CAAAA,aAAa,CAAGmE,QAAQ,CAACnE,aAA7B,CAEA,GAAIA,aAAa,CAACsB,MAAd,CAAuBzE,UAA3B,CAAuC,CACnCmD,aAAa,CAAGA,aAAa,CAACoE,KAAd,CAAoB,CAApB,CAAuB,CAAC,CAAxB,CACnB,CAFD,IAEO,CACHxI,YAAY,CAACyI,YAAb,CAA0BlH,IAA1B,IACH,CAED0G,MAAM,CAAGA,MAAM,CAAGhH,UAAlB,CAEAmD,aAAa,CAACkD,OAAd,CAAsB,SAASlE,YAAT,CAAuB,CACzClC,uBAAuB,CAACkC,YAAY,CAACe,EAAd,CAAvB,CAA2Cf,YAC9C,CAFD,EAIA,MAAOgB,CAAAA,aACV,CAxBE,EAyBFnB,KAzBE,CAyBI3D,YAAY,CAACkG,SAzBjB,CA0BV,CACJ,CA5UH,CAoVMkD,gCAAgC,CAAG,SAASnH,IAAT,CAAe,CAClD,MAAOA,CAAAA,IAAI,CAACU,IAAL,CAAU/B,SAAS,CAACQ,mBAApB,CACV,CAtVH,CA8VMiI,sCAAsC,CAAG,SAASpH,IAAT,CAAe,CACxD,MAAOA,CAAAA,IAAI,CAACU,IAAL,CAAU/B,SAAS,CAACU,oBAApB,CACV,CAhWH,CAuWMgI,+BAA+B,CAAG,SAASrH,IAAT,CAAe,CACjD,GAAIH,iBAAJ,CAAuB,IACfyH,CAAAA,OAAO,CAAGH,gCAAgC,CAACnH,IAAD,CAD3B,CAEfQ,KAAK,CAAG+G,QAAQ,CAACD,OAAO,CAAC1G,IAAR,EAAD,CAFD,CAGnBJ,KAAK,CAAGA,KAAK,CAAG,CAAhB,CACA8G,OAAO,CAAC1G,IAAR,CAAaJ,KAAb,CACH,CACJ,CA9WH,CAqXMgH,+BAA+B,CAAG,SAASxH,IAAT,CAAe,CACjD,GAAIH,iBAAJ,CAAuB,IACfyH,CAAAA,OAAO,CAAGH,gCAAgC,CAACnH,IAAD,CAD3B,CAEfQ,KAAK,CAAG+G,QAAQ,CAACD,OAAO,CAAC1G,IAAR,EAAD,CAFD,CAGnBJ,KAAK,CAAGA,KAAK,CAAG,CAAhB,CACA8G,OAAO,CAAC1G,IAAR,CAAaJ,KAAb,CACH,CACJ,CA5XH,CAmYMiH,qCAAqC,CAAG,SAASzH,IAAT,CAAe,CACvD,GAAIF,kBAAJ,CAAwB,IAChBwH,CAAAA,OAAO,CAAGF,sCAAsC,CAACpH,IAAD,CADhC,CAEhBQ,KAAK,CAAG+G,QAAQ,CAACD,OAAO,CAAC1G,IAAR,EAAD,CAFA,CAGpBJ,KAAK,CAAGA,KAAK,CAAG,CAAhB,CACA8G,OAAO,CAAC1G,IAAR,CAAaJ,KAAb,EAEA,GAAY,CAAR,CAAAA,KAAJ,CAAe,CACX8G,OAAO,CAAClH,QAAR,CAAiB,QAAjB,CACH,CACJ,CACJ,CA9YH,CAuZMsH,sBAAsB,CAAG,SAAS1H,IAAT,CAAe2H,cAAf,CAA+B,CACxD,MAAO3H,CAAAA,IAAI,CAACU,IAAL,CAAU,2BAA4BiH,cAA5B,CAA6C,KAAvD,CACV,CAzZH,CAkaMC,gCAAgC,CAAG,SAAS5H,IAAT,CAAe8C,MAAf,CAAuB,CAC1D,MAAO9C,CAAAA,IAAI,CAACU,IAAL,CAAU,mBAAoBoC,MAApB,CAA6B,KAAvC,CACV,CApaH,CA2aM+E,gBAAgB,CAAG,SAASC,mBAAT,CAA8B,CACjDA,mBAAmB,CAACpH,IAApB,CAAyB/B,SAAS,CAACM,oBAAnC,EAAyDqB,WAAzD,CAAqE,QAArE,CACH,CA7aH,CAobMyH,kBAAkB,CAAG,SAASD,mBAAT,CAA8B,CACnDA,mBAAmB,CAACpH,IAApB,CAAyB/B,SAAS,CAACM,oBAAnC,EAAyDmB,QAAzD,CAAkE,QAAlE,CACH,CAtbH,CA6bM4H,YAAY,CAAG,SAASF,mBAAT,CAA8B,CAC7CA,mBAAmB,CAACpH,IAApB,CAAyB/B,SAAS,CAACG,sBAAnC,EAA2DwB,WAA3D,CAAuE,QAAvE,CACH,CA/bH,CAscM2H,cAAc,CAAG,SAASH,mBAAT,CAA8B,CAC/CA,mBAAmB,CAACpH,IAApB,CAAyB/B,SAAS,CAACG,sBAAnC,EAA2DsB,QAA3D,CAAoE,QAApE,CACH,CAxcH,CAkdM8H,8BAA8B,CAAG,SAASlI,IAAT,CAAe6B,YAAf,CAA6BiB,MAA7B,CAAqC,CACtE,GAAIqF,CAAAA,qBAAqB,CAAGnI,IAAI,CAACU,IAAL,CAAU/B,SAAS,CAACE,YAApB,CAA5B,CAEA,GAAI,CAACsJ,qBAAqB,CAAChE,MAA3B,CAAmC,CAG/B,GAAIiE,CAAAA,QAAQ,CAAG3J,YAAY,CAACwB,OAAb,CAAqBD,IAArB,CAAf,CACAvB,YAAY,CAAC4J,WAAb,CAAyBD,QAAzB,EACA3J,YAAY,CAAC6J,gBAAb,CAA8BF,QAA9B,CACH,CAGDzI,uBAAuB,CAACkC,YAAY,CAACe,EAAd,CAAvB,CAA2Cf,YAA3C,CAEA,MAAOP,CAAAA,MAAM,CAAC,CAACO,YAAD,CAAD,CAAiBiB,MAAjB,CAAN,CACFvB,IADE,CACG,SAASC,IAAT,CAAe,CACjB,GAAI+G,CAAAA,gBAAgB,CAAG9J,YAAY,CAAC+J,mBAAb,CAAiCxI,IAAjC,CAAvB,CACA,MAAOuI,CAAAA,gBAAgB,CAACE,OAAjB,CAAyBjH,IAAzB,CACV,CAJE,EAKFD,IALE,CAKG,UAAW,CACb,MAAO8F,CAAAA,+BAA+B,CAACrH,IAAD,CACzC,CAPE,EAQF0B,KARE,CAQI3D,YAAY,CAACkG,SARjB,CASV,CAzeH,CAifMyE,kBAAkB,CAAG,SAAS1I,IAAT,CAAe8H,mBAAf,CAAoC,CACzDA,mBAAmB,CAACa,MAApB,GACAnB,+BAA+B,CAACxH,IAAD,CAA/B,CAEA,GAAI6C,CAAAA,aAAa,CAAG7C,IAAI,CAACU,IAAL,CAAU/B,SAAS,CAACE,YAApB,CAApB,CACA,GAAI,CAACgE,aAAa,CAACsB,MAAnB,CAA2B,CAGvB,GAAIiE,CAAAA,QAAQ,CAAG3J,YAAY,CAACwB,OAAb,CAAqBD,IAArB,CAAf,CACAvB,YAAY,CAACmK,WAAb,CAAyBR,QAAzB,EACA3J,YAAY,CAACoK,gBAAb,CAA8BT,QAA9B,CACH,CACJ,CA7fH,CAqgBMU,sBAAsB,CAAG,SAAS9I,IAAT,CAAe8H,mBAAf,CAAoC,CAC7D,GAAIiB,CAAAA,WAAW,CAAGjB,mBAAmB,CAACpH,IAApB,CAAyB/B,SAAS,CAACO,YAAnC,CAAlB,CACA6J,WAAW,CAACnI,IAAZ,CAAiB,GAAjB,EACAmI,WAAW,CAAC3I,QAAZ,CAAqB,QAArB,EACAqH,qCAAqC,CAACzH,IAAD,CACxC,CA1gBH,CAshBMgJ,sBAAsB,CAAG,SAASC,SAAT,CAAoBjJ,IAApB,CAA0BkJ,YAA1B,CAAwC1C,KAAxC,CAA+CC,iBAA/C,CAAkE0C,SAAlE,CAA6E,IAClGf,CAAAA,QAAQ,CAAG3J,YAAY,CAACwB,OAAb,CAAqBD,IAArB,CADuF,CAElGoJ,gCAAgC,CAAG,SAASvH,YAAT,CAAuB,CAE1D,GAAIwH,CAAAA,gBAAgB,CAAG9B,QAAQ,CAAC1F,YAAY,CAACkD,IAAd,CAAoB,EAApB,CAA/B,CACA,GAEKyB,KAAK,EAAsC,CAAlC,CAAAA,KAAK,CAAC9C,OAAN,CAAc2F,gBAAd,CAAV,EAEC5C,iBAAiB,EAAI,CAAC5E,YAAY,CAACyH,WAFpC,EAIC,CAAC7C,iBAAD,EAAsB5E,YAAY,CAACyH,WANxC,CAOE,CACE,QACH,CAED,QACH,CAjBqG,CAqBlGC,MAAM,CAAGvJ,IAAI,CAACU,IAAL,CAAU/B,SAAS,CAACC,MAApB,CArByF,CAsBtGoB,IAAI,CAACwJ,GAAL,CAAS,YAAT,CAAuBD,MAAM,CAACE,WAAP,EAAvB,EAEAzJ,IAAI,CAAC0J,EAAL,CAAQ,kBAAR,CAA4B,UAAW,CACnCvJ,WAAW,CAACH,IAAD,CAAX,CACAvB,YAAY,CAACkL,IAAb,CAAkBvB,QAAlB,CAA4Bc,YAA5B,CAA0C,SAASX,gBAAT,CAA2B1F,aAA3B,CAA0CC,MAA1C,CAAkD,CACxF,MAAOxB,CAAAA,MAAM,CAACuB,aAAD,CAAgBC,MAAhB,CAAN,CACFvB,IADE,CACG,SAASC,IAAT,CAAe,CACjB+G,gBAAgB,CAACqB,MAAjB,CAAwBpI,IAAxB,EACA,MAAOA,CAAAA,IACV,CAJE,EAKFE,KALE,CAKI3D,YAAY,CAACkG,SALjB,CAMV,CAPD,CAQH,CAVD,EAYAjE,IAAI,CAAC0J,EAAL,CAAQ,oBAAR,CAA8B,UAAW,CACrCrJ,YAAY,CAACL,IAAD,CACf,CAFD,EAIAhC,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAACwL,eAArC,CAAsD,SAAShH,MAAT,CAAiB,CACnE,GAAIgF,CAAAA,mBAAmB,CAAGF,gCAAgC,CAAC5H,IAAD,CAAO8C,MAAP,CAA1D,CACA,GAAIgF,mBAAmB,CAAC3D,MAAxB,CAAgC,CAC5B6D,YAAY,CAACF,mBAAD,CACf,CACJ,CALD,EAOA9J,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAACyL,iBAArC,CAAwD,SAASjH,MAAT,CAAiB,CACrE,GAAIgF,CAAAA,mBAAmB,CAAGF,gCAAgC,CAAC5H,IAAD,CAAO8C,MAAP,CAA1D,CAEA,GAAIgF,mBAAmB,CAAC3D,MAAxB,CAAgC,CAC5B8D,cAAc,CAACH,mBAAD,CACjB,CACJ,CAND,EAQA9J,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAAC0L,sBAArC,CAA6D,SAASnI,YAAT,CAAuB,IAC5E8F,CAAAA,cAAc,CAAG9F,YAAY,CAACe,EAD8C,CAE5EkF,mBAAmB,CAAGJ,sBAAsB,CAAC1H,IAAD,CAAO2H,cAAP,CAFgC,CAGhF,GAAIG,mBAAmB,CAAC3D,MAAxB,CAAgC,CAC5B0D,gBAAgB,CAACC,mBAAD,CACnB,CACJ,CAND,EAQA9J,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAAC2L,wBAArC,CAA+D,SAASpI,YAAT,CAAuB,IAC9E8F,CAAAA,cAAc,CAAG9F,YAAY,CAACe,EADgD,CAE9EkF,mBAAmB,CAAGJ,sBAAsB,CAAC1H,IAAD,CAAO2H,cAAP,CAFkC,CAGlF,GAAIG,mBAAmB,CAAC3D,MAAxB,CAAgC,CAC5B4D,kBAAkB,CAACD,mBAAD,CACrB,CACJ,CAND,EAQA9J,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAAC4L,6BAArC,CAAoE,SAASrI,YAAT,CAAuB,CACvF,GAAI,CAACuH,gCAAgC,CAACvH,YAAD,CAArC,CAAqD,CACjD,MACH,CAHsF,GAKnFsI,CAAAA,cAAc,CAAG,GAAIjM,CAAAA,OAAJ,CAAY,uDAAZ,CALkE,CAMnFkM,cAAc,CAAGvI,YAAY,CAACuI,cANqD,CAOnFzC,cAAc,CAAG9F,YAAY,CAACe,EAPqD,CAQnF0E,OAAO,CAAGI,sBAAsB,CAAC1H,IAAD,CAAO2H,cAAP,CARmD,CASvF9F,YAAY,CAAGD,2BAA2B,CAACC,YAAD,CAA1C,CACA,GAAIyF,OAAO,CAACnD,MAAZ,CAAoB,CAChB,GAAIoE,CAAAA,gBAAgB,CAAG9J,YAAY,CAAC+J,mBAAb,CAAiCxI,IAAjC,CAAvB,CACAsB,MAAM,CAAC,CAACO,YAAD,CAAD,CAAiBuI,cAAjB,CAAN,CACK7I,IADL,CACU,SAASC,IAAT,CAAe,CACjB,GAAI5B,wBAAwB,CAAC+H,cAAD,CAA5B,CAA8C,CAE1C,GAAI9F,YAAY,CAACW,QAAb,CAAsB,CAAtB,EAAyB6H,SAAzB,CAAqCzK,wBAAwB,CAAC+H,cAAD,CAAjE,CAAmF,CAG/E,MACH,CACJ,CACDY,gBAAgB,CAACE,OAAjB,CAAyBjH,IAAzB,EACA8F,OAAO,CAACqB,MAAR,EAGH,CAdL,EAeKpH,IAfL,CAeU4I,cAAc,CAAC/D,OAfzB,EAgBK1E,KAhBL,CAgBW3D,YAAY,CAACkG,SAhBxB,CAiBH,CAnBD,IAmBO,IAAIpC,YAAY,CAACW,QAAb,CAAsB2B,MAA1B,CAAkC,CACrC+D,8BAA8B,CAAClI,IAAD,CAAO6B,YAAP,CAAqBuI,cAArB,CAA9B,CACC7I,IADD,CACM4I,cAAc,CAAC/D,OADrB,EAEC1E,KAFD,EAGH,CAJM,IAIA,CACHyI,cAAc,CAAC/D,OAAf,EACH,CACJ,CApCD,EAsCApI,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAACgM,oBAArC,CAA2D,SAAS3C,cAAT,CAAyB,CAChF,GAAIG,CAAAA,mBAAmB,CAAGJ,sBAAsB,CAAC1H,IAAD,CAAO2H,cAAP,CAAhD,CACA,MAAOhI,CAAAA,uBAAuB,CAACgI,cAAD,CAA9B,CACA/H,wBAAwB,CAAC+H,cAAD,CAAxB,CAA2C,GAAI3B,CAAAA,IAA/C,CACA,GAAI8B,mBAAmB,CAAC3D,MAAxB,CAAgC,CAC5BuE,kBAAkB,CAAC1I,IAAD,CAAO8H,mBAAP,CACrB,CACJ,CAPD,EASA9J,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAACiM,iBAArC,CAAwD,SAAS5C,cAAT,CAAyB,CAC7E,GAAIG,CAAAA,mBAAmB,CAAGJ,sBAAsB,CAAC1H,IAAD,CAAO2H,cAAP,CAAhD,CACA,GAAIG,mBAAmB,CAAC3D,MAAxB,CAAgC,CAC5B2E,sBAAsB,CAAC9I,IAAD,CAAO8H,mBAAP,CACzB,CACJ,CALD,EAOA9J,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAACkM,0BAArC,CAAiE,SAAS3I,YAAT,CAAuB,CACpF,GAAIiG,CAAAA,mBAAmB,CAAG,IAA1B,CACA,GAAIsB,gCAAgC,CAACvH,YAAD,CAApC,CAAoD,CAChDiG,mBAAmB,CAAGJ,sBAAsB,CAAC1H,IAAD,CAAO6B,YAAY,CAACe,EAApB,CAA5C,CACA,GAAI,CAACkF,mBAAmB,CAAC3D,MAAzB,CAAiC,CAC7B+D,8BAA8B,CAC1BlI,IAD0B,CAE1B4B,2BAA2B,CAACC,YAAD,CAFD,CAG1BA,YAAY,CAACuI,cAHa,CAKjC,CACJ,CATD,IASO,CACHtC,mBAAmB,CAAGJ,sBAAsB,CAAC1H,IAAD,CAAO6B,YAAY,CAACe,EAApB,CAA5C,CACA,GAAIkF,mBAAmB,CAAC3D,MAAxB,CAAgC,CAC5BuE,kBAAkB,CAAC1I,IAAD,CAAO8H,mBAAP,CACrB,CACJ,CACJ,CAjBD,EAmBA9J,MAAM,CAAC6L,SAAP,CAAiBvL,mBAAmB,CAACmM,4BAArC,CAAmE,SAAS5I,YAAT,CAAuB,CACtF,GAAIiG,CAAAA,mBAAmB,CAAG,IAA1B,CACA,GAAIsB,gCAAgC,CAACvH,YAAD,CAApC,CAAoD,CAChDiG,mBAAmB,CAAGJ,sBAAsB,CAAC1H,IAAD,CAAO6B,YAAY,CAACe,EAApB,CAA5C,CACA,GAAI,CAACkF,mBAAmB,CAAC3D,MAAzB,CAAiC,CAC7B+D,8BAA8B,CAC1BlI,IAD0B,CAE1B4B,2BAA2B,CAACC,YAAD,CAFD,CAG1BA,YAAY,CAACuI,cAHa,CAKjC,CACJ,CATD,IASO,CACHtC,mBAAmB,CAAGJ,sBAAsB,CAAC1H,IAAD,CAAO6B,YAAY,CAACe,EAApB,CAA5C,CACA,GAAIkF,mBAAmB,CAAC3D,MAAxB,CAAgC,CAC5BuE,kBAAkB,CAAC1I,IAAD,CAAO8H,mBAAP,CACrB,CACJ,CACJ,CAjBD,EAmBAhK,YAAY,CAACF,MAAb,CAAoBoC,IAApB,CAA0B,CAAClC,YAAY,CAAC4M,MAAb,CAAoBC,QAArB,CAA1B,EACA3K,IAAI,CAAC0J,EAAL,CAAQ5L,YAAY,CAAC4M,MAAb,CAAoBC,QAA5B,CAAsChM,SAAS,CAACE,YAAhD,CAA8D,SAAS+L,CAAT,CAAYC,IAAZ,CAAkB,IACxE/C,CAAAA,mBAAmB,CAAGjK,CAAC,CAAC+M,CAAC,CAACE,MAAH,CAAD,CAAYC,OAAZ,CAAoBpM,SAAS,CAACE,YAA9B,CADkD,CAExE8I,cAAc,CAAGG,mBAAmB,CAAC9G,IAApB,CAAyB,sBAAzB,CAFuD,CAGxEa,YAAY,CAAGlC,uBAAuB,CAACgI,cAAD,CAHkC,CAI5EpJ,mBAAmB,CAACyM,EAApB,CAAuB/B,SAAvB,CAAkCzK,mBAAmB,CAACyM,iBAAtD,CAAyEpJ,YAAzE,CAAuFsH,SAAvF,EAEA0B,IAAI,CAACK,aAAL,CAAmBC,cAAnB,EACH,CAPD,CAQH,CAlsBH,CAgwBE,MAAO,CACHxB,IAAI,CAhDG,QAAPA,CAAAA,IAAO,CAASV,SAAT,CAAoBmC,MAApB,CAA4BC,IAA5B,CAAkCC,MAAlC,CAA0C9E,KAA1C,CAAiDC,iBAAjD,CAAoE8E,iBAApE,CAAuFC,kBAAvF,CACPrC,SADO,CACI,CACX,GAAInJ,CAAAA,IAAI,CAAGnC,CAAC,CAACwN,IAAD,CAAZ,CAEA,GAAI,CAACrL,IAAI,CAACgB,IAAL,CAAU,WAAV,CAAL,CAA6B,CACzB,GAAIkI,CAAAA,YAAY,CAAG3C,eAAe,CAACC,KAAD,CAAQC,iBAAR,CAA2B,CAA3B,CAAlC,CACAuC,sBAAsB,CAACC,SAAD,CAAYjJ,IAAZ,CAAkBkJ,YAAlB,CAAgC1C,KAAhC,CAAuCC,iBAAvC,CAA0D0C,SAA1D,CAAtB,CAEA,GAAIpJ,SAAS,CAACC,IAAD,CAAb,CAAqB,CACjBG,WAAW,CAACH,IAAD,CAAX,CACA,GAAIoI,CAAAA,QAAQ,CAAG3J,YAAY,CAACwB,OAAb,CAAqBD,IAArB,CAAf,CACAvB,YAAY,CAACkL,IAAb,CAAkBvB,QAAlB,CAA4Bc,YAA5B,CAA0C,SAASX,gBAAT,CAA2B1F,aAA3B,CAA0CC,MAA1C,CAAkD,CACxF,MAAOxB,CAAAA,MAAM,CAACuB,aAAD,CAAgBC,MAAhB,CAAN,CACFvB,IADE,CACG,SAASC,IAAT,CAAe,CACjB+G,gBAAgB,CAACqB,MAAjB,CAAwBpI,IAAxB,EACA,MAAOA,CAAAA,IACV,CAJE,EAKFE,KALE,CAKI3D,YAAY,CAACkG,SALjB,CAMV,CAPD,CAQH,CAIDsH,iBAAiB,CAAChK,IAAlB,CAAuB,SAASf,KAAT,CAAgB,CACnCD,gBAAgB,CAACP,IAAD,CAAOQ,KAAP,CAAhB,CACAX,iBAAiB,GAEpB,CAJD,EAKC6B,KALD,CAKO,UAAW,CAEjB,CAPD,EAWA8J,kBAAkB,CAACjK,IAAnB,CAAwB,SAASf,KAAT,CAAgB,CACpCmB,iBAAiB,CAAC3B,IAAD,CAAOQ,KAAP,CAAjB,CACAV,kBAAkB,GAErB,CAJD,EAKC4B,KALD,CAKO,UAAW,CAEjB,CAPD,EASA1B,IAAI,CAACgB,IAAL,CAAU,WAAV,IACH,CACJ,CAEM,CAEHjB,SAAS,CAAEA,SAFR,CAIV,CApyBK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls a section of the overview page in the message drawer.\n *\n * @module     core_message/message_drawer_view_overview_section\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/custom_interaction_events',\n    'core/notification',\n    'core/pubsub',\n    'core/str',\n    'core/pending',\n    'core/templates',\n    'core/user_date',\n    'core_message/message_repository',\n    'core_message/message_drawer_events',\n    'core_message/message_drawer_router',\n    'core_message/message_drawer_routes',\n    'core_message/message_drawer_lazy_load_list',\n    'core_message/message_drawer_view_conversation_constants'\n],\nfunction(\n    $,\n    CustomEvents,\n    Notification,\n    PubSub,\n    Str,\n    Pending,\n    Templates,\n    UserDate,\n    MessageRepository,\n    MessageDrawerEvents,\n    MessageDrawerRouter,\n    MessageDrawerRoutes,\n    LazyLoadList,\n    MessageDrawerViewConversationContants\n) {\n\n    var SELECTORS = {\n        TOGGLE: '[data-region=\"toggle\"]',\n        CONVERSATION: '[data-conversation-id]',\n        BLOCKED_ICON_CONTAINER: '[data-region=\"contact-icon-blocked\"]',\n        LAST_MESSAGE: '[data-region=\"last-message\"]',\n        LAST_MESSAGE_DATE: '[data-region=\"last-message-date\"]',\n        MUTED_ICON_CONTAINER: '[data-region=\"muted-icon-container\"]',\n        UNREAD_COUNT: '[data-region=\"unread-count\"]',\n        SECTION_TOTAL_COUNT: '[data-region=\"section-total-count\"]',\n        SECTION_TOTAL_COUNT_CONTAINER: '[data-region=\"section-total-count-container\"]',\n        SECTION_UNREAD_COUNT: '[data-region=\"section-unread-count\"]',\n        PLACEHOLDER_CONTAINER: '[data-region=\"placeholder-container\"]'\n    };\n\n    var TEMPLATES = {\n        CONVERSATIONS_LIST: 'core_message/message_drawer_conversations_list',\n        CONVERSATIONS_LIST_ITEMS_PLACEHOLDER: 'core_message/message_drawer_conversations_list_items_placeholder'\n    };\n\n    var LOAD_LIMIT = 50;\n    var loadedConversationsById = {};\n    var deletedConversationsById = {};\n    var loadedTotalCounts = false;\n    var loadedUnreadCounts = false;\n\n    /**\n     * Get the section visibility status.\n     *\n     * @param  {Object} root The section container element.\n     * @return {Bool} Is section visible.\n     */\n    var isVisible = function(root) {\n        return LazyLoadList.getRoot(root).hasClass('show');\n    };\n\n    /**\n     * Set this section as expanded.\n     *\n     * @param  {Object} root The section container element.\n     */\n    var setExpanded = function(root) {\n        root.addClass('expanded');\n    };\n\n    /**\n     * Set this section as collapsed.\n     *\n     * @param  {Object} root The section container element.\n     */\n    var setCollapsed = function(root) {\n        root.removeClass('expanded');\n    };\n\n    /**\n     * Render the total count value and show it for the user. Also update the placeholder\n     * HTML for better visuals.\n     *\n     * @param {Object} root The section container element.\n     * @param {Number} count The total count\n     */\n    var renderTotalCount = function(root, count) {\n        var container = root.find(SELECTORS.SECTION_TOTAL_COUNT_CONTAINER);\n        var countElement = container.find(SELECTORS.SECTION_TOTAL_COUNT);\n        countElement.text(count);\n        container.removeClass('hidden');\n        Str.get_string('totalconversations', 'core_message', count).done(function(string) {\n            container.attr('aria-label', string);\n        });\n\n        var numPlaceholders = count > 20 ? 20 : count;\n        // Array of \"true\" up to the number of placeholders we want.\n        var placeholders = Array.apply(null, Array(numPlaceholders)).map(function() {\n            return true;\n        });\n\n        // Replace the current placeholder (loading spinner) with some nicer placeholders that\n        // better represent the content.\n        Templates.render(TEMPLATES.CONVERSATIONS_LIST_ITEMS_PLACEHOLDER, {placeholders: placeholders})\n            .then(function(html) {\n                var placeholderContainer = root.find(SELECTORS.PLACEHOLDER_CONTAINER);\n                placeholderContainer.html(html);\n                return;\n            })\n            .catch(function() {\n                // Silently ignore. Doesn't matter if we can't render the placeholders.\n            });\n    };\n\n    /**\n     * Render the unread count value and show it for the user if it's higher than zero.\n     *\n     * @param {Object} root The section container element.\n     * @param {Number} count The unread count\n     */\n    var renderUnreadCount = function(root, count) {\n        var countElement = root.find(SELECTORS.SECTION_UNREAD_COUNT);\n        countElement.text(count);\n\n        Str.get_string('unreadconversations', 'core_message', count).done(function(string) {\n            countElement.attr('aria-label', string);\n        });\n\n        if (count > 0) {\n            countElement.removeClass('hidden');\n        }\n    };\n\n    /**\n     * Create a formatted conversation object from the the one we get from events. The new object\n     * will be in a format that matches what we receive from the server.\n     *\n     * @param {Object} conversation\n     * @return {Object} formatted conversation.\n     */\n    var formatConversationFromEvent = function(conversation) {\n        // Recursively lowercase all of the keys for an object.\n        var recursivelyLowercaseKeys = function(object) {\n            return Object.keys(object).reduce(function(carry, key) {\n                if ($.isArray(object[key])) {\n                    carry[key.toLowerCase()] = object[key].map(recursivelyLowercaseKeys);\n                } else {\n                    carry[key.toLowerCase()] = object[key];\n                }\n\n                return carry;\n            }, {});\n        };\n\n        // Recursively lowercase all of the keys for the conversation.\n        var formatted = recursivelyLowercaseKeys(conversation);\n\n        // Make sure all messages have the useridfrom property set.\n        formatted.messages = formatted.messages.map(function(message) {\n            message.useridfrom = message.userfrom.id;\n            return message;\n        });\n\n        return formatted;\n    };\n\n    /**\n     * Render the messages in the overview page.\n     *\n     * @param {Array} conversations List of conversations to render.\n     * @param {Number} userId Logged in user id.\n     * @return {Object} jQuery promise.\n     */\n    var render = function(conversations, userId) {\n\n        // Helper to format the last message for rendering.\n        // Returns a promise which resolves to either a string, or null\n        // (such as in the event of an empty personal space).\n        var pending = new Pending();\n\n        var formatMessagePreview = async function(lastMessage) {\n            if (!lastMessage) {\n                return null;\n            }\n            // Check the message html for a src attribute, indicative of media.\n            // Replace <img with <noimg to stop browsers pre-fetching the image as part of tmp element creation.\n            var tmpElement = document.createElement(\"element\");\n            tmpElement.innerHTML = lastMessage.text.replace(/<img /g, '<noimg ');\n            var isMedia = tmpElement.querySelector(\"[src]\") || false;\n\n            if (!isMedia) {\n                // Try to get the text value of the content.\n                // If that's not possible, we'll report it under the catch-all 'other media'.\n                var messagePreview = $(lastMessage.text).text();\n                if (messagePreview) {\n                    // The text value of the message must have no html/script tags.\n                    if (messagePreview.indexOf('<') == -1) {\n                        return messagePreview;\n                    }\n                }\n            }\n\n            // As a fallback, report unknowns as 'other media' type content.\n            var pix = 'i/messagecontentmultimediageneral';\n            var label = 'messagecontentmultimediageneral';\n\n            if (lastMessage.text.includes('<img')) {\n                pix = 'i/messagecontentimage';\n                label = 'messagecontentimage';\n            } else if (lastMessage.text.includes('<video')) {\n                pix = 'i/messagecontentvideo';\n                label = 'messagecontentvideo';\n            } else if (lastMessage.text.includes('<audio')) {\n                pix = 'i/messagecontentaudio';\n                label = 'messagecontentaudio';\n            }\n\n            try {\n                var labelString = await Str.get_string(label, 'core_message');\n                var icon = await Templates.renderPix(pix, 'core', labelString);\n                return icon + ' ' + labelString;\n            } catch (error) {\n                Notification.exception(error);\n                return null;\n            }\n        };\n\n        var mapPromises = conversations.map(function(conversation) {\n\n            var lastMessage = conversation.messages.length ? conversation.messages[conversation.messages.length - 1] : null;\n\n            return formatMessagePreview(lastMessage)\n                .then(function(messagePreview) {\n                    var formattedConversation = {\n                        id: conversation.id,\n                        imageurl: conversation.imageurl,\n                        name: conversation.name,\n                        subname: conversation.subname,\n                        unreadcount: conversation.unreadcount,\n                        ismuted: conversation.ismuted,\n                        lastmessagedate: lastMessage ? lastMessage.timecreated : null,\n                        sentfromcurrentuser: lastMessage ? lastMessage.useridfrom == userId : null,\n                        lastmessage: messagePreview\n                    };\n\n                    var otherUser = null;\n                    if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF) {\n                        // Self-conversations have only one member.\n                        otherUser = conversation.members[0];\n                    } else if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PRIVATE) {\n                        // For private conversations, remove the current userId from the members to get the other user.\n                        otherUser = conversation.members.reduce(function(carry, member) {\n                            if (!carry && member.id != userId) {\n                                carry = member;\n                            }\n                            return carry;\n                        }, null);\n                    }\n\n                    if (otherUser !== null) {\n                        formattedConversation.userid = otherUser.id;\n                        formattedConversation.showonlinestatus = otherUser.showonlinestatus;\n                        formattedConversation.isonline = otherUser.isonline;\n                        formattedConversation.isblocked = otherUser.isblocked;\n                    }\n\n                    if (conversation.type == MessageDrawerViewConversationContants.CONVERSATION_TYPES.PUBLIC) {\n                        formattedConversation.lastsendername = conversation.members.reduce(function(carry, member) {\n                            if (!carry && lastMessage && member.id == lastMessage.useridfrom) {\n                                carry = member.fullname;\n                            }\n                            return carry;\n                        }, null);\n                    }\n\n                    return formattedConversation;\n                }).catch(Notification.exception);\n        });\n\n        return Promise.all(mapPromises)\n            .then(function(formattedConversations) {\n                formattedConversations.forEach(function(conversation) {\n                    if (new Date().toDateString() == new Date(conversation.lastmessagedate * 1000).toDateString()) {\n                        conversation.istoday = true;\n                    }\n                });\n\n                return Templates.render(TEMPLATES.CONVERSATIONS_LIST, {conversations: formattedConversations});\n            }).then(function(html, js) {\n                pending.resolve();\n                return $.Deferred().resolve(html, js);\n            }).catch(function(error) {\n                pending.resolve();\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Build the callback to load conversations.\n     *\n     * @param  {Array|null} types The conversation types for this section.\n     * @param  {bool} includeFavourites Include/exclude favourites.\n     * @param  {Number} offset Result offset\n     * @return {Function}\n     */\n    var getLoadCallback = function(types, includeFavourites, offset) {\n        // Note: This function is a bit messy because we've added the concept of loading\n        // multiple conversations types (e.g. private + self) at once but haven't properly\n        // updated the web service to accept an array of types. Instead we've added a new\n        // parameter for the self type which means we can only ever load self + other type.\n        // This should be improved to make it more extensible in the future. Adding new params\n        // for each type isn't very scalable.\n        var type = null;\n        // Include self conversations in the results by default.\n        var includeSelfConversations = true;\n        if (types && types.length) {\n            // Just get the conversation types that aren't \"self\" for now.\n            var nonSelfConversationTypes = types.filter(function(candidate) {\n                return candidate != MessageDrawerViewConversationContants.CONVERSATION_TYPES.SELF;\n            });\n            // If we're specifically asking for a list of types that doesn't include the self\n            // conversations then we don't need to include them.\n            includeSelfConversations = types.length != nonSelfConversationTypes.length;\n            // As mentioned above the webservice is currently limited to loading one type at a\n            // time (plus self conversations) so let's hope we never change this.\n            type = nonSelfConversationTypes[0];\n        }\n\n        return function(root, userId) {\n            return MessageRepository.getConversations(\n                    userId,\n                    type,\n                    LOAD_LIMIT + 1,\n                    offset,\n                    includeFavourites,\n                    includeSelfConversations\n                )\n                .then(function(response) {\n                    var conversations = response.conversations;\n\n                    if (conversations.length > LOAD_LIMIT) {\n                        conversations = conversations.slice(0, -1);\n                    } else {\n                        LazyLoadList.setLoadedAll(root, true);\n                    }\n\n                    offset = offset + LOAD_LIMIT;\n\n                    conversations.forEach(function(conversation) {\n                        loadedConversationsById[conversation.id] = conversation;\n                    });\n\n                    return conversations;\n                })\n                .catch(Notification.exception);\n        };\n    };\n\n    /**\n     * Get the total count container element.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @return {Object} Total count container element.\n     */\n    var getTotalConversationCountElement = function(root) {\n        return root.find(SELECTORS.SECTION_TOTAL_COUNT);\n    };\n\n    /**\n     * Get the unread conversations count container element.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @return {Object} Unread conversations count container element.\n     */\n    var getTotalUnreadConversationCountElement = function(root) {\n        return root.find(SELECTORS.SECTION_UNREAD_COUNT);\n    };\n\n    /**\n     * Increment the total conversations count.\n     *\n     * @param  {Object} root Overview messages container element.\n     */\n    var incrementTotalConversationCount = function(root) {\n        if (loadedTotalCounts) {\n            var element = getTotalConversationCountElement(root);\n            var count = parseInt(element.text());\n            count = count + 1;\n            element.text(count);\n        }\n    };\n\n    /**\n     * Decrement the total conversations count.\n     *\n     * @param  {Object} root Overview messages container element.\n     */\n    var decrementTotalConversationCount = function(root) {\n        if (loadedTotalCounts) {\n            var element = getTotalConversationCountElement(root);\n            var count = parseInt(element.text());\n            count = count - 1;\n            element.text(count);\n        }\n    };\n\n    /**\n     * Decrement the total unread conversations count.\n     *\n     * @param  {Object} root Overview messages container element.\n     */\n    var decrementTotalUnreadConversationCount = function(root) {\n        if (loadedUnreadCounts) {\n            var element = getTotalUnreadConversationCountElement(root);\n            var count = parseInt(element.text());\n            count = count - 1;\n            element.text(count);\n\n            if (count < 1) {\n                element.addClass('hidden');\n            }\n        }\n    };\n\n    /**\n     * Get a contact / conversation element.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Number} conversationId The conversation id.\n     * @return {Object} Conversation element.\n     */\n    var getConversationElement = function(root, conversationId) {\n        return root.find('[data-conversation-id=\"' + conversationId + '\"]');\n    };\n\n    /**\n     * Get a contact / conversation element from a user id.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Number} userId The user id.\n     * @return {Object} Conversation element.\n     */\n    var getConversationElementFromUserId = function(root, userId) {\n        return root.find('[data-user-id=\"' + userId + '\"]');\n    };\n\n    /**\n     * Show the conversation is muted icon.\n     *\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var muteConversation = function(conversationElement) {\n        conversationElement.find(SELECTORS.MUTED_ICON_CONTAINER).removeClass('hidden');\n    };\n\n    /**\n     * Hide the conversation is muted icon.\n     *\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var unmuteConversation = function(conversationElement) {\n        conversationElement.find(SELECTORS.MUTED_ICON_CONTAINER).addClass('hidden');\n    };\n\n    /**\n     * Show the contact is blocked icon.\n     *\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var blockContact = function(conversationElement) {\n        conversationElement.find(SELECTORS.BLOCKED_ICON_CONTAINER).removeClass('hidden');\n    };\n\n    /**\n     * Hide the contact is blocked icon.\n     *\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var unblockContact = function(conversationElement) {\n        conversationElement.find(SELECTORS.BLOCKED_ICON_CONTAINER).addClass('hidden');\n    };\n\n    /**\n     * Create an render new conversation element in the list of conversations.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Object} conversation The conversation.\n     * @param  {Number} userId The logged in user id.\n     * @return {Object} jQuery promise\n     */\n    var createNewConversationFromEvent = function(root, conversation, userId) {\n        var existingConversations = root.find(SELECTORS.CONVERSATION);\n\n        if (!existingConversations.length) {\n            // If we didn't have any conversations then we need to show\n            // the content of the list and hide the empty message.\n            var listRoot = LazyLoadList.getRoot(root);\n            LazyLoadList.showContent(listRoot);\n            LazyLoadList.hideEmptyMessage(listRoot);\n        }\n\n        // Cache the conversation.\n        loadedConversationsById[conversation.id] = conversation;\n\n        return render([conversation], userId)\n            .then(function(html) {\n                var contentContainer = LazyLoadList.getContentContainer(root);\n                return contentContainer.prepend(html);\n            })\n            .then(function() {\n                return incrementTotalConversationCount(root);\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Delete a conversation from the list of conversations.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var deleteConversation = function(root, conversationElement) {\n        conversationElement.remove();\n        decrementTotalConversationCount(root);\n\n        var conversations = root.find(SELECTORS.CONVERSATION);\n        if (!conversations.length) {\n            // If we don't have any conversations then we need to hide\n            // the content of the list and show the empty message.\n            var listRoot = LazyLoadList.getRoot(root);\n            LazyLoadList.hideContent(listRoot);\n            LazyLoadList.showEmptyMessage(listRoot);\n        }\n    };\n\n    /**\n     * Mark a conversation as read.\n     *\n     * @param  {Object} root Overview messages container element.\n     * @param  {Object} conversationElement The conversation element.\n     */\n    var markConversationAsRead = function(root, conversationElement) {\n        var unreadCount = conversationElement.find(SELECTORS.UNREAD_COUNT);\n        unreadCount.text('0');\n        unreadCount.addClass('hidden');\n        decrementTotalUnreadConversationCount(root);\n    };\n\n    /**\n     * Listen to, and handle events in this section.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @param {Object} root The section container element.\n     * @param {Function} loadCallback The callback to load items.\n     * @param {Array|null} types The conversation types for this section\n     * @param {bool} includeFavourites If this section includes favourites\n     * @param {String} fromPanel Routing argument to send if the section is loaded in message index left panel.\n     */\n    var registerEventListeners = function(namespace, root, loadCallback, types, includeFavourites, fromPanel) {\n        var listRoot = LazyLoadList.getRoot(root);\n        var conversationBelongsToThisSection = function(conversation) {\n            // Make sure the type is an int so that the index of check matches correctly.\n            var conversationType = parseInt(conversation.type, 10);\n            if (\n                // If the conversation type isn't one this section cares about then we can ignore it.\n                (types && types.indexOf(conversationType) < 0) ||\n                // If this is the favourites section and the conversation isn't a favourite then ignore it.\n                (includeFavourites && !conversation.isFavourite) ||\n                // If this section doesn't include favourites and the conversation is a favourite then ignore it.\n                (!includeFavourites && conversation.isFavourite)\n            ) {\n                return false;\n            }\n\n            return true;\n        };\n\n        // Set the minimum height of the section to the height of the toggle. This\n        // smooths out the collapse animation.\n        var toggle = root.find(SELECTORS.TOGGLE);\n        root.css('min-height', toggle.outerHeight());\n\n        root.on('show.bs.collapse', function() {\n            setExpanded(root);\n            LazyLoadList.show(listRoot, loadCallback, function(contentContainer, conversations, userId) {\n                return render(conversations, userId)\n                    .then(function(html) {\n                        contentContainer.append(html);\n                        return html;\n                    })\n                    .catch(Notification.exception);\n            });\n        });\n\n        root.on('hidden.bs.collapse', function() {\n            setCollapsed(root);\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_BLOCKED, function(userId) {\n            var conversationElement = getConversationElementFromUserId(root, userId);\n            if (conversationElement.length) {\n                blockContact(conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_UNBLOCKED, function(userId) {\n            var conversationElement = getConversationElementFromUserId(root, userId);\n\n            if (conversationElement.length) {\n                unblockContact(conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_SET_MUTED, function(conversation) {\n            var conversationId = conversation.id;\n            var conversationElement = getConversationElement(root, conversationId);\n            if (conversationElement.length) {\n                muteConversation(conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_UNSET_MUTED, function(conversation) {\n            var conversationId = conversation.id;\n            var conversationElement = getConversationElement(root, conversationId);\n            if (conversationElement.length) {\n                unmuteConversation(conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, function(conversation) {\n            if (!conversationBelongsToThisSection(conversation)) {\n                return;\n            }\n\n            var pendingPromise = new Pending('core_message/message_drawer_view_overview_section:new');\n            var loggedInUserId = conversation.loggedInUserId;\n            var conversationId = conversation.id;\n            var element = getConversationElement(root, conversationId);\n            conversation = formatConversationFromEvent(conversation);\n            if (element.length) {\n                var contentContainer = LazyLoadList.getContentContainer(root);\n                render([conversation], loggedInUserId)\n                    .then(function(html) {\n                        if (deletedConversationsById[conversationId]) {\n                            // This conversation was deleted at some point since the messaging drawer was created.\n                            if (conversation.messages[0].timeadded < deletedConversationsById[conversationId]) {\n                                // The 'new' message was added before the conversation was deleted.\n                                // This is probably stale data.\n                                return;\n                            }\n                        }\n                        contentContainer.prepend(html);\n                        element.remove();\n\n                        return;\n                    })\n                    .then(pendingPromise.resolve)\n                    .catch(Notification.exception);\n            } else if (conversation.messages.length) {\n                createNewConversationFromEvent(root, conversation, loggedInUserId)\n                .then(pendingPromise.resolve)\n                .catch();\n            } else {\n                pendingPromise.resolve();\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_DELETED, function(conversationId) {\n            var conversationElement = getConversationElement(root, conversationId);\n            delete loadedConversationsById[conversationId];\n            deletedConversationsById[conversationId] = new Date();\n            if (conversationElement.length) {\n                deleteConversation(root, conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_READ, function(conversationId) {\n            var conversationElement = getConversationElement(root, conversationId);\n            if (conversationElement.length) {\n                markConversationAsRead(root, conversationElement);\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_SET_FAVOURITE, function(conversation) {\n            var conversationElement = null;\n            if (conversationBelongsToThisSection(conversation)) {\n                conversationElement = getConversationElement(root, conversation.id);\n                if (!conversationElement.length) {\n                    createNewConversationFromEvent(\n                        root,\n                        formatConversationFromEvent(conversation),\n                        conversation.loggedInUserId\n                    );\n                }\n            } else {\n                conversationElement = getConversationElement(root, conversation.id);\n                if (conversationElement.length) {\n                    deleteConversation(root, conversationElement);\n                }\n            }\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_UNSET_FAVOURITE, function(conversation) {\n            var conversationElement = null;\n            if (conversationBelongsToThisSection(conversation)) {\n                conversationElement = getConversationElement(root, conversation.id);\n                if (!conversationElement.length) {\n                    createNewConversationFromEvent(\n                        root,\n                        formatConversationFromEvent(conversation),\n                        conversation.loggedInUserId\n                    );\n                }\n            } else {\n                conversationElement = getConversationElement(root, conversation.id);\n                if (conversationElement.length) {\n                    deleteConversation(root, conversationElement);\n                }\n            }\n        });\n\n        CustomEvents.define(root, [CustomEvents.events.activate]);\n        root.on(CustomEvents.events.activate, SELECTORS.CONVERSATION, function(e, data) {\n            var conversationElement = $(e.target).closest(SELECTORS.CONVERSATION);\n            var conversationId = conversationElement.attr('data-conversation-id');\n            var conversation = loadedConversationsById[conversationId];\n            MessageDrawerRouter.go(namespace, MessageDrawerRoutes.VIEW_CONVERSATION, conversation, fromPanel);\n\n            data.originalEvent.preventDefault();\n        });\n    };\n\n    /**\n     * Setup the section.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @param {Object} header The header container element.\n     * @param {Object} body The section container element.\n     * @param {Object} footer The footer container element.\n     * @param {Array} types The conversation types that show in this section\n     * @param {bool} includeFavourites If this section includes favourites\n     * @param {Object} totalCountPromise Resolves wth the total conversations count\n     * @param {Object} unreadCountPromise Resolves wth the unread conversations count\n     * @param {bool} fromPanel shown in message app panel.\n     */\n    var show = function(namespace, header, body, footer, types, includeFavourites, totalCountPromise, unreadCountPromise,\n        fromPanel) {\n        var root = $(body);\n\n        if (!root.attr('data-init')) {\n            var loadCallback = getLoadCallback(types, includeFavourites, 0);\n            registerEventListeners(namespace, root, loadCallback, types, includeFavourites, fromPanel);\n\n            if (isVisible(root)) {\n                setExpanded(root);\n                var listRoot = LazyLoadList.getRoot(root);\n                LazyLoadList.show(listRoot, loadCallback, function(contentContainer, conversations, userId) {\n                    return render(conversations, userId)\n                        .then(function(html) {\n                            contentContainer.append(html);\n                            return html;\n                        })\n                        .catch(Notification.exception);\n                });\n            }\n\n            // This is given to us by the calling code because the total counts for all sections\n            // are loaded in a single ajax request rather than one request per section.\n            totalCountPromise.then(function(count) {\n                renderTotalCount(root, count);\n                loadedTotalCounts = true;\n                return;\n            })\n            .catch(function() {\n                // Silently ignore if we can't updated the counts. No need to bother the user.\n            });\n\n            // This is given to us by the calling code because the unread counts for all sections\n            // are loaded in a single ajax request rather than one request per section.\n            unreadCountPromise.then(function(count) {\n                renderUnreadCount(root, count);\n                loadedUnreadCounts = true;\n                return;\n            })\n            .catch(function() {\n                // Silently ignore if we can't updated the counts. No need to bother the user.\n            });\n\n            root.attr('data-init', true);\n        }\n    };\n\n    return {\n        show: show,\n        isVisible: isVisible\n    };\n});\n"],"file":"message_drawer_view_overview_section.min.js"}