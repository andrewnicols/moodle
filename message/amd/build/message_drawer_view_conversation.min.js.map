{"version":3,"sources":["../src/message_drawer_view_conversation.js"],"names":["define","$","AutoRows","BackOffTimer","CustomEvents","Notification","Pending","PubSub","Str","Repository","MessageDrawerEvents","Constants","Patcher","Renderer","StateManager","MessageDrawerRouter","MessageDrawerRoutes","initialiseEmojiAutoComplete","initialiseEmojiPicker","stateCache","viewState","loadedAllMessages","messagesOffset","newMessagesPollTimer","isRendering","renderBuffer","isResetting","isSendingMessage","isDeletingConversationContent","sendMessageBuffer","render","renderers","NEWEST_FIRST","NEWEST_MESSAGES_FIRST","LOAD_MESSAGE_LIMIT","MILLISECONDS_IN_SEC","SELECTORS","CONVERSATION_TYPES","getOtherUserId","type","PUBLIC","loggedInUserId","SELF","otherUserIds","Object","keys","members","filter","userId","length","getCachedPrivateConversationIdFromUserId","reduce","carry","id","state","getLoggedInUserProfile","body","parseInt","attr","fullname","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","canmessageevenifblocked","requirescontact","contactrequests","getMessagesOffset","setMessagesOffset","value","hasLoadedAllMessages","setLoadedAllMessages","getMessagesContainer","find","MESSAGES_CONTAINER","formatConversationForEvent","name","subname","imageUrl","isFavourite","isMuted","totalMemberCount","messages","map","message","extend","formattedMember","request","loadEmptyPrivateConversation","loggedInUserProfile","otherUserId","conversationType","PRIVATE","newState","setLoadingMembers","setLoadingMessages","getMemberInfo","then","profiles","Error","profile","addMembers","setName","setType","setImageUrl","setTotalMemberCount","catch","error","exception","updateStateFromConversation","conversation","otherUser","otherUsers","member","imageurl","setSubname","membercount","setIsFavourite","isfavourite","setIsMuted","ismuted","addMessages","setCanDeleteMessagesForAllUsers","candeletemessagesforallusers","loadNewConversation","conversationId","messageLimit","messageOffset","newestFirst","getConversation","slice","hasLoggedInUser","concat","markConversationAsRead","loadExistingConversation","messageCount","hasLoadedEnoughMessages","renderPromise","loadMessages","limit","offset","ignoreList","timeFrom","getMessages","result","indexOf","membersToAdd","getLoadNewMessagesCallback","mostRecentMessage","lastTimeCreated","timeCreated","ignoreMessageIds","i","push","restart","publish","CONVERSATION_NEW_LAST_MESSAGE","Deferred","resolve","promise","pendingPromise","markAllConversationMessagesAsRead","markMessagesAsRead","CONVERSATION_READ","requestBlockUser","cancelRequest","addPendingBlockUsersById","blockUser","setLoadingConfirmAction","removePendingBlockUsersById","CONTACT_BLOCKED","requestUnblockUser","addPendingUnblockUsersById","unblockUser","removePendingUnblockUsersById","CONTACT_UNBLOCKED","requestRemoveContact","addPendingRemoveContactsById","removeContact","deleteContacts","removePendingRemoveContactsById","CONTACT_REMOVED","requestAddContact","addPendingAddContactsById","addContact","createContactRequest","response","warnings","removePendingAddContactsById","addContactRequests","setFavourite","setFavouriteConversations","CONVERSATION_SET_FAVOURITE","unsetFavourite","unsetFavouriteConversations","CONVERSATION_UNSET_FAVOURITE","setMuted","setMutedConversations","CONVERSATION_SET_MUTED","unsetMuted","unsetMutedConversations","CONVERSATION_UNSET_MUTED","requestDeleteSelectedMessages","selectedMessageIds","addPendingDeleteMessagesById","deleteSelectedMessages","messageIds","pendingDeleteMessageIds","sentMessages","sendState","deleteMessagesPromise","sentMessageIds","deleteMessagesForAllUsers","deleteMessages","stop","removeMessagesById","removePendingDeleteMessagesById","removeSelectedMessagesById","setDeleteMessagesForAllUsers","prevLastMessage","newLastMessage","CONVERSATION_DELETED","requestDeleteConversation","setPendingDeleteConversation","deleteConversation","removeMessages","acceptContactRequest","requests","requesteduserid","removeContactRequests","CONTACT_ADDED","CONTACT_REQUEST_ACCEPTED","declineContactRequest","CONTACT_REQUEST_DECLINED","processSendMessageBuffer","messagesToSend","newConversationId","messagesText","text","sendMessagePromise","newCanDeleteMessagesForAllUsers","sendMessagesToUser","conversationid","sendMessagesToConversation","newMessageIds","data","selectedToRemove","selectedToAdd","forEach","oldMessage","index","newMessage","updateMessages","setMessagesSendSuccessById","addSelectedMessagesById","setId","resetMessagePollTimer","CONVERSATION_CREATED","e","errorMessage","get_string","handleFailedMessages","setMessagesSendFailById","finalError","previewText","plaintext","replace","sendMessage","Date","now","loadingmessage","useridfrom","timecreated","retrySendMessage","setMessagesSendPendingById","toggleSelectMessage","messageId","cancelEditMode","processRenderBuffer","header","footer","renderable","shift","renderPromises","renderFunc","patch","when","apply","deferred","reject","generateRenderFunction","isNewConversation","rendererFunc","initialState","buildInitialState","midnight","syncPatch","buildPatch","generateConfirmActionHandler","actionCallback","loadingConfirmAction","originalEvent","preventDefault","handleSendMessage","target","footerContainer","closest","FOOTER_CONTAINER","textArea","MESSAGE_TEXT_AREA","val","trim","focus","handleSelectMessage","selection","window","getSelection","toString","is","element","MESSAGE","handleRetrySendMessage","stopPropagation","handleCancelEditMode","generateHandleViewContact","namespace","go","VIEW_CONTACT","handleSetFavourite","handleUnsetFavourite","handleSetMuted","handleUnsetMuted","handleDeleteMessagesForAllUsersToggle","newValue","prop","generateHandleViewGroupInfo","VIEW_GROUP_INFO","handleToggleEmojiPicker","setShowEmojiPicker","showEmojiPicker","handleCloseEmojiPicker","EMOJI_PICKER_CONTAINER","TOGGLE_EMOJI_PICKER_BUTTON","registerEventListeners","isLoadingMoreMessages","messagesContainer","emojiPickerElement","EMOJI_PICKER","emojiAutoCompleteContainer","EMOJI_AUTO_COMPLETE_CONTAINER","messageTextArea","headerActivateHandlers","ACTION_REQUEST_BLOCK","ACTION_REQUEST_UNBLOCK","ACTION_REQUEST_ADD_CONTACT","ACTION_REQUEST_REMOVE_CONTACT","ACTION_REQUEST_DELETE_CONVERSATION","ACTION_CANCEL_EDIT_MODE","ACTION_VIEW_CONTACT","ACTION_VIEW_GROUP_INFO","ACTION_CONFIRM_FAVOURITE","ACTION_CONFIRM_MUTE","ACTION_CONFIRM_UNFAVOURITE","ACTION_CONFIRM_UNMUTE","bodyActivateHandlers","ACTION_CANCEL_CONFIRM","ACTION_CONFIRM_BLOCK","ACTION_CONFIRM_UNBLOCK","ACTION_CONFIRM_ADD_CONTACT","ACTION_CONFIRM_REMOVE_CONTACT","ACTION_CONFIRM_DELETE_SELECTED_MESSAGES","ACTION_CONFIRM_DELETE_CONVERSATION","ACTION_OKAY_CONFIRM","ACTION_ACCEPT_CONTACT_REQUEST","ACTION_DECLINE_CONTACT_REQUEST","DELETE_MESSAGES_FOR_ALL_USERS_TOGGLE","RETRY_SEND","footerActivateHandlers","SEND_MESSAGE_BUTTON","ACTION_REQUEST_DELETE_SELECTED_MESSAGES","init","hasSuggestions","setShowEmojiAutoComplete","emoji","cursorPos","currentText","textBefore","substring","textAfter","events","activate","enter","escape","scrollTop","scrollLock","on","hasMembers","handler","selector","handlerFunction","enterToSend","document","subscribe","ROUTE_CHANGED","newRouteData","route","VIEW_CONVERSATION","getIncrementalCallback","messagePollMin","messagePollMax","messagePollAfterMax","start","resetState","resetNoConversation","resetNoConversationPromise","getConversationBetweenUsers","getSelfConversation","resetByConversation","resetById","cache","show","conversationOrId","action","isNaN","CAN_RECEIVE_FOCUS","first","currentOtherUserId","description"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the conversation page in the message drawer.\n *\n * This function handles all of the user actions that the user can take\n * when interacting with the conversation page.\n *\n * It maintains a view state which is a data representation of the view\n * and only operates on that data.\n *\n * The view state is immutable and should never be modified directly. Instead\n * all changes to the view state should be done using the StateManager which\n * will generate a new version of the view state with the requested changes.\n *\n * After any changes to the view state the module will call the render function\n * to ask the renderer to update the UI.\n *\n * General rules for this module:\n * 1.) Never modify viewState directly. All changes should be via the StateManager.\n * 2.) Call render() with the new state when you want to update the UI\n * 3.) Never modify the UI directly in this module. This module is only concerned\n *     with the data in the view state.\n *\n * The general flow for a user interaction will be something like:\n * User interaction: User clicks \"confirm block\" button to block the other user\n *      1.) This module is hears the click\n *      2.) This module sends a request to the server to block the user\n *      3.) The server responds with the new user profile\n *      4.) This module generates a new state using the StateManager with the updated\n *          user profile.\n *      5.) This module asks the Patcher to generate a patch from the current state and\n *          the newly generated state. This patch tells the renderer what has changed\n *          between the states.\n *      6.) This module gives the Renderer the generated patch. The renderer updates\n *          the UI with changes according to the patch.\n *\n * @module     core_message/message_drawer_view_conversation\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/auto_rows',\n    'core/backoff_timer',\n    'core/custom_interaction_events',\n    'core/notification',\n    'core/pending',\n    'core/pubsub',\n    'core/str',\n    'core_message/message_repository',\n    'core_message/message_drawer_events',\n    'core_message/message_drawer_view_conversation_constants',\n    'core_message/message_drawer_view_conversation_patcher',\n    'core_message/message_drawer_view_conversation_renderer',\n    'core_message/message_drawer_view_conversation_state_manager',\n    'core_message/message_drawer_router',\n    'core_message/message_drawer_routes',\n    'core/emoji/auto_complete',\n    'core/emoji/picker'\n],\nfunction(\n    $,\n    AutoRows,\n    BackOffTimer,\n    CustomEvents,\n    Notification,\n    Pending,\n    PubSub,\n    Str,\n    Repository,\n    MessageDrawerEvents,\n    Constants,\n    Patcher,\n    Renderer,\n    StateManager,\n    MessageDrawerRouter,\n    MessageDrawerRoutes,\n    initialiseEmojiAutoComplete,\n    initialiseEmojiPicker\n) {\n\n    // Contains a cache of all view states that have been loaded so far\n    // which saves us having to reload stuff with network requests when\n    // switching between conversations.\n    var stateCache = {};\n    // The current data representation of the view.\n    var viewState = null;\n    var loadedAllMessages = false;\n    var messagesOffset = 0;\n    var newMessagesPollTimer = null;\n    var isRendering = false;\n    var renderBuffer = [];\n    // If the UI is currently resetting.\n    var isResetting = true;\n    // If the UI is currently sending a message.\n    var isSendingMessage = false;\n    // If the UI is currently deleting a conversation.\n    var isDeletingConversationContent = false;\n    // A buffer of messages to send.\n    var sendMessageBuffer = [];\n    // These functions which will be generated when this module is\n    // first called. See generateRenderFunction for details.\n    var render = null;\n    // The list of renderers that have been registered to render\n    // this conversation. See generateRenderFunction for details.\n    var renderers = [];\n\n    var NEWEST_FIRST = Constants.NEWEST_MESSAGES_FIRST;\n    var LOAD_MESSAGE_LIMIT = Constants.LOAD_MESSAGE_LIMIT;\n    var MILLISECONDS_IN_SEC = Constants.MILLISECONDS_IN_SEC;\n    var SELECTORS = Constants.SELECTORS;\n    var CONVERSATION_TYPES = Constants.CONVERSATION_TYPES;\n\n    /**\n     * Get the other user userid.\n     *\n     * @return {Number} Userid.\n     */\n    var getOtherUserId = function() {\n        if (!viewState || viewState.type == CONVERSATION_TYPES.PUBLIC) {\n            return null;\n        }\n\n        var loggedInUserId = viewState.loggedInUserId;\n        if (viewState.type == CONVERSATION_TYPES.SELF) {\n            // It's a self-conversation, so the other user is the one logged in.\n            return loggedInUserId;\n        }\n\n        var otherUserIds = Object.keys(viewState.members).filter(function(userId) {\n            return loggedInUserId != userId;\n        });\n\n        return otherUserIds.length ? otherUserIds[0] : null;\n    };\n\n    /**\n     * Search the cache to see if we've already loaded a private conversation\n     * with the given user id.\n     *\n     * @param {Number} userId The id of the other user.\n     * @return {Number|null} Conversation id.\n     */\n    var getCachedPrivateConversationIdFromUserId = function(userId) {\n        return Object.keys(stateCache).reduce(function(carry, id) {\n            if (!carry) {\n                var state = stateCache[id].state;\n\n                if (state.type != CONVERSATION_TYPES.PUBLIC) {\n                    if (userId in state.members) {\n                        // We've found a cached conversation for this user!\n                        carry = state.id;\n                    }\n                }\n            }\n\n            return carry;\n        }, null);\n    };\n\n    /**\n     * Get profile info for logged in user.\n     *\n     * @param {Object} body Conversation body container element.\n     * @return {Object}\n     */\n    var getLoggedInUserProfile = function(body) {\n        return {\n            id: parseInt(body.attr('data-user-id'), 10),\n            fullname: null,\n            profileimageurl: null,\n            profileimageurlsmall: null,\n            isonline:  null,\n            showonlinestatus: null,\n            isblocked: null,\n            iscontact: null,\n            isdeleted: null,\n            canmessage: null,\n            canmessageevenifblocked: null,\n            requirescontact: null,\n            contactrequests: []\n        };\n    };\n\n    /**\n     * Get the messages offset value to load more messages.\n     *\n     * @return {Number}\n     */\n    var getMessagesOffset = function() {\n        return messagesOffset;\n    };\n\n    /**\n     * Set the messages offset value for loading more messages.\n     *\n     * @param {Number} value The offset value\n     */\n    var setMessagesOffset = function(value) {\n        messagesOffset = value;\n        stateCache[viewState.id].messagesOffset = value;\n    };\n\n    /**\n     * Check if all messages have been loaded.\n     *\n     * @return {Bool}\n     */\n    var hasLoadedAllMessages = function() {\n        return loadedAllMessages;\n    };\n\n    /**\n     * Set whether all messages have been loaded or not.\n     *\n     * @param {Bool} value If all messages have been loaded.\n     */\n    var setLoadedAllMessages = function(value) {\n        loadedAllMessages = value;\n        stateCache[viewState.id].loadedAllMessages = value;\n    };\n\n    /**\n     * Get the messages container element.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @return {Object} The messages container element.\n     */\n    var getMessagesContainer = function(body) {\n        return body.find(SELECTORS.MESSAGES_CONTAINER);\n    };\n\n    /**\n     * Reformat the conversation for an event payload.\n     *\n     * @param  {Object} state The view state.\n     * @return {Object} New formatted conversation.\n     */\n    var formatConversationForEvent = function(state) {\n        return {\n            id: state.id,\n            name: state.name,\n            subname: state.subname,\n            imageUrl: state.imageUrl,\n            isFavourite: state.isFavourite,\n            isMuted: state.isMuted,\n            type: state.type,\n            totalMemberCount: state.totalMemberCount,\n            loggedInUserId: state.loggedInUserId,\n            messages: state.messages.map(function(message) {\n                return $.extend({}, message);\n            }),\n            members: Object.keys(state.members).map(function(id) {\n                var formattedMember = $.extend({}, state.members[id]);\n                formattedMember.contactrequests = state.members[id].contactrequests.map(function(request) {\n                    return $.extend({}, request);\n                });\n                return formattedMember;\n            })\n        };\n    };\n\n    /**\n     * Load up an empty private conversation between the logged in user and the\n     * other user. Sets all of the conversation details based on the other user.\n     *\n     * A conversation isn't created until the user sends the first message.\n     *\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} otherUserId The other user id.\n     * @return {Object} Profile returned from repository.\n     */\n    var loadEmptyPrivateConversation = function(loggedInUserProfile, otherUserId) {\n        var loggedInUserId = loggedInUserProfile.id;\n        // If the other user id is the same as the logged in user then this is a self\n        // conversation.\n        var conversationType = loggedInUserId == otherUserId ? CONVERSATION_TYPES.SELF : CONVERSATION_TYPES.PRIVATE;\n        var newState = StateManager.setLoadingMembers(viewState, true);\n        newState = StateManager.setLoadingMessages(newState, true);\n        render(newState);\n\n        return Repository.getMemberInfo(loggedInUserId, [otherUserId], true, true)\n            .then(function(profiles) {\n                if (profiles.length) {\n                    return profiles[0];\n                } else {\n                    throw new Error('Unable to load other user profile');\n                }\n            })\n            .then(function(profile) {\n                // If the conversation is a self conversation then the profile loaded is the\n                // logged in user so only add that to the members array.\n                var members = conversationType == CONVERSATION_TYPES.SELF ? [profile] : [profile, loggedInUserProfile];\n                var newState = StateManager.addMembers(viewState, members);\n                newState = StateManager.setLoadingMembers(newState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                newState = StateManager.setName(newState, profile.fullname);\n                newState = StateManager.setType(newState, conversationType);\n                newState = StateManager.setImageUrl(newState, profile.profileimageurl);\n                newState = StateManager.setTotalMemberCount(newState, members.length);\n                render(newState);\n                return profile;\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMembers(viewState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Create a new state from a conversation object.\n     *\n     * @param {Object} conversation The conversation object.\n     * @param {Number} loggedInUserId The logged in user id.\n     * @return {Object} new state.\n     */\n    var updateStateFromConversation = function(conversation, loggedInUserId) {\n        var otherUser = null;\n        if (conversation.type == CONVERSATION_TYPES.PRIVATE) {\n            // For private conversations, remove current logged in user from the members list to get the other user.\n            var otherUsers = conversation.members.filter(function(member) {\n                return member.id != loggedInUserId;\n            });\n            otherUser = otherUsers.length ? otherUsers[0] : null;\n        } else if (conversation.type == CONVERSATION_TYPES.SELF) {\n            // Self-conversations have only one member.\n            otherUser = conversation.members[0];\n        }\n\n        var name = conversation.name;\n        var imageUrl = conversation.imageurl;\n\n        if (conversation.type != CONVERSATION_TYPES.PUBLIC) {\n            name = name || otherUser ? otherUser.fullname : '';\n            imageUrl = imageUrl || otherUser ? otherUser.profileimageurl : '';\n        }\n\n        var newState = StateManager.addMembers(viewState, conversation.members);\n        newState = StateManager.setName(newState, name);\n        newState = StateManager.setSubname(newState, conversation.subname);\n        newState = StateManager.setType(newState, conversation.type);\n        newState = StateManager.setImageUrl(newState, imageUrl);\n        newState = StateManager.setTotalMemberCount(newState, conversation.membercount);\n        newState = StateManager.setIsFavourite(newState, conversation.isfavourite);\n        newState = StateManager.setIsMuted(newState, conversation.ismuted);\n        newState = StateManager.addMessages(newState, conversation.messages);\n        newState = StateManager.setCanDeleteMessagesForAllUsers(newState, conversation.candeletemessagesforallusers);\n        return newState;\n    };\n\n    /**\n     * Get the details for a conversation from the conversation id.\n     *\n     * @param  {Number} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} messageLimit The number of messages to include.\n     * @param  {Number} messageOffset The number of messages to skip.\n     * @param  {Bool} newestFirst Order messages newest first.\n     * @return {Object} Promise resolved when loaded.\n     */\n    var loadNewConversation = function(\n        conversationId,\n        loggedInUserProfile,\n        messageLimit,\n        messageOffset,\n        newestFirst\n    ) {\n        var loggedInUserId = loggedInUserProfile.id;\n        var newState = StateManager.setLoadingMembers(viewState, true);\n        newState = StateManager.setLoadingMessages(newState, true);\n        render(newState);\n\n        return Repository.getConversation(\n            loggedInUserId,\n            conversationId,\n            true,\n            true,\n            0,\n            0,\n            messageLimit + 1,\n            messageOffset,\n            newestFirst\n        )\n            .then(function(conversation) {\n                if (conversation.messages.length > messageLimit) {\n                    conversation.messages = conversation.messages.slice(1);\n                } else {\n                    setLoadedAllMessages(true);\n                }\n\n                setMessagesOffset(messageOffset + messageLimit);\n\n                return conversation;\n            })\n            .then(function(conversation) {\n                var hasLoggedInUser = conversation.members.filter(function(member) {\n                    return member.id == loggedInUserProfile.id;\n                });\n\n                if (hasLoggedInUser.length < 1) {\n                    conversation.members = conversation.members.concat([loggedInUserProfile]);\n                }\n\n                var newState = updateStateFromConversation(conversation, loggedInUserProfile.id);\n                newState = StateManager.setLoadingMembers(newState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                return render(newState)\n                    .then(function() {\n                        return conversation;\n                    });\n            })\n            .then(function() {\n                return markConversationAsRead(conversationId);\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMembers(viewState, false);\n                newState = StateManager.setLoadingMessages(newState, false);\n                render(newState);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Get the details for a conversation from and existing conversation object.\n     *\n     * @param  {Object} conversation The conversation object.\n     * @param  {Object} loggedInUserProfile The logged in user profile.\n     * @param  {Number} messageLimit The number of messages to include.\n     * @param  {Bool} newestFirst Order messages newest first.\n     * @return {Object} Promise resolved when loaded.\n     */\n    var loadExistingConversation = function(\n        conversation,\n        loggedInUserProfile,\n        messageLimit,\n        newestFirst\n    ) {\n        var hasLoggedInUser = conversation.members.filter(function(member) {\n            return member.id == loggedInUserProfile.id;\n        });\n\n        if (hasLoggedInUser.length < 1) {\n            conversation.members = conversation.members.concat([loggedInUserProfile]);\n        }\n\n        var messageCount = conversation.messages.length;\n        var hasLoadedEnoughMessages = messageCount >= messageLimit;\n        var newState = updateStateFromConversation(conversation, loggedInUserProfile.id);\n        newState = StateManager.setLoadingMembers(newState, false);\n        newState = StateManager.setLoadingMessages(newState, !hasLoadedEnoughMessages);\n        var renderPromise = render(newState);\n\n        return renderPromise.then(function() {\n                if (!hasLoadedEnoughMessages) {\n                    // We haven't got enough messages so let's load some more.\n                    return loadMessages(conversation.id, messageLimit, messageCount, newestFirst, []);\n                } else {\n                    // We've got enough messages. No need to load any more for now.\n                    return {messages: conversation.messages};\n                }\n            })\n            .then(function() {\n                var messages = viewState.messages;\n                // Update the offset to reflect the number of messages we've loaded.\n                setMessagesOffset(messages.length);\n                markConversationAsRead(viewState.id);\n\n                return messages;\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Load messages for this conversation and pass them to the renderer.\n     *\n     * @param  {Number} conversationId Conversation id.\n     * @param  {Number} limit Number of messages to load.\n     * @param  {Number} offset Get messages from offset.\n     * @param  {Bool} newestFirst Get newest messages first.\n     * @param  {Array} ignoreList Ignore any messages with ids in this list.\n     * @param  {Number|null} timeFrom Only get messages from this time onwards.\n     * @return {Promise} renderer promise.\n     */\n    var loadMessages = function(conversationId, limit, offset, newestFirst, ignoreList, timeFrom) {\n        return Repository.getMessages(\n                viewState.loggedInUserId,\n                conversationId,\n                limit ? limit + 1 : limit,\n                offset,\n                newestFirst,\n                timeFrom\n            )\n            .then(function(result) {\n                // Prevent older requests from contaminating the current view.\n                if (result.id != viewState.id) {\n                    result.messages = [];\n                    // Purge old conversation cache to prevent messages lose.\n                    if (result.id in stateCache) {\n                        delete stateCache[result.id];\n                    }\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                if (result.messages.length && ignoreList.length) {\n                    result.messages = result.messages.filter(function(message) {\n                        // Skip any messages in our ignore list.\n                        return ignoreList.indexOf(parseInt(message.id, 10)) < 0;\n                    });\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                if (!limit) {\n                    return result;\n                } else if (result.messages.length > limit) {\n                    // Ignore the last result which was just to test if there are more\n                    // to load.\n                    result.messages = result.messages.slice(0, -1);\n                } else {\n                    setLoadedAllMessages(true);\n                }\n\n                return result;\n            })\n            .then(function(result) {\n                var membersToAdd = result.members.filter(function(member) {\n                    return !(member.id in viewState.members);\n                });\n                var newState = StateManager.addMembers(viewState, membersToAdd);\n                newState = StateManager.addMessages(newState, result.messages);\n                newState = StateManager.setLoadingMessages(newState, false);\n                return render(newState)\n                    .then(function() {\n                        return result;\n                    });\n            })\n            .catch(function(error) {\n                var newState = StateManager.setLoadingMessages(viewState, false);\n                render(newState);\n                // Re-throw the error for other error handlers.\n                throw error;\n            });\n    };\n\n    /**\n     * Create a callback function for getting new messages for this conversation.\n     *\n     * @param  {Number} conversationId Conversation id.\n     * @param  {Bool} newestFirst Show newest messages first\n     * @return {Function} Callback function that returns a renderer promise.\n     */\n    var getLoadNewMessagesCallback = function(conversationId, newestFirst) {\n        return function() {\n            var messages = viewState.messages;\n            var mostRecentMessage = messages.length ? messages[messages.length - 1] : null;\n            var lastTimeCreated = mostRecentMessage ? mostRecentMessage.timeCreated : null;\n\n            if (lastTimeCreated && !isResetting && !isSendingMessage && !isDeletingConversationContent) {\n                // There may be multiple messages with the same time created value since\n                // the accuracy is only down to the second. The server will include these\n                // messages in the result (since it does a >= comparison on time from) so\n                // we need to filter them back out of the result so that we're left only\n                // with the new messages.\n                var ignoreMessageIds = [];\n                for (var i = messages.length - 1; i >= 0; i--) {\n                    var message = messages[i];\n                    if (message.timeCreated === lastTimeCreated) {\n                        ignoreMessageIds.push(message.id);\n                    } else {\n                        // Since the messages are ordered in ascending order of time created\n                        // we can break as soon as we hit a message with a different time created\n                        // because we know all other messages will have lower values.\n                        break;\n                    }\n                }\n\n                return loadMessages(\n                        conversationId,\n                        0,\n                        0,\n                        newestFirst,\n                        ignoreMessageIds,\n                        lastTimeCreated\n                    )\n                    .then(function(result) {\n                        if (result.messages.length) {\n                            // If we found some results then restart the polling timer\n                            // because the other user might be sending messages.\n                            newMessagesPollTimer.restart();\n                            // We've also got a new last message so publish that for other\n                            // components to update.\n                            var conversation = formatConversationForEvent(viewState);\n                            PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                            return markConversationAsRead(conversationId);\n                        } else {\n                            return result;\n                        }\n                    });\n            }\n\n            return $.Deferred().resolve().promise();\n        };\n    };\n\n    /**\n     * Mark a conversation as read.\n     *\n     * @param  {Number} conversationId The conversation id.\n     * @return {Promise} The renderer promise.\n     */\n    var markConversationAsRead = function(conversationId) {\n        var loggedInUserId = viewState.loggedInUserId;\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:markConversationAsRead');\n\n        return Repository.markAllConversationMessagesAsRead(loggedInUserId, conversationId)\n            .then(function() {\n                var newState = StateManager.markMessagesAsRead(viewState, viewState.messages);\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_READ, conversationId);\n                return render(newState);\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Tell the statemanager there is request to block a user and run the renderer\n     * to show the block user dialogue.\n     *\n     * @param {Number} userId User id.\n     */\n    var requestBlockUser = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingBlockUsersById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to block a user, update the statemanager and publish\n     * a contact has been blocked.\n     *\n     * @param  {Number} userId User id of user to block.\n     * @return {Promise} Renderer promise.\n     */\n    var blockUser = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:blockUser');\n\n        render(newState);\n\n        return Repository.blockUser(viewState.loggedInUserId, userId)\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.removePendingBlockUsersById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_BLOCKED, userId);\n                return render(newState);\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to unblock a user and run the renderer\n     * to show the unblock user dialogue.\n     *\n     * @param {Number} userId User id of user to unblock.\n     */\n    var requestUnblockUser = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingUnblockUsersById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to unblock a user, update the statemanager and publish\n     * a contact has been unblocked.\n     *\n     * @param  {Number} userId User id of user to unblock.\n     * @return {Promise} Renderer promise.\n     */\n    var unblockUser = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:unblockUser');\n        render(newState);\n\n        return Repository.unblockUser(viewState.loggedInUserId, userId)\n            .then(function(profile) {\n                var newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.removePendingUnblockUsersById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_UNBLOCKED, userId);\n                return render(newState);\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to remove a user from the contact list\n     * and run the renderer to show the remove user from contacts dialogue.\n     *\n     * @param {Number} userId User id of user to remove from contacts.\n     */\n    var requestRemoveContact = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingRemoveContactsById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to remove a user from the contacts list. update the statemanager\n     * and publish a contact has been removed.\n     *\n     * @param  {Number} userId User id of user to remove from contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var removeContact = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:removeContact');\n        render(newState);\n\n        return Repository.deleteContacts(viewState.loggedInUserId, [userId])\n            .then(function(profiles) {\n                var newState = StateManager.addMembers(viewState, profiles);\n                newState = StateManager.removePendingRemoveContactsById(newState, [userId]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONTACT_REMOVED, userId);\n                return render(newState);\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to add a user to the contact list\n     * and run the renderer to show the add user to contacts dialogue.\n     *\n     * @param {Number} userId User id of user to add to contacts.\n     */\n    var requestAddContact = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.addPendingAddContactsById(viewState, [userId]);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to add a user to the contacts list. update the statemanager\n     * and publish a contact has been added.\n     *\n     * @param  {Number} userId User id of user to add to contacts.\n     * @return {Promise} Renderer promise.\n     */\n    var addContact = function(userId) {\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:addContactRequests');\n        render(newState);\n\n        return Repository.createContactRequest(viewState.loggedInUserId, userId)\n            .then(function(response) {\n                if (!response.request) {\n                    throw new Error(response.warnings[0].message);\n                }\n\n                return response.request;\n            })\n            .then(function(request) {\n                var newState = StateManager.removePendingAddContactsById(viewState, [userId]);\n                newState = StateManager.addContactRequests(newState, [request]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Set the current conversation as a favourite conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var setFavourite = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:setFavourite');\n\n        return Repository.setFavouriteConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsFavourite(viewState, true);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_SET_FAVOURITE,\n                    formatConversationForEvent(viewState)\n                );\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Unset the current conversation as a favourite conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var unsetFavourite = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:unsetFavourite');\n\n        return Repository.unsetFavouriteConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsFavourite(viewState, false);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_UNSET_FAVOURITE,\n                    formatConversationForEvent(viewState)\n                );\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Set the current conversation as a muted conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var setMuted = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:markConversationAsRead');\n\n        return Repository.setMutedConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsMuted(viewState, true);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_SET_MUTED,\n                    formatConversationForEvent(viewState)\n                );\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Unset the current conversation as a muted conversation.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var unsetMuted = function() {\n        var userId = viewState.loggedInUserId;\n        var conversationId = viewState.id;\n\n        return Repository.unsetMutedConversations(userId, [conversationId])\n            .then(function() {\n                var newState = StateManager.setIsMuted(viewState, false);\n                return render(newState);\n            })\n            .then(function() {\n                return PubSub.publish(\n                    MessageDrawerEvents.CONVERSATION_UNSET_MUTED,\n                    formatConversationForEvent(viewState)\n                );\n            });\n    };\n\n    /**\n     * Tell the statemanager there is a request to delete the selected messages\n     * and run the renderer to show confirm delete messages dialogue.\n     *\n     * @param {Number} userId User id.\n     */\n    var requestDeleteSelectedMessages = function(userId) {\n        var selectedMessageIds = viewState.selectedMessageIds;\n        cancelRequest(userId);\n        var newState = StateManager.addPendingDeleteMessagesById(viewState, selectedMessageIds);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to delete the messages pending deletion. Update the statemanager\n     * and publish a message deletion event.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var deleteSelectedMessages = function() {\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:deleteSelectedMessages');\n        var messageIds = viewState.pendingDeleteMessageIds;\n        var sentMessages = viewState.messages.filter(function(message) {\n            // If a message sendState is null then it means it was loaded from the server or if it's\n            // set to sent then it means the user has successfully sent it in this page load.\n            return messageIds.indexOf(message.id) >= 0 && (message.sendState == 'sent' || message.sendState === null);\n        });\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n\n        render(newState);\n\n        var deleteMessagesPromise = $.Deferred().resolve().promise();\n\n\n        if (sentMessages.length) {\n            // We only need to send a request to the server if we're trying to delete messages that\n            // have successfully been sent.\n            var sentMessageIds = sentMessages.map(function(message) {\n                return message.id;\n            });\n            if (newState.deleteMessagesForAllUsers) {\n                deleteMessagesPromise = Repository.deleteMessagesForAllUsers(viewState.loggedInUserId, sentMessageIds);\n            } else {\n                deleteMessagesPromise = Repository.deleteMessages(viewState.loggedInUserId, sentMessageIds);\n            }\n        }\n\n        // Mark that we are deleting content from the  conversation to prevent updates of it.\n        isDeletingConversationContent = true;\n\n        // Stop polling for new messages to the open conversation.\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        return deleteMessagesPromise.then(function() {\n                var newState = StateManager.removeMessagesById(viewState, messageIds);\n                newState = StateManager.removePendingDeleteMessagesById(newState, messageIds);\n                newState = StateManager.removeSelectedMessagesById(newState, messageIds);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                newState = StateManager.setDeleteMessagesForAllUsers(newState, false);\n\n                var prevLastMessage = viewState.messages[viewState.messages.length - 1];\n                var newLastMessage = newState.messages.length ? newState.messages[newState.messages.length - 1] : null;\n\n                if (newLastMessage && newLastMessage.id != prevLastMessage.id) {\n                    var conversation = formatConversationForEvent(newState);\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                } else if (!newState.messages.length) {\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_DELETED, newState.id);\n                }\n\n                isDeletingConversationContent = false;\n                return render(newState);\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            })\n            .catch(Notification.exception);\n    };\n\n    /**\n     * Tell the statemanager there is a request to delete a conversation\n     * and run the renderer to show confirm delete conversation dialogue.\n     *\n     * @param {Number} userId User id of other user.\n     */\n    var requestDeleteConversation = function(userId) {\n        cancelRequest(userId);\n        var newState = StateManager.setPendingDeleteConversation(viewState, true);\n        render(newState);\n    };\n\n    /**\n     * Send the repository a request to delete a conversation. Update the statemanager\n     * and publish a conversation deleted event.\n     *\n     * @return {Promise} Renderer promise.\n     */\n    var deleteConversation = function() {\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:markConversationAsRead');\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        // Mark that we are deleting the conversation to prevent updates of it.\n        isDeletingConversationContent = true;\n\n        // Stop polling for new messages to the open conversation.\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        return Repository.deleteConversation(viewState.loggedInUserId, viewState.id)\n            .then(function() {\n                var newState = StateManager.removeMessages(viewState, viewState.messages);\n                newState = StateManager.removeSelectedMessagesById(newState, viewState.selectedMessageIds);\n                newState = StateManager.setPendingDeleteConversation(newState, false);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_DELETED, newState.id);\n\n                isDeletingConversationContent = false;\n\n                return render(newState);\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Tell the statemanager to cancel all pending actions.\n     *\n     * @param  {Number} userId User id.\n     */\n    var cancelRequest = function(userId) {\n        var pendingDeleteMessageIds = viewState.pendingDeleteMessageIds;\n        var newState = StateManager.removePendingAddContactsById(viewState, [userId]);\n        newState = StateManager.removePendingRemoveContactsById(newState, [userId]);\n        newState = StateManager.removePendingUnblockUsersById(newState, [userId]);\n        newState = StateManager.removePendingBlockUsersById(newState, [userId]);\n        newState = StateManager.removePendingDeleteMessagesById(newState, pendingDeleteMessageIds);\n        newState = StateManager.setPendingDeleteConversation(newState, false);\n        newState = StateManager.setDeleteMessagesForAllUsers(newState, false);\n        render(newState);\n    };\n\n    /**\n     * Accept the contact request from the given user.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var acceptContactRequest = function(userId) {\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:acceptContactRequest');\n\n        // Search the list of the logged in user's contact requests to find the\n        // one from this user.\n        var loggedInUserId = viewState.loggedInUserId;\n        var requests = viewState.members[userId].contactrequests.filter(function(request) {\n            return request.requesteduserid == loggedInUserId;\n        });\n        var request = requests[0];\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.acceptContactRequest(userId, loggedInUserId)\n            .then(function(profile) {\n                var newState = StateManager.removeContactRequests(viewState, [request]);\n                newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function() {\n                PubSub.publish(MessageDrawerEvents.CONTACT_ADDED, viewState.members[userId]);\n                PubSub.publish(MessageDrawerEvents.CONTACT_REQUEST_ACCEPTED, request);\n                return;\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Decline the contact request from the given user.\n     *\n     * @param  {Number} userId User id of other user.\n     * @return {Promise} Renderer promise.\n     */\n    var declineContactRequest = function(userId) {\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:declineContactRequest');\n\n        // Search the list of the logged in user's contact requests to find the\n        // one from this user.\n        var loggedInUserId = viewState.loggedInUserId;\n        var requests = viewState.members[userId].contactrequests.filter(function(request) {\n            return request.requesteduserid == loggedInUserId;\n        });\n        var request = requests[0];\n        var newState = StateManager.setLoadingConfirmAction(viewState, true);\n        render(newState);\n\n        return Repository.declineContactRequest(userId, loggedInUserId)\n            .then(function(profile) {\n                var newState = StateManager.removeContactRequests(viewState, [request]);\n                newState = StateManager.addMembers(viewState, [profile]);\n                newState = StateManager.setLoadingConfirmAction(newState, false);\n                return render(newState);\n            })\n            .then(function() {\n                PubSub.publish(MessageDrawerEvents.CONTACT_REQUEST_DECLINED, request);\n                return;\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            });\n    };\n\n    /**\n     * Send all of the messages in the buffer to the server to be created. Update the\n     * UI with the newly created message information.\n     *\n     * This function will recursively call itself in order to make sure the buffer is\n     * always being processed.\n     */\n    var processSendMessageBuffer = function() {\n        if (isSendingMessage) {\n            // We're already sending messages so nothing to do.\n            return;\n        }\n        if (!sendMessageBuffer.length) {\n            // No messages waiting to send. Nothing to do.\n            return;\n        }\n\n        var pendingPromise = new Pending('core_message/message_drawer_view_conversation:processSendMessageBuffer');\n\n        // Flag that we're processing the queue.\n        isSendingMessage = true;\n        // Grab all of the messages in the buffer.\n        var messagesToSend = sendMessageBuffer.slice();\n        // Empty the buffer since we're processing it.\n        sendMessageBuffer = [];\n        var conversationId = viewState.id;\n        var newConversationId = null;\n        var messagesText = messagesToSend.map(function(message) {\n            return message.text;\n        });\n        var messageIds = messagesToSend.map(function(message) {\n            return message.id;\n        });\n        var sendMessagePromise = null;\n        var newCanDeleteMessagesForAllUsers = null;\n        if (!conversationId && (viewState.type != CONVERSATION_TYPES.PUBLIC)) {\n            // If it's a new private conversation then we need to use the old\n            // web service function to create the conversation.\n            var otherUserId = getOtherUserId();\n            sendMessagePromise = Repository.sendMessagesToUser(otherUserId, messagesText)\n                .then(function(messages) {\n                    if (messages.length) {\n                        newConversationId = parseInt(messages[0].conversationid, 10);\n                        newCanDeleteMessagesForAllUsers = messages[0].candeletemessagesforallusers;\n                    }\n                    return messages;\n                });\n        } else {\n            sendMessagePromise = Repository.sendMessagesToConversation(conversationId, messagesText);\n        }\n\n        sendMessagePromise\n            .then(function(messages) {\n                var newMessageIds = messages.map(function(message) {\n                    return message.id;\n                });\n                var data = [];\n                var selectedToRemove = [];\n                var selectedToAdd = [];\n\n                messagesToSend.forEach(function(oldMessage, index) {\n                    var newMessage = messages[index];\n                    // Update messages expects and array of arrays where the first value\n                    // is the old message to update and the second value is the new values\n                    // to set.\n                    data.push([oldMessage, newMessage]);\n\n                    if (viewState.selectedMessageIds.indexOf(oldMessage.id) >= 0) {\n                        // If the message was added to the \"selected messages\" list while it was still\n                        // being sent then we should update it's id in that list now to make sure future\n                        // actions work.\n                        selectedToRemove.push(oldMessage.id);\n                        selectedToAdd.push(newMessage.id);\n                    }\n                });\n                var newState = StateManager.updateMessages(viewState, data);\n                newState = StateManager.setMessagesSendSuccessById(newState, newMessageIds);\n\n                if (selectedToRemove.length) {\n                    newState = StateManager.removeSelectedMessagesById(newState, selectedToRemove);\n                }\n\n                if (selectedToAdd.length) {\n                    newState = StateManager.addSelectedMessagesById(newState, selectedToAdd);\n                }\n\n                var conversation = formatConversationForEvent(newState);\n\n                if (!newState.id) {\n                    // If this message created the conversation then save the conversation\n                    // id.\n                    newState = StateManager.setId(newState, newConversationId);\n                    conversation.id = newConversationId;\n                    resetMessagePollTimer(newConversationId);\n                    PubSub.publish(MessageDrawerEvents.CONVERSATION_CREATED, conversation);\n                    newState = StateManager.setCanDeleteMessagesForAllUsers(newState, newCanDeleteMessagesForAllUsers);\n                }\n\n                // Update the UI with the new message values from the server.\n                render(newState);\n                // Recurse just in case there has been more messages added to the buffer.\n                isSendingMessage = false;\n                processSendMessageBuffer();\n                PubSub.publish(MessageDrawerEvents.CONVERSATION_NEW_LAST_MESSAGE, conversation);\n                return;\n            })\n            .then(function(result) {\n                pendingPromise.resolve();\n\n                return result;\n            })\n            .catch(function(e) {\n                var errorMessage;\n                if (e.message) {\n                    errorMessage = $.Deferred().resolve(e.message).promise();\n                } else {\n                    errorMessage = Str.get_string('unknownerror', 'core');\n                }\n\n                var handleFailedMessages = function(errorMessage) {\n                    // We failed to create messages so remove the old messages from the pending queue\n                    // and update the UI to indicate that the message failed.\n                    var newState = StateManager.setMessagesSendFailById(viewState, messageIds, errorMessage);\n                    render(newState);\n                    isSendingMessage = false;\n                    processSendMessageBuffer();\n                };\n\n                errorMessage.then(handleFailedMessages)\n                    .then(function(result) {\n                        pendingPromise.resolve();\n\n                        return result;\n                    })\n                    .catch(function(e) {\n                        // Hrmm, we can't even load the error messages string! We'll have to\n                        // hard code something in English here if we still haven't got a message\n                        // to show.\n                        var finalError = e.message || 'Something went wrong!';\n                        handleFailedMessages(finalError);\n                    });\n            });\n    };\n\n    /**\n     * Create a plain version of an HTML text.\n     *\n     * This texts is used as a message preview while is sent to the server. This way\n     * it is possible to prevent self-xss.\n     *\n     * @param {String} text Text to send.\n     * @return {String} The plain text version of the text.\n     */\n    const previewText = function(text) {\n        // Remove all script and styles from text (we don't want it there).\n        let plaintext = text.replace(/<style([\\s\\S]*?)<\\/style>/gi, '');\n        plaintext = plaintext.replace(/<script([\\s\\S]*?)<\\/script>/gi, '');\n        // Beautify a bit the output adding some line breaks.\n        plaintext = plaintext.replace(/<\\/div>/ig, '\\n');\n        plaintext = plaintext.replace(/<\\/li>/ig, '\\n');\n        plaintext = plaintext.replace(/<li>/ig, '  *  ');\n        plaintext = plaintext.replace(/<\\/ul>/ig, '\\n');\n        plaintext = plaintext.replace(/<\\/p>/ig, '\\n');\n        plaintext = plaintext.replace(/<br[^>]*>/gi, '\\n');\n        // Remove all remaining tags and convert line breaks into html.\n        plaintext = plaintext.replace(/<[^>]+>/ig, '');\n        plaintext = plaintext.replace(/\\n+/ig, '\\n');\n        return plaintext.replace(/\\n/ig, '<br>');\n    };\n\n    /**\n     * Buffers messages to be sent to the server. We use a buffer here to allow the\n     * user to freely input messages without blocking the interface for them.\n     *\n     * Instead we just queue all of their messages up and send them as fast as we can.\n     *\n     * @param {String} text Text to send.\n     */\n    var sendMessage = function(text) {\n        var id = 'temp' + Date.now();\n        // Render a preview version of the message while sending.\n        let loadingmessage = {\n            id: id,\n            useridfrom: viewState.loggedInUserId,\n            text:  previewText(text),\n            timecreated: null\n        };\n        var newState = StateManager.addMessages(viewState, [loadingmessage]);\n        render(newState);\n        // Send the real message.\n        var message = {\n            id: id,\n            useridfrom: viewState.loggedInUserId,\n            text: text,\n            timecreated: null\n        };\n        sendMessageBuffer.push(message);\n        processSendMessageBuffer();\n    };\n\n    /**\n     * Retry sending a message that failed.\n     *\n     * @param {Object} message The message to send.\n     */\n    var retrySendMessage = function(message) {\n        var newState = StateManager.setMessagesSendPendingById(viewState, [message.id]);\n        render(newState);\n        sendMessageBuffer.push(message);\n        processSendMessageBuffer();\n    };\n\n    /**\n     * Toggle the selected messages update the statemanager and render the result.\n     *\n     * @param  {Number} messageId The id of the message to be toggled\n     */\n    var toggleSelectMessage = function(messageId) {\n        var newState = viewState;\n\n        if (viewState.selectedMessageIds.indexOf(messageId) > -1) {\n            newState = StateManager.removeSelectedMessagesById(viewState, [messageId]);\n        } else {\n            newState = StateManager.addSelectedMessagesById(viewState, [messageId]);\n        }\n\n        render(newState);\n    };\n\n    /**\n     * Cancel edit mode (selecting the messages).\n     */\n    var cancelEditMode = function() {\n        cancelRequest(getOtherUserId());\n        var newState = StateManager.removeSelectedMessagesById(viewState, viewState.selectedMessageIds);\n        render(newState);\n    };\n\n    /**\n     * Process the patches in the render buffer one at a time in order until the\n     * buffer is empty.\n     *\n     * @param {Object} header The conversation header container element.\n     * @param {Object} body The conversation body container element.\n     * @param {Object} footer The conversation footer container element.\n     */\n    var processRenderBuffer = function(header, body, footer) {\n        if (isRendering) {\n            return;\n        }\n\n        if (!renderBuffer.length) {\n            return;\n        }\n\n        isRendering = true;\n        var renderable = renderBuffer.shift();\n        var renderPromises = renderers.map(function(renderFunc) {\n            return renderFunc(renderable.patch);\n        });\n\n        $.when.apply(null, renderPromises)\n            .then(function() {\n                isRendering = false;\n                renderable.deferred.resolve(true);\n                // Keep processing the buffer until it's empty.\n                processRenderBuffer(header, body, footer);\n\n                return;\n            })\n            .catch(function(error) {\n                isRendering = false;\n                renderable.deferred.reject(error);\n                Notification.exception(error);\n            });\n    };\n\n    /**\n     * Create a function to render the Conversation.\n     *\n     * @param  {Object} header The conversation header container element.\n     * @param  {Object} body The conversation body container element.\n     * @param  {Object} footer The conversation footer container element.\n     * @param  {Bool} isNewConversation Has someone else already initialised a conversation?\n     * @return {Promise} Renderer promise.\n     */\n    var generateRenderFunction = function(header, body, footer, isNewConversation) {\n        var rendererFunc = function(patch) {\n            return Renderer.render(header, body, footer, patch);\n        };\n\n        if (!isNewConversation) {\n            // Looks like someone got here before us! We'd better update our\n            // UI to make sure it matches.\n            var initialState = StateManager.buildInitialState(viewState.midnight, viewState.loggedInUserId, viewState.id);\n            var syncPatch = Patcher.buildPatch(initialState, viewState);\n            rendererFunc(syncPatch);\n        }\n\n        renderers.push(rendererFunc);\n\n        return function(newState) {\n            var patch = Patcher.buildPatch(viewState, newState);\n            var deferred = $.Deferred();\n\n            // Check if the patch has any data. Ignore empty patches.\n            if (Object.keys(patch).length) {\n                // Add the patch to the render buffer which gets processed in order.\n                renderBuffer.push({\n                    patch: patch,\n                    deferred: deferred\n                });\n            } else {\n                deferred.resolve(true);\n            }\n            // This is a great place to add in some console logging if you need\n            // to debug something. You can log the current state, the next state,\n            // and the generated patch and see exactly what will be updated.\n\n            // Optimistically update the state. We're going to assume that the rendering\n            // will always succeed. The rendering is asynchronous (annoyingly) so it's buffered\n            // but it'll reach eventual consistency with the current state.\n            viewState = newState;\n            if (newState.id) {\n                // Only cache created conversations.\n                stateCache[newState.id] = {\n                    state: newState,\n                    messagesOffset: getMessagesOffset(),\n                    loadedAllMessages: hasLoadedAllMessages()\n                };\n            }\n\n            // Start processing the buffer.\n            processRenderBuffer(header, body, footer);\n\n            return deferred.promise();\n        };\n    };\n\n    /**\n     * Create a confirm action function.\n     *\n     * @param {Function} actionCallback The callback function.\n     * @return {Function} Confirm action handler.\n     */\n    var generateConfirmActionHandler = function(actionCallback) {\n        return function(e, data) {\n            if (!viewState.loadingConfirmAction) {\n                actionCallback(getOtherUserId());\n                var newState = StateManager.setLoadingConfirmAction(viewState, false);\n                render(newState);\n            }\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Send message event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSendMessage = function(e, data) {\n        var target = $(e.target);\n        var footerContainer = target.closest(SELECTORS.FOOTER_CONTAINER);\n        var textArea = footerContainer.find(SELECTORS.MESSAGE_TEXT_AREA);\n        var text = textArea.val().trim();\n\n        if (text !== '') {\n            sendMessage(text);\n            textArea.val('');\n            textArea.focus();\n        }\n\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Select message event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSelectMessage = function(e, data) {\n        var selection = window.getSelection();\n        var target = $(e.target);\n\n        if (selection.toString() != '') {\n            // Bail if we're selecting.\n            return;\n        }\n\n        if (target.is('a')) {\n            // Clicking on a link in the message so ignore it.\n            return;\n        }\n\n        var element = target.closest(SELECTORS.MESSAGE);\n        var messageId = element.attr('data-message-id');\n\n        toggleSelectMessage(messageId);\n\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Handle retry sending of message.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleRetrySendMessage = function(e, data) {\n        var target = $(e.target);\n        var element = target.closest(SELECTORS.MESSAGE);\n        var messageId = element.attr('data-message-id');\n        var messages = viewState.messages.filter(function(message) {\n            return message.id == messageId;\n        });\n        var message = messages.length ? messages[0] : null;\n\n        if (message) {\n            retrySendMessage(message);\n        }\n\n        data.originalEvent.preventDefault();\n        data.originalEvent.stopPropagation();\n        e.stopPropagation();\n    };\n\n    /**\n     * Cancel edit mode event handler.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleCancelEditMode = function(e, data) {\n        cancelEditMode();\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Show the view contact page.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @return {Function} View contact handler.\n     */\n    var generateHandleViewContact = function(namespace) {\n        return function(e, data) {\n            var otherUserId = getOtherUserId();\n            var otherUser = viewState.members[otherUserId];\n            MessageDrawerRouter.go(namespace, MessageDrawerRoutes.VIEW_CONTACT, otherUser);\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Set this conversation as a favourite.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSetFavourite = function(e, data) {\n        setFavourite().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Unset this conversation as a favourite.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleUnsetFavourite = function(e, data) {\n        unsetFavourite().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Show the view group info page.\n     * Set this conversation as muted.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleSetMuted = function(e, data) {\n        setMuted().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Unset this conversation as muted.\n     *\n     * @param {Object} e Element this event handler is called on.\n     * @param {Object} data Data for this event.\n     */\n    var handleUnsetMuted = function(e, data) {\n        unsetMuted().catch(Notification.exception);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Handle clicking on the checkbox that toggles deleting messages for\n     * all users.\n     *\n     * @param {Object} e Element this event handler is called on.\n     */\n    var handleDeleteMessagesForAllUsersToggle = function(e) {\n        var newValue = $(e.target).prop('checked');\n        var newState = StateManager.setDeleteMessagesForAllUsers(viewState, newValue);\n        render(newState);\n    };\n\n    /**\n     * Show the view contact page.\n     *\n     * @param {String} namespace Unique identifier for the Routes\n     * @return {Function} View group info handler.\n     */\n    var generateHandleViewGroupInfo = function(namespace) {\n        return function(e, data) {\n            MessageDrawerRouter.go(\n                namespace,\n                MessageDrawerRoutes.VIEW_GROUP_INFO,\n                {\n                    id: viewState.id,\n                    name: viewState.name,\n                    subname: viewState.subname,\n                    imageUrl: viewState.imageUrl,\n                    totalMemberCount: viewState.totalMemberCount\n                },\n                viewState.loggedInUserId\n            );\n            data.originalEvent.preventDefault();\n        };\n    };\n\n    /**\n     * Handle clicking on the emoji toggle button.\n     *\n     * @param {Object} e The event\n     * @param {Object} data The custom interaction event data\n     */\n    var handleToggleEmojiPicker = function(e, data) {\n        var newState = StateManager.setShowEmojiPicker(viewState, !viewState.showEmojiPicker);\n        render(newState);\n        data.originalEvent.preventDefault();\n    };\n\n    /**\n     * Handle clicking outside the emoji picker to close it.\n     *\n     * @param {Object} e The event\n     */\n    var handleCloseEmojiPicker = function(e) {\n        var target = $(e.target);\n\n        if (\n            viewState.showEmojiPicker &&\n            !target.closest(SELECTORS.EMOJI_PICKER_CONTAINER).length &&\n            !target.closest(SELECTORS.TOGGLE_EMOJI_PICKER_BUTTON).length\n        ) {\n            var newState = StateManager.setShowEmojiPicker(viewState, false);\n            render(newState);\n        }\n    };\n\n    /**\n     * Listen to, and handle events for conversations.\n     *\n     * @param {string} namespace The route namespace.\n     * @param {Object} header Conversation header container element.\n     * @param {Object} body Conversation body container element.\n     * @param {Object} footer Conversation footer container element.\n     */\n    var registerEventListeners = function(namespace, header, body, footer) {\n        var isLoadingMoreMessages = false;\n        var messagesContainer = getMessagesContainer(body);\n        var emojiPickerElement = footer.find(SELECTORS.EMOJI_PICKER);\n        var emojiAutoCompleteContainer = footer.find(SELECTORS.EMOJI_AUTO_COMPLETE_CONTAINER);\n        var messageTextArea = footer.find(SELECTORS.MESSAGE_TEXT_AREA);\n        var headerActivateHandlers = [\n            [SELECTORS.ACTION_REQUEST_BLOCK, generateConfirmActionHandler(requestBlockUser)],\n            [SELECTORS.ACTION_REQUEST_UNBLOCK, generateConfirmActionHandler(requestUnblockUser)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_REQUEST_REMOVE_CONTACT, generateConfirmActionHandler(requestRemoveContact)],\n            [SELECTORS.ACTION_REQUEST_DELETE_CONVERSATION, generateConfirmActionHandler(requestDeleteConversation)],\n            [SELECTORS.ACTION_CANCEL_EDIT_MODE, handleCancelEditMode],\n            [SELECTORS.ACTION_VIEW_CONTACT, generateHandleViewContact(namespace)],\n            [SELECTORS.ACTION_VIEW_GROUP_INFO, generateHandleViewGroupInfo(namespace)],\n            [SELECTORS.ACTION_CONFIRM_FAVOURITE, handleSetFavourite],\n            [SELECTORS.ACTION_CONFIRM_MUTE, handleSetMuted],\n            [SELECTORS.ACTION_CONFIRM_UNFAVOURITE, handleUnsetFavourite],\n            [SELECTORS.ACTION_CONFIRM_UNMUTE, handleUnsetMuted]\n        ];\n        var bodyActivateHandlers = [\n            [SELECTORS.ACTION_CANCEL_CONFIRM, generateConfirmActionHandler(cancelRequest)],\n            [SELECTORS.ACTION_CONFIRM_BLOCK, generateConfirmActionHandler(blockUser)],\n            [SELECTORS.ACTION_CONFIRM_UNBLOCK, generateConfirmActionHandler(unblockUser)],\n            [SELECTORS.ACTION_CONFIRM_ADD_CONTACT, generateConfirmActionHandler(addContact)],\n            [SELECTORS.ACTION_CONFIRM_REMOVE_CONTACT, generateConfirmActionHandler(removeContact)],\n            [SELECTORS.ACTION_CONFIRM_DELETE_SELECTED_MESSAGES, generateConfirmActionHandler(deleteSelectedMessages)],\n            [SELECTORS.ACTION_CONFIRM_DELETE_CONVERSATION, generateConfirmActionHandler(deleteConversation)],\n            [SELECTORS.ACTION_OKAY_CONFIRM, generateConfirmActionHandler(cancelRequest)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_ACCEPT_CONTACT_REQUEST, generateConfirmActionHandler(acceptContactRequest)],\n            [SELECTORS.ACTION_DECLINE_CONTACT_REQUEST, generateConfirmActionHandler(declineContactRequest)],\n            [SELECTORS.MESSAGE, handleSelectMessage],\n            [SELECTORS.DELETE_MESSAGES_FOR_ALL_USERS_TOGGLE, handleDeleteMessagesForAllUsersToggle],\n            [SELECTORS.RETRY_SEND, handleRetrySendMessage]\n        ];\n        var footerActivateHandlers = [\n            [SELECTORS.SEND_MESSAGE_BUTTON, handleSendMessage],\n            [SELECTORS.TOGGLE_EMOJI_PICKER_BUTTON, handleToggleEmojiPicker],\n            [SELECTORS.ACTION_REQUEST_DELETE_SELECTED_MESSAGES, generateConfirmActionHandler(requestDeleteSelectedMessages)],\n            [SELECTORS.ACTION_REQUEST_ADD_CONTACT, generateConfirmActionHandler(requestAddContact)],\n            [SELECTORS.ACTION_REQUEST_UNBLOCK, generateConfirmActionHandler(requestUnblockUser)],\n        ];\n\n        AutoRows.init(footer);\n\n        if (emojiAutoCompleteContainer.length) {\n            initialiseEmojiAutoComplete(\n                emojiAutoCompleteContainer[0],\n                messageTextArea[0],\n                function(hasSuggestions) {\n                    var newState = StateManager.setShowEmojiAutoComplete(viewState, hasSuggestions);\n                    render(newState);\n                },\n                function(emoji) {\n                    var newState = StateManager.setShowEmojiAutoComplete(viewState, false);\n                    render(newState);\n\n                    messageTextArea.focus();\n                    var cursorPos = messageTextArea.prop('selectionStart');\n                    var currentText = messageTextArea.val();\n                    var textBefore = currentText.substring(0, cursorPos).replace(/\\S*$/, '');\n                    var textAfter = currentText.substring(cursorPos).replace(/^\\S*/, '');\n\n                    messageTextArea.val(textBefore + emoji + textAfter);\n                    // Set the cursor position to after the inserted emoji.\n                    messageTextArea.prop('selectionStart', textBefore.length + emoji.length);\n                    messageTextArea.prop('selectionEnd', textBefore.length + emoji.length);\n                }\n            );\n        }\n\n        if (emojiPickerElement.length) {\n            initialiseEmojiPicker(emojiPickerElement[0], function(emoji) {\n                var newState = StateManager.setShowEmojiPicker(viewState, !viewState.showEmojiPicker);\n                render(newState);\n\n                messageTextArea.focus();\n                var cursorPos = messageTextArea.prop('selectionStart');\n                var currentText = messageTextArea.val();\n                var textBefore = currentText.substring(0, cursorPos);\n                var textAfter = currentText.substring(cursorPos, currentText.length);\n\n                messageTextArea.val(textBefore + emoji + textAfter);\n                // Set the cursor position to after the inserted emoji.\n                messageTextArea.prop('selectionStart', cursorPos + emoji.length);\n                messageTextArea.prop('selectionEnd', cursorPos + emoji.length);\n            });\n        }\n\n        CustomEvents.define(header, [\n            CustomEvents.events.activate\n        ]);\n        CustomEvents.define(body, [\n            CustomEvents.events.activate\n        ]);\n        CustomEvents.define(footer, [\n            CustomEvents.events.activate,\n            CustomEvents.events.enter,\n            CustomEvents.events.escape\n        ]);\n        CustomEvents.define(messagesContainer, [\n            CustomEvents.events.scrollTop,\n            CustomEvents.events.scrollLock\n        ]);\n\n        messagesContainer.on(CustomEvents.events.scrollTop, function(e, data) {\n            var hasMembers = Object.keys(viewState.members).length > 1;\n\n            if (!isResetting && !isLoadingMoreMessages && !hasLoadedAllMessages() && hasMembers) {\n                isLoadingMoreMessages = true;\n                var newState = StateManager.setLoadingMessages(viewState, true);\n                render(newState);\n\n                loadMessages(viewState.id, LOAD_MESSAGE_LIMIT, getMessagesOffset(), NEWEST_FIRST, [])\n                    .then(function() {\n                        isLoadingMoreMessages = false;\n                        setMessagesOffset(getMessagesOffset() + LOAD_MESSAGE_LIMIT);\n                        return;\n                    })\n                    .catch(function(error) {\n                        isLoadingMoreMessages = false;\n                        Notification.exception(error);\n                    });\n            }\n\n            data.originalEvent.preventDefault();\n        });\n\n        headerActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            header.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        bodyActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            body.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        footerActivateHandlers.forEach(function(handler) {\n            var selector = handler[0];\n            var handlerFunction = handler[1];\n            footer.on(CustomEvents.events.activate, selector, handlerFunction);\n        });\n\n        footer.on(CustomEvents.events.enter, SELECTORS.MESSAGE_TEXT_AREA, function(e, data) {\n            var enterToSend = footer.attr('data-enter-to-send');\n            if (enterToSend && enterToSend != 'false' && enterToSend != '0') {\n                handleSendMessage(e, data);\n            }\n        });\n\n        footer.on(CustomEvents.events.escape, SELECTORS.EMOJI_PICKER_CONTAINER, handleToggleEmojiPicker);\n        $(document.body).on('click', handleCloseEmojiPicker);\n\n        PubSub.subscribe(MessageDrawerEvents.ROUTE_CHANGED, function(newRouteData) {\n            if (newMessagesPollTimer) {\n                if (newRouteData.route != MessageDrawerRoutes.VIEW_CONVERSATION) {\n                    newMessagesPollTimer.stop();\n                }\n            }\n        });\n    };\n\n    /**\n     * Reset the timer that polls for new messages.\n     *\n     * @param  {Number} conversationId The conversation id\n     */\n    var resetMessagePollTimer = function(conversationId) {\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n\n        newMessagesPollTimer = new BackOffTimer(\n            getLoadNewMessagesCallback(conversationId, NEWEST_FIRST),\n            BackOffTimer.getIncrementalCallback(\n                viewState.messagePollMin * MILLISECONDS_IN_SEC,\n                MILLISECONDS_IN_SEC,\n                viewState.messagePollMax * MILLISECONDS_IN_SEC,\n                viewState.messagePollAfterMax * MILLISECONDS_IN_SEC\n            )\n        );\n\n        newMessagesPollTimer.start();\n    };\n\n    /**\n     * Reset the state to the initial state and render the UI.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Number|null} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     */\n    var resetState = function(body, conversationId, loggedInUserProfile) {\n        // Reset all of the states back to the beginning if we're loading a new\n        // conversation.\n        if (newMessagesPollTimer) {\n            newMessagesPollTimer.stop();\n        }\n        loadedAllMessages = false;\n        messagesOffset = 0;\n        newMessagesPollTimer = null;\n        isRendering = false;\n        renderBuffer = [];\n        isResetting = true;\n        isSendingMessage = false;\n        isDeletingConversationContent = false;\n        sendMessageBuffer = [];\n\n        var loggedInUserId = loggedInUserProfile.id;\n        var midnight = parseInt(body.attr('data-midnight'), 10);\n        var messagePollMin = parseInt(body.attr('data-message-poll-min'), 10);\n        var messagePollMax = parseInt(body.attr('data-message-poll-max'), 10);\n        var messagePollAfterMax = parseInt(body.attr('data-message-poll-after-max'), 10);\n        var initialState = StateManager.buildInitialState(\n            midnight,\n            loggedInUserId,\n            conversationId,\n            messagePollMin,\n            messagePollMax,\n            messagePollAfterMax\n        );\n\n        if (!viewState) {\n            viewState = initialState;\n        }\n\n        render(initialState);\n    };\n\n    /**\n     * Load a new empty private conversation between two users or self-conversation.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @param  {Int} otherUserId The other user's id.\n     * @return {Promise} Renderer promise.\n     */\n    var resetNoConversation = function(body, loggedInUserProfile, otherUserId) {\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, null, loggedInUserProfile);\n\n        var resetNoConversationPromise = null;\n\n        if (loggedInUserProfile.id != otherUserId) {\n            // Private conversation between two different users.\n            resetNoConversationPromise = Repository.getConversationBetweenUsers(\n                loggedInUserProfile.id,\n                otherUserId,\n                true,\n                true,\n                0,\n                0,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        } else {\n            // Self conversation.\n            resetNoConversationPromise = Repository.getSelfConversation(\n                loggedInUserProfile.id,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        }\n\n        return resetNoConversationPromise.then(function(conversation) {\n                // Looks like we have a conversation after all! Let's use that.\n                return resetByConversation(body, conversation, loggedInUserProfile);\n            })\n            .catch(function() {\n                // Can't find a conversation. Oh well. Just load up a blank one.\n                return loadEmptyPrivateConversation(loggedInUserProfile, otherUserId);\n            });\n    };\n\n    /**\n     * Load new messages into the conversation based on a time interval.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Number} conversationId The conversation id.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetById = function(body, conversationId, loggedInUserProfile) {\n        var cache = null;\n        if (conversationId in stateCache) {\n            cache = stateCache[conversationId];\n        }\n\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, conversationId, loggedInUserProfile);\n\n        var promise = $.Deferred().resolve({}).promise();\n        if (cache) {\n            // We've seen this conversation before so there is no need to\n            // send any network requests.\n            var newState = cache.state;\n            // Reset some loading states just in case they were left weirdly.\n            newState = StateManager.setLoadingMessages(newState, false);\n            newState = StateManager.setLoadingMembers(newState, false);\n            setMessagesOffset(cache.messagesOffset);\n            setLoadedAllMessages(cache.loadedAllMessages);\n            render(newState);\n        } else {\n            promise = loadNewConversation(\n                conversationId,\n                loggedInUserProfile,\n                LOAD_MESSAGE_LIMIT,\n                0,\n                NEWEST_FIRST\n            );\n        }\n\n        return promise.then(function() {\n            return resetMessagePollTimer(conversationId);\n        });\n    };\n\n    /**\n     * Load new messages into the conversation based on a time interval.\n     *\n     * @param  {Object} body Conversation body container element.\n     * @param  {Object} conversation The conversation.\n     * @param  {Object} loggedInUserProfile The logged in user's profile.\n     * @return {Promise} Renderer promise.\n     */\n    var resetByConversation = function(body, conversation, loggedInUserProfile) {\n        var cache = null;\n        if (conversation.id in stateCache) {\n            cache = stateCache[conversation.id];\n        }\n\n        // Always reset the state back to the initial state so that the\n        // state manager and patcher can work correctly.\n        resetState(body, conversation.id, loggedInUserProfile);\n\n        var promise = $.Deferred().resolve({}).promise();\n        if (cache) {\n            // We've seen this conversation before so there is no need to\n            // send any network requests.\n            var newState = cache.state;\n            // Reset some loading states just in case they were left weirdly.\n            newState = StateManager.setLoadingMessages(newState, false);\n            newState = StateManager.setLoadingMembers(newState, false);\n            setMessagesOffset(cache.messagesOffset);\n            setLoadedAllMessages(cache.loadedAllMessages);\n            render(newState);\n        } else {\n            promise = loadExistingConversation(\n                conversation,\n                loggedInUserProfile,\n                LOAD_MESSAGE_LIMIT,\n                NEWEST_FIRST\n            );\n        }\n\n        return promise.then(function() {\n            return resetMessagePollTimer(conversation.id);\n        });\n    };\n\n    /**\n     * Setup the conversation page. This is a rather complex function because there are a\n     * few combinations of arguments that can be provided to this function to show the\n     * conversation.\n     *\n     * There are:\n     * 1.) A conversation object with no action or other user id (e.g. from the overview page)\n     * 2.) A conversation id with no action or other user id (e.g. from the contacts page)\n     * 3.) No conversation/id with an action and other other user id. (e.g. from contact page)\n     *\n     * @param {string} namespace The route namespace.\n     * @param {Object} header Conversation header container element.\n     * @param {Object} body Conversation body container element.\n     * @param {Object} footer Conversation footer container element.\n     * @param {Object|Number|null} conversationOrId Conversation or id or null\n     * @param {String} action An action to take on the conversation\n     * @param {Number} otherUserId The other user id for a private conversation\n     * @return {Object} jQuery promise\n     */\n    var show = function(namespace, header, body, footer, conversationOrId, action, otherUserId) {\n        var conversation = null;\n        var conversationId = null;\n\n        // Check what we were given to identify the conversation.\n        if (conversationOrId && conversationOrId !== null && typeof conversationOrId == 'object') {\n            conversation = conversationOrId;\n            conversationId = parseInt(conversation.id, 10);\n        } else {\n            conversation = null;\n            conversationId = parseInt(conversationOrId, 10);\n            conversationId = isNaN(conversationId) ? null : conversationId;\n        }\n\n        if (!conversationId && action && otherUserId) {\n            // If we didn't get a conversation id got a user id then let's see if we've\n            // previously loaded a private conversation with this user.\n            conversationId = getCachedPrivateConversationIdFromUserId(otherUserId);\n        }\n\n        // This is a new conversation if:\n        // 1. We don't already have a state\n        // 2. The given conversation doesn't match the one currently loaded\n        // 3. We have a view state without a conversation id and we weren't given one\n        //    but we were given a different other user id. This happens when the user\n        //    goes from viewing a user that they haven't yet initialised a conversation\n        //    with to viewing a different user that they also haven't initialised a\n        //    conversation with.\n        var isNewConversation = !viewState || (viewState.id != conversationId) || (otherUserId && otherUserId != getOtherUserId());\n\n        if (!body.attr('data-init')) {\n            // Generate the render function to bind the header, body, and footer\n            // elements to it so that we don't need to pass them around this module.\n            render = generateRenderFunction(header, body, footer, isNewConversation);\n            registerEventListeners(namespace, header, body, footer);\n            body.attr('data-init', true);\n        }\n\n        if (isNewConversation) {\n            var renderPromise = null;\n            var loggedInUserProfile = getLoggedInUserProfile(body);\n\n            if (conversation) {\n                renderPromise = resetByConversation(body, conversation, loggedInUserProfile, otherUserId);\n            } else if (conversationId) {\n                renderPromise = resetById(body, conversationId, loggedInUserProfile, otherUserId);\n            } else {\n                renderPromise = resetNoConversation(body, loggedInUserProfile, otherUserId);\n            }\n\n            return renderPromise\n                .then(function() {\n                    isResetting = false;\n                    // Focus the first element that can receieve it in the header.\n                    header.find(Constants.SELECTORS.CAN_RECEIVE_FOCUS).first().focus();\n                    return;\n                })\n                .catch(function(error) {\n                    isResetting = false;\n                    Notification.exception(error);\n                });\n        }\n\n        // We're not loading a new conversation so we should reset the poll timer to try to load\n        // new messages.\n        resetMessagePollTimer(conversationId);\n\n        if (viewState.type == CONVERSATION_TYPES.PRIVATE && action) {\n            // There are special actions that the user can perform in a private (aka 1-to-1)\n            // conversation.\n            var currentOtherUserId = getOtherUserId();\n\n            switch (action) {\n                case 'block':\n                    return requestBlockUser(currentOtherUserId);\n                case 'unblock':\n                    return requestUnblockUser(currentOtherUserId);\n                case 'add-contact':\n                    return requestAddContact(currentOtherUserId);\n                case 'remove-contact':\n                    return requestRemoveContact(currentOtherUserId);\n            }\n        }\n\n        // Final fallback to return a promise if we didn't need to do anything.\n        return $.Deferred().resolve().promise();\n    };\n\n    /**\n     * String describing this page used for aria-labels.\n     *\n     * @return {Object} jQuery promise\n     */\n    var description = function() {\n        return Str.get_string('messagedrawerviewconversation', 'core_message', viewState.name);\n    };\n\n    return {\n        show: show,\n        description: description\n    };\n});\n"],"file":"message_drawer_view_conversation.min.js"}