{"version":3,"sources":["../src/message_popover.js"],"names":["define","$","CustomEvents","PubSub","MessageDrawerEvents","SELECTORS","COUNT_CONTAINER","toggleMessageDrawerVisibility","buttonid","publish","TOGGLE_VISIBILITY","handleDecrementConversationCount","button","countContainer","find","count","parseInt","text","isNaN","addClass","registerEventListeners","events","activate","on","e","data","attr","focus","originalEvent","preventDefault","subscribe","CONVERSATION_READ","CONTACT_REQUEST_ACCEPTED","CONTACT_REQUEST_DECLINED","init"],"mappings":"AAsBAA,OAAM,gCACN,CACI,QADJ,CAEI,gCAFJ,CAGI,aAHJ,CAII,oCAJJ,CADM,CAON,SACIC,CADJ,CAEIC,YAFJ,CAGIC,MAHJ,CAIIC,mBAJJ,CAKE,IACMC,CAAAA,SAAS,CAAG,CACZC,eAAe,CAAE,mCADL,CADlB,CAUMC,6BAA6B,CAAG,SAASC,QAAT,CAAmB,CACnDL,MAAM,CAACM,OAAP,CAAeL,mBAAmB,CAACM,iBAAnC,CAAsDF,QAAtD,CACH,CAZH,CAqBMG,gCAAgC,CAAG,SAASC,MAAT,CAAiB,CACpD,MAAO,WAAW,IACVC,CAAAA,cAAc,CAAGD,MAAM,CAACE,IAAP,CAAYT,SAAS,CAACC,eAAtB,CADP,CAEVS,KAAK,CAAGC,QAAQ,CAACH,cAAc,CAACI,IAAf,EAAD,CAAwB,EAAxB,CAFN,CAId,GAAIC,KAAK,CAACH,KAAD,CAAT,CAAkB,CACdF,cAAc,CAACM,QAAf,CAAwB,QAAxB,CACH,CAFD,IAEO,IAAI,CAACJ,KAAD,EAAkB,CAAR,CAAAA,KAAd,CAAyB,CAC5BF,cAAc,CAACM,QAAf,CAAwB,QAAxB,CACH,CAFM,IAEA,CACHJ,KAAK,CAAGA,KAAK,CAAG,CAAhB,CACAF,cAAc,CAACI,IAAf,CAAoBF,KAApB,CACH,CACJ,CACJ,CAnCH,CA2CMK,sBAAsB,CAAG,SAASR,MAAT,CAAiB,CAC1CV,YAAY,CAACF,MAAb,CAAoBY,MAApB,CAA4B,CAACV,YAAY,CAACmB,MAAb,CAAoBC,QAArB,CAA5B,EAEAV,MAAM,CAACW,EAAP,CAAUrB,YAAY,CAACmB,MAAb,CAAoBC,QAA9B,CAAwC,SAASE,CAAT,CAAYC,IAAZ,CAAkB,CACtDlB,6BAA6B,CAACK,MAAM,CAACc,IAAP,CAAY,IAAZ,CAAD,CAA7B,CACAd,MAAM,CAACe,KAAP,GACAF,IAAI,CAACG,aAAL,CAAmBC,cAAnB,EACH,CAJD,EAMA1B,MAAM,CAAC2B,SAAP,CAAiB1B,mBAAmB,CAAC2B,iBAArC,CAAwDpB,gCAAgC,CAACC,MAAD,CAAxF,EACAT,MAAM,CAAC2B,SAAP,CAAiB1B,mBAAmB,CAAC4B,wBAArC,CAA+DrB,gCAAgC,CAACC,MAAD,CAA/F,EACAT,MAAM,CAAC2B,SAAP,CAAiB1B,mBAAmB,CAAC6B,wBAArC,CAA+DtB,gCAAgC,CAACC,MAAD,CAA/F,CACH,CAvDH,CAmEE,MAAO,CACHsB,IAAI,CANG,QAAPA,CAAAA,IAAO,CAAStB,MAAT,CAAiB,CACxBA,MAAM,CAAGX,CAAC,CAACW,MAAD,CAAV,CACAQ,sBAAsB,CAACR,MAAD,CACzB,CAEM,CAGV,CAlFK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controls the message popover in the nav bar.\n *\n * @module     core_message/message_popover\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/custom_interaction_events',\n    'core/pubsub',\n    'core_message/message_drawer_events'\n],\nfunction(\n    $,\n    CustomEvents,\n    PubSub,\n    MessageDrawerEvents\n) {\n    var SELECTORS = {\n        COUNT_CONTAINER: '[data-region=\"count-container\"]'\n    };\n\n    /**\n     * Toggle the message drawer visibility.\n     *\n     * @param {String} button The button id for the popover.\n     */\n    var toggleMessageDrawerVisibility = function(buttonid) {\n        PubSub.publish(MessageDrawerEvents.TOGGLE_VISIBILITY, buttonid);\n    };\n\n    /**\n     * Decrement the unread conversation count in the nav bar if a conversation\n     * is read. When there are no unread conversations then hide the counter.\n     *\n     * @param {Object} button The button element for the popover.\n     * @return {Function}\n     */\n    var handleDecrementConversationCount = function(button) {\n        return function() {\n            var countContainer = button.find(SELECTORS.COUNT_CONTAINER);\n            var count = parseInt(countContainer.text(), 10);\n\n            if (isNaN(count)) {\n                countContainer.addClass('hidden');\n            } else if (!count || count < 2) {\n                countContainer.addClass('hidden');\n            } else {\n                count = count - 1;\n                countContainer.text(count);\n            }\n        };\n    };\n\n    /**\n     * Add events listeners for when the popover icon is clicked and when conversations\n     * are read.\n     *\n     * @param {Object} button The button element for the popover.\n     */\n    var registerEventListeners = function(button) {\n        CustomEvents.define(button, [CustomEvents.events.activate]);\n\n        button.on(CustomEvents.events.activate, function(e, data) {\n            toggleMessageDrawerVisibility(button.attr('id'));\n            button.focus();\n            data.originalEvent.preventDefault();\n        });\n\n        PubSub.subscribe(MessageDrawerEvents.CONVERSATION_READ, handleDecrementConversationCount(button));\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_REQUEST_ACCEPTED, handleDecrementConversationCount(button));\n        PubSub.subscribe(MessageDrawerEvents.CONTACT_REQUEST_DECLINED, handleDecrementConversationCount(button));\n    };\n\n    /**\n     * Initialise the message popover.\n     *\n     * @param {Object} button The button element for the popover.\n     */\n    var init = function(button) {\n        button = $(button);\n        registerEventListeners(button);\n    };\n\n    return {\n        init: init,\n    };\n});\n"],"file":"message_popover.min.js"}