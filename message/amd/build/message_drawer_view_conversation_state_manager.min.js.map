{"version":3,"sources":["../src/message_drawer_view_conversation_state_manager.js"],"names":["define","$","cloneState","state","extend","formatMessages","messages","loggedInUserId","members","map","message","fromLoggedInUser","useridfrom","id","userFrom","text","timeCreated","timecreated","parseInt","formatMembers","member","fullname","profileurl","profileimageurl","profileimageurlsmall","isonline","showonlinestatus","isblocked","iscontact","isdeleted","canmessage","canmessageevenifblocked","requirescontact","contactrequests","buildInitialState","midnight","messagePollMin","messagePollMax","messagePollAfterMax","name","subname","type","totalMemberCount","imageUrl","isFavourite","isMuted","canDeleteMessagesForAllUsers","deleteMessagesForAllUsers","hasTriedToLoadMessages","loadingMessages","loadingMembers","loadingConfirmAction","pendingBlockUserIds","pendingUnblockUserIds","pendingRemoveContactIds","pendingAddContactIds","pendingDeleteMessageIds","pendingSendMessageIds","pendingDeleteConversation","selectedMessageIds","showEmojiAutoComplete","showEmojiPicker","addMessages","newState","formattedMessages","sendState","timeAdded","Date","now","errorMessage","allMessages","concat","sort","a","b","filter","index","sortedMessages","updateMessages","data","updatesById","reduce","carry","messageData","oldMessage","newMessage","formattedMessage","removeMessages","removeMessageIds","indexOf","removeMessagesById","messageIds","addMembers","formattedMembers","forEach","removeMembers","setLoadingMessages","value","setLoadingMembers","setId","setName","setSubname","setType","setIsFavourite","setIsMuted","setCanDeleteMessagesForAllUsers","setDeleteMessagesForAllUsers","setTotalMemberCount","count","setImageUrl","url","setLoadingConfirmAction","setPendingDeleteConversation","setMessagesSendPendingById","setMessagesSendSuccessById","setMessagesSendFailById","setShowEmojiAutoComplete","show","setShowEmojiPicker","addPendingBlockUsersById","userIds","push","addPendingRemoveContactsById","addPendingUnblockUsersById","addPendingAddContactsById","addPendingDeleteMessagesById","removePendingBlockUsersById","removePendingRemoveContactsById","removePendingUnblockUsersById","removePendingAddContactsById","removePendingDeleteMessagesById","addSelectedMessagesById","removeSelectedMessagesById","markMessagesAsRead","readMessages","readMessageIds","isRead","addContactRequests","requests","request","fromUserId","userid","toUserId","requesteduserid","removeContactRequests","existing"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module operates on the view states from the message_drawer_view_conversation module.\n * It exposes functions that can be used to generate new version of the state.\n *\n * Important notes for this module:\n * 1.) The existing state is always immutable. It should never be modified.\n * 2.) All functions that operate on the state should always clone the state and\n *     modify the cloned state before returning it.\n *\n * It's important that the states remain immutable because they are diff'd in\n * the message_drawer_view_conversation_patcher module in order to work out what\n * has changed.\n *\n * @module     core_message/message_drawer_view_conversation_state_manager\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery'], function($) {\n\n    /**\n     * Clone a state, a state is a collection of information about the variables required to build\n     * the conversation user interface.\n     *\n     * @param  {Object} state State to clone\n     * @return {Object} newstate A copy of the state to clone.\n     */\n    var cloneState = function(state) {\n        // Do a deep extend to make sure we recursively copy objects and\n        // arrays so that the new state doesn't contain any references to\n        // the old state, e.g. adding a value to an array in the new state\n        // shouldn't also add it to the old state.\n        return $.extend(true, {}, state);\n    };\n\n    /**\n     * Format messages to be used in a state.\n     *\n     * @param  {Array} messages The messages to format.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Array} members The converstation members.\n     * @return {Array} Formatted messages.\n     */\n    var formatMessages = function(messages, loggedInUserId, members) {\n        return messages.map(function(message) {\n            var fromLoggedInUser = message.useridfrom == loggedInUserId;\n            return {\n                // Stringify the id.\n                id: \"\" + message.id,\n                fromLoggedInUser: fromLoggedInUser,\n                userFrom: members[message.useridfrom],\n                text: message.text,\n                timeCreated: message.timecreated ? parseInt(message.timecreated, 10) : null\n            };\n        });\n    };\n\n    /**\n     * Format members to be used in a state.\n     *\n     * @param  {Array} members The messages to format.\n     * @return {Array} Formatted members.\n     */\n    var formatMembers = function(members) {\n        return members.map(function(member) {\n            return {\n                id: member.id,\n                fullname: member.fullname,\n                profileurl: member.profileurl,\n                profileimageurl: member.profileimageurl,\n                profileimageurlsmall: member.profileimageurlsmall,\n                isonline:  member.isonline,\n                showonlinestatus: member.showonlinestatus,\n                isblocked: member.isblocked,\n                iscontact: member.iscontact,\n                isdeleted: member.isdeleted,\n                canmessage: member.canmessage,\n                canmessageevenifblocked: member.canmessageevenifblocked,\n                requirescontact: member.requirescontact,\n                contactrequests: member.contactrequests || []\n            };\n        });\n    };\n\n    /**\n     * Create an initial (blank) state.\n     *\n     * @param  {Number} midnight Midnight time.\n     * @param  {Number} loggedInUserId The logged in user id.\n     * @param  {Number} id The conversation id.\n     * @param  {Number} messagePollMin The message poll start timeout in seconds.\n     * @param  {Number} messagePollMax The message poll max timeout limit in seconds.\n     * @param  {Number} messagePollAfterMax The message poll frequency in seconds to reset to after max limit is reached.\n     * @return {Object} Initial state.\n     */\n    var buildInitialState = function(\n        midnight,\n        loggedInUserId,\n        id,\n        messagePollMin,\n        messagePollMax,\n        messagePollAfterMax\n    ) {\n        return {\n            midnight: midnight,\n            loggedInUserId: loggedInUserId,\n            id: id,\n            messagePollMin: messagePollMin,\n            messagePollMax: messagePollMax,\n            messagePollAfterMax: messagePollAfterMax,\n            name: null,\n            subname: null,\n            type: null,\n            totalMemberCount: null,\n            imageUrl: null,\n            isFavourite: null,\n            isMuted: null,\n            canDeleteMessagesForAllUsers: false,\n            deleteMessagesForAllUsers: false,\n            members: {},\n            messages: [],\n            hasTriedToLoadMessages: false,\n            loadingMessages: true,\n            loadingMembers: true,\n            loadingConfirmAction: false,\n            pendingBlockUserIds: [],\n            pendingUnblockUserIds: [],\n            pendingRemoveContactIds: [],\n            pendingAddContactIds: [],\n            pendingDeleteMessageIds: [],\n            pendingSendMessageIds: [],\n            pendingDeleteConversation: false,\n            selectedMessageIds: [],\n            showEmojiAutoComplete: false,\n            showEmojiPicker: false\n        };\n    };\n\n    /**\n     * Add messages to a state and sort them by timecreated.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to add to state.\n     * @return {Object} state New state with added messages.\n     */\n    var addMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var formattedMessages = formatMessages(messages, state.loggedInUserId, state.members);\n        formattedMessages = formattedMessages.map(function(message) {\n            message.sendState = null;\n            message.timeAdded = Date.now();\n            message.errorMessage = null;\n            return message;\n        });\n        var allMessages = state.messages.concat(formattedMessages);\n        // Sort the messages. Oldest to newest.\n        allMessages.sort(function(a, b) {\n            if (a.timeCreated === null && b.timeCreated === null) {\n                if (a.timeAdded < b.timeAdded) {\n                    return -1;\n                } else if (a.timeAdded > b.timeAdded) {\n                    return 1;\n                }\n            }\n\n            if (a.timeCreated === null && b.timeCreated !== null) {\n                // A comes after b.\n                return 1;\n            } else if (a.timeCreated !== null && b.timeCreated === null) {\n                // A comes before b.\n                return -1;\n            } else if (a.timeCreated < b.timeCreated) {\n                // A comes before b.\n                return -1;\n            } else if (a.timeCreated > b.timeCreated) {\n                // A comes after b.\n                return 1;\n            } else if (a.id < b.id) {\n                return -1;\n            } else if (a.id > b.id) {\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n\n        // Filter out any duplicate messages.\n        newState.messages = allMessages.filter(function(message, index, sortedMessages) {\n            return !index || message.id != sortedMessages[index - 1].id;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Update existing messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} data 2D array of old and new messages\n     * @return {Object} state.\n     */\n    var updateMessages = function(state, data) {\n        var newState = cloneState(state);\n        var updatesById = data.reduce(function(carry, messageData) {\n            var oldMessage = messageData[0];\n            var newMessage = messageData[1];\n            var formattedMessages = formatMessages([newMessage], state.loggedInUserId, state.members);\n            var formattedMessage = formattedMessages[0];\n\n            carry[oldMessage.id] = formattedMessage;\n            return carry;\n        }, {});\n\n        newState.messages = newState.messages.map(function(message) {\n            if (message.id in updatesById) {\n                return $.extend(message, updatesById[message.id]);\n            } else {\n                return message;\n            }\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messages Messages to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessages = function(state, messages) {\n        var newState = cloneState(state);\n        var removeMessageIds = messages.map(function(message) {\n            return \"\" + message.id;\n        });\n        newState.messages = newState.messages.filter(function(message) {\n            return removeMessageIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove messages from state by message id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Message ids to remove from state.\n     * @return {Object} state New state with removed messages.\n     */\n    var removeMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages = newState.messages.filter(function(message) {\n            return messageIds.indexOf(message.id) < 0;\n        });\n\n        return newState;\n    };\n\n    /**\n     * Add conversation member to state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Conversation members to be added to state.\n     * @return {Object} New state with added members.\n     */\n    var addMembers = function(state, members) {\n        var newState = cloneState(state);\n        var formattedMembers = formatMembers(members);\n        formattedMembers.forEach(function(member) {\n            newState.members[member.id] = member;\n        });\n        return newState;\n    };\n\n    /**\n     * Remove members from state.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} members Members to be removed from state.\n     * @return {Object} New state with removed members.\n     */\n    var removeMembers = function(state, members) {\n        var newState = cloneState(state);\n        members.forEach(function(member) {\n            delete newState.members[member.id];\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state loading messages attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading messages value.\n     * @return {Object} New state with loading messages attribute.\n     */\n    var setLoadingMessages = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMessages = value;\n        if (state.loadingMessages && !value) {\n            // If we're going from loading to not loading then\n            // it means we've tried to load.\n            newState.hasTriedToLoadMessages = true;\n        }\n        return newState;\n    };\n\n    /**\n     * Set the state loading members attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading members value.\n     * @return {Object} New state with loading members attribute.\n     */\n    var setLoadingMembers = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingMembers = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation id.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value The ID.\n     * @return {Object} New state.\n     */\n    var setId = function(state, value) {\n        var newState = cloneState(state);\n        newState.id = value;\n        return newState;\n    };\n\n    /**\n     * Set the state name attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New name value.\n     * @return {Object} New state with name attribute.\n     */\n    var setName = function(state, value) {\n        var newState = cloneState(state);\n        newState.name = value;\n        return newState;\n    };\n\n    /**\n     * Set the state subname attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} value New subname value.\n     * @return {Object} New state.\n     */\n    var setSubname = function(state, value) {\n        var newState = cloneState(state);\n        newState.subname = value;\n        return newState;\n    };\n\n    /**\n     * Set the conversation type.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Int} type Conversation type.\n     * @return {Object} New state.\n     */\n    var setType = function(state, type) {\n        var newState = cloneState(state);\n        newState.type = type;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a favourite conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} isFavourite If it's a favourite.\n     * @return {Object} New state.\n     */\n    var setIsFavourite = function(state, isFavourite) {\n        var newState = cloneState(state);\n        newState.isFavourite = isFavourite;\n        return newState;\n    };\n\n    /**\n     * Set whether the conversation is a muted conversation.\n     *\n     * @param  {Object} state Current state.\n     * @param  {bool} isMuted If it's muted.\n     * @return {Object} New state.\n     */\n    var setIsMuted = function(state, isMuted) {\n        var newState = cloneState(state);\n        newState.isMuted = isMuted;\n        return newState;\n    };\n\n    /**\n     * Set the total member count.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} count The count.\n     * @return {Object} New state.\n     */\n    var setTotalMemberCount = function(state, count) {\n        var newState = cloneState(state);\n        newState.totalMemberCount = count;\n        return newState;\n    };\n\n    /**\n     * Set the conversation image url.\n     *\n     * @param  {Object} state Current state.\n     * @param  {String} url The url to the image.\n     * @return {Object} New state.\n     */\n    var setImageUrl = function(state, url) {\n        var newState = cloneState(state);\n        newState.imageUrl = url;\n        return newState;\n    };\n\n    /**\n     * Set the state loading confirm action attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New loading confirm action value.\n     * @return {Object} New state with loading confirm action attribute.\n     */\n    var setLoadingConfirmAction = function(state, value) {\n        var newState = cloneState(state);\n        newState.loadingConfirmAction = value;\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete conversation attribute.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value New pending delete conversation value.\n     * @return {Object} New state with pending delete conversation attribute.\n     */\n    var setPendingDeleteConversation = function(state, value) {\n        var newState = cloneState(state);\n        newState.pendingDeleteConversation = value;\n        return newState;\n    };\n\n    /**\n     * Set the state of message to pending.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendPendingById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'pending';\n                message.errorMessage = null;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state of message to sent.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendSuccessById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'sent';\n                message.errorMessage = null;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state of messages to error.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setMessagesSendFailById = function(state, messageIds, errorMessage) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.messages.forEach(function(message) {\n            if (messageIds.indexOf(message.id) >= 0) {\n                message.sendState = 'error';\n                message.errorMessage = errorMessage;\n            }\n        });\n        return newState;\n    };\n\n    /**\n     * Set the visibility of the emoji picker.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} show Should the emoji picker be shown.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setShowEmojiPicker = function(state, show) {\n        var newState = cloneState(state);\n        newState.showEmojiPicker = show;\n        return newState;\n    };\n\n    /**\n     * Set whether emojis auto complete suggestions should be shown.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} show Show the autocomplete\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var setShowEmojiAutoComplete = function(state, show) {\n        var newState = cloneState(state);\n        newState.showEmojiAutoComplete = show;\n        return newState;\n    };\n\n    /**\n     * Set the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var addPendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingBlockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var addPendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingRemoveContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var addPendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingUnblockUserIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending add users to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to add users to contacts.\n     * @return {Object} New state with array of pending add users to contacts userids.\n     */\n    var addPendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        userIds.forEach(function(id) {\n            newState.pendingAddContactIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Set the state pending delete messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to delete.\n     * @return {Object} New state with array of pending delete message ids.\n     */\n    var addPendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds.forEach(function(id) {\n            newState.pendingDeleteMessageIds.push(id);\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending block userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to block.\n     * @return {Object} New state with array of pending block userids.\n     */\n    var removePendingBlockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingBlockUserIds = newState.pendingBlockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending remove userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to remove.\n     * @return {Object} New state with array of pending remove userids.\n     */\n    var removePendingRemoveContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingRemoveContactIds = newState.pendingRemoveContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending unblock userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to unblock.\n     * @return {Object} New state with array of pending unblock userids.\n     */\n    var removePendingUnblockUsersById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingUnblockUserIds = newState.pendingUnblockUserIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending add to contacts userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} userIds User ids to remove from the list of user ids to add to contacts.\n     * @return {Object} New state with array of pending add to contacts userids.\n     */\n    var removePendingAddContactsById = function(state, userIds) {\n        var newState = cloneState(state);\n        newState.pendingAddContactIds = newState.pendingAddContactIds.filter(function(id) {\n            return userIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Update the state pending delete messages userids.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Message ids to remove from the list of messages to delete.\n     * @return {Object} New state with array of messages to delete.\n     */\n    var removePendingDeleteMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.pendingDeleteMessageIds = newState.pendingDeleteMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Add messages to state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages that are selected.\n     * @return {Object} New state with array of not blocked members.\n     */\n    var addSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.selectedMessageIds = newState.selectedMessageIds.concat(messageIds);\n        return newState;\n    };\n\n    /**\n     * Remove messages from the state selected messages.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} messageIds Messages to remove from selected messages.\n     * @return {Object} New state with array of selected messages.\n     */\n    var removeSelectedMessagesById = function(state, messageIds) {\n        var newState = cloneState(state);\n        messageIds = messageIds.map(function(id) {\n            return \"\" + id;\n        });\n        newState.selectedMessageIds = newState.selectedMessageIds.filter(function(id) {\n            return messageIds.indexOf(id) < 0;\n        });\n        return newState;\n    };\n\n    /**\n     * Mark messages as read.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} readMessages Messages that are read.\n     * @return {Object} New state with array of messages that have the isread attribute set.\n     */\n    var markMessagesAsRead = function(state, readMessages) {\n        var newState = cloneState(state);\n        var readMessageIds = readMessages.map(function(message) {\n            return message.id;\n        });\n        newState.messages = newState.messages.map(function(message) {\n            if (readMessageIds.indexOf(message.id) >= 0) {\n                message.isRead = true;\n            }\n\n            return message;\n        });\n        return newState;\n    };\n\n    /**\n     * Add a contact request to each of the members that the request is for.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var addContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n            newState.members[fromUserId].contactrequests.push(request);\n            newState.members[toUserId].contactrequests.push(request);\n        });\n\n        return newState;\n    };\n\n    /**\n     * Remove a contact request from the members of that request.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Array} requests The contact requests\n     * @return {Object} New state\n     */\n    var removeContactRequests = function(state, requests) {\n        var newState = cloneState(state);\n        requests.forEach(function(request) {\n            var fromUserId = request.userid;\n            var toUserId = request.requesteduserid;\n\n            newState.members[fromUserId].contactrequests = newState.members[fromUserId].contactrequests.filter(function(existing) {\n                return existing.userid != fromUserId;\n            });\n            newState.members[toUserId].contactrequests = newState.members[toUserId].contactrequests.filter(function(existing) {\n                return existing.requesteduserid != toUserId;\n            });\n        });\n\n        return newState;\n    };\n\n    /**\n     * Set wheter the message of the conversation can delete for all users.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value If it can delete for all users.\n     * @return {Object} New state.\n     */\n    var setCanDeleteMessagesForAllUsers = function(state, value) {\n        var newState = cloneState(state);\n        newState.canDeleteMessagesForAllUsers = value;\n        return newState;\n    };\n\n    /**\n     * Set wheter the messages of the conversation delete for all users.\n     *\n     * @param  {Object} state Current state.\n     * @param  {Bool} value Delete messages for all users.\n     * @return {Object} New state.\n     */\n    var setDeleteMessagesForAllUsers = function(state, value) {\n        var newState = cloneState(state);\n        newState.deleteMessagesForAllUsers = value;\n        return newState;\n    };\n\n    return {\n        buildInitialState: buildInitialState,\n        addMessages: addMessages,\n        updateMessages: updateMessages,\n        removeMessages: removeMessages,\n        removeMessagesById: removeMessagesById,\n        addMembers: addMembers,\n        removeMembers: removeMembers,\n        setLoadingMessages: setLoadingMessages,\n        setLoadingMembers: setLoadingMembers,\n        setId: setId,\n        setName: setName,\n        setSubname: setSubname,\n        setType: setType,\n        setIsFavourite: setIsFavourite,\n        setIsMuted: setIsMuted,\n        setCanDeleteMessagesForAllUsers: setCanDeleteMessagesForAllUsers,\n        setDeleteMessagesForAllUsers: setDeleteMessagesForAllUsers,\n        setTotalMemberCount: setTotalMemberCount,\n        setImageUrl: setImageUrl,\n        setLoadingConfirmAction: setLoadingConfirmAction,\n        setPendingDeleteConversation: setPendingDeleteConversation,\n        setMessagesSendPendingById: setMessagesSendPendingById,\n        setMessagesSendSuccessById: setMessagesSendSuccessById,\n        setMessagesSendFailById: setMessagesSendFailById,\n        setShowEmojiAutoComplete: setShowEmojiAutoComplete,\n        setShowEmojiPicker: setShowEmojiPicker,\n        addPendingBlockUsersById: addPendingBlockUsersById,\n        addPendingRemoveContactsById: addPendingRemoveContactsById,\n        addPendingUnblockUsersById: addPendingUnblockUsersById,\n        addPendingAddContactsById: addPendingAddContactsById,\n        addPendingDeleteMessagesById: addPendingDeleteMessagesById,\n        removePendingBlockUsersById: removePendingBlockUsersById,\n        removePendingRemoveContactsById: removePendingRemoveContactsById,\n        removePendingUnblockUsersById: removePendingUnblockUsersById,\n        removePendingAddContactsById: removePendingAddContactsById,\n        removePendingDeleteMessagesById: removePendingDeleteMessagesById,\n        addSelectedMessagesById: addSelectedMessagesById,\n        removeSelectedMessagesById: removeSelectedMessagesById,\n        markMessagesAsRead: markMessagesAsRead,\n        addContactRequests: addContactRequests,\n        removeContactRequests: removeContactRequests\n    };\n});\n"],"file":"message_drawer_view_conversation_state_manager.min.js"}