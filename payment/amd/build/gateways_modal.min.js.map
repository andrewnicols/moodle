{"version":3,"file":"gateways_modal.min.js","sources":["../src/gateways_modal.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the gateways modal.\n *\n * @module     core_payment/gateways_modal\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {getAvailableGateways} from './repository';\nimport Selectors from './selectors';\nimport ModalEvents from 'core/modal_events';\nimport PaymentEvents from 'core_payment/events';\nimport {add as addToast, addToastRegion} from 'core/toast';\nimport Notification from 'core/notification';\nimport ModalGateways from './modal_gateways';\n\n/**\n * Register event listeners for the module.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const gatewayTrigger = e.target.closest('[data-action=\"core_payment/triggerPayment\"]');\n        if (gatewayTrigger) {\n            e.preventDefault();\n\n            show(gatewayTrigger, {focusOnClose: e.target});\n        }\n    });\n};\n\n/**\n * Shows the gateway selector modal.\n *\n * @param {HTMLElement} rootNode\n * @param {Object} options - Additional options\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\n */\nconst show = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const modal = await ModalFactory.create({\n        type: ModalGateways.TYPE,\n        title: await getString('selectpaymenttype', 'core_payment'),\n        body: await Templates.render('core_payment/gateways_modal', {}),\n    });\n\n    const rootElement = modal.getRoot()[0];\n    addToastRegion(rootElement);\n\n    modal.show();\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        // Destroy when hidden.\n        modal.destroy();\n        try {\n            focusOnClose.focus();\n        } catch (e) {\n            // eslint-disable-line\n        }\n    });\n\n    modal.getRoot().on(PaymentEvents.proceed, (e) => {\n        const gateway = (rootElement.querySelector(Selectors.values.gateway) || {value: ''}).value;\n\n        if (gateway) {\n            processPayment(\n                gateway,\n                rootNode.dataset.component,\n                rootNode.dataset.paymentarea,\n                rootNode.dataset.itemid,\n                rootNode.dataset.description\n            )\n            .then(message => {\n                modal.hide();\n                Notification.addNotification({\n                    message: message,\n                    type: 'success',\n                });\n                location.href = rootNode.dataset.successurl;\n\n                // The following return statement is never reached. It is put here just to make eslint happy.\n                return message;\n            })\n            .catch(message => Notification.alert('', message));\n        } else {\n            // We cannot use await in the following line.\n            // The reason is that we are preventing the default action of the save event being triggered,\n            // therefore we cannot define the event handler function asynchronous.\n            getString('nogatewayselected', 'core_payment').then(message => addToast(message, {type: 'warning'})).catch();\n        }\n\n        e.preventDefault();\n    });\n\n    // Re-calculate the cost when gateway is changed.\n    rootElement.addEventListener('change', e => {\n        if (e.target.matches(Selectors.elements.gateways)) {\n            updateCostRegion(rootElement, rootNode.dataset.cost);\n        }\n    });\n\n    const gateways = await getAvailableGateways(rootNode.dataset.component, rootNode.dataset.paymentarea, rootNode.dataset.itemid);\n    const context = {\n        gateways\n    };\n\n    const {html, js} = await Templates.renderForPromise('core_payment/gateways', context);\n    Templates.replaceNodeContents(rootElement.querySelector(Selectors.regions.gatewaysContainer), html, js);\n    selectSingleGateway(rootElement);\n    await updateCostRegion(rootElement, rootNode.dataset.cost);\n};\n\n/**\n * Auto-select the gateway if there is only one gateway.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n */\nconst selectSingleGateway = root => {\n    const gateways = root.querySelectorAll(Selectors.elements.gateways);\n\n    if (gateways.length == 1) {\n        gateways[0].checked = true;\n    }\n};\n\n/**\n * Shows the cost of the item the user is purchasing in the cost region.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n * @param {string} defaultCost The default cost that is going to be displayed if no gateway is selected\n * @returns {Promise<void>}\n */\nconst updateCostRegion = async(root, defaultCost = '') => {\n    const gatewayElement = root.querySelector(Selectors.values.gateway);\n    const surcharge = parseInt((gatewayElement || {dataset: {surcharge: 0}}).dataset.surcharge);\n    const cost = (gatewayElement || {dataset: {cost: defaultCost}}).dataset.cost;\n\n    const {html, js} = await Templates.renderForPromise('core_payment/fee_breakdown', {fee: cost, surcharge});\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.costContainer), html, js);\n};\n\n/**\n * Process payment using the selected gateway.\n *\n * @param {string} gateway The gateway to be used for payment\n * @param {string} component Name of the component that the itemId belongs to\n * @param {string} paymentArea Name of the area in the component that the itemId belongs to\n * @param {number} itemId An internal identifier that is used by the component\n * @param {string} description Description of the payment\n * @returns {Promise<string>}\n */\nconst processPayment = async(gateway, component, paymentArea, itemId, description) => {\n    const paymentMethod = await import(`paygw_${gateway}/gateways_modal`);\n    return paymentMethod.process(component, paymentArea, itemId, description);\n};\n\n/**\n * Set up the payment actions.\n */\nexport const init = () => {\n    if (!init.initialised) {\n        // Event listeners should only be registered once.\n        init.initialised = true;\n        registerEventListeners();\n    }\n};\n\n/**\n * Whether the init function was called before.\n *\n * @static\n * @type {boolean}\n */\ninit.initialised = false;\n"],"names":["_modal_factory","_interopRequireDefault","_templates","_selectors","_modal_events","_events","_notification","_modal_gateways","registerEventListeners","show","async","rootNode","focusOnClose","modal","ModalFactory","create","type","ModalGateways","TYPE","title","body","Templates","render","rootElement","getRoot","_toast","addToastRegion","on","ModalEvents","hidden","destroy","focus","e","PaymentEvents","proceed","gateway","querySelector","Selectors","values","value","processPayment","dataset","component","paymentarea","itemid","description","then","message","hide","Notification","addNotification","location","href","successurl","catch","alert","_str","get_string","preventDefault","addEventListener","target","matches","elements","gateways","updateCostRegion","cost","context","_repository","getAvailableGateways","html","js","renderForPromise","replaceNodeContents","regions","gatewaysContainer","selectSingleGateway","root","querySelectorAll","length","checked","defaultCost","gatewayElement","surcharge","parseInt","fee","costContainer","paymentArea","itemId","_systemImportTransformerGlobalIdentifier","define","amd","Promise","resolve","reject","require","concat","process","init","initialised","document","gatewayTrigger","closest"],"mappings":"+aAuBAA,eAAAC,uBAAAD,gBACAE,WAAAD,uBAAAC,YAGAC,WAAAF,uBAAAE,YACAC,cAAAH,uBAAAG,eACAC,QAAAJ,uBAAAI,SAEAC,cAAAL,uBAAAK,eACAC,gBAAAN,uBAAAM,qPAKMC,MAkBAC,KAAOC,eAAMC,UAAU,IAAAC,aACzBA,aAAe,6DACf,GACA,MAAMC,YAAcC,eAAAA,QAAaC,OAAO,CACpCC,KAAMC,gBAAAA,QAAcC,KACpBC,YAAa,mBAAU,oBAAqB,gBAC5CC,WAAYC,WAAAA,QAAUC,OAAO,8BAA+B,CAAA,KAG1DC,YAAcV,MAAMW,UAAU,IACpC,EAAAC,OAAAC,gBAAeH,aAEfV,MAAMJ,OAENI,MAAMW,UAAUG,GAAGC,cAAAA,QAAYC,QAAQ,KAEnChB,MAAMiB,UACF,IACAlB,aAAamB,OAChB,CAAC,MAAOC,GAER,KAGLnB,MAAMW,UAAUG,GAAGM,QAAcC,QAAAA,SAAUF,IACjCG,MAAAA,SAAWZ,YAAYa,cAAcC,WAAUC,QAAAA,OAAOH,UAAY,CAACI,MAAO,KAAKA,MAEjFJ,QACAK,eACIL,QACAxB,SAAS8B,QAAQC,UACjB/B,SAAS8B,QAAQE,YACjBhC,SAAS8B,QAAQG,OACjBjC,SAAS8B,QAAQI,aAEpBC,MAAKC,UACFlC,MAAMmC,OACNC,cAAAA,QAAaC,gBAAgB,CACzBH,QAASA,QACT/B,KAAM,YAEVmC,SAASC,KAAOzC,SAAS8B,QAAQY,WAG1BN,WAEVO,OAAMP,SAAWE,cAAaM,QAAAA,MAAM,GAAIR,YAK/B,EAAAS,KAAAC,YAAA,oBAAqB,gBAAgBX,MAAKC,UAAW,EAASA,OAAAA,KAAAA,QAAS,CAAC/B,KAAM,cAAasC,QAGzGtB,EAAE0B,gBAAF,IAIJnC,YAAYoC,iBAAiB,UAAU3B,IAC/BA,EAAE4B,OAAOC,QAAQxB,WAAAA,QAAUyB,SAASC,WACpCC,iBAAiBzC,YAAaZ,SAAS8B,QAAQwB,KAClD,IAGCF,MACAG,QAAU,CACZH,eAFmB,EAAAI,YAAAC,sBAAqBzD,SAAS8B,QAAQC,UAAW/B,SAAS8B,QAAQE,YAAahC,SAAS8B,QAAQG,UAKjHyB,KAACA,KAADC,GAAOA,UAAYjD,WAAUkD,QAAAA,iBAAiB,wBAAyBL,SAC7E7C,WAAAA,QAAUmD,oBAAoBjD,YAAYa,cAAcC,WAAAA,QAAUoC,QAAQC,mBAAoBL,KAAMC,IACpGK,oBAAoBpD,mBACdyC,iBAAiBzC,YAAaZ,SAAS8B,QAAQwB,KACxD,EAOKU,oBAAsBC,OAClBb,MAAAA,SAAWa,KAAKC,iBAAiBxC,WAAUyB,QAAAA,SAASC,UAEnC,GAAnBA,SAASe,SACTf,SAAS,GAAGgB,SAAU,EACzB,EAUCf,iBAAmBtD,eAAMkE,MAAMI,IAAAA,mEAAc,GACzCC,MAAAA,eAAiBL,KAAKxC,cAAcC,WAAUC,QAAAA,OAAOH,SACrD+C,UAAYC,UAAUF,gBAAkB,CAACxC,QAAS,CAACyC,UAAW,KAAKzC,QAAQyC,WAC3EjB,MAAQgB,gBAAkB,CAACxC,QAAS,CAACwB,KAAMe,eAAevC,QAAQwB,MAElEI,KAACA,KAADC,GAAOA,UAAYjD,WAAAA,QAAUkD,iBAAiB,6BAA8B,CAACa,IAAKnB,KAAMiB,sBAC9F7D,WAAAA,QAAUmD,oBAAoBI,KAAKxC,cAAcC,WAAAA,QAAUoC,QAAQY,eAAgBhB,KAAMC,GAC5F,EAYK9B,eAAiB9B,MAAMyB,QAASO,UAAW4C,YAAaC,OAAQ1C,qBAC5C,mBAAA2C,yCAAAC,QAAAD,yCAAAC,OAAAC,IAAA,IAAAC,SAAA,SAAAC,QAAAC,QAAAL,yCAAAM,QAAA,CAAA,SAAAC,OAAsB5D,QAAtB,oBAAAyD,QAAAC,OAAA,IAAsB1D,oBAAAA,QAAAA,OAAAA,SAAAA,oBAAAA,SAAAA,oBAAAA,QAAAA,OAAAA,WAAAA,yCAAAA,SAAAA,cAAAA,yCAAAA,QAAAA,OAAAA,QAAAA,QAAAA,QAAAA,SAAAA,OAAAA,QAAAA,qBAAAA,QAAAA,QAAAA,yCAAAA,SAAAA,OAAAA,QAA5C,uBACqB6D,QAAQtD,UAAW4C,YAAaC,OAAQ1C,aAMpDoD,KAAO,KACXA,KAAKC,cAEND,KAAKC,aAAc,EA9IvBC,SAASxC,iBAAiB,SAAS3B,IACzBoE,MAAAA,eAAiBpE,EAAE4B,OAAOyC,QAAQ,+CACpCD,iBACApE,EAAE0B,iBAEFjD,KAAK2F,eAAgB,CAACxF,aAAcoB,EAAE4B,SACzC,IA0IJ,qBASLqC,KAAKC,aAAc"}