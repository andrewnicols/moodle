{"version":3,"sources":["../src/gateways_modal.js"],"names":["registerEventListeners","document","addEventListener","e","gatewayTrigger","target","closest","preventDefault","show","focusOnClose","rootNode","modal","ModalFactory","create","type","ModalGateways","TYPE","title","body","Templates","render","rootElement","getRoot","on","ModalEvents","hidden","destroy","focus","PaymentEvents","proceed","gateway","querySelector","Selectors","values","value","processPayment","dataset","component","paymentarea","itemid","description","then","message","hide","Notification","addNotification","location","href","successurl","catch","alert","matches","elements","gateways","updateCostRegion","cost","html","js","renderForPromise","replaceNodeContents","regions","gatewaysContainer","selectSingleGateway","root","querySelectorAll","length","checked","defaultCost","gatewayElement","surcharge","parseInt","fee","costContainer","paymentArea","itemId","paymentMethod","process","init","initialised"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Contain the logic for the gateways modal.\n *\n * @module     core_payment/gateways_modal\n * @copyright  2019 Shamim Rezaie <shamim@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {getAvailableGateways} from './repository';\nimport Selectors from './selectors';\nimport ModalEvents from 'core/modal_events';\nimport PaymentEvents from 'core_payment/events';\nimport {add as addToast, addToastRegion} from 'core/toast';\nimport Notification from 'core/notification';\nimport ModalGateways from './modal_gateways';\n\n/**\n * Register event listeners for the module.\n */\nconst registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const gatewayTrigger = e.target.closest('[data-action=\"core_payment/triggerPayment\"]');\n        if (gatewayTrigger) {\n            e.preventDefault();\n\n            show(gatewayTrigger, {focusOnClose: e.target});\n        }\n    });\n};\n\n/**\n * Shows the gateway selector modal.\n *\n * @param {HTMLElement} rootNode\n * @param {Object} options - Additional options\n * @param {HTMLElement} options.focusOnClose The element to focus on when the modal is closed.\n */\nconst show = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const modal = await ModalFactory.create({\n        type: ModalGateways.TYPE,\n        title: await getString('selectpaymenttype', 'core_payment'),\n        body: await Templates.render('core_payment/gateways_modal', {}),\n    });\n\n    const rootElement = modal.getRoot()[0];\n    addToastRegion(rootElement);\n\n    modal.show();\n\n    modal.getRoot().on(ModalEvents.hidden, () => {\n        // Destroy when hidden.\n        modal.destroy();\n        try {\n            focusOnClose.focus();\n        } catch (e) {\n            // eslint-disable-line\n        }\n    });\n\n    modal.getRoot().on(PaymentEvents.proceed, (e) => {\n        const gateway = (rootElement.querySelector(Selectors.values.gateway) || {value: ''}).value;\n\n        if (gateway) {\n            processPayment(\n                gateway,\n                rootNode.dataset.component,\n                rootNode.dataset.paymentarea,\n                rootNode.dataset.itemid,\n                rootNode.dataset.description\n            )\n            .then(message => {\n                modal.hide();\n                Notification.addNotification({\n                    message: message,\n                    type: 'success',\n                });\n                location.href = rootNode.dataset.successurl;\n\n                // The following return statement is never reached. It is put here just to make eslint happy.\n                return message;\n            })\n            .catch(message => Notification.alert('', message));\n        } else {\n            // We cannot use await in the following line.\n            // The reason is that we are preventing the default action of the save event being triggered,\n            // therefore we cannot define the event handler function asynchronous.\n            getString('nogatewayselected', 'core_payment').then(message => addToast(message, {type: 'warning'})).catch();\n        }\n\n        e.preventDefault();\n    });\n\n    // Re-calculate the cost when gateway is changed.\n    rootElement.addEventListener('change', e => {\n        if (e.target.matches(Selectors.elements.gateways)) {\n            updateCostRegion(rootElement, rootNode.dataset.cost);\n        }\n    });\n\n    const gateways = await getAvailableGateways(rootNode.dataset.component, rootNode.dataset.paymentarea, rootNode.dataset.itemid);\n    const context = {\n        gateways\n    };\n\n    const {html, js} = await Templates.renderForPromise('core_payment/gateways', context);\n    Templates.replaceNodeContents(rootElement.querySelector(Selectors.regions.gatewaysContainer), html, js);\n    selectSingleGateway(rootElement);\n    await updateCostRegion(rootElement, rootNode.dataset.cost);\n};\n\n/**\n * Auto-select the gateway if there is only one gateway.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n */\nconst selectSingleGateway = root => {\n    const gateways = root.querySelectorAll(Selectors.elements.gateways);\n\n    if (gateways.length == 1) {\n        gateways[0].checked = true;\n    }\n};\n\n/**\n * Shows the cost of the item the user is purchasing in the cost region.\n *\n * @param {HTMLElement} root An HTMLElement that contains the cost region\n * @param {string} defaultCost The default cost that is going to be displayed if no gateway is selected\n * @returns {Promise<void>}\n */\nconst updateCostRegion = async(root, defaultCost = '') => {\n    const gatewayElement = root.querySelector(Selectors.values.gateway);\n    const surcharge = parseInt((gatewayElement || {dataset: {surcharge: 0}}).dataset.surcharge);\n    const cost = (gatewayElement || {dataset: {cost: defaultCost}}).dataset.cost;\n\n    const {html, js} = await Templates.renderForPromise('core_payment/fee_breakdown', {fee: cost, surcharge});\n    Templates.replaceNodeContents(root.querySelector(Selectors.regions.costContainer), html, js);\n};\n\n/**\n * Process payment using the selected gateway.\n *\n * @param {string} gateway The gateway to be used for payment\n * @param {string} component Name of the component that the itemId belongs to\n * @param {string} paymentArea Name of the area in the component that the itemId belongs to\n * @param {number} itemId An internal identifier that is used by the component\n * @param {string} description Description of the payment\n * @returns {Promise<string>}\n */\nconst processPayment = async(gateway, component, paymentArea, itemId, description) => {\n    const paymentMethod = await import(`paygw_${gateway}/gateways_modal`);\n    return paymentMethod.process(component, paymentArea, itemId, description);\n};\n\n/**\n * Set up the payment actions.\n */\nexport const init = () => {\n    if (!init.initialised) {\n        // Event listeners should only be registered once.\n        init.initialised = true;\n        registerEventListeners();\n    }\n};\n\n/**\n * Whether the init function was called before.\n *\n * @static\n * @type {boolean}\n */\ninit.initialised = false;\n"],"file":"gateways_modal.min.js"}