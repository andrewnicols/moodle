{"version":3,"sources":["../src/editor.js"],"names":["initialized","init","document","addEventListener","event","toggleEditViewMode","target","closest","reportSelectors","actions","toggleEditPreview","preventDefault","reportElement","regions","report","pendingPromise","Pending","toggledEditMode","dataset","editMode","customjs","reportId","then","response","javascript","Templates","render","html","js","replaceNode","resolve","catch","Notification","exception","reportEdit","reportModal","events","FORM_SUBMITTED","addToast","window","location","reload","show"],"mappings":"ipBAuBA,a,6EAGA,oDACA,0CACA,8CAGA,yD,0hCASA,GAAIA,CAAAA,WAAW,GAAf,CAKO,KAAMC,CAAAA,IAAI,CAAG,IAAM,CACtB,kBAAkBD,WAAlB,EACA,qBAAqBA,WAArB,EACA,kBAAkBA,WAAlB,EACA,kBAAkBA,WAAlB,EACA,oBAAmBA,WAAnB,EAGA,GAAIA,WAAJ,CAAiB,CACb,MACH,CAGDE,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmCC,KAAK,EAAI,CAGxC,KAAMC,CAAAA,kBAAkB,CAAGD,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBC,eAAe,CAACC,OAAhB,CAAwBC,iBAA7C,CAA3B,CACA,GAAIL,kBAAJ,CAAwB,CACpBD,KAAK,CAACO,cAAN,GADoB,KAGdC,CAAAA,aAAa,CAAGR,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBC,eAAe,CAACK,OAAhB,CAAwBC,MAA7C,CAHF,CAIdC,cAAc,CAAG,GAAIC,iBAAJ,CAAY,gCAAZ,CAJH,CAKdC,eAAe,CAA2C,GAAxC,GAAAZ,kBAAkB,CAACa,OAAnB,CAA2BC,QAL/B,CAOpB,GAAIC,CAAAA,QAAQ,CAAG,EAAf,CAEA,uBAAUR,aAAa,CAACM,OAAd,CAAsBG,QAAhC,CAA0CJ,eAA1C,EACKK,IADL,CACUC,QAAQ,EAAI,CACdH,QAAQ,CAAGG,QAAQ,CAACC,UAApB,CACA,MAAOC,oBAAUC,MAAV,CAAiB,6CAAjB,CAAgEH,QAAhE,CACV,CAJL,EAKKD,IALL,CAKU,CAACK,IAAD,CAAOC,EAAP,GAAc,CAChB,MAAOH,oBAAUI,WAAV,CAAsBjB,aAAtB,CAAqCe,IAArC,CAA2CC,EAAE,CAAGR,QAAhD,CACV,CAPL,EAQKE,IARL,CAQU,IAAMP,cAAc,CAACe,OAAf,EARhB,EASKC,KATL,CASWC,sBAAaC,SATxB,CAUH,CAGD,KAAMC,CAAAA,UAAU,CAAG9B,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBC,eAAe,CAACC,OAAhB,CAAwByB,UAA7C,CAAnB,CACA,GAAIA,UAAJ,CAAgB,CACZ9B,KAAK,CAACO,cAAN,GAEA,KAAMwB,CAAAA,WAAW,CAAG,8BAAkB/B,KAAK,CAACE,MAAxB,CAAgC,oBAAU,mBAAV,CAA+B,oBAA/B,CAAhC,CAChB4B,UAAU,CAAChB,OAAX,CAAmBG,QADH,CAApB,CAEAc,WAAW,CAAChC,gBAAZ,CAA6BgC,WAAW,CAACC,MAAZ,CAAmBC,cAAhD,CAAgE,IAAM,CAClE,oBAAU,eAAV,CAA2B,oBAA3B,EACKf,IADL,CACUgB,UADV,EAEKhB,IAFL,CAEU,IAAM,CACR,MAAOiB,CAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EACV,CAJL,EAKKV,KALL,CAKWC,sBAAaC,SALxB,CAMH,CAPD,EAQAE,WAAW,CAACO,IAAZ,EACH,CACJ,CA1CD,EA4CA1C,WAAW,GACd,CA1DM,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder editor\n *\n * @module      core_reportbuilder/editor\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {init as columnsEditorInit} from 'core_reportbuilder/local/editor/columns';\nimport {init as conditionsEditorInit} from 'core_reportbuilder/local/editor/conditions';\nimport {init as filtersEditorInit} from 'core_reportbuilder/local/editor/filters';\nimport {init as sortingEditorInit} from 'core_reportbuilder/local/editor/sorting';\nimport {init as cardviewEditorInit} from 'core_reportbuilder/local/editor/card_view';\nimport {getReport} from 'core_reportbuilder/local/repository/reports';\nimport {createReportModal} from 'core_reportbuilder/local/repository/modals';\n\nlet initialized = false;\n\n/**\n * Initialise editor and all it's modules\n */\nexport const init = () => {\n    columnsEditorInit(initialized);\n    conditionsEditorInit(initialized);\n    filtersEditorInit(initialized);\n    sortingEditorInit(initialized);\n    cardviewEditorInit(initialized);\n\n    // Ensure we only add our listeners once (can be called multiple times by mustache template).\n    if (initialized) {\n        return;\n    }\n\n    // Add event handlers to generic report editor elements.\n    document.addEventListener('click', event => {\n\n        // Toggle between edit and preview mode.\n        const toggleEditViewMode = event.target.closest(reportSelectors.actions.toggleEditPreview);\n        if (toggleEditViewMode) {\n            event.preventDefault();\n\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            const pendingPromise = new Pending('core_reportbuilder/reports:get');\n            const toggledEditMode = toggleEditViewMode.dataset.editMode !== \"1\";\n\n            let customjs = '';\n\n            getReport(reportElement.dataset.reportId, toggledEditMode)\n                .then(response => {\n                    customjs = response.javascript;\n                    return Templates.render('core_reportbuilder/local/dynamictabs/editor', response);\n                })\n                .then((html, js) => {\n                    return Templates.replaceNode(reportElement, html, js + customjs);\n                })\n                .then(() => pendingPromise.resolve())\n                .catch(Notification.exception);\n        }\n\n        // Edit report details modal.\n        const reportEdit = event.target.closest(reportSelectors.actions.reportEdit);\n        if (reportEdit) {\n            event.preventDefault();\n\n            const reportModal = createReportModal(event.target, getString('editreportdetails', 'core_reportbuilder'),\n                reportEdit.dataset.reportId);\n            reportModal.addEventListener(reportModal.events.FORM_SUBMITTED, () => {\n                getString('reportupdated', 'core_reportbuilder')\n                    .then(addToast)\n                    .then(() => {\n                        return window.location.reload();\n                    })\n                    .catch(Notification.exception);\n            });\n            reportModal.show();\n        }\n    });\n\n    initialized = true;\n};\n"],"file":"editor.min.js"}