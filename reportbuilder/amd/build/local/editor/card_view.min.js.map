{"version":3,"file":"card_view.min.js","sources":["../../../src/local/editor/card_view.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder card view editor\n *\n * @module      core_reportbuilder/local/editor/card_view\n * @copyright   2021 Mikel Mart√≠n <mikel@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport DynamicForm from 'core_form/dynamicform';\nimport {add as addToast} from 'core/toast';\nimport {get_string as getString} from \"core/str\";\nimport {subscribe as subscribe} from 'core/pubsub';\nimport Notification from 'core/notification';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\n\nlet cardViewForm = null;\n\n/**\n * Initialise card view form, must be called on each init because the form container is re-created when switching editor modes\n */\nconst initCardViewForm = () => {\n    const cardViewFormContainer = document.querySelector(reportSelectors.regions.settingsCardView);\n    if (!cardViewFormContainer) {\n        return;\n    }\n    cardViewForm = new DynamicForm(cardViewFormContainer, '\\\\core_reportbuilder\\\\form\\\\card_view');\n\n    cardViewForm.addEventListener(cardViewForm.events.FORM_SUBMITTED, (event) => {\n        event.preventDefault();\n\n        getString('cardviewsettingssaved', 'core_reportbuilder')\n            .then(addToast)\n            .catch(Notification.exception);\n    });\n};\n\n/**\n * Initialise module\n *\n * @param {Boolean} initialized Ensure we only add our listeners once\n */\nexport const init = (initialized) => {\n    initCardViewForm();\n    if (initialized) {\n        return;\n    }\n\n    // Update form each time a column is added or removed to the custom report.\n    subscribe(reportEvents.publish.reportColumnsUpdated, () => {\n        const reportElement = document.querySelector(reportSelectors.regions.report);\n        cardViewForm.load({reportid: reportElement.dataset.reportId});\n    });\n};\n"],"names":["_dynamicform","_interopRequireDefault","_notification","reportEvents","_interopRequireWildcard","reportSelectors","cardViewForm","initialized","cardViewFormContainer","document","querySelector","regions","settingsCardView","DynamicForm","addEventListener","events","FORM_SUBMITTED","event","preventDefault","_str","get_string","then","addToast","catch","Notification","exception","initCardViewForm","_pubsub","subscribe","publish","reportColumnsUpdated","reportElement","report","load","reportid","dataset","reportId"],"mappings":"84CAyBAA,aAAAC,uBAAAD,cAIAE,cAAAD,uBAAAC,eACAC,aAAAC,wBAAAD,cACAE,gBAAAD,wBAAAC,iBAEIC,IAAAA,aAAe,mBA0BEC,cArBI,MACfC,MAAAA,sBAAwBC,SAASC,cAAcL,gBAAgBM,QAAQC,kBACxEJ,wBAGLF,aAAe,IAAIO,aAAAA,QAAYL,sBAAuB,yCAEtDF,aAAaQ,iBAAiBR,aAAaS,OAAOC,gBAAiBC,QAC/DA,MAAMC,kBAEI,EAAAC,KAAAC,YAAA,wBAAyB,sBAC9BC,KAAKC,OAAAA,KACLC,MAAMC,cAAAA,QAAaC,UAFxB,IAHJ,EAeAC,GACInB,cAKJ,EAAAoB,QAAAC,WAAUzB,aAAa0B,QAAQC,sBAAsB,KAC3CC,MAAAA,cAAgBtB,SAASC,cAAcL,gBAAgBM,QAAQqB,QACrE1B,aAAa2B,KAAK,CAACC,SAAUH,cAAcI,QAAQC,UAAnD,GAFJ"}