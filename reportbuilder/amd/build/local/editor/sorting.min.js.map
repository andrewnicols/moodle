{"version":3,"sources":["../../../src/local/editor/sorting.js"],"names":["SORTORDER","ASCENDING","DESCENDING","reloadSettingsSortingRegion","context","pendingPromise","Pending","settingsSortingRegion","document","querySelector","reportSelectors","regions","settingsSorting","Templates","renderForPromise","sorting","then","html","js","replaceNode","resolve","updateSorting","reportElement","element","sortenabled","sortdirection","reportId","dataset","listElement","closest","columnId","columnSortId","columnName","columnSortName","addToast","reportEvents","tableReload","init","initialized","publish","reportColumnsUpdated","data","catch","Notification","exception","addEventListener","event","toggleSorting","target","actions","reportToggleColumnSort","preventDefault","report","parseInt","columnSortDirection","checked","toggleSortingElement","getElementById","id","focus","toggleSortDirection","reportToggleColumnSortDirection","columnSortEnabled","toggleSortDirectionElement","columnsSortingSortableList","SortableList","isHorizontal","getElementName","Promise","on","EVENTS","DROP","info","positionChanged","columnPosition","targetColumnSortPosition","targetNextElement","siblings","length"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder columns sorting editor\n *\n * @module      core_reportbuilder/local/editor/sorting\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport $ from 'jquery';\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {subscribe} from 'core/pubsub';\nimport SortableList from 'core/sortable_list';\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {reorderColumnSorting, toggleColumnSorting} from 'core_reportbuilder/local/repository/sorting';\nimport Templates from 'core/templates';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport * as reportEvents from 'core_reportbuilder/local/events';\n\n// These constants match PHP consts SORT_ASC, SORT_DESC.\nconst SORTORDER = {\n    ASCENDING: 4,\n    DESCENDING: 3,\n};\n\n/**\n * Reload sorting settings region\n *\n * @param {Object} context\n * @return {Promise}\n */\nconst reloadSettingsSortingRegion = context => {\n    const pendingPromise = new Pending('core_reportbuilder/sorting:reload');\n    const settingsSortingRegion = document.querySelector(reportSelectors.regions.settingsSorting);\n\n    return Templates.renderForPromise('core_reportbuilder/local/settings/sorting', {sorting: context})\n        .then(({html, js}) => {\n            Templates.replaceNode(settingsSortingRegion, html, js);\n            return pendingPromise.resolve();\n        });\n};\n\n/**\n * Updates column sorting\n *\n * @param {Element} reportElement\n * @param {Element} element\n * @param {Number} sortenabled\n * @param {Number} sortdirection\n * @return {Promise}\n */\nconst updateSorting = (reportElement, element, sortenabled, sortdirection) => {\n    const reportId = reportElement.dataset.reportId;\n    const listElement = element.closest('li');\n    const columnId = listElement.dataset.columnSortId;\n    const columnName = listElement.dataset.columnSortName;\n\n    return toggleColumnSorting(reportId, columnId, sortenabled, sortdirection)\n        .then(reloadSettingsSortingRegion)\n        .then(() => getString('columnsortupdated', 'core_reportbuilder', columnName))\n        .then(addToast)\n        .then(() => {\n            dispatchEvent(reportEvents.tableReload, {}, reportElement);\n            return null;\n        });\n};\n\n/**\n * Initialise module\n *\n * @param {Boolean} initialized Ensure we only add our listeners once\n */\nexport const init = (initialized) => {\n    if (initialized) {\n        return;\n    }\n\n    // Update sorting region each time report columns are updated (added or removed).\n    subscribe(reportEvents.publish.reportColumnsUpdated, data => reloadSettingsSortingRegion(data)\n        .catch(Notification.exception)\n    );\n\n    document.addEventListener('click', event => {\n\n        // Enable/disable sorting on columns.\n        const toggleSorting = event.target.closest(reportSelectors.actions.reportToggleColumnSort);\n        if (toggleSorting) {\n            event.preventDefault();\n\n            const pendingPromise = new Pending('core_reportbuilder/sorting:toggle');\n            const reportElement = toggleSorting.closest(reportSelectors.regions.report);\n            const sortdirection = parseInt(toggleSorting.closest('li').dataset.columnSortDirection);\n\n            updateSorting(reportElement, toggleSorting, toggleSorting.checked, sortdirection)\n                .then(() => {\n                    // Re-focus the toggle sorting element after reloading the region.\n                    const toggleSortingElement = document.getElementById(toggleSorting.id);\n                    toggleSortingElement?.focus();\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n\n        // Change column sort direction.\n        const toggleSortDirection = event.target.closest(reportSelectors.actions.reportToggleColumnSortDirection);\n        if (toggleSortDirection) {\n            event.preventDefault();\n\n            const pendingPromise = new Pending('core_reportbuilder/sorting:direction');\n            const reportElement = toggleSortDirection.closest(reportSelectors.regions.report);\n            const listElement = toggleSortDirection.closest('li');\n            const sortenabled = listElement.dataset.columnSortEnabled;\n\n            let sortdirection = parseInt(listElement.dataset.columnSortDirection);\n            if (sortdirection === SORTORDER.ASCENDING) {\n                sortdirection = SORTORDER.DESCENDING;\n            } else if (sortdirection === SORTORDER.DESCENDING) {\n                sortdirection = SORTORDER.ASCENDING;\n            }\n\n            updateSorting(reportElement, toggleSortDirection, sortenabled, sortdirection)\n                .then(() => {\n                    // Re-focus the toggle sort direction element after reloading the region.\n                    const toggleSortDirectionElement = document.getElementById(toggleSortDirection.id);\n                    toggleSortDirectionElement?.focus();\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n    });\n\n    // Initialize sortable list to handle column sorting moving (note JQuery dependency, see MDL-72293 for resolution).\n    var columnsSortingSortableList = new SortableList(`${reportSelectors.regions.settingsSorting} ul`, {isHorizontal: false});\n    columnsSortingSortableList.getElementName = element => Promise.resolve(element.data('columnSortName'));\n\n    $(document).on(SortableList.EVENTS.DROP, `${reportSelectors.regions.report} li[data-column-sort-id]`, (event, info) => {\n        if (info.positionChanged) {\n            const pendingPromise = new Pending('core_reportbuilder/sorting:reorder');\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            const columnId = info.element.data('columnSortId');\n            const columnPosition = info.element.data('columnSortPosition');\n\n            // Select target position, if moving to the end then count number of element siblings.\n            let targetColumnSortPosition = info.targetNextElement.data('columnSortPosition') || info.element.siblings().length + 2;\n            if (targetColumnSortPosition > columnPosition) {\n                targetColumnSortPosition--;\n            }\n\n            reorderColumnSorting(reportElement.dataset.reportId, columnId, targetColumnSortPosition)\n                .then(reloadSettingsSortingRegion)\n                .then(() => getString('columnsortupdated', 'core_reportbuilder', info.element.data('columnSortName')))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return null;\n                })\n                .then(() => pendingPromise.resolve())\n                .catch(Notification.exception);\n        }\n    });\n};\n"],"file":"sorting.min.js"}