{"version":3,"file":"sorting.min.js","sources":["../../../src/local/editor/sorting.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder columns sorting editor\n *\n * @module      core_reportbuilder/local/editor/sorting\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport $ from 'jquery';\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {subscribe} from 'core/pubsub';\nimport SortableList from 'core/sortable_list';\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {reorderColumnSorting, toggleColumnSorting} from 'core_reportbuilder/local/repository/sorting';\nimport Templates from 'core/templates';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport * as reportEvents from 'core_reportbuilder/local/events';\n\n// These constants match PHP consts SORT_ASC, SORT_DESC.\nconst SORTORDER = {\n    ASCENDING: 4,\n    DESCENDING: 3,\n};\n\n/**\n * Reload sorting settings region\n *\n * @param {Object} context\n * @return {Promise}\n */\nconst reloadSettingsSortingRegion = context => {\n    const pendingPromise = new Pending('core_reportbuilder/sorting:reload');\n    const settingsSortingRegion = document.querySelector(reportSelectors.regions.settingsSorting);\n\n    return Templates.renderForPromise('core_reportbuilder/local/settings/sorting', {sorting: context})\n        .then(({html, js}) => {\n            Templates.replaceNode(settingsSortingRegion, html, js);\n            return pendingPromise.resolve();\n        });\n};\n\n/**\n * Updates column sorting\n *\n * @param {Element} reportElement\n * @param {Element} element\n * @param {Number} sortenabled\n * @param {Number} sortdirection\n * @return {Promise}\n */\nconst updateSorting = (reportElement, element, sortenabled, sortdirection) => {\n    const reportId = reportElement.dataset.reportId;\n    const listElement = element.closest('li');\n    const columnId = listElement.dataset.columnSortId;\n    const columnName = listElement.dataset.columnSortName;\n\n    return toggleColumnSorting(reportId, columnId, sortenabled, sortdirection)\n        .then(reloadSettingsSortingRegion)\n        .then(() => getString('columnsortupdated', 'core_reportbuilder', columnName))\n        .then(addToast)\n        .then(() => {\n            dispatchEvent(reportEvents.tableReload, {}, reportElement);\n            return null;\n        });\n};\n\n/**\n * Initialise module\n *\n * @param {Boolean} initialized Ensure we only add our listeners once\n */\nexport const init = (initialized) => {\n    if (initialized) {\n        return;\n    }\n\n    // Update sorting region each time report columns are updated (added or removed).\n    subscribe(reportEvents.publish.reportColumnsUpdated, data => reloadSettingsSortingRegion(data)\n        .catch(Notification.exception)\n    );\n\n    document.addEventListener('click', event => {\n\n        // Enable/disable sorting on columns.\n        const toggleSorting = event.target.closest(reportSelectors.actions.reportToggleColumnSort);\n        if (toggleSorting) {\n            event.preventDefault();\n\n            const pendingPromise = new Pending('core_reportbuilder/sorting:toggle');\n            const reportElement = toggleSorting.closest(reportSelectors.regions.report);\n            const sortdirection = parseInt(toggleSorting.closest('li').dataset.columnSortDirection);\n\n            updateSorting(reportElement, toggleSorting, toggleSorting.checked, sortdirection)\n                .then(() => {\n                    // Re-focus the toggle sorting element after reloading the region.\n                    const toggleSortingElement = document.getElementById(toggleSorting.id);\n                    toggleSortingElement?.focus();\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n\n        // Change column sort direction.\n        const toggleSortDirection = event.target.closest(reportSelectors.actions.reportToggleColumnSortDirection);\n        if (toggleSortDirection) {\n            event.preventDefault();\n\n            const pendingPromise = new Pending('core_reportbuilder/sorting:direction');\n            const reportElement = toggleSortDirection.closest(reportSelectors.regions.report);\n            const listElement = toggleSortDirection.closest('li');\n            const toggleSorting = listElement.querySelector(reportSelectors.actions.reportToggleColumnSort);\n\n            let sortdirection = parseInt(listElement.dataset.columnSortDirection);\n            if (sortdirection === SORTORDER.ASCENDING) {\n                sortdirection = SORTORDER.DESCENDING;\n            } else if (sortdirection === SORTORDER.DESCENDING) {\n                sortdirection = SORTORDER.ASCENDING;\n            }\n\n            updateSorting(reportElement, toggleSortDirection, toggleSorting.checked, sortdirection)\n                .then(() => {\n                    // Re-focus the toggle sort direction element after reloading the region.\n                    const toggleSortDirectionElement = document.getElementById(toggleSortDirection.id);\n                    toggleSortDirectionElement?.focus();\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n    });\n\n    // Initialize sortable list to handle column sorting moving (note JQuery dependency, see MDL-72293 for resolution).\n    var columnsSortingSortableList = new SortableList(`${reportSelectors.regions.settingsSorting} ul`, {isHorizontal: false});\n    columnsSortingSortableList.getElementName = element => Promise.resolve(element.data('columnSortName'));\n\n    $(document).on(SortableList.EVENTS.DROP, `${reportSelectors.regions.report} li[data-column-sort-id]`, (event, info) => {\n        if (info.positionChanged) {\n            const pendingPromise = new Pending('core_reportbuilder/sorting:reorder');\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            const columnId = info.element.data('columnSortId');\n            const columnPosition = info.element.data('columnSortPosition');\n\n            // Select target position, if moving to the end then count number of element siblings.\n            let targetColumnSortPosition = info.targetNextElement.data('columnSortPosition') || info.element.siblings().length + 2;\n            if (targetColumnSortPosition > columnPosition) {\n                targetColumnSortPosition--;\n            }\n\n            reorderColumnSorting(reportElement.dataset.reportId, columnId, targetColumnSortPosition)\n                .then(reloadSettingsSortingRegion)\n                .then(() => getString('columnsortupdated', 'core_reportbuilder', info.element.data('columnSortName')))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return null;\n                })\n                .then(() => pendingPromise.resolve())\n                .catch(Notification.exception);\n        }\n    });\n};\n"],"names":["_jquery","_interopRequireDefault","_notification","_pending","_sortable_list","reportSelectors","_interopRequireWildcard","_templates","reportEvents","SORTORDER","reloadSettingsSortingRegion","context","pendingPromise","Pending","default","settingsSortingRegion","document","querySelector","regions","settingsSorting","Templates","renderForPromise","sorting","then","_ref","html","js","replaceNode","resolve","updateSorting","reportElement","element","sortenabled","sortdirection","reportId","dataset","listElement","closest","columnId","columnSortId","columnName","columnSortName","_str","get_string","addToast","_event_dispatcher","dispatchEvent","tableReload","initialized","_pubsub","subscribe","publish","reportColumnsUpdated","data","catch","Notification","exception","addEventListener","event","toggleSorting","target","actions","reportToggleColumnSort","preventDefault","report","parseInt","columnSortDirection","checked","toggleSortingElement","getElementById","id","focus","toggleSortDirection","reportToggleColumnSortDirection","toggleSortDirectionElement","SortableList","concat","isHorizontal","getElementName","Promise","on","EVENTS","DROP","info","positionChanged","columnPosition","targetColumnSortPosition","targetNextElement","siblings","length","_sorting","reorderColumnSorting"],"mappings":"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"}