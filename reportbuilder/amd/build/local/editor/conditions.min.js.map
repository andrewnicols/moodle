{"version":3,"file":"conditions.min.js","sources":["../../../src/local/editor/conditions.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder conditions editor\n *\n * @module      core_reportbuilder/local/editor/conditions\n * @copyright   2021 Paul Holden <paulh@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport $ from 'jquery';\nimport CustomEvents from 'core/custom_interaction_events';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport SortableList from 'core/sortable_list';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {add as addToast} from 'core/toast';\nimport DynamicForm from 'core_form/dynamicform';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {addCondition, deleteCondition, reorderCondition, resetConditions} from 'core_reportbuilder/local/repository/conditions';\n\n/**\n * Reload conditions settings region\n *\n * @param {Element} reportElement\n * @param {Object} templateContext\n * @return {Promise}\n */\nconst reloadSettingsConditionsRegion = (reportElement, templateContext) => {\n    const pendingPromise = new Pending('core_reportbuilder/conditions:reload');\n    const settingsConditionsRegion = reportElement.querySelector(reportSelectors.regions.settingsConditions);\n\n    return Templates.renderForPromise('core_reportbuilder/local/settings/conditions', {conditions: templateContext})\n        .then(({html, js}) => {\n            Templates.replaceNode(settingsConditionsRegion, html, js + templateContext.javascript);\n\n            initConditionsForm();\n\n            // Re-focus the add condition element after reloading the region.\n            const reportAddCondition = reportElement.querySelector(reportSelectors.actions.reportAddCondition);\n            reportAddCondition?.focus();\n\n            return pendingPromise.resolve();\n        });\n};\n\n/**\n * Initialise conditions form, must be called on each init because the form container is re-created when switching editor modes\n */\nconst initConditionsForm = () => {\n    CustomEvents.define(reportSelectors.actions.reportAddCondition, [CustomEvents.events.accessibleChange]);\n\n    // Handle dynamic conditions form.\n    const reportElement = document.querySelector(reportSelectors.regions.report);\n    const conditionFormContainer = reportElement.querySelector(reportSelectors.regions.settingsConditions);\n    if (!conditionFormContainer) {\n        return;\n    }\n    const conditionForm = new DynamicForm(conditionFormContainer, '\\\\core_reportbuilder\\\\form\\\\condition');\n\n    // Submit report conditions.\n    conditionForm.addEventListener(conditionForm.events.FORM_SUBMITTED, event => {\n        event.preventDefault();\n\n        getString('conditionsapplied', 'core_reportbuilder')\n            .then(addToast)\n            .catch(Notification.exception);\n\n        // After the form has been submitted, we should trigger report table reload.\n        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n    });\n\n    // Reset report conditions.\n    conditionForm.addEventListener(conditionForm.events.NOSUBMIT_BUTTON_PRESSED, event => {\n        event.preventDefault();\n\n        Notification.saveCancelPromise(\n            getString('resetconditions', 'core_reportbuilder'),\n            getString('resetconditionsconfirm', 'core_reportbuilder'),\n            getString('resetall', 'core_reportbuilder'),\n            {triggerElement: event.detail}\n        ).then(() => {\n            const pendingPromise = new Pending('core_reportbuilder/conditions:reset');\n\n            return resetConditions(reportElement.dataset.reportId)\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                .then(() => addToast(getString('conditionsreset', 'core_reportbuilder')))\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }).catch(() => {\n            return;\n        });\n    });\n};\n\n/**\n * Initialise module, prefetch all required strings\n *\n * @param {Boolean} initialized Ensure we only add our listeners once\n */\nexport const init = initialized => {\n    prefetchStrings('core_reportbuilder', [\n        'conditionadded',\n        'conditiondeleted',\n        'conditionmoved',\n        'conditionsapplied',\n        'conditionsreset',\n        'deletecondition',\n        'deleteconditionconfirm',\n        'resetall',\n        'resetconditions',\n        'resetconditionsconfirm',\n    ]);\n\n    prefetchStrings('core', [\n        'delete',\n    ]);\n\n    initConditionsForm();\n    if (initialized) {\n        return;\n    }\n\n    // Add condition to report. Use custom events helper to ensure consistency across platforms.\n    $(document).on(CustomEvents.events.accessibleChange, reportSelectors.actions.reportAddCondition, event => {\n        const reportAddCondition = event.target.closest(reportSelectors.actions.reportAddCondition);\n        if (reportAddCondition) {\n            event.preventDefault();\n\n            // Check if dropdown is closed with no condition selected.\n            if (reportAddCondition.selectedIndex === 0) {\n                return;\n            }\n\n            const reportElement = reportAddCondition.closest(reportSelectors.regions.report);\n            const pendingPromise = new Pending('core_reportbuilder/conditions:add');\n\n            addCondition(reportElement.dataset.reportId, reportAddCondition.value)\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                .then(() => getString('conditionadded', 'core_reportbuilder',\n                    reportAddCondition.options[reportAddCondition.selectedIndex].text))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n    });\n\n    document.addEventListener('click', event => {\n\n        // Remove condition from report.\n        const reportRemoveCondition = event.target.closest(reportSelectors.actions.reportRemoveCondition);\n        if (reportRemoveCondition) {\n            event.preventDefault();\n\n            const reportElement = reportRemoveCondition.closest(reportSelectors.regions.report);\n            const conditionContainer = reportRemoveCondition.closest(reportSelectors.regions.activeCondition);\n            const conditionName = conditionContainer.dataset.conditionName;\n\n            Notification.saveCancelPromise(\n                getString('deletecondition', 'core_reportbuilder', conditionName),\n                getString('deleteconditionconfirm', 'core_reportbuilder', conditionName),\n                getString('delete', 'core'),\n                {triggerElement: reportRemoveCondition}\n            ).then(() => {\n                const pendingPromise = new Pending('core_reportbuilder/conditions:remove');\n\n                return deleteCondition(reportElement.dataset.reportId, conditionContainer.dataset.conditionId)\n                    .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                    .then(() => addToast(getString('conditiondeleted', 'core_reportbuilder', conditionName)))\n                    .then(() => {\n                        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                        return pendingPromise.resolve();\n                    })\n                    .catch(Notification.exception);\n            }).catch(() => {\n                return;\n            });\n        }\n    });\n\n    // Initialize sortable list to handle active conditions moving (note JQuery dependency, see MDL-72293 for resolution).\n    var activeConditionsSortableList = new SortableList(`${reportSelectors.regions.activeConditions}`,\n        {isHorizontal: false});\n    activeConditionsSortableList.getElementName = element => Promise.resolve(element.data('conditionName'));\n\n    $(document).on(SortableList.EVENTS.DROP, reportSelectors.regions.activeCondition, (event, info) => {\n        if (info.positionChanged) {\n            const pendingPromise = new Pending('core_reportbuilder/conditions:reorder');\n            const reportElement = event.target.closest(reportSelectors.regions.report);\n            const conditionId = info.element.data('conditionId');\n            const conditionPosition = info.element.data('conditionPosition');\n\n            // Select target position, if moving to the end then count number of element siblings.\n            let targetConditionPosition = info.targetNextElement.data('conditionPosition') || info.element.siblings().length + 2;\n            if (targetConditionPosition > conditionPosition) {\n                targetConditionPosition--;\n            }\n\n            reorderCondition(reportElement.dataset.reportId, conditionId, targetConditionPosition)\n                .then(data => reloadSettingsConditionsRegion(reportElement, data))\n                .then(() => getString('conditionmoved', 'core_reportbuilder', info.element.data('conditionName')))\n                .then(addToast)\n                .then(() => {\n                    dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n    });\n};\n"],"names":["_jquery","_interopRequireDefault","_custom_interaction_events","_notification","_pending","_sortable_list","_templates","_dynamicform","reportEvents","_interopRequireWildcard","reportSelectors","reloadSettingsConditionsRegion","reportElement","templateContext","pendingPromise","Pending","default","settingsConditionsRegion","querySelector","regions","settingsConditions","Templates","renderForPromise","conditions","then","_ref","html","js","replaceNode","javascript","initConditionsForm","reportAddCondition","actions","focus","resolve","CustomEvents","define","events","accessibleChange","document","report","conditionFormContainer","conditionForm","DynamicForm","addEventListener","FORM_SUBMITTED","event","preventDefault","_str","get_string","addToast","catch","Notification","exception","_event_dispatcher","dispatchEvent","tableReload","NOSUBMIT_BUTTON_PRESSED","saveCancelPromise","triggerElement","detail","dataset","reportId","data","initialized","_prefetch","prefetchStrings","on","target","closest","selectedIndex","value","options","text","add","reportRemoveCondition","conditionContainer","activeCondition","conditionName","conditionId","SortableList","concat","activeConditions","isHorizontal","getElementName","element","Promise","EVENTS","DROP","info","positionChanged","conditionPosition","targetConditionPosition","targetNextElement","siblings","length"],"mappings":"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"}