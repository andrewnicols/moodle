{"version":3,"file":"schedules.min.js","sources":["../src/schedules.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder audiences\n *\n * @module      core_reportbuilder/schedules\n * @copyright   2021 Paul Holden <paulh@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport 'core/inplace_editable';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport {add as addToast} from 'core/toast';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {createScheduleModal} from 'core_reportbuilder/local/repository/modals';\nimport {deleteSchedule, sendSchedule, toggleSchedule} from 'core_reportbuilder/local/repository/schedules';\n\nlet initialized = false;\n\n/**\n * Initialise schedules tab\n *\n * @param {Number} reportId\n */\nexport const init = reportId => {\n    prefetchStrings('core_reportbuilder', [\n        'deleteschedule',\n        'deletescheduleconfirm',\n        'disableschedule',\n        'editscheduledetails',\n        'enableschedule',\n        'newschedule',\n        'schedulecreated',\n        'scheduledeleted',\n        'schedulesent',\n        'scheduleupdated',\n        'sendschedule',\n        'sendscheduleconfirm',\n    ]);\n\n    prefetchStrings('core', [\n        'confirm',\n        'delete',\n    ]);\n\n    if (initialized) {\n        // We already added the event listeners (can be called multiple times by mustache template).\n        return;\n    }\n\n    document.addEventListener('click', event => {\n\n        // Create schedule.\n        const scheduleCreate = event.target.closest(reportSelectors.actions.scheduleCreate);\n        if (scheduleCreate) {\n            event.preventDefault();\n\n            const scheduleModal = createScheduleModal(event.target, getString('newschedule', 'core_reportbuilder'), reportId);\n            scheduleModal.addEventListener(scheduleModal.events.FORM_SUBMITTED, () => {\n                getString('schedulecreated', 'core_reportbuilder')\n                    .then(addToast)\n                    .then(() => {\n                        const reportElement = document.querySelector(reportSelectors.regions.report);\n                        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                        return;\n                    })\n                    .catch(Notification.exception);\n            });\n\n            scheduleModal.show();\n        }\n\n        // Toggle schedule.\n        const scheduleToggle = event.target.closest(reportSelectors.actions.scheduleToggle);\n        if (scheduleToggle) {\n            const pendingPromise = new Pending('core_reportbuilder/schedules:toggle');\n            const scheduleStateToggle = +!Number(scheduleToggle.dataset.state);\n\n            toggleSchedule(reportId, scheduleToggle.dataset.id, scheduleStateToggle)\n                .then(() => {\n                    const tableRow = scheduleToggle.closest('tr');\n                    tableRow.classList.toggle('text-muted');\n\n                    scheduleToggle.dataset.state = scheduleStateToggle;\n\n                    const stringKey = scheduleStateToggle ? 'disableschedule' : 'enableschedule';\n                    return getString(stringKey, 'core_reportbuilder');\n                })\n                .then(toggleLabel => {\n                    const labelContainer = scheduleToggle.parentElement.querySelector(`label[for=\"${scheduleToggle.id}\"] > span`);\n                    labelContainer.innerHTML = toggleLabel;\n                    return pendingPromise.resolve();\n                })\n                .catch(Notification.exception);\n        }\n\n        // Edit schedule.\n        const scheduleEdit = event.target.closest(reportSelectors.actions.scheduleEdit);\n        if (scheduleEdit) {\n            event.preventDefault();\n\n            // Use triggerElement to return focus to the action menu toggle.\n            const triggerElement = scheduleEdit.closest('.dropdown').querySelector('.dropdown-toggle');\n            const scheduleModal = createScheduleModal(triggerElement, getString('editscheduledetails', 'core_reportbuilder'),\n                reportId, scheduleEdit.dataset.scheduleId);\n            scheduleModal.addEventListener(scheduleModal.events.FORM_SUBMITTED, () => {\n                getString('scheduleupdated', 'core_reportbuilder')\n                    .then(addToast)\n                    .then(() => {\n                        const reportElement = scheduleEdit.closest(reportSelectors.regions.report);\n                        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                        return;\n                    })\n                    .catch(Notification.exception);\n            });\n\n            scheduleModal.show();\n        }\n\n        // Send schedule.\n        const scheduleSend = event.target.closest(reportSelectors.actions.scheduleSend);\n        if (scheduleSend) {\n            event.preventDefault();\n\n            // Use triggerElement to return focus to the action menu toggle.\n            const triggerElement = scheduleSend.closest('.dropdown').querySelector('.dropdown-toggle');\n            Notification.saveCancelPromise(\n                getString('sendschedule', 'core_reportbuilder'),\n                getString('sendscheduleconfirm', 'core_reportbuilder', scheduleSend.dataset.scheduleName),\n                getString('confirm', 'core'),\n                {triggerElement}\n            ).then(() => {\n                const pendingPromise = new Pending('core_reportbuilder/schedules:send');\n\n                return sendSchedule(reportId, scheduleSend.dataset.scheduleId)\n                    .then(addToast(getString('schedulesent', 'core_reportbuilder')))\n                    .then(() => pendingPromise.resolve())\n                    .catch(Notification.exception);\n            }).catch(() => {\n                return;\n            });\n        }\n\n        // Delete schedule.\n        const scheduleDelete = event.target.closest(reportSelectors.actions.scheduleDelete);\n        if (scheduleDelete) {\n            event.preventDefault();\n\n            // Use triggerElement to return focus to the action menu toggle.\n            const triggerElement = scheduleDelete.closest('.dropdown').querySelector('.dropdown-toggle');\n            Notification.saveCancelPromise(\n                getString('deleteschedule', 'core_reportbuilder'),\n                getString('deletescheduleconfirm', 'core_reportbuilder', scheduleDelete.dataset.scheduleName),\n                getString('delete', 'core'),\n                {triggerElement}\n            ).then(() => {\n                const pendingPromise = new Pending('core_reportbuilder/schedules:delete');\n\n                return deleteSchedule(reportId, scheduleDelete.dataset.scheduleId)\n                    .then(addToast(getString('scheduledeleted', 'core_reportbuilder')))\n                    .then(() => {\n                        const reportElement = scheduleDelete.closest(reportSelectors.regions.report);\n                        dispatchEvent(reportEvents.tableReload, {preservePagination: true}, reportElement);\n                        return pendingPromise.resolve();\n                    })\n                    .catch(Notification.exception);\n            }).catch(() => {\n                return;\n            });\n        }\n    });\n\n    initialized = true;\n};\n"],"names":["_notification","_interopRequireDefault","_pending","reportEvents","_interopRequireWildcard","reportSelectors","initialized","reportId","_prefetch","prefetchStrings","document","addEventListener","event","target","closest","actions","scheduleCreate","preventDefault","scheduleModal","_str","get_string","events","FORM_SUBMITTED","then","addToast","add","reportElement","querySelector","regions","report","_event_dispatcher","dispatchEvent","tableReload","catch","Notification","exception","show","scheduleToggle","pendingPromise","Pending","default","scheduleStateToggle","Number","dataset","state","_schedules","toggleSchedule","id","classList","toggle","stringKey","toggleLabel","parentElement","innerHTML","resolve","scheduleEdit","triggerElement","_modals","createScheduleModal","scheduleId","scheduleSend","saveCancelPromise","scheduleName","_toast","scheduleDelete","deleteSchedule","preservePagination"],"mappings":"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"}