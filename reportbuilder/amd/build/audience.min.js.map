{"version":3,"file":"audience.min.js","sources":["../src/audience.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder audiences\n *\n * @module      core_reportbuilder/audience\n * @copyright   2021 David Matamoros <davidmc@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\"use strict\";\n\nimport 'core/inplace_editable';\nimport Templates from 'core/templates';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\nimport DynamicForm from 'core_form/dynamicform';\nimport {add as addToast} from 'core/toast';\nimport {deleteAudience} from 'core_reportbuilder/local/repository/audiences';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {loadFragment} from 'core/fragment';\nimport {markFormAsDirty} from 'core_form/changechecker';\n\nlet reportId = 0;\nlet contextId = 0;\n\n/**\n * Add audience card\n *\n * @param {String} className\n * @param {String} title\n */\nconst addAudienceCard = (className, title) => {\n    const pendingPromise = new Pending('core_reportbuilder/audience:add');\n\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\n    const audienceCardLength = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard).length;\n\n    const params = {\n        classname: className,\n        reportid: reportId,\n        showormessage: (audienceCardLength > 0),\n        title: title,\n    };\n\n    // Load audience card fragment, render and then initialise the form within.\n    loadFragment('core_reportbuilder', 'audience_form', contextId, params)\n        .then((html, js) => {\n            const audienceCard = Templates.appendNodeContents(audiencesContainer, html, js)[0];\n            const audienceEmptyMessage = audiencesContainer.querySelector(reportSelectors.regions.audienceEmptyMessage);\n\n            const audienceForm = initAudienceCardForm(audienceCard);\n            // Mark as dirty new audience form created to prevent users leaving the page without saving it.\n            markFormAsDirty(audienceForm.getFormNode());\n            audienceEmptyMessage.classList.add('hidden');\n\n            return getString('audienceadded', 'core_reportbuilder', title);\n        })\n        .then(addToast)\n        .then(() => pendingPromise.resolve())\n        .catch(Notification.exception);\n};\n\n/**\n * Edit audience card\n *\n * @param {Element} audienceCard\n */\nconst editAudienceCard = audienceCard => {\n    const pendingPromise = new Pending('core_reportbuilder/audience:edit');\n\n    // Load audience form with data for editing, then toggle visible controls in the card.\n    const audienceForm = initAudienceCardForm(audienceCard);\n    audienceForm.load({id: audienceCard.dataset.instanceid})\n        .then(() => {\n            const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n            const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\n            const audienceEdit = audienceCard.querySelector(reportSelectors.actions.audienceEdit);\n\n            audienceFormContainer.classList.remove('hidden');\n            audienceDescription.classList.add('hidden');\n            audienceEdit.disabled = true;\n\n            return pendingPromise.resolve();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Initialise dynamic form within given audience card\n *\n * @param {Element} audienceCard\n * @return {DynamicForm}\n */\nconst initAudienceCardForm = audienceCard => {\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n    const audienceForm = new DynamicForm(audienceFormContainer, '\\\\core_reportbuilder\\\\form\\\\audience');\n\n    // After submitting the form, update the card instance and description properties.\n    audienceForm.addEventListener(audienceForm.events.FORM_SUBMITTED, data => {\n        const audienceHeading = audienceCard.querySelector(reportSelectors.regions.audienceHeading);\n        const audienceDescription = audienceCard.querySelector(reportSelectors.regions.audienceDescription);\n\n        audienceCard.dataset.instanceid = data.detail.instanceid;\n\n        audienceHeading.innerHTML = data.detail.heading;\n        audienceDescription.innerHTML = data.detail.description;\n\n        closeAudienceCardForm(audienceCard);\n\n        return getString('audiencesaved', 'core_reportbuilder')\n            .then(addToast);\n    });\n\n    // If cancelling the form, close the card or remove it if it was never created.\n    audienceForm.addEventListener(audienceForm.events.FORM_CANCELLED, () => {\n        if (audienceCard.dataset.instanceid > 0) {\n            closeAudienceCardForm(audienceCard);\n        } else {\n            removeAudienceCard(audienceCard);\n        }\n    });\n\n    return audienceForm;\n};\n\n/**\n * Delete audience card\n *\n * @param {Element} audienceDelete\n */\nconst deleteAudienceCard = audienceDelete => {\n    const audienceCard = audienceDelete.closest(reportSelectors.regions.audienceCard);\n    const audienceTitle = audienceCard.dataset.title;\n\n    Notification.saveCancelPromise(\n        getString('deleteaudience', 'core_reportbuilder', audienceTitle),\n        getString('deleteaudienceconfirm', 'core_reportbuilder', audienceTitle),\n        getString('delete', 'core'),\n        {triggerElement: audienceDelete}\n    ).then(() => {\n        const pendingPromise = new Pending('core_reportbuilder/audience:delete');\n\n        return deleteAudience(reportId, audienceCard.dataset.instanceid)\n            .then(() => addToast(getString('audiencedeleted', 'core_reportbuilder', audienceTitle)))\n            .then(() => {\n                removeAudienceCard(audienceCard);\n                return pendingPromise.resolve();\n            })\n            .catch(Notification.exception);\n    }).catch(() => {\n        return;\n    });\n};\n\n/**\n * Close audience card form\n *\n * @param {Element} audienceCard\n */\nconst closeAudienceCardForm = audienceCard => {\n    // Remove the [data-region=\"audience-form-container\"] (with all the event listeners attached to it), and create it again.\n    const audienceFormContainer = audienceCard.querySelector(reportSelectors.regions.audienceFormContainer);\n    const NewAudienceFormContainer = audienceFormContainer.cloneNode(false);\n    audienceCard.querySelector(reportSelectors.regions.audienceForm).replaceChild(NewAudienceFormContainer, audienceFormContainer);\n    // Show the description container and enable the action buttons.\n    audienceCard.querySelector(reportSelectors.regions.audienceDescription).classList.remove('hidden');\n    audienceCard.querySelector(reportSelectors.actions.audienceEdit).disabled = false;\n    audienceCard.querySelector(reportSelectors.actions.audienceDelete).disabled = false;\n};\n\n/**\n * Remove audience card\n *\n * @param {Element} audienceCard\n */\nconst removeAudienceCard = audienceCard => {\n    audienceCard.remove();\n\n    const audiencesContainer = document.querySelector(reportSelectors.regions.audiencesContainer);\n    const audienceCards = audiencesContainer.querySelectorAll(reportSelectors.regions.audienceCard);\n\n    // Show message if there are no cards remaining, ensure first card's separator is not present.\n    if (audienceCards.length === 0) {\n        const audienceEmptyMessage = document.querySelector(reportSelectors.regions.audienceEmptyMessage);\n        audienceEmptyMessage.classList.remove('hidden');\n    } else {\n        const audienceFirstCardSeparator = audienceCards[0].querySelector('.audience-separator');\n        audienceFirstCardSeparator?.remove();\n    }\n};\n\nlet initialized = false;\n\n/**\n * Initialise audiences tab.\n *\n * @param {Number} id\n * @param {Number} contextid\n */\nexport const init = (id, contextid) => {\n    prefetchStrings('core_reportbuilder', [\n        'audienceadded',\n        'audiencedeleted',\n        'audiencesaved',\n        'deleteaudience',\n        'deleteaudienceconfirm',\n    ]);\n\n    prefetchStrings('core', [\n        'delete',\n    ]);\n\n    reportId = id;\n    contextId = contextid;\n\n    if (initialized) {\n        // We already added the event listeners (can be called multiple times by mustache template).\n        return;\n    }\n\n    document.addEventListener('click', event => {\n\n        // Add instance.\n        const audienceAdd = event.target.closest(reportSelectors.actions.audienceAdd);\n        if (audienceAdd) {\n            event.preventDefault();\n            addAudienceCard(audienceAdd.dataset.uniqueIdentifier, audienceAdd.dataset.name);\n        }\n\n        // Edit instance.\n        const audienceEdit = event.target.closest(reportSelectors.actions.audienceEdit);\n        if (audienceEdit) {\n            const audienceEditCard = audienceEdit.closest(reportSelectors.regions.audienceCard);\n\n            event.preventDefault();\n            editAudienceCard(audienceEditCard);\n        }\n\n        // Delete instance.\n        const audienceDelete = event.target.closest(reportSelectors.actions.audienceDelete);\n        if (audienceDelete) {\n            event.preventDefault();\n            deleteAudienceCard(audienceDelete);\n        }\n    });\n\n    initialized = true;\n};\n"],"names":["_templates","_interopRequireDefault","_notification","_pending","_dynamicform","reportSelectors","_interopRequireWildcard","reportId","contextId","initAudienceCardForm","audienceCard","audienceFormContainer","querySelector","regions","audienceForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","data","audienceHeading","audienceDescription","dataset","instanceid","detail","innerHTML","heading","description","closeAudienceCardForm","_str","get_string","then","addToast","FORM_CANCELLED","removeAudienceCard","NewAudienceFormContainer","cloneNode","replaceChild","classList","remove","actions","audienceEdit","disabled","audienceDelete","audiencesContainer","audienceCards","document","querySelectorAll","length","audienceEmptyMessage","audienceFirstCardSeparator","initialized","id","contextid","_prefetch","prefetchStrings","event","audienceAdd","target","closest","preventDefault","className","title","pendingPromise","Pending","default","audienceCardLength","params","classname","reportid","showormessage","_fragment","loadFragment","html","js","Templates","appendNodeContents","getFormNode","add","resolve","catch","Notification","exception","addAudienceCard","uniqueIdentifier","name","audienceEditCard","load","editAudienceCard","audienceTitle","saveCancelPromise","triggerElement","_audiences","deleteAudience","deleteAudienceCard"],"mappings":"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"}