{"version":3,"file":"filters.min.js","sources":["../src/filters.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Report builder filter management\n *\n * @module      core_reportbuilder/filters\n * @copyright   2021 Paul Holden <paulh@moodle.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {loadFragment} from 'core/fragment';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\nimport Templates from 'core/templates';\nimport {add as addToast} from 'core/toast';\nimport DynamicForm from 'core_form/dynamicform';\nimport * as reportEvents from 'core_reportbuilder/local/events';\nimport * as reportSelectors from 'core_reportbuilder/local/selectors';\nimport {resetFilters} from 'core_reportbuilder/local/repository/filters';\n\n/**\n * Update filter button text to indicate applied filter count\n *\n * @param {Element} reportElement\n * @param {Number} filterCount\n */\nconst setFilterButtonCount = async(reportElement, filterCount) => {\n    const filterButtonLabel = reportElement.querySelector(reportSelectors.regions.filterButtonLabel);\n\n    if (filterCount > 0) {\n        filterButtonLabel.textContent = await getString('filtersappliedx', 'core_reportbuilder', filterCount);\n    } else {\n        filterButtonLabel.textContent = await getString('filters', 'moodle');\n    }\n};\n\n/**\n * Initialise module for given report\n *\n * @method\n * @param {Number} reportId\n * @param {Number} contextId\n */\nexport const init = (reportId, contextId) => {\n    const reportElement = document.querySelector(reportSelectors.forReport(reportId));\n    const filterFormContainer = reportElement.querySelector(reportSelectors.regions.filtersForm);\n\n    // Ensure we only add our listeners once (can be called multiple times by mustache template).\n    if (filterFormContainer.dataset.initialized) {\n        return;\n    }\n    filterFormContainer.dataset.initialized = true;\n\n    const filterForm = new DynamicForm(filterFormContainer, '\\\\core_reportbuilder\\\\form\\\\filter');\n\n    // Submit report filters.\n    filterForm.addEventListener(filterForm.events.FORM_SUBMITTED, event => {\n        event.preventDefault();\n\n        // After the form has been submitted, we should trigger report table reload.\n        dispatchEvent(reportEvents.tableReload, {}, reportElement);\n        setFilterButtonCount(reportElement, event.detail);\n\n        getString('filtersapplied', 'core_reportbuilder')\n            .then(addToast)\n            .catch(Notification.exception);\n    });\n\n    // Reset report filters.\n    filterForm.addEventListener(filterForm.events.NOSUBMIT_BUTTON_PRESSED, event => {\n        event.preventDefault();\n\n        const pendingPromise = new Pending('core_reportbuilder/filters:reset');\n        const reportParameters = reportElement.dataset.parameter;\n\n        resetFilters(reportId, reportParameters)\n            .then(() => getString('filtersreset', 'core_reportbuilder'))\n            .then(addToast)\n            .then(() => loadFragment('core_reportbuilder', 'filters_form', contextId, {\n                reportid: reportId,\n                parameters: reportParameters,\n            }))\n            .then((html, js) => {\n                Templates.replaceNodeContents(filterFormContainer, html, js);\n\n                dispatchEvent(reportEvents.tableReload, {}, reportElement);\n                setFilterButtonCount(reportElement, 0);\n\n                return pendingPromise.resolve();\n            })\n            .catch(Notification.exception);\n    });\n\n    // Modify \"region-main\" overflow for big filter forms.\n    document.querySelector('#region-main').style.overflowX = \"visible\";\n};\n"],"names":["_notification","_interopRequireDefault","_pending","_templates","_dynamicform","reportEvents","_interopRequireWildcard","reportSelectors","setFilterButtonCount","async","reportElement","filterCount","filterButtonLabel","querySelector","regions","textContent","_str","get_string","reportId","contextId","document","forReport","filterFormContainer","filtersForm","dataset","initialized","filterForm","DynamicForm","addEventListener","events","FORM_SUBMITTED","event","preventDefault","_event_dispatcher","dispatchEvent","tableReload","detail","then","addToast","catch","Notification","exception","NOSUBMIT_BUTTON_PRESSED","pendingPromise","Pending","default","reportParameters","parameter","_fragment","loadFragment","reportid","parameters","html","js","Templates","replaceNodeContents","resolve","style","overflowX"],"mappings":";;;;;;;kFAyBAA,cAAAC,uBAAAD,eACAE,SAAAD,uBAAAC,UAEAC,WAAAF,uBAAAE,YAEAC,aAAAH,uBAAAG,cACAC,aAAAC,wBAAAD,cACAE,gBAAAD,wBAAAC,iBASA,MAAMC,qBAAuBC,MAAMC,cAAeC,eACxCC,MAAAA,kBAAoBF,cAAcG,cAAcN,gBAAgBO,QAAQF,mBAG1EA,kBAAkBG,YADlBJ,YAAc,QACwB,EAAUK,KAAAC,YAAA,kBAAmB,qBAAsBN,mBAEnD,EAAUK,KAAAC,YAAA,UAAW,SAC9D,gBAUe,CAACC,SAAUC,aAC3B,MAAMT,cAAgBU,SAASP,cAAcN,gBAAgBc,UAAUH,WACjEI,oBAAsBZ,cAAcG,cAAcN,gBAAgBO,QAAQS,aAGhF,GAAID,oBAAoBE,QAAQC,YAC5B,OAEJH,oBAAoBE,QAAQC,aAAc,EAEpCC,MAAAA,WAAa,IAAIC,aAAAA,QAAYL,oBAAqB,sCAGxDI,WAAWE,iBAAiBF,WAAWG,OAAOC,gBAAgBC,QAC1DA,MAAMC,kBAGN,EAAAC,kBAAAC,eAAc7B,aAAa8B,YAAa,CAAA,EAAIzB,eAC5CF,qBAAqBE,cAAeqB,MAAMK,SAEhC,EAAApB,KAAAC,YAAA,iBAAkB,sBACvBoB,KAAKC,OAAAA,KACLC,MAAMC,cAAAA,QAAaC,UAFxB,IAMJf,WAAWE,iBAAiBF,WAAWG,OAAOa,yBAAyBX,QACnEA,MAAMC,iBAEN,MAAMW,eAAiB,IAAIC,SAAJC,QAAY,oCAC7BC,iBAAmBpC,cAAcc,QAAQuB,WAElC7B,EAAAA,SAAAA,cAAAA,SAAU4B,kBAClBT,MAAK,KAAM,EAAUrB,KAAAC,YAAA,eAAgB,wBACrCoB,KAAKC,OAAAA,KACLD,MAAK,KAAM,EAAaW,UAAAC,cAAA,qBAAsB,eAAgB9B,UAAW,CACtE+B,SAAUhC,SACViC,WAAYL,qBAEfT,MAAK,CAACe,KAAMC,MACTC,WAAAA,QAAUC,oBAAoBjC,oBAAqB8B,KAAMC,KAEzD,EAAApB,kBAAAC,eAAc7B,aAAa8B,YAAa,CAAA,EAAIzB,eAC5CF,qBAAqBE,cAAe,GAE7BiC,eAAea,aAEzBjB,MAAMC,cAAAA,QAAaC,UAfxB,IAmBJrB,SAASP,cAAc,gBAAgB4C,MAAMC,UAAY,SAAzD"}