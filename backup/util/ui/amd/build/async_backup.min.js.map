{"version":3,"sources":["../src/async_backup.js"],"names":["define","$","ajax","Str","notification","Templates","STATUS_FINISHED_ERR","STATUS_FINISHED_OK","Asyncbackup","checkdelayoriginal","checkdelay","checkdelaymultipler","backupid","contextid","restoreurl","typeid","backupintervalid","allbackupintervalid","allcopyintervalid","timeout","updateElement","type","percentage","percentagewidth","Math","round","elementbar","document","querySelectorAll","CSS","escape","percentagetext","toFixed","setAttribute","style","width","innerHTML","updateInterval","intervalid","callback","value","clearInterval","setInterval","updateBackupTableRow","statuscell","parent","tablerow","cellsiblings","siblings","timecell","timevalue","text","filenamecell","filename","call","methodname","args","done","response","context","time","size","filesize","fileurl","render","then","html","js","replaceNodeContents","fail","exception","Error","updateRestoreTableRow","coursecell","resourcename","updateCopyTableRow","restorecourse","closest","children","coursename","courselink","createElement","elementbarparent","operation","previousElementSibling","get_string","content","catch","appendChild","updateProgress","progress","elementstatus","elementdetail","elementbutton","stringRequests","status","classList","add","strProcessing","title","remove","strStatus","strStatusDetail","key","component","get_strings","strings","removeClass","last","addClass","strComplete","strDetail","strButton","param","attr","updateProgressAll","forEach","element","updateProgressCopy","restorecell","getBackupProgress","getAllBackupProgress","backupids","progressbars","find","not","each","push","id","substring","length","getAllCopyProgress","copyids","progressvars","dataset","restoreid","asyncBackupAllStatus","asyncCopyAllStatus","asyncBackupStatus","backup","restore","removeAttr"],"mappings":"AAwBAA,OAAM,4BAAC,CAAC,QAAD,CAAW,WAAX,CAAwB,UAAxB,CAAoC,mBAApC,CAAyD,gBAAzD,CAAD,CACE,SAASC,CAAT,CAAYC,IAAZ,CAAkBC,GAAlB,CAAuBC,YAAvB,CAAqCC,SAArC,CAAgD,IAQhDC,CAAAA,mBAAmB,CAAG,GAR0B,CAShDC,kBAAkB,CAAG,GAT2B,CAchDC,WAAW,CAAG,EAdkC,CAehDC,kBAAkB,CAAG,IAf2B,CAgBhDC,UAAU,CAAG,IAhBmC,CAiBhDC,mBAAmB,CAAG,GAjB0B,CAkBhDC,QAlBgD,CAmBhDC,SAnBgD,CAoBhDC,UApBgD,CAqBhDC,MArBgD,CAsBhDC,gBAtBgD,CAuBhDC,mBAvBgD,CAwBhDC,iBAxBgD,CAyBhDC,OAAO,CAAG,GAzBsC,CAkCpD,QAASC,CAAAA,aAAT,CAAuBR,QAAvB,CAAiCS,IAAjC,CAAuCC,UAAvC,CAAmD,IAC3CC,CAAAA,eAAe,CAAGC,IAAI,CAACC,KAAL,CAAWH,UAAX,EAAyB,GADA,CAE3CI,UAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,SAAWP,IAAX,CAAkB,KAAlB,CAA0BQ,GAAG,CAACC,MAAJ,CAAWlB,QAAX,CAA1B,CAAiD,GAA3E,EAAgF,CAAhF,CAF8B,CAG3CmB,cAAc,CAAGT,UAAU,CAACU,OAAX,CAAmB,CAAnB,EAAwB,GAHE,CAM/CN,UAAU,CAACO,YAAX,CAAwB,eAAxB,CAAyCV,eAAzC,EACAG,UAAU,CAACQ,KAAX,CAAiBC,KAAjB,CAAyBZ,eAAzB,CACAG,UAAU,CAACU,SAAX,CAAuBL,cAC1B,CAUD,QAASM,CAAAA,cAAT,CAAwBC,UAAxB,CAAoCC,QAApC,CAA8CC,KAA9C,CAAqD,CACjDC,aAAa,CAACH,UAAD,CAAb,CACA,MAAOI,CAAAA,WAAW,CAACH,QAAD,CAAWC,KAAX,CACrB,CAOD,QAASG,CAAAA,oBAAT,CAA8B/B,QAA9B,CAAwC,IAChCgC,CAAAA,UAAU,CAAG3C,CAAC,CAAC,IAAMW,QAAN,CAAiB,MAAlB,CAAD,CAA2BiC,MAA3B,GAAoCA,MAApC,EADmB,CAEhCC,QAAQ,CAAGF,UAAU,CAACC,MAAX,EAFqB,CAGhCE,YAAY,CAAGH,UAAU,CAACI,QAAX,EAHiB,CAIhCC,QAAQ,CAAGF,YAAY,CAAC,CAAD,CAJS,CAKhCG,SAAS,CAAGjD,CAAC,CAACgD,QAAD,CAAD,CAAYE,IAAZ,EALoB,CAMhCC,YAAY,CAAGL,YAAY,CAAC,CAAD,CANK,CAOhCM,QAAQ,CAAGpD,CAAC,CAACmD,YAAD,CAAD,CAAgBD,IAAhB,EAPqB,CASpCjD,IAAI,CAACoD,IAAL,CAAU,CAAC,CAEPC,UAAU,CAAE,2CAFL,CAGPC,IAAI,CAAE,CACF,SAAYH,QADV,CAEF,UAAaxC,SAFX,CAHC,CAAD,CAAV,EAOI,CAPJ,EAOO4C,IAPP,CAOY,SAASC,QAAT,CAAmB,CAE3B,GAAIC,CAAAA,OAAO,CAAG,CACNN,QAAQ,CAAEA,QADJ,CAENO,IAAI,CAAEV,SAFA,CAGNW,IAAI,CAAEH,QAAQ,CAACI,QAHT,CAINC,OAAO,CAAEL,QAAQ,CAACK,OAJZ,CAKNjD,UAAU,CAAE4C,QAAQ,CAAC5C,UALf,CAAd,CAQAT,SAAS,CAAC2D,MAAV,CAAiB,gCAAjB,CAAmDL,OAAnD,EAA4DM,IAA5D,CAAiE,SAASC,IAAT,CAAeC,EAAf,CAAmB,CAChF9D,SAAS,CAAC+D,mBAAV,CAA8BtB,QAA9B,CAAwCoB,IAAxC,CAA8CC,EAA9C,CAEH,CAHD,EAGGE,IAHH,CAGQ,UAAW,CACfjE,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,0BAAV,CAAvB,CAEH,CAND,CAOH,CAxBD,CAyBH,CAOD,QAASC,CAAAA,qBAAT,CAA+B5D,QAA/B,CAAyC,IACjCgC,CAAAA,UAAU,CAAG3C,CAAC,CAAC,IAAMW,QAAN,CAAiB,MAAlB,CAAD,CAA2BiC,MAA3B,GAAoCA,MAApC,EADoB,CAEjCC,QAAQ,CAAGF,UAAU,CAACC,MAAX,EAFsB,CAGjCE,YAAY,CAAGH,UAAU,CAACI,QAAX,EAHkB,CAIjCyB,UAAU,CAAG1B,YAAY,CAAC,CAAD,CAJQ,CAKjCE,QAAQ,CAAGF,YAAY,CAAC,CAAD,CALU,CAMjCG,SAAS,CAAGjD,CAAC,CAACgD,QAAD,CAAD,CAAYE,IAAZ,EANqB,CAQrCjD,IAAI,CAACoD,IAAL,CAAU,CAAC,CAEPC,UAAU,CAAE,4CAFL,CAGPC,IAAI,CAAE,CACF,SAAY5C,QADV,CAEF,UAAaC,SAFX,CAHC,CAAD,CAAV,EAOI,CAPJ,EAOO4C,IAPP,CAOY,SAASC,QAAT,CAAmB,IAEvBgB,CAAAA,YAAY,CAAGzE,CAAC,CAACwE,UAAD,CAAD,CAActB,IAAd,EAFQ,CAGvBQ,OAAO,CAAG,CACNe,YAAY,CAAEA,YADR,CAEN5D,UAAU,CAAE4C,QAAQ,CAAC5C,UAFf,CAGN8C,IAAI,CAAEV,SAHA,CAHa,CAS3B7C,SAAS,CAAC2D,MAAV,CAAiB,iCAAjB,CAAoDL,OAApD,EAA6DM,IAA7D,CAAkE,SAASC,IAAT,CAAeC,EAAf,CAAmB,CACjF9D,SAAS,CAAC+D,mBAAV,CAA8BtB,QAA9B,CAAwCoB,IAAxC,CAA8CC,EAA9C,CAEH,CAHD,EAGGE,IAHH,CAGQ,UAAW,CACfjE,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,0BAAV,CAAvB,CAEH,CAND,CAOH,CAvBD,CAwBH,CAOD,QAASI,CAAAA,kBAAT,CAA4B/D,QAA5B,CAAsC,IAC9Bc,CAAAA,UAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,mBAAqBC,GAAG,CAACC,MAAJ,CAAWlB,QAAX,CAArB,CAA4C,GAAtE,EAA2E,CAA3E,CADiB,CAE9BgE,aAAa,CAAGlD,UAAU,CAACmD,OAAX,CAAmB,IAAnB,EAAyBC,QAAzB,CAAkC,CAAlC,CAFc,CAG9BC,UAAU,CAAGH,aAAa,CAACxC,SAHG,CAI9B4C,UAAU,CAAGrD,QAAQ,CAACsD,aAAT,CAAuB,GAAvB,CAJiB,CAK9BC,gBAAgB,CAAGxD,UAAU,CAACmD,OAAX,CAAmB,IAAnB,CALW,CAM9BM,SAAS,CAAGD,gBAAgB,CAACE,sBANC,CASlCjF,GAAG,CAACkF,UAAJ,CAAe,UAAf,EAA2BpB,IAA3B,CAAgC,SAASqB,OAAT,CAAkB,CAC9CH,SAAS,CAAC/C,SAAV,CAAsBkD,OAEzB,CAHD,EAGGC,KAHH,CAGS,UAAW,CAChBnF,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,iCAAV,CAAvB,CAEH,CAND,EAQAlE,SAAS,CAAC2D,MAAV,CAAiB,+BAAjB,CAAkD,EAAlD,EAAsDC,IAAtD,CAA2D,SAASC,IAAT,CAAeC,EAAf,CAAmB,CAC1E9D,SAAS,CAAC+D,mBAAV,CAA8Bc,gBAA9B,CAAgDhB,IAAhD,CAAsDC,EAAtD,CAEH,CAHD,EAGGE,IAHH,CAGQ,UAAW,CACfjE,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,2BAAV,CAAvB,CAEH,CAND,EASArE,IAAI,CAACoD,IAAL,CAAU,CAAC,CACPC,UAAU,CAAE,4CADL,CAEPC,IAAI,CAAE,CACF,SAAY5C,QADV,CAEF,UAAa,CAFX,CAFC,CAAD,CAAV,EAMI,CANJ,EAMO6C,IANP,CAMY,SAASC,QAAT,CAAmB,CAC3BsB,UAAU,CAAC/C,YAAX,CAAwB,MAAxB,CAAgCyB,QAAQ,CAAC5C,UAAzC,EACAkE,UAAU,CAAC5C,SAAX,CAAuB2C,UAAvB,CACAH,aAAa,CAACxC,SAAd,CAA0B,IAA1B,CACAwC,aAAa,CAACY,WAAd,CAA0BR,UAA1B,CAGH,CAbD,EAaGX,IAbH,CAaQ,UAAW,CACfjE,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,4BAAV,CAAvB,CAEH,CAhBD,CAiBH,CAQD,QAASkB,CAAAA,cAAT,CAAwBC,QAAxB,CAAkC,IAC1BpE,CAAAA,UAAU,CAAuB,GAApB,CAAAoE,QAAQ,CAACA,QADI,CAE1BrE,IAAI,CAAG,QAFmB,CAG1BK,UAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,SAAWP,IAAX,CAAkB,KAAlB,CAA0BQ,GAAG,CAACC,MAAJ,CAAWlB,QAAX,CAA1B,CAAiD,GAA3E,EAAgF,CAAhF,CAHa,CAI1B+E,aAAa,CAAG1F,CAAC,CAAC,IAAMW,QAAN,CAAiB,SAAlB,CAJS,CAK1BgF,aAAa,CAAG3F,CAAC,CAAC,IAAMW,QAAN,CAAiB,SAAlB,CALS,CAM1BiF,aAAa,CAAG5F,CAAC,CAAC,IAAMW,QAAN,CAAiB,SAAlB,CANS,CAO1BkF,cAP0B,CAS9B,GAAIJ,QAAQ,CAACK,MAAT,KAAJ,CAAyC,CAGrCrE,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,YAAzB,EAEA7E,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiBC,UAAjB,CAAb,CAGA,GAAI4E,CAAAA,aAAa,CAAG,QAAUnF,MAAV,CAAmB,YAAvC,CACAZ,GAAG,CAACkF,UAAJ,CAAea,aAAf,CAA8B,QAA9B,EAAwCjC,IAAxC,CAA6C,SAASkC,KAAT,CAAgB,CACzDR,aAAa,CAACxC,IAAd,CAAmBgD,KAAnB,CAEH,CAHD,EAGGZ,KAHH,CAGS,UAAW,CAChBnF,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,iCAAmC2B,aAA7C,CAAvB,CACH,CALD,CAOH,CAhBD,IAgBO,IAAIR,QAAQ,CAACK,MAAT,EAAmBzF,mBAAvB,CAA4C,CAI/CoB,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,WAAzB,EAGAvE,UAAU,CAACsE,SAAX,CAAqBI,MAArB,CAA4B,YAA5B,EAEAhF,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiB,GAAjB,CAAb,CAT+C,GAY3CgF,CAAAA,SAAS,CAAG,QAAUtF,MAAV,CAAmB,OAZY,CAa3CuF,eAAe,CAAG,QAAUvF,MAAV,CAAmB,aAbM,CAc/C+E,cAAc,CAAG,CACb,CAACS,GAAG,CAAEF,SAAN,CAAiBG,SAAS,CAAE,QAA5B,CADa,CAEb,CAACD,GAAG,CAAED,eAAN,CAAuBE,SAAS,CAAE,QAAlC,CAFa,CAAjB,CAIArG,GAAG,CAACsG,WAAJ,CAAgBX,cAAhB,EAAgC7B,IAAhC,CAAqC,SAASyC,OAAT,CAAkB,CACnDf,aAAa,CAACxC,IAAd,CAAmBuD,OAAO,CAAC,CAAD,CAA1B,EACAd,aAAa,CAACzC,IAAd,CAAmBuD,OAAO,CAAC,CAAD,CAA1B,CAGH,CALD,EAMCnB,KAND,CAMO,UAAW,CACdnF,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,uBAAV,CAAvB,CAEH,CATD,EAWAtE,CAAC,CAAC,kBAAD,CAAD,CAAsB6E,QAAtB,CAA+B,MAA/B,EAAuC6B,WAAvC,CAAmD,sBAAnD,EACA1G,CAAC,CAAC,kBAAD,CAAD,CAAsB6E,QAAtB,CAA+B,MAA/B,EAAuC8B,IAAvC,GAA8CC,QAA9C,CAAuD,sBAAvD,EAGApE,aAAa,CAACzB,gBAAD,CAEhB,CAnCM,IAmCA,IAAI0E,QAAQ,CAACK,MAAT,EAAmBxF,kBAAvB,CAA2C,CAI9CmB,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,YAAzB,EAEA7E,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiB,GAAjB,CAAb,CAGA,GAAIyF,CAAAA,WAAW,CAAG,QAAU/F,MAAV,CAAmB,UAArC,CACAZ,GAAG,CAACkF,UAAJ,CAAeyB,WAAf,CAA4B,QAA5B,EAAsC7C,IAAtC,CAA2C,SAASkC,KAAT,CAAgB,CACvDR,aAAa,CAACxC,IAAd,CAAmBgD,KAAnB,CAEH,CAHD,EAGGZ,KAHH,CAGS,UAAW,CAChBnF,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,iCAAmCuC,WAA7C,CAAvB,CACH,CALD,EAOA,GAAc,SAAV,EAAA/F,MAAJ,CAAyB,CACrBb,IAAI,CAACoD,IAAL,CAAU,CAAC,CAEPC,UAAU,CAAE,4CAFL,CAGPC,IAAI,CAAE,CACF,SAAY5C,QADV,CAEF,UAAaC,SAFX,CAHC,CAAD,CAAV,EAOI,CAPJ,EAOO4C,IAPP,CAOY,SAASC,QAAT,CAAmB,IACvBqD,CAAAA,SAAS,CAAG,QAAUhG,MAAV,CAAmB,gBADR,CAEvBiG,SAAS,CAAG,QAAUjG,MAAV,CAAmB,gBAFR,CAGvB+E,cAAc,CAAG,CACjB,CAACS,GAAG,CAAEQ,SAAN,CAAiBP,SAAS,CAAE,QAA5B,CAAsCS,KAAK,CAAEvD,QAAQ,CAAC5C,UAAtD,CADiB,CAEjB,CAACyF,GAAG,CAAES,SAAN,CAAiBR,SAAS,CAAE,QAA5B,CAFiB,CAHM,CAO3BrG,GAAG,CAACsG,WAAJ,CAAgBX,cAAhB,EAAgC7B,IAAhC,CAAqC,SAASyC,OAAT,CAAkB,CACnDd,aAAa,CAAC1B,IAAd,CAAmBwC,OAAO,CAAC,CAAD,CAA1B,EACAb,aAAa,CAAC1C,IAAd,CAAmBuD,OAAO,CAAC,CAAD,CAA1B,EACAb,aAAa,CAACqB,IAAd,CAAmB,MAAnB,CAA2BxD,QAAQ,CAAC5C,UAApC,CAGH,CAND,EAOCyE,KAPD,CAOO,UAAW,CACdnF,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,uBAAV,CAAvB,CAEH,CAVD,CAYH,CA1BD,CA2BH,CA5BD,IA4BO,IACCwC,CAAAA,SAAS,CAAG,QAAUhG,MAAV,CAAmB,gBADhC,CAECiG,SAAS,CAAG,QAAUjG,MAAV,CAAmB,gBAFhC,CAGH+E,cAAc,CAAG,CACb,CAACS,GAAG,CAAEQ,SAAN,CAAiBP,SAAS,CAAE,QAA5B,CAAsCS,KAAK,CAAEnG,UAA7C,CADa,CAEb,CAACyF,GAAG,CAAES,SAAN,CAAiBR,SAAS,CAAE,QAA5B,CAFa,CAAjB,CAIArG,GAAG,CAACsG,WAAJ,CAAgBX,cAAhB,EAAgC7B,IAAhC,CAAqC,SAASyC,OAAT,CAAkB,CACnDd,aAAa,CAAC1B,IAAd,CAAmBwC,OAAO,CAAC,CAAD,CAA1B,EACAb,aAAa,CAAC1C,IAAd,CAAmBuD,OAAO,CAAC,CAAD,CAA1B,EACAb,aAAa,CAACqB,IAAd,CAAmB,MAAnB,CAA2BpG,UAA3B,CAGH,CAND,EAOCyE,KAPD,CAOO,UAAW,CACdnF,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,uBAAV,CAAvB,CAEH,CAVD,CAYH,CAEDtE,CAAC,CAAC,kBAAD,CAAD,CAAsB6E,QAAtB,CAA+B,MAA/B,EAAuC6B,WAAvC,CAAmD,sBAAnD,EACA1G,CAAC,CAAC,kBAAD,CAAD,CAAsB6E,QAAtB,CAA+B,MAA/B,EAAuC8B,IAAvC,GAA8CC,QAA9C,CAAuD,sBAAvD,EAGApE,aAAa,CAACzB,gBAAD,CAChB,CACJ,CAQD,QAASmG,CAAAA,iBAAT,CAA2BzB,QAA3B,CAAqC,CACjCA,QAAQ,CAAC0B,OAAT,CAAiB,SAASC,OAAT,CAAkB,IAC3B/F,CAAAA,UAAU,CAAsB,GAAnB,CAAA+F,OAAO,CAAC3B,QADM,CAE3B9E,QAAQ,CAAGyG,OAAO,CAACzG,QAFQ,CAG3BS,IAAI,CAAGgG,OAAO,CAAClC,SAHY,CAI3BzD,UAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,SAAWP,IAAX,CAAkB,KAAlB,CAA0BQ,GAAG,CAACC,MAAJ,CAAWlB,QAAX,CAA1B,CAAiD,GAA3E,EAAgF,CAAhF,CAJc,CAM/B,GAAIyG,OAAO,CAACtB,MAAR,KAAJ,CAAwC,CAIpCrE,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,YAAzB,EAEA7E,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiBC,UAAjB,CAEhB,CARD,IAQO,IAAI+F,OAAO,CAACtB,MAAR,EAAkBzF,mBAAtB,CAA2C,CAI9CoB,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,WAAzB,EACAvE,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,UAAzB,EAGAvE,UAAU,CAACsE,SAAX,CAAqBI,MAArB,CAA4B,YAA5B,EAEAhF,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiB,GAAjB,CAEhB,CAZM,IAYA,IAAIgG,OAAO,CAACtB,MAAR,EAAkBxF,kBAAtB,CAA0C,CAI7CmB,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,YAAzB,EACAvE,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,UAAzB,EAEA7E,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiB,GAAjB,CAAb,CAGA,GAAY,QAAR,EAAAA,IAAJ,CAAsB,CAClBsB,oBAAoB,CAAC/B,QAAD,CACvB,CAFD,IAEO,CACH4D,qBAAqB,CAAC5D,QAAD,CACxB,CAEJ,CAEJ,CA5CD,CA6CH,CAQD,QAAS0G,CAAAA,kBAAT,CAA4B5B,QAA5B,CAAsC,CAClCA,QAAQ,CAAC0B,OAAT,CAAiB,SAASC,OAAT,CAAkB,IAC3B/F,CAAAA,UAAU,CAAsB,GAAnB,CAAA+F,OAAO,CAAC3B,QADM,CAE3B9E,QAAQ,CAAGyG,OAAO,CAACzG,QAFQ,CAG3BS,IAAI,CAAGgG,OAAO,CAAClC,SAHY,CAI3BzD,UAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,SAAWP,IAAX,CAAkB,KAAlB,CAA0BQ,GAAG,CAACC,MAAJ,CAAWlB,QAAX,CAA1B,CAAiD,GAA3E,EAAgF,CAAhF,CAJc,CAM/B,GAAY,SAAR,EAAAS,IAAJ,CAAuB,CAClB,GAAIkG,CAAAA,WAAW,CAAG7F,UAAU,CAACmD,OAAX,CAAmB,IAAnB,EAAyBC,QAAzB,CAAkC,CAAlC,CAAlB,CACA3E,GAAG,CAACkF,UAAJ,CAAe,SAAf,EAA0BpB,IAA1B,CAA+B,SAASqB,OAAT,CAAkB,CAC7CiC,WAAW,CAACnF,SAAZ,CAAwBkD,OAE3B,CAHD,EAGGC,KAHH,CAGS,UAAW,CAChBnF,YAAY,CAACkE,SAAb,CAAuB,GAAIC,CAAAA,KAAJ,CAAU,gCAAV,CAAvB,CACH,CALD,CAMJ,CAED,GAAI8C,OAAO,CAACtB,MAAR,KAAJ,CAAwC,CAIpCrE,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,YAAzB,EAEA7E,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiBC,UAAjB,CAEhB,CARD,IAQO,IAAI+F,OAAO,CAACtB,MAAR,EAAkBzF,mBAAtB,CAA2C,CAI9CoB,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,WAAzB,EACAvE,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,UAAzB,EAGAvE,UAAU,CAACsE,SAAX,CAAqBI,MAArB,CAA4B,YAA5B,EAEAhF,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiB,GAAjB,CAEhB,CAZM,IAYA,IAAKgG,OAAO,CAACtB,MAAR,EAAkBxF,kBAAnB,EAAmD,SAAR,EAAAc,IAA/C,CAAmE,CAItEK,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,YAAzB,EACAvE,UAAU,CAACsE,SAAX,CAAqBC,GAArB,CAAyB,UAAzB,EAEA7E,aAAa,CAACR,QAAD,CAAWS,IAAX,CAAiB,GAAjB,CAAb,CAGAsD,kBAAkB,CAAC/D,QAAD,CACrB,CAEJ,CAjDD,CAkDH,CAKD,QAAS4G,CAAAA,iBAAT,EAA6B,CACzBtH,IAAI,CAACoD,IAAL,CAAU,CAAC,CAEPC,UAAU,CAAE,uCAFL,CAGPC,IAAI,CAAE,CACF,UAAa,CAAC5C,QAAD,CADX,CAEF,UAAaC,SAFX,CAHC,CAAD,CAAV,UAOuBM,OAPvB,EAOgC,CAPhC,EAOmCsC,IAPnC,CAOwC,SAASC,QAAT,CAAmB,CAEvD+B,cAAc,CAAC/B,QAAQ,CAAC,CAAD,CAAT,CAAd,CACAhD,UAAU,CAAGD,kBAAb,CACAO,gBAAgB,CAAGqB,cAAc,CAACrB,gBAAD,CAAmBwG,iBAAnB,CAAsC/G,kBAAtC,CACpC,CAZD,EAYG4D,IAZH,CAYQ,UAAW,CACf3D,UAAU,CAAGA,UAAU,CAAGC,mBAA1B,CACAK,gBAAgB,CAAGqB,cAAc,CAACrB,gBAAD,CAAmBwG,iBAAnB,CAAsC9G,UAAtC,CACpC,CAfD,CAgBH,CAKD,QAAS+G,CAAAA,oBAAT,EAAgC,IACxBC,CAAAA,SAAS,CAAG,EADY,CAExBC,YAAY,CAAG1H,CAAC,CAAC,WAAD,CAAD,CAAe2H,IAAf,CAAoB,eAApB,EAAqCC,GAArC,CAAyC,WAAzC,CAFS,CAI5BF,YAAY,CAACG,IAAb,CAAkB,UAAW,CACzBJ,SAAS,CAACK,IAAV,CAAgB,KAAKC,EAAN,CAAUC,SAAV,CAAoB,CAApB,CAAuB,EAAvB,CAAf,CACH,CAFD,EAIA,GAAuB,CAAnB,CAAAP,SAAS,CAACQ,MAAd,CAA0B,CACtBhI,IAAI,CAACoD,IAAL,CAAU,CAAC,CAEPC,UAAU,CAAE,uCAFL,CAGPC,IAAI,CAAE,CACF,UAAakE,SADX,CAEF,UAAa7G,SAFX,CAHC,CAAD,CAAV,UAOuBM,OAPvB,EAOgC,CAPhC,EAOmCsC,IAPnC,CAOwC,SAASC,QAAT,CAAmB,CACvDyD,iBAAiB,CAACzD,QAAD,CAAjB,CACAhD,UAAU,CAAGD,kBAAb,CACAQ,mBAAmB,CAAGoB,cAAc,CAACpB,mBAAD,CAAsBwG,oBAAtB,CAA4ChH,kBAA5C,CACvC,CAXD,EAWG4D,IAXH,CAWQ,UAAW,CACf3D,UAAU,CAAGA,UAAU,CAAGC,mBAA1B,CACAM,mBAAmB,CAAGoB,cAAc,CAACpB,mBAAD,CAAsBwG,oBAAtB,CAA4C/G,UAA5C,CACvC,CAdD,CAeH,CAhBD,IAgBO,CACH+B,aAAa,CAACxB,mBAAD,CAChB,CACJ,CAKD,QAASkH,CAAAA,kBAAT,EAA8B,IACtBC,CAAAA,OAAO,CAAG,EADY,CAEtBT,YAAY,CAAG1H,CAAC,CAAC,WAAD,CAAD,CAAe2H,IAAf,CAAoB,8DAApB,EAAoFC,GAApF,CAAwF,WAAxF,CAFO,CAI1BF,YAAY,CAACG,IAAb,CAAkB,UAAW,CACzB,GAAIO,CAAAA,YAAY,CAAG,CACX,SAAY,KAAKC,OAAL,CAAa1H,QADd,CAEX,UAAa,KAAK0H,OAAL,CAAaC,SAFf,CAGX,UAAa,KAAKD,OAAL,CAAanD,SAHf,CAAnB,CAKAiD,OAAO,CAACL,IAAR,CAAaM,YAAb,CACH,CAPD,EASA,GAAqB,CAAjB,CAAAD,OAAO,CAACF,MAAZ,CAAwB,CACpBhI,IAAI,CAACoD,IAAL,CAAU,CAAC,CAEPC,UAAU,CAAE,+BAFL,CAGPC,IAAI,CAAE,CACF,OAAU4E,OADR,CAHC,CAAD,CAAV,UAMuBjH,OANvB,EAMgC,CANhC,EAMmCsC,IANnC,CAMwC,SAASC,QAAT,CAAmB,CACvD4D,kBAAkB,CAAC5D,QAAD,CAAlB,CACAhD,UAAU,CAAGD,kBAAb,CACAS,iBAAiB,CAAGmB,cAAc,CAACnB,iBAAD,CAAoBiH,kBAApB,CAAwC1H,kBAAxC,CACrC,CAVD,EAUG4D,IAVH,CAUQ,UAAW,CACf3D,UAAU,CAAGA,UAAU,CAAGC,mBAA1B,CACAO,iBAAiB,CAAGmB,cAAc,CAACnB,iBAAD,CAAoBiH,kBAApB,CAAwCzH,UAAxC,CACrC,CAbD,CAcH,CAfD,IAeO,CACH+B,aAAa,CAACvB,iBAAD,CAChB,CACJ,CAQDV,WAAW,CAACgI,oBAAZ,CAAmC,SAAS7E,OAAT,CAAkB,CACjD9C,SAAS,CAAG8C,OAAZ,CACA1C,mBAAmB,CAAGyB,WAAW,CAAC+E,oBAAD,CAAuB/G,UAAvB,CACpC,CAHD,CAUAF,WAAW,CAACiI,kBAAZ,CAAiC,UAAW,CACxCvH,iBAAiB,CAAGwB,WAAW,CAACyF,kBAAD,CAAqBzH,UAArB,CAClC,CAFD,CAaAF,WAAW,CAACkI,iBAAZ,CAAgC,SAASC,MAAT,CAAiBhF,OAAjB,CAA0BiF,OAA1B,CAAmCvH,IAAnC,CAAyC,CACrET,QAAQ,CAAG+H,MAAX,CACA9H,SAAS,CAAG8C,OAAZ,CACA7C,UAAU,CAAG8H,OAAb,CAEA,GAAY,QAAR,EAAAvH,IAAJ,CAAsB,CAClBN,MAAM,CAAG,QACZ,CAFD,IAEO,CACHA,MAAM,CAAG,SACZ,CAGDd,CAAC,CAAC,kBAAD,CAAD,CAAsB6E,QAAtB,CAA+B,GAA/B,EAAoC+D,UAApC,CAA+C,MAA/C,EAGA7H,gBAAgB,CAAG0B,WAAW,CAAC8E,iBAAD,CAAoB9G,UAApB,CAE/B,CAjBH,CAmBE,MAAOF,CAAAA,WACZ,CArkBK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module updates the UI during an asynchronous\n * backup or restore process.\n *\n * @module     core_backup/async_backup\n * @copyright  2018 Matt Porritt <mattp@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      3.7\n */\ndefine(['jquery', 'core/ajax', 'core/str', 'core/notification', 'core/templates'],\n        function($, ajax, Str, notification, Templates) {\n\n    /**\n     * Module level constants.\n     *\n     * Using var instead of const as ES6 isn't fully supported yet.\n     */\n    var STATUS_EXECUTING = 800;\n    var STATUS_FINISHED_ERR = 900;\n    var STATUS_FINISHED_OK = 1000;\n\n    /**\n     * Module level variables.\n     */\n    var Asyncbackup = {};\n    var checkdelayoriginal = 15000; // This is the default time to use.\n    var checkdelay = 15000; // How often we should check for progress updates.\n    var checkdelaymultipler = 1.5; // If a request fails this multiplier will be used to increase the checkdelay value\n    var backupid; //  The backup id to get the progress for.\n    var contextid; //  The course this backup progress is for.\n    var restoreurl; //  The URL to view course restores.\n    var typeid; //  The type of operation backup or restore.\n    var backupintervalid; //  The id of the setInterval function.\n    var allbackupintervalid; //  The id of the setInterval function.\n    var allcopyintervalid; //  The id of the setInterval function.\n    var timeout = 2000; // Timeout for ajax requests.\n\n    /**\n     * Helper function to update UI components.\n     *\n     * @param {string} backupid The id to match elements on.\n     * @param {string} type The type of operation, backup or restore.\n     * @param {number} percentage The completion percentage to apply.\n     */\n    function updateElement(backupid, type, percentage) {\n        var percentagewidth = Math.round(percentage) + '%';\n        var elementbar = document.querySelectorAll(\"[data-\" + type + \"id=\" + CSS.escape(backupid) + \"]\")[0];\n        var percentagetext = percentage.toFixed(2) + '%';\n\n        // Set progress bar percentage indicators\n        elementbar.setAttribute('aria-valuenow', percentagewidth);\n        elementbar.style.width = percentagewidth;\n        elementbar.innerHTML = percentagetext;\n    }\n\n    /**\n     * Updates the interval we use to check for backup progress.\n     *\n     * @param {Number} intervalid The id of the interval\n     * @param {Function} callback The function to use in setInterval\n     * @param {Number} value The specified interval (in milliseconds)\n     * @returns {Number}\n     */\n    function updateInterval(intervalid, callback, value) {\n        clearInterval(intervalid);\n        return setInterval(callback, value);\n    }\n\n    /**\n     * Update backup table row when an async backup completes.\n     *\n     * @param {string} backupid The id to match elements on.\n     */\n    function updateBackupTableRow(backupid) {\n        var statuscell = $('#' + backupid + '_bar').parent().parent();\n        var tablerow = statuscell.parent();\n        var cellsiblings = statuscell.siblings();\n        var timecell = cellsiblings[1];\n        var timevalue = $(timecell).text();\n        var filenamecell = cellsiblings[0];\n        var filename = $(filenamecell).text();\n\n        ajax.call([{\n            // Get the table data via webservice.\n            methodname: 'core_backup_get_async_backup_links_backup',\n            args: {\n                'filename': filename,\n                'contextid': contextid\n            },\n        }])[0].done(function(response) {\n            // We have the data now update the UI.\n            var context = {\n                    filename: filename,\n                    time: timevalue,\n                    size: response.filesize,\n                    fileurl: response.fileurl,\n                    restoreurl: response.restoreurl\n                    };\n\n            Templates.render('core/async_backup_progress_row', context).then(function(html, js) {\n                Templates.replaceNodeContents(tablerow, html, js);\n                return;\n            }).fail(function() {\n                notification.exception(new Error('Failed to load table row'));\n                return;\n            });\n        });\n    }\n\n    /**\n     * Update restore table row when an async restore completes.\n     *\n     * @param {string} backupid The id to match elements on.\n     */\n    function updateRestoreTableRow(backupid) {\n        var statuscell = $('#' + backupid + '_bar').parent().parent();\n        var tablerow = statuscell.parent();\n        var cellsiblings = statuscell.siblings();\n        var coursecell = cellsiblings[0];\n        var timecell = cellsiblings[1];\n        var timevalue = $(timecell).text();\n\n        ajax.call([{\n            // Get the table data via webservice.\n            methodname: 'core_backup_get_async_backup_links_restore',\n            args: {\n                'backupid': backupid,\n                'contextid': contextid\n            },\n        }])[0].done(function(response) {\n         // We have the data now update the UI.\n            var resourcename = $(coursecell).text();\n            var context = {\n                    resourcename: resourcename,\n                    restoreurl: response.restoreurl,\n                    time: timevalue\n                    };\n\n            Templates.render('core/async_restore_progress_row', context).then(function(html, js) {\n                Templates.replaceNodeContents(tablerow, html, js);\n                return;\n            }).fail(function() {\n                notification.exception(new Error('Failed to load table row'));\n                return;\n            });\n        });\n    }\n\n    /**\n     * Update copy table row when an course copy completes.\n     *\n     * @param {string} backupid The id to match elements on.\n     */\n    function updateCopyTableRow(backupid) {\n        var elementbar = document.querySelectorAll(\"[data-restoreid=\" + CSS.escape(backupid) + \"]\")[0];\n        var restorecourse = elementbar.closest('tr').children[1];\n        var coursename = restorecourse.innerHTML;\n        var courselink = document.createElement('a');\n        var elementbarparent = elementbar.closest('td');\n        var operation = elementbarparent.previousElementSibling;\n\n        // Replace the prgress bar.\n        Str.get_string('complete').then(function(content) {\n            operation.innerHTML = content;\n            return;\n        }).catch(function() {\n            notification.exception(new Error('Failed to load string: complete'));\n            return;\n        });\n\n        Templates.render('core/async_copy_complete_cell', {}).then(function(html, js) {\n            Templates.replaceNodeContents(elementbarparent, html, js);\n            return;\n        }).fail(function() {\n            notification.exception(new Error('Failed to load table cell'));\n            return;\n        });\n\n        // Update the destination course name to a link to that course.\n        ajax.call([{\n            methodname: 'core_backup_get_async_backup_links_restore',\n            args: {\n                'backupid': backupid,\n                'contextid': 0\n            },\n        }])[0].done(function(response) {\n            courselink.setAttribute('href', response.restoreurl);\n            courselink.innerHTML = coursename;\n            restorecourse.innerHTML = null;\n            restorecourse.appendChild(courselink);\n\n            return;\n        }).fail(function() {\n            notification.exception(new Error('Failed to update table row'));\n            return;\n        });\n    }\n\n    /**\n     * Update the Moodle user interface with the progress of\n     * the backup process.\n     *\n     * @param {object} progress The progress and status of the process.\n     */\n    function updateProgress(progress) {\n        var percentage = progress.progress * 100;\n        var type = 'backup';\n        var elementbar = document.querySelectorAll(\"[data-\" + type + \"id=\" + CSS.escape(backupid) + \"]\")[0];\n        var elementstatus = $('#' + backupid + '_status');\n        var elementdetail = $('#' + backupid + '_detail');\n        var elementbutton = $('#' + backupid + '_button');\n        var stringRequests;\n\n        if (progress.status == STATUS_EXECUTING) {\n            // Process is in progress.\n            // Add in progress class color to bar.\n            elementbar.classList.add('bg-success');\n\n            updateElement(backupid, type, percentage);\n\n            // Change heading.\n            var strProcessing = 'async' + typeid + 'processing';\n            Str.get_string(strProcessing, 'backup').then(function(title) {\n                elementstatus.text(title);\n                return;\n            }).catch(function() {\n                notification.exception(new Error('Failed to load string: backup ' + strProcessing));\n            });\n\n        } else if (progress.status == STATUS_FINISHED_ERR) {\n            // Process completed with error.\n\n            // Add in fail class color to bar.\n            elementbar.classList.add('bg-danger');\n\n            // Remove in progress class color to bar.\n            elementbar.classList.remove('bg-success');\n\n            updateElement(backupid, type, 100);\n\n            // Change heading and text.\n            var strStatus = 'async' + typeid + 'error';\n            var strStatusDetail = 'async' + typeid + 'errordetail';\n            stringRequests = [\n                {key: strStatus, component: 'backup'},\n                {key: strStatusDetail, component: 'backup'}\n            ];\n            Str.get_strings(stringRequests).then(function(strings) {\n                elementstatus.text(strings[0]);\n                elementdetail.text(strings[1]);\n\n                return;\n            })\n            .catch(function() {\n                notification.exception(new Error('Failed to load string'));\n                return;\n            });\n\n            $('.backup_progress').children('span').removeClass('backup_stage_current');\n            $('.backup_progress').children('span').last().addClass('backup_stage_current');\n\n            // Stop checking when we either have an error or a completion.\n            clearInterval(backupintervalid);\n\n        } else if (progress.status == STATUS_FINISHED_OK) {\n            // Process completed successfully.\n\n            // Add in progress class color to bar\n            elementbar.classList.add('bg-success');\n\n            updateElement(backupid, type, 100);\n\n            // Change heading and text\n            var strComplete = 'async' + typeid + 'complete';\n            Str.get_string(strComplete, 'backup').then(function(title) {\n                elementstatus.text(title);\n                return;\n            }).catch(function() {\n                notification.exception(new Error('Failed to load string: backup ' + strComplete));\n            });\n\n            if (typeid == 'restore') {\n                ajax.call([{\n                    // Get the table data via webservice.\n                    methodname: 'core_backup_get_async_backup_links_restore',\n                    args: {\n                        'backupid': backupid,\n                        'contextid': contextid\n                    },\n                }])[0].done(function(response) {\n                    var strDetail = 'async' + typeid + 'completedetail';\n                    var strButton = 'async' + typeid + 'completebutton';\n                    var stringRequests = [\n                        {key: strDetail, component: 'backup', param: response.restoreurl},\n                        {key: strButton, component: 'backup'}\n                    ];\n                    Str.get_strings(stringRequests).then(function(strings) {\n                        elementdetail.html(strings[0]);\n                        elementbutton.text(strings[1]);\n                        elementbutton.attr('href', response.restoreurl);\n\n                        return;\n                    })\n                    .catch(function() {\n                        notification.exception(new Error('Failed to load string'));\n                        return;\n                    });\n\n                });\n            } else {\n                var strDetail = 'async' + typeid + 'completedetail';\n                var strButton = 'async' + typeid + 'completebutton';\n                stringRequests = [\n                    {key: strDetail, component: 'backup', param: restoreurl},\n                    {key: strButton, component: 'backup'}\n                ];\n                Str.get_strings(stringRequests).then(function(strings) {\n                    elementdetail.html(strings[0]);\n                    elementbutton.text(strings[1]);\n                    elementbutton.attr('href', restoreurl);\n\n                    return;\n                })\n                .catch(function() {\n                    notification.exception(new Error('Failed to load string'));\n                    return;\n                });\n\n            }\n\n            $('.backup_progress').children('span').removeClass('backup_stage_current');\n            $('.backup_progress').children('span').last().addClass('backup_stage_current');\n\n            // Stop checking when we either have an error or a completion.\n            clearInterval(backupintervalid);\n        }\n    }\n\n    /**\n     * Update the Moodle user interface with the progress of\n     * all the pending processes for backup and restore operations.\n     *\n     * @param {object} progress The progress and status of the process.\n     */\n    function updateProgressAll(progress) {\n        progress.forEach(function(element) {\n            var percentage = element.progress * 100;\n            var backupid = element.backupid;\n            var type = element.operation;\n            var elementbar = document.querySelectorAll(\"[data-\" + type + \"id=\" + CSS.escape(backupid) + \"]\")[0];\n\n            if (element.status == STATUS_EXECUTING) {\n                // Process is in element.\n\n                // Add in element class color to bar\n                elementbar.classList.add('bg-success');\n\n                updateElement(backupid, type, percentage);\n\n            } else if (element.status == STATUS_FINISHED_ERR) {\n                // Process completed with error.\n\n                // Add in fail class color to bar\n                elementbar.classList.add('bg-danger');\n                elementbar.classList.add('complete');\n\n                // Remove in element class color to bar\n                elementbar.classList.remove('bg-success');\n\n                updateElement(backupid, type, 100);\n\n            } else if (element.status == STATUS_FINISHED_OK) {\n                // Process completed successfully.\n\n                // Add in element class color to bar\n                elementbar.classList.add('bg-success');\n                elementbar.classList.add('complete');\n\n                updateElement(backupid, type, 100);\n\n                // We have a successful backup. Update the UI with download and file details.\n                if (type == 'backup') {\n                    updateBackupTableRow(backupid);\n                } else {\n                    updateRestoreTableRow(backupid);\n                }\n\n            }\n\n        });\n    }\n\n    /**\n     * Update the Moodle user interface with the progress of\n     * all the pending processes for copy operations.\n     *\n     * @param {object} progress The progress and status of the process.\n     */\n    function updateProgressCopy(progress) {\n        progress.forEach(function(element) {\n            var percentage = element.progress * 100;\n            var backupid = element.backupid;\n            var type = element.operation;\n            var elementbar = document.querySelectorAll(\"[data-\" + type + \"id=\" + CSS.escape(backupid) + \"]\")[0];\n\n            if (type == 'restore') {\n                 let restorecell = elementbar.closest('tr').children[3];\n                 Str.get_string('restore').then(function(content) {\n                     restorecell.innerHTML = content;\n                     return;\n                 }).catch(function() {\n                     notification.exception(new Error('Failed to load string: restore'));\n                 });\n            }\n\n            if (element.status == STATUS_EXECUTING) {\n                // Process is in element.\n\n                // Add in element class color to bar\n                elementbar.classList.add('bg-success');\n\n                updateElement(backupid, type, percentage);\n\n            } else if (element.status == STATUS_FINISHED_ERR) {\n                // Process completed with error.\n\n                // Add in fail class color to bar\n                elementbar.classList.add('bg-danger');\n                elementbar.classList.add('complete');\n\n                // Remove in element class color to bar\n                elementbar.classList.remove('bg-success');\n\n                updateElement(backupid, type, 100);\n\n            } else if ((element.status == STATUS_FINISHED_OK) && (type == 'restore')) {\n                // Process completed successfully.\n\n                // Add in element class color to bar\n                elementbar.classList.add('bg-success');\n                elementbar.classList.add('complete');\n\n                updateElement(backupid, type, 100);\n\n                // We have a successful copy. Update the UI link to copied course.\n                updateCopyTableRow(backupid);\n            }\n\n        });\n    }\n\n    /**\n     * Get the progress of the backup process via ajax.\n     */\n    function getBackupProgress() {\n        ajax.call([{\n            // Get the backup progress via webservice.\n            methodname: 'core_backup_get_async_backup_progress',\n            args: {\n                'backupids': [backupid],\n                'contextid': contextid\n            },\n        }], true, true, false, timeout)[0].done(function(response) {\n            // We have the progress now update the UI.\n            updateProgress(response[0]);\n            checkdelay = checkdelayoriginal;\n            backupintervalid = updateInterval(backupintervalid, getBackupProgress, checkdelayoriginal);\n        }).fail(function() {\n            checkdelay = checkdelay * checkdelaymultipler;\n            backupintervalid = updateInterval(backupintervalid, getBackupProgress, checkdelay);\n        });\n    }\n\n    /**\n     * Get the progress of all backup processes via ajax.\n     */\n    function getAllBackupProgress() {\n        var backupids = [];\n        var progressbars = $('.progress').find('.progress-bar').not('.complete');\n\n        progressbars.each(function() {\n            backupids.push((this.id).substring(0, 32));\n        });\n\n        if (backupids.length > 0) {\n            ajax.call([{\n                // Get the backup progress via webservice.\n                methodname: 'core_backup_get_async_backup_progress',\n                args: {\n                    'backupids': backupids,\n                    'contextid': contextid\n                },\n            }], true, true, false, timeout)[0].done(function(response) {\n                updateProgressAll(response);\n                checkdelay = checkdelayoriginal;\n                allbackupintervalid = updateInterval(allbackupintervalid, getAllBackupProgress, checkdelayoriginal);\n            }).fail(function() {\n                checkdelay = checkdelay * checkdelaymultipler;\n                allbackupintervalid = updateInterval(allbackupintervalid, getAllBackupProgress, checkdelay);\n            });\n        } else {\n            clearInterval(allbackupintervalid); // No more progress bars to update, stop checking.\n        }\n    }\n\n    /**\n     * Get the progress of all copy processes via ajax.\n     */\n    function getAllCopyProgress() {\n        var copyids = [];\n        var progressbars = $('.progress').find('.progress-bar[data-operation][data-backupid][data-restoreid]').not('.complete');\n\n        progressbars.each(function() {\n            let progressvars = {\n                    'backupid': this.dataset.backupid,\n                    'restoreid': this.dataset.restoreid,\n                    'operation': this.dataset.operation,\n            };\n            copyids.push(progressvars);\n        });\n\n        if (copyids.length > 0) {\n            ajax.call([{\n                // Get the copy progress via webservice.\n                methodname: 'core_backup_get_copy_progress',\n                args: {\n                    'copies': copyids\n                },\n            }], true, true, false, timeout)[0].done(function(response) {\n                updateProgressCopy(response);\n                checkdelay = checkdelayoriginal;\n                allcopyintervalid = updateInterval(allcopyintervalid, getAllCopyProgress, checkdelayoriginal);\n            }).fail(function() {\n                checkdelay = checkdelay * checkdelaymultipler;\n                allcopyintervalid = updateInterval(allcopyintervalid, getAllCopyProgress, checkdelay);\n            });\n        } else {\n            clearInterval(allcopyintervalid); // No more progress bars to update, stop checking.\n        }\n    }\n\n    /**\n     * Get status updates for all backups.\n     *\n     * @public\n     * @param {number} context The context id.\n     */\n    Asyncbackup.asyncBackupAllStatus = function(context) {\n        contextid = context;\n        allbackupintervalid = setInterval(getAllBackupProgress, checkdelay);\n    };\n\n    /**\n     * Get status updates for all course copies.\n     *\n     * @public\n     */\n    Asyncbackup.asyncCopyAllStatus = function() {\n        allcopyintervalid = setInterval(getAllCopyProgress, checkdelay);\n    };\n\n    /**\n     * Get status updates for backup.\n     *\n     * @public\n     * @param {string} backup The backup record id.\n     * @param {number} context The context id.\n     * @param {string} restore The restore link.\n     * @param {string} type The operation type (backup or restore).\n     */\n    Asyncbackup.asyncBackupStatus = function(backup, context, restore, type) {\n        backupid = backup;\n        contextid = context;\n        restoreurl = restore;\n\n        if (type == 'backup') {\n            typeid = 'backup';\n        } else {\n            typeid = 'restore';\n        }\n\n        // Remove the links from the progress bar, no going back now.\n        $('.backup_progress').children('a').removeAttr('href');\n\n        //  Periodically check for progress updates and update the UI as required.\n        backupintervalid = setInterval(getBackupProgress, checkdelay);\n\n      };\n\n      return Asyncbackup;\n});\n"],"file":"async_backup.min.js"}