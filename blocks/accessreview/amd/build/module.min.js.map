{"version":3,"sources":["../src/module.js"],"names":["toggleState","renderTemplate","element","errorCount","checkCount","displayFormat","minViews","viewDelta","weight","parseInt","context","resultPassed","classList","passRate","failureRate","Math","round","Promise","resolve","elementClassList","push","showIcons","showBackground","add","join","Templates","renderForPromise","then","html","js","appendNodeContents","catch","showAccessMap","courseId","updatePreference","all","fetchReviewData","sectionData","moduleData","getErrorTotals","forEach","section","document","querySelector","numerrors","numchecks","module","getElementById","cmid","remove","displayError","hideAccessMap","querySelectorAll","node","setToggleStatePreference","toggleAccessMap","totals","totalErrors","totalUsers","maxViews","concat","item","registerEventListeners","addEventListener","e","target","closest","preventDefault","getTogglePreferenceParams","methodname","args","preferences","type","value","courseid","calls","init","toggled"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Manager for the accessreview block.\n *\n * @module block_accessreview/module\n * @author      Max Larkin <max@brickfieldlabs.ie>\n * @copyright   2020 Brickfield Education Labs <max@brickfieldlabs.ie>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport * as Templates from 'core/templates';\nimport {exception as displayError} from 'core/notification';\n\n/**\n * The number of colours used to represent the heatmap. (Indexed on 0.)\n * @type {number}\n */\nconst numColours = 2;\n\n/**\n * The toggle state of the heatmap.\n * @type {boolean}\n */\nlet toggleState = true;\n\n/**\n * Renders the HTML template onto a particular HTML element.\n * @param {HTMLElement} element The element to attach the HTML to.\n * @param {number} errorCount The number of errors on this module/section.\n * @param {number} checkCount The number of checks triggered on this module/section.\n * @param {String} displayFormat\n * @param {Number} minViews\n * @param {Number} viewDelta\n * @returns {Promise}\n */\nconst renderTemplate = (element, errorCount, checkCount, displayFormat, minViews, viewDelta) => {\n    // Calculate a weight?\n    const weight = parseInt((errorCount - minViews) / viewDelta * numColours);\n\n    const context = {\n        resultPassed: !errorCount,\n        classList: '',\n        passRate: {\n            errorCount,\n            checkCount,\n            failureRate: Math.round(errorCount / checkCount * 100),\n        },\n    };\n\n    if (!element) {\n        return Promise.resolve();\n    }\n\n    const elementClassList = ['block_accessreview'];\n    if (context.resultPassed) {\n        elementClassList.push('block_accessreview_success');\n    } else if (weight) {\n        elementClassList.push('block_accessreview_danger');\n    } else {\n        elementClassList.push('block_accessreview_warning');\n    }\n\n    const showIcons = (displayFormat == 'showicons') || (displayFormat == 'showboth');\n    const showBackground = (displayFormat == 'showbackground') || (displayFormat == 'showboth');\n\n    if (showBackground && !showIcons) {\n        // Only the background is displayed.\n        // No need to display the template.\n        // Note: The case where both the background and icons are shown is handled later to avoid jankiness.\n        element.classList.add(...elementClassList, 'alert');\n\n        return Promise.resolve();\n    }\n\n    if (showIcons && !showBackground) {\n        context.classList = elementClassList.join(' ');\n    }\n\n    // The icons are displayed either with, or without, the background.\n    return Templates.renderForPromise('block_accessreview/status', context)\n    .then(({html, js}) => {\n        Templates.appendNodeContents(element, html, js);\n\n        if (showBackground) {\n            element.classList.add(...elementClassList, 'alert');\n        }\n\n        return;\n    })\n    .catch();\n};\n\n/**\n * Applies the template to all sections and modules on the course page.\n *\n * @param {Number} courseId\n * @param {String} displayFormat\n * @param {Boolean} updatePreference\n * @returns {Promise}\n */\nconst showAccessMap = (courseId, displayFormat, updatePreference = false) => {\n    // Get error data.\n    return Promise.all(fetchReviewData(courseId, updatePreference))\n    .then(([sectionData, moduleData]) => {\n        // Get total data.\n        const {minViews, viewDelta} = getErrorTotals(sectionData, moduleData);\n\n        sectionData.forEach(section => {\n            const element = document.querySelector(`#section-${section.section} .summary`);\n            if (!element) {\n                return;\n            }\n\n            renderTemplate(element, section.numerrors, section.numchecks, displayFormat, minViews, viewDelta);\n        });\n\n        moduleData.forEach(module => {\n            const element = document.getElementById(`module-${module.cmid}`);\n            if (!element) {\n                return;\n            }\n\n            renderTemplate(element, module.numerrors, module.numchecks, displayFormat, minViews, viewDelta);\n        });\n\n        // Change the icon display.\n        document.querySelector('.icon-accessmap').classList.remove(...['fa-eye-slash']);\n        document.querySelector('.icon-accessmap').classList.add(...['fa-eye']);\n\n        return {\n            sectionData,\n            moduleData,\n        };\n    })\n    .catch(displayError);\n};\n\n\n/**\n * Hides or removes the templates from the HTML of the current page.\n *\n * @param {Boolean} updatePreference\n */\nconst hideAccessMap = (updatePreference = false) => {\n    // Removes the added elements.\n    document.querySelectorAll('.block_accessreview_view').forEach(node => node.remove());\n\n    const classList = [\n        'block_accessreview',\n        'block_accessreview_success',\n        'block_accessreview_warning',\n        'block_accessreview_danger',\n        'block_accessreview_view',\n        'alert',\n    ];\n\n    // Removes the added classes.\n    document.querySelectorAll('.block_accessreview').forEach(node => node.classList.remove(...classList));\n\n    if (updatePreference) {\n        setToggleStatePreference(false);\n    }\n\n    // Change the icon display.\n    document.querySelector('.icon-accessmap').classList.remove(...['fa-eye']);\n    document.querySelector('.icon-accessmap').classList.add(...['fa-eye-slash']);\n};\n\n\n/**\n * Toggles the heatmap on/off.\n *\n * @param {Number} courseId\n * @param {String} displayFormat\n */\nconst toggleAccessMap = (courseId, displayFormat) => {\n    toggleState = !toggleState;\n    if (!toggleState) {\n        hideAccessMap(true);\n    } else {\n        showAccessMap(courseId, displayFormat, true);\n    }\n};\n\n/**\n * Parses information on the errors, generating the min, max and totals.\n *\n * @param {Object[]} sectionData The error data for course sections.\n * @param {Object[]} moduleData The error data for course modules.\n * @returns {Object} An object representing the extra error information.\n */\nconst getErrorTotals = (sectionData, moduleData) => {\n    const totals = {\n        totalErrors: 0,\n        totalUsers: 0,\n        minViews: 0,\n        maxViews: 0,\n        viewDelta: 0,\n    };\n\n    [].concat(sectionData, moduleData).forEach(item => {\n        totals.totalErrors += item.numerrors;\n        if (item.numerrors < totals.minViews) {\n            totals.minViews = item.numerrors;\n        }\n\n        if (item.numerrors > totals.maxViews) {\n            totals.maxViews = item.numerrors;\n        }\n        totals.totalUsers += item.numchecks;\n    });\n\n    totals.viewDelta = totals.maxViews - totals.minViews + 1;\n\n    return totals;\n};\n\nconst registerEventListeners = (courseId, displayFormat) => {\n    document.addEventListener('click', e => {\n        if (e.target.closest('#toggle-accessmap')) {\n            e.preventDefault();\n            toggleAccessMap(courseId, displayFormat);\n        }\n    });\n};\n\n/**\n * Set the user preference for the toggle value.\n *\n * @param   {Boolean} toggleState\n * @returns {Promise}\n */\nconst getTogglePreferenceParams = toggleState => {\n    return {\n        methodname: 'core_user_update_user_preferences',\n        args: {\n            preferences: [{\n                type: 'block_accessreviewtogglestate',\n                value: toggleState,\n            }],\n        }\n    };\n};\n\nconst setToggleStatePreference = toggleState => fetchMany([getTogglePreferenceParams(toggleState)]);\n\n/**\n * Fetch the review data.\n *\n * @param   {Number} courseid\n * @param {Boolean} updatePreference\n * @returns {Promise[]}\n */\nconst fetchReviewData = (courseid, updatePreference = false) => {\n    const calls = [\n        {\n            methodname: 'block_accessreview_get_section_data',\n            args: {courseid}\n        },\n        {\n            methodname: 'block_accessreview_get_module_data',\n            args: {courseid}\n        },\n    ];\n\n    if (updatePreference) {\n        calls.push(getTogglePreferenceParams(true));\n    }\n\n    return fetchMany(calls);\n};\n\n/**\n * Setting up the access review module.\n * @param {number} toggled A number represnting the state of the review toggle.\n * @param {string} displayFormat A string representing the display format for icons.\n * @param {number} courseId The course ID.\n */\nexport const init = (toggled, displayFormat, courseId) => {\n    // Settings consts.\n    toggleState = toggled == 1;\n\n    if (toggleState) {\n        showAccessMap(courseId, displayFormat);\n    }\n\n    registerEventListeners(courseId, displayFormat);\n};\n"],"file":"module.min.js"}