{"version":3,"sources":["../src/module.js"],"names":["toggleState","errorsicon","passicon","strings","getModuleStrings","key","component","then","values","passed","failed","errors","percenterrors","success","catch","renderTemplate","element","numErrors","numChecks","displayFormat","minViews","viewDelta","weight","parseInt","alertstatus","className","search","divclass","info","Math","round","insertAdjacentHTML","showAccessMap","courseId","Promise","all","fetchReviewData","sectionData","moduleData","getErrorTotals","forEach","section","document","querySelector","numerrors","numchecks","module","getElementById","cmid","hideAccessMap","querySelectorAll","node","remove","classList","toggleAccessMap","methodname","args","toggle","totals","totalErrors","totalUsers","maxViews","concat","item","registerEventListeners","addEventListener","e","target","closest","preventDefault","courseid","init","toggled","stringpromise","Templates","renderPix"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *\n * @package     block_accessreview\n * @author      Max Larkin <max@brickfieldlabs.ie>\n * @copyright   2020 Brickfield Education Labs <max@brickfieldlabs.ie>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {get_strings as getStrings} from 'core/str';\nimport {call as fetchMany} from 'core/ajax';\nimport * as Templates from 'core/templates';\n\n/**\n * The number of colours used to represent the heatmap. (Indexed on 0.)\n * @type {number}\n */\nconst numColours = 2;\n\n/**\n * The toggle state of the heatmap.\n * @type {boolean}\n */\nlet toggleState = true;\n\n/**\n * The display icon for failing modules/sections.\n * @type {string}\n */\nlet errorsicon = '';\n\n/**\n * The display icon for passing modules/sections.\n * @type {string}\n */\nlet passicon = '';\n\n/**\n * The required strings for the module.\n * @type {string[]}\n */\nlet strings = {};\n\n/**\n * Gets the required strings for the module.\n */\nconst getModuleStrings = () => {\n    let requiredStrings = [\n        {key: 'passed', component: 'tool_brickfield'},\n        {key: 'failed', component: 'tool_brickfield'},\n        {key: 'errors', component: 'block_accessreview'},\n        {key: 'percenterrors', component: 'block_accessreview'},\n        {key: 'success'},\n    ];\n    getStrings(requiredStrings).then(values => {\n        strings.passed = values[0];\n        strings.failed = values[1];\n        strings.errors = values[2];\n        strings.percenterrors = values[3];\n        strings.success = values[4];\n\n        return values;\n    })\n    .catch();\n};\n\n/**\n * Renders the HTML template onto a particular HTML element.\n * @param {HTMLElement} element The element to attach the HTML to.\n * @param {number} numErrors The number of errors on this module/section.\n * @param {number} numChecks The number of checks triggered on this module/section.\n * @param {String} displayFormat\n * @param {Number} minViews\n * @param {Number} viewDelta\n */\nconst renderTemplate = (element, numErrors, numChecks, displayFormat, minViews, viewDelta) => {\n    // TODO Convert this to be an actual proper template.\n    let weight = parseInt((numErrors - minViews) / viewDelta * numColours);\n    let alertstatus = 'block_accessreview_success';\n    if (weight < 1) {\n        alertstatus = 'block_accessreview_warning';\n    }\n    if (weight >= 1) {\n        alertstatus = 'block_accessreview_danger';\n    }\n    if (numErrors == 0) {\n        alertstatus = 'block_accessreview_success';\n    }\n    if (element) {\n        if (displayFormat != 'showicons') {\n            if (element.className.search(\"label\") >= 1) {\n                alertstatus += '_label';\n            }\n            element.className += ' alert block_accessreview ' + alertstatus;\n        }\n        if (displayFormat != 'showbackground') {\n            let divclass = 'block_accessreview_view';\n            if (element.className.search(\"label\") > -1) {\n                divclass += ' alert ' + alertstatus;\n            }\n            let info = '<div class=\"' + divclass + '\">';\n            if (numErrors == 0) {\n                info += passicon;\n                info += strings.passed;\n            } else {\n                info += errorsicon;\n                info += strings.failed;\n                info += '&nbsp;&nbsp;';\n                info += numErrors;\n                info += '&nbsp;' + strings.errors;\n                info += '&nbsp;&nbsp;';\n                info += Math.round((numErrors / numChecks) * 100);\n                info += strings.percenterrors;\n            }\n            info += '</div>';\n            element.insertAdjacentHTML('beforeend', info);\n        }\n    }\n};\n\n/**\n * Applies the template to all sections and modules on the course page.\n *\n * @param {Number} courseId\n * @param {String} displayFormat\n */\nconst showAccessMap = async(courseId, displayFormat) => {\n    // Get error data.\n    const [sectionData, moduleData] = await Promise.all(fetchReviewData(courseId));\n\n    // Get total data.\n    const {minViews, viewDelta} = getErrorTotals(sectionData, moduleData);\n\n    sectionData.forEach(section => {\n        const element = document.querySelector(`#section-${section.section} .summary`);\n        if (!element) {\n            return;\n        }\n\n        renderTemplate(element, section.numerrors, section.numchecks, displayFormat, minViews, viewDelta);\n    });\n\n    moduleData.forEach(module => {\n        const element = document.getElementById(`module-${module.cmid}`);\n        if (!element) {\n            return;\n        }\n\n        renderTemplate(element, module.numerrors, module.numchecks, displayFormat, minViews, viewDelta);\n    });\n};\n\n\n/**\n * Hides or removes the templates from the HTML of the current page.\n */\nconst hideAccessMap = () => {\n    // Removes the added elements.\n    document.querySelectorAll('.block_accessreview_view').forEach(node => node.remove());\n\n    const classList = [\n        'alert',\n        'block_accessreview',\n        'block_accessreview_success',\n        'block_accessreview_warning',\n        'block_accessreview_danger',\n        'block_accessreview_view',\n        'block_accessreview_success_label',\n        'block_accessreview_warning_label',\n        'block_accessreview_danger_label',\n        'block_accessreview_view_label',\n    ];\n\n    // Removes the added classes.\n    document.querySelectorAll('.block_accessreview.alert').forEach(node => node.classList.remove(...classList));\n};\n\n\n/**\n * Toggles the heatmap on/off.\n *\n * @param {Number} courseId\n * @param {String} displayFormat\n */\nconst toggleAccessMap = (courseId, displayFormat) => {\n    if (toggleState) {\n        hideAccessMap();\n    } else {\n        showAccessMap(courseId, displayFormat);\n    }\n\n    toggleState = !toggleState;\n    fetchMany([{\n        methodname: 'block_accessreview_set_toggle_preference',\n        args: {toggle: toggleState}\n    }]);\n};\n\n/**\n * Parses information on the errors, generating the min, max and totals.\n *\n * @param {Object[]} sectionData The error data for course sections.\n * @param {Object[]} moduleData The error data for course modules.\n * @returns {Object} An object representing the extra error information.\n*/\nconst getErrorTotals = (sectionData, moduleData) => {\n    const totals = {\n        totalErrors: 0,\n        totalUsers: 0,\n        minViews: 0,\n        maxViews: 0,\n        viewDelta: 0,\n    };\n\n    [].concat(sectionData, moduleData).forEach(item => {\n        totals.totalErrors += item.numerrors;\n        if (item.numerrors < totals.minViews) {\n            totals.minViews = item.numerrors;\n        }\n\n        if (item.numerrors > totals.maxViews) {\n            totals.maxViews = item.numerrors;\n        }\n        totals.totalUsers += item.numchecks;\n    });\n\n    totals.viewDelta = totals.maxViews - totals.minViews + 1;\n\n    return totals;\n};\n\nconst registerEventListeners = (courseId, displayFormat) => {\n    document.addEventListener('click', e => {\n        if (e.target.closest('#toggle-accessmap')) {\n            e.preventDefault();\n            toggleAccessMap(courseId, displayFormat);\n        }\n    });\n};\n\n/**\n * Fetch the review data.\n *\n * @param   {Number} courseid\n * @returns {Promise[]}\n */\nconst fetchReviewData = courseid => fetchMany([\n    {\n        methodname: 'block_accessreview_get_section_data',\n        args: {courseid}\n    },\n    {\n        methodname: 'block_accessreview_get_module_data',\n        args: {courseid}\n    },\n]);\n\n/**\n * Setting up the access review module.\n * @param {number} toggled A number represnting the state of the review toggle.\n * @param {string} displayFormat A string representing the display format for icons.\n * @param {number} courseId The course ID.\n */\nexport const init = async(toggled, displayFormat, courseId) => {\n    // Settings consts.\n    //\n    toggleState = toggled == 1;\n\n    // TODO: Replace all of this with a template...\n    // __None__ of this should be stored as instance vars.\n    // The over-use of await is a bad thing here because _none_ of these are being checked for errors.\n    // async promise use should usually be in a try/catch, and none of the ones here are necessary.\n\n    // Core/str calls.\n    let stringpromise = getModuleStrings();\n\n    // Load strings.\n    await stringpromise;\n\n    // Load icons.\n    passicon = await Templates.renderPix('t/check', 'core', strings.success);\n    errorsicon = await Templates.renderPix('t/block', 'core', strings.errors);\n\n    if (toggleState) {\n        showAccessMap(courseId, displayFormat);\n    }\n\n    registerEventListeners(courseId, displayFormat);\n};\n"],"file":"module.min.js"}