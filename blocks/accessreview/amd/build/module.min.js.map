{"version":3,"sources":["../src/module.js"],"names":["define","$","str","ajax","templates","sections","modules","mindata","diffdata","toggleState","errorsicon","passicon","whattoshowdata","strings","getStrings","get_strings","key","component","then","values","passed","failed","errors","percenterrors","success","renderTemplate","element","numerrors","numchecks","weight","parseInt","alertstatus","className","search","divclass","info","Math","round","insertAdjacentHTML","showAccessmap","forEach","section","document","getElementById","getElementsByClassName","module","cmid","hideAccessmap","remove","removeClass","_","match","join","toggleAccessmap","call","methodname","args","toggle","get_error_totals","sectiondata","moduledata","totals","totalerrors","totalusers","minviews","maxviews","data","Array","prototype","push","apply","item","init","toggled","whattoshow","courseid","promises","stringpromise","renderPix","click"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n *\n * @package     block_accessreview\n * @author      Max Larkin <max@brickfieldlabs.ie>\n * @copyright   2020 Brickfield Education Labs <max@brickfieldlabs.ie>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/str', 'core/ajax', 'core/templates'], function ($, str, ajax, templates) {\n    /**\n     * The error data for all sections in the course.\n     * @type {Object[]}\n     */\n    var sections;\n    /**\n     * The error data for all modules in the course.\n     * @type {Object[]}\n     */\n    var modules;\n    /**\n     * The minimum error count for sections/modules.\n     * @type {number}\n     */\n    var mindata;\n    /**\n     * The difference between the minimum and maximum error count for sections/modules.\n     * @type {number}\n     */\n    var diffdata = 0;\n    /**\n     * The number of colours used to represent the heatmap. (Indexed on 0.)\n     * @type {number}\n     */\n    var numColours = 2;\n    /**\n     * The toggle state of the heatmap.\n     * @type {boolean}\n     */\n    var toggleState = true;\n    /**\n     * The display icon for failing modules/sections.\n     * @type {string}\n     */\n    var errorsicon = '';\n    /**\n     * The display icon for passing modules/sections.\n     * @type {string}\n     */\n    var passicon = '';\n    /**\n     * The config information representing the format to display the error data.\n     * @type {string}\n     */\n    let whattoshowdata;\n    /**\n     * The required strings for the module.\n     * @type {string[]}\n     */\n    let strings = {};\n\n    /**\n     * Gets the required strings for the module.\n     */\n    const getStrings = () => {\n        let requiredStrings = [\n            { key: 'passed', component: 'tool_brickfield' },\n            { key: 'failed', component: 'tool_brickfield' },\n            { key: 'errors', component: 'block_accessreview' },\n            { key: 'percenterrors', component: 'block_accessreview' },\n            { key: 'success' },\n        ];\n        return str.get_strings(requiredStrings).then((values) => {\n            strings.passed = values[0];\n            strings.failed = values[1];\n            strings.errors = values[2];\n            strings.percenterrors = values[3];\n            strings.success = values[4];\n        });\n    };\n\n    /**\n     * Renders the HTML template onto a particular HTML element.\n     * @param {HTMLElement} element The element to attach the HTML to.\n     * @param {number} numerrors The number of errors on this module/section.\n     * @param {number} numchecks The number of checks triggered on this module/section.\n     */\n    function renderTemplate(element, numerrors, numchecks) {\n        let weight = parseInt((numerrors - mindata) / diffdata * numColours);\n        let alertstatus = 'block_accessreview_success';\n        if (weight < 1) { alertstatus = 'block_accessreview_warning'; }\n        if (weight >= 1) { alertstatus = 'block_accessreview_danger'; }\n        if (numerrors == 0) { alertstatus = 'block_accessreview_success'; }\n        if (element) {\n            if (whattoshowdata != 'showicons') {\n                if (element.className.search(\"label\") >= 1) {\n                    alertstatus += '_label';\n                }\n                element.className += ' alert ' + alertstatus;\n            }\n            if (whattoshowdata != 'showbackground') {\n                var divclass = 'block_accessreview_view';\n                if (element.className.search(\"label\") > -1) {\n                    divclass += ' alert ' + alertstatus;\n                }\n                let info = '<div class=\"' + divclass + '\">';\n                if (numerrors == 0) {\n                    info += passicon;\n                    info += strings.passed;\n                } else {\n                    info += errorsicon;\n                    info += strings.failed;\n                    info += '&nbsp;&nbsp;';\n                    info += numerrors;\n                    info += '&nbsp;' + strings.errors;\n                    info += '&nbsp;&nbsp;';\n                    info += Math.round((numerrors / numchecks) * 100);\n                    info += strings.percenterrors;\n                }\n                info += '</div>';\n                element.insertAdjacentHTML('beforeend', info);\n            }\n        }\n    }\n\n    /**\n     * Applies the template to all sections and modules on the course page.\n     */\n    function showAccessmap() {\n        sections.forEach((section) => {\n            let element = document.getElementById('section-' + section.section).getElementsByClassName(\"summary\")[0];\n            if (element !== null) {\n                renderTemplate(element, section.numerrors, section.numchecks);\n            }\n        });\n        modules.forEach((module) => {\n            let element = document.getElementById('module-' + module.cmid);\n            if (element !== null) {\n                renderTemplate(element, module.numerrors, module.numchecks);\n            }\n        });\n    }\n\n    /**\n     * Hides or removes the templates from the HTML of the current page.\n     */\n    function hideAccessmap() {\n        // Removes the added elements.\n        $(\".block_accessreview_view\").remove();\n        // Removes the added classes.\n        $(\"*\").removeClass ((_, className) => {\n            return (className.match (/(^|\\s)alert block_accessreview\\S+/g) || []).join(' ');\n        });\n    }\n\n    /**\n     * Toggles the heatmap on/off.\n     */\n    const toggleAccessmap = async () => {\n        if (toggleState) {\n            hideAccessmap();\n        } else {\n            showAccessmap();\n        }\n\n        toggleState = !toggleState;\n\n        await ajax.call([{\n            methodname: 'block_accessreview_set_toggle_preference',\n            args: { toggle: toggleState }\n        }])[0];\n    };\n\n    /**\n     * Parses information on the errors, generating the min, max and totals.\n     * @param {Object[]} sectiondata The error data for course sections.\n     * @param {Object[]} moduledata The error data for course modules.\n     * @returns {Object} An object representing the extra error information.\n    */\n    function get_error_totals(sectiondata, moduledata) {\n        let totals = {\n            totalerrors: 0,\n            totalusers: 0,\n            minviews: 0,\n            maxviews: 0\n        };\n\n        let data = [];\n\n        Array.prototype.push.apply(data, sectiondata);\n        Array.prototype.push.apply(data, moduledata);\n\n        data.forEach((item) => {\n            totals.totalerrors += item.numerrors;\n            if (item.numerrors < totals.minviews) {\n                totals.minviews = item.numerrors;\n            }\n            if (item.numerrors > totals.maxviews) {\n                totals.maxviews = item.numerrors;\n            }\n            totals.totalusers += item.numchecks;\n        });\n\n        return totals;\n    }\n\n    return {\n        /**\n        * Setting up the access review module.\n        * @param {number} toggled A number represnting the state of the review toggle.\n        * @param {string} whattoshow A string representing the display format for icons.\n        * @param {number} courseid The course ID.\n        */\n        init: async function (toggled, whattoshow, courseid) {\n            // Ajax calls.\n            let promises = ajax.call([\n                {\n                    methodname: 'block_accessreview_get_module_data',\n                    args: { courseid: courseid }\n                },\n                {\n                    methodname: 'block_accessreview_get_section_data',\n                    args: { courseid: courseid }\n                }\n            ]);\n            // Core/str calls.\n            let stringpromise = getStrings();\n            // Settings vars.\n            toggleState = toggled == 1;\n            whattoshowdata = whattoshow;\n            // Get error data.\n            modules = await promises[0];\n            sections = await promises[1];\n            // Get total data.\n            let totals = get_error_totals(sections, modules);\n            mindata = totals['minviews'];\n            diffdata = totals['maxviews'] - totals['minviews'] + 1;\n            // Load strings.\n            await stringpromise;\n            // Load icons.\n            passicon = await templates.renderPix('t/check', 'core', strings.success);\n            errorsicon = await templates.renderPix('t/block', 'core', strings.errors);\n\n            if (toggleState) {\n                showAccessmap();\n            }\n            // Apply the click event.\n            $('#toggle-accessmap').click(() => {\n                toggleAccessmap();\n            });\n        }\n    };\n});\n"],"file":"module.min.js"}