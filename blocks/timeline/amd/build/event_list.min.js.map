{"version":3,"sources":["../src/event_list.js"],"names":["define","$","Notification","Templates","PagedContentFactory","Str","UserDate","CalendarEventsRepository","SELECTORS","EMPTY_MESSAGE","ROOT","EVENT_LIST_CONTENT","EVENT_LIST_LOADING_PLACEHOLDER","TEMPLATES","DEFAULT_PAGED_CONTENT_CONFIG","ignoreControlWhileLoading","controlPlacementBottom","ariaLabels","itemsperpagecomponents","hideContent","root","find","addClass","removeClass","showContent","emptyContent","empty","buildTemplateContext","calendarEvents","midnight","eventsByDay","templateContext","eventsbyday","forEach","calendarEvent","dayTimestamp","timeusermidnight","push","Object","keys","events","past","render","templateName","load","limit","daysOffset","daysLimit","lastId","courseId","endTime","args","starttime","aftereventid","endtime","courseid","queryByCourse","queryByTime","loadEventsFromPageData","pageData","actions","lastIds","preloadedPages","pageNumber","lastPageNumber","hasOwnProperty","eventsPromise","then","result","length","allItemsLoaded","filter","event","eventtype","getUserMidnightForTimestamp","timesort","loadedAll","pop","createPagedContent","pageLimit","firstLoad","paginationAriaLabel","additionalConfig","hasContent","config","extend","get_string","isArray","value","string","itemsperpage","paginationnav","createWithLimit","pagesData","promises","pagePromise","lastEventId","id","catch","exception","when","apply","resolve","init","Deferred","eventListContent","loadingPlaceholder","attr","parseInt","html","js","replaceNodeContents","rootSelector"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript to load and render the list of calendar events for a\n * given day range.\n *\n * @module     block_timeline/event_list\n * @copyright  2016 Ryan Wyllie <ryan@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(\n[\n    'jquery',\n    'core/notification',\n    'core/templates',\n    'core/paged_content_factory',\n    'core/str',\n    'core/user_date',\n    'block_timeline/calendar_events_repository'\n],\nfunction(\n    $,\n    Notification,\n    Templates,\n    PagedContentFactory,\n    Str,\n    UserDate,\n    CalendarEventsRepository\n) {\n\n    var SECONDS_IN_DAY = 60 * 60 * 24;\n\n    var SELECTORS = {\n        EMPTY_MESSAGE: '[data-region=\"empty-message\"]',\n        ROOT: '[data-region=\"event-list-container\"]',\n        EVENT_LIST_CONTENT: '[data-region=\"event-list-content\"]',\n        EVENT_LIST_LOADING_PLACEHOLDER: '[data-region=\"event-list-loading-placeholder\"]',\n    };\n\n    var TEMPLATES = {\n        EVENT_LIST_CONTENT: 'block_timeline/event-list-content'\n    };\n\n    // We want the paged content controls below the paged content area\n    // and the controls should be ignored while data is loading.\n    var DEFAULT_PAGED_CONTENT_CONFIG = {\n        ignoreControlWhileLoading: true,\n        controlPlacementBottom: true,\n        ariaLabels: {\n            itemsperpagecomponents: 'ariaeventlistpagelimit, block_timeline',\n        }\n    };\n\n    /**\n     * Hide the content area and display the empty content message.\n     *\n     * @param {object} root The container element\n     */\n    var hideContent = function(root) {\n        root.find(SELECTORS.EVENT_LIST_CONTENT).addClass('hidden');\n        root.find(SELECTORS.EMPTY_MESSAGE).removeClass('hidden');\n    };\n\n    /**\n     * Show the content area and hide the empty content message.\n     *\n     * @param {object} root The container element\n     */\n    var showContent = function(root) {\n        root.find(SELECTORS.EVENT_LIST_CONTENT).removeClass('hidden');\n        root.find(SELECTORS.EMPTY_MESSAGE).addClass('hidden');\n    };\n\n    /**\n     * Empty the content area.\n     *\n     * @param {object} root The container element\n     */\n    var emptyContent = function(root) {\n        root.find(SELECTORS.EVENT_LIST_CONTENT).empty();\n    };\n\n    /**\n     * Construct the template context from a list of calendar events. The events\n     * are grouped by which day they are on. The day is calculated from the user's\n     * midnight timestamp to ensure that the calculation is timezone agnostic.\n     *\n     * The return data structure will look like:\n     * {\n     *      eventsbyday: [\n     *          {\n     *              dayTimestamp: 1533744000,\n     *              events: [\n     *                  { ...event 1 data... },\n     *                  { ...event 2 data... }\n     *              ]\n     *          },\n     *          {\n     *              dayTimestamp: 1533830400,\n     *              events: [\n     *                  { ...event 3 data... },\n     *                  { ...event 4 data... }\n     *              ]\n     *          }\n     *      ]\n     * }\n     *\n     * Each day timestamp is the day's midnight in the user's timezone.\n     *\n     * @param {array} calendarEvents List of calendar events\n     * @param {Number} midnight A timestamp representing midnight in the user's timezone\n     * @return {object}\n     */\n    var buildTemplateContext = function(calendarEvents, midnight) {\n        var eventsByDay = {};\n        var templateContext = {\n            eventsbyday: []\n        };\n\n        calendarEvents.forEach(function(calendarEvent) {\n            var dayTimestamp = calendarEvent.timeusermidnight;\n            if (eventsByDay[dayTimestamp]) {\n                eventsByDay[dayTimestamp].push(calendarEvent);\n            } else {\n                eventsByDay[dayTimestamp] = [calendarEvent];\n            }\n        });\n\n        Object.keys(eventsByDay).forEach(function(dayTimestamp) {\n            var events = eventsByDay[dayTimestamp];\n            templateContext.eventsbyday.push({\n                past: dayTimestamp < midnight,\n                dayTimestamp: dayTimestamp,\n                events: events\n            });\n        });\n\n        return templateContext;\n    };\n\n    /**\n     * Render the HTML for the given calendar events.\n     *\n     * @param {array} calendarEvents  A list of calendar events\n     * @param {Number} midnight A timestamp representing midnight for the user\n     * @return {promise} Resolved with HTML and JS strings.\n     */\n    var render = function(calendarEvents, midnight) {\n        var templateContext = buildTemplateContext(calendarEvents, midnight);\n        var templateName = TEMPLATES.EVENT_LIST_CONTENT;\n\n        return Templates.render(templateName, templateContext);\n    };\n\n    /**\n     * Retrieve a list of calendar events from the server for the given\n     * constraints.\n     *\n     * @param {Number} midnight The user's midnight time in unix timestamp.\n     * @param {Number} limit Limit the result set to this number of items\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to\n     * @param {int|false} lastId The ID of the last seen event (if any)\n     * @param {int|undefined} courseId Course ID to restrict events to\n     * @return {Promise} A jquery promise\n     */\n    var load = function(midnight, limit, daysOffset, daysLimit, lastId, courseId) {\n        var startTime = midnight + (daysOffset * SECONDS_IN_DAY);\n        var endTime = daysLimit != undefined ? midnight + (daysLimit * SECONDS_IN_DAY) : false;\n\n        var args = {\n            starttime: startTime,\n            limit: limit,\n        };\n\n        if (lastId) {\n            args.aftereventid = lastId;\n        }\n\n        if (endTime) {\n            args.endtime = endTime;\n        }\n\n        if (courseId) {\n            // If we have a course id then we only want events from that course.\n            args.courseid = courseId;\n            return CalendarEventsRepository.queryByCourse(args);\n        } else {\n            // Otherwise we want events from any course.\n            return CalendarEventsRepository.queryByTime(args);\n        }\n    };\n\n    /**\n     * Handle a single page request from the paged content. Uses the given page data to request\n     * the events from the server.\n     *\n     * Checks the given preloadedPages before sending a request to the server to make sure we\n     * don't load data unnecessarily.\n     *\n     * @param {object} pageData A single page data (see core/paged_content_pages for more info).\n     * @param {object} actions Paged content actions (see core/paged_content_pages for more info).\n     * @param {Number} midnight The user's midnight time in unix timestamp.\n     * @param {object} lastIds The last event ID for each loaded page. Page number is key, id is value.\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {int|undefined} courseId Course ID to restrict events to\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to\n     * @return {object} jQuery promise resolved with calendar events.\n     */\n    var loadEventsFromPageData = function(\n        pageData,\n        actions,\n        midnight,\n        lastIds,\n        preloadedPages,\n        courseId,\n        daysOffset,\n        daysLimit\n    ) {\n        var pageNumber = pageData.pageNumber;\n        var limit = pageData.limit;\n        var lastPageNumber = pageNumber;\n\n        // This is here to protect us if, for some reason, the pages\n        // are loaded out of order somehow and we don't have a reference\n        // to the previous page. In that case, scan back to find the most\n        // recent page we've seen.\n        while (!lastIds.hasOwnProperty(lastPageNumber)) {\n            lastPageNumber--;\n        }\n        // Use the last id of the most recent page.\n        var lastId = lastIds[lastPageNumber];\n        var eventsPromise = null;\n\n        if (preloadedPages && preloadedPages.hasOwnProperty(pageNumber)) {\n            // This page has been preloaded so use that rather than load the values\n            // again.\n            eventsPromise = preloadedPages[pageNumber];\n        } else {\n            // Load one more than the given limit so that we can tell if there\n            // is more content to load after this.\n            eventsPromise = load(midnight, limit + 1, daysOffset, daysLimit, lastId, courseId);\n        }\n\n        return eventsPromise.then(function(result) {\n            if (!result.events.length) {\n                // If we didn't get any events back then tell the paged content\n                // that we're done loading.\n                actions.allItemsLoaded(pageNumber);\n                return [];\n            }\n\n            var calendarEvents = result.events.filter(function(event) {\n                if (event.eventtype == \"open\" || event.eventtype == \"opensubmission\") {\n                    var dayTimestamp = UserDate.getUserMidnightForTimestamp(event.timesort, midnight);\n                    return dayTimestamp > midnight;\n                }\n                return true;\n            });\n            // We expect to receive limit + 1 events back from the server.\n            // Any less means there are no more events to load.\n            var loadedAll = calendarEvents.length <= limit;\n\n            if (loadedAll) {\n                // Tell the pagination that everything is loaded.\n                actions.allItemsLoaded(pageNumber);\n            } else {\n                // Remove the last element from the array because it isn't\n                // needed in this result set.\n                calendarEvents.pop();\n            }\n\n            return calendarEvents;\n        });\n    };\n\n    /**\n     * Use the paged content factory to create a paged content element for showing\n     * the event list. We only provide a page limit to the factory because we don't\n     * know exactly how many pages we'll need. This creates a paging bar with just\n     * next/previous buttons.\n     *\n     * This function specifies the callback for loading the event data that the user\n     * is requesting.\n     *\n     * @param {int|array} pageLimit A single limit or list of limits as options for the paged content\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {Number} midnight The user's midnight time in unix timestamp.\n     * @param {object} firstLoad A jQuery promise to be resolved after the first set of data is loaded.\n     * @param {int|undefined} courseId Course ID to restrict events to\n     * @param {Number} daysOffset How many days (from midnight) to offset the results from\n     * @param {int|undefined} daysLimit How many dates (from midnight) to limit the result to\n     * @param {string} paginationAriaLabel String to set as the aria label for the pagination bar.\n     * @param {object} additionalConfig Additional config options to pass to pagedContentFactory\n     * @return {object} jQuery promise.\n     */\n    var createPagedContent = function(\n        pageLimit,\n        preloadedPages,\n        midnight,\n        firstLoad,\n        courseId,\n        daysOffset,\n        daysLimit,\n        paginationAriaLabel,\n        additionalConfig\n    ) {\n        // Remember the last event id we loaded on each page because we can't\n        // use the offset value since the backend can skip events if the user doesn't\n        // have the capability to see them. Instead we load the next page of events\n        // based on the last seen event id.\n        var lastIds = {'1': 0};\n        var hasContent = false;\n        var config = $.extend({}, DEFAULT_PAGED_CONTENT_CONFIG, additionalConfig);\n\n        return Str.get_string(\n                'ariaeventlistpagelimit',\n                'block_timeline',\n                $.isArray(pageLimit) ? pageLimit[0].value : pageLimit\n            )\n            .then(function(string) {\n                config.ariaLabels.itemsperpage = string;\n                config.ariaLabels.paginationnav = paginationAriaLabel;\n                return string;\n            })\n            .then(function() {\n                return PagedContentFactory.createWithLimit(\n                    pageLimit,\n                    function(pagesData, actions) {\n                        var promises = [];\n\n                        pagesData.forEach(function(pageData) {\n                            var pageNumber = pageData.pageNumber;\n                            // Load the page data.\n                            var pagePromise = loadEventsFromPageData(\n                                pageData,\n                                actions,\n                                midnight,\n                                lastIds,\n                                preloadedPages,\n                                courseId,\n                                daysOffset,\n                                daysLimit\n                            ).then(function(calendarEvents) {\n                                if (calendarEvents.length) {\n                                    // Remember that we've loaded content.\n                                    hasContent = true;\n                                    // Remember the last id we've seen.\n                                    var lastEventId = calendarEvents[calendarEvents.length - 1].id;\n                                    // Record the id that the next page will need to start from.\n                                    lastIds[pageNumber + 1] = lastEventId;\n                                    // Get the HTML and JS for these calendar events.\n                                    return render(calendarEvents, midnight);\n                                } else {\n                                    return calendarEvents;\n                                }\n                            })\n                            .catch(Notification.exception);\n\n                            promises.push(pagePromise);\n                        });\n\n                        $.when.apply($, promises).then(function() {\n                            // Tell the calling code that the first page has been loaded\n                            // and whether it contains any content.\n                            firstLoad.resolve(hasContent);\n                            return;\n                        })\n                        .catch(function() {\n                            firstLoad.resolve(hasContent);\n                        });\n\n                        return promises;\n                    },\n                    config\n                );\n            });\n    };\n\n    /**\n     * Create a paged content region for the calendar events in the given root element.\n     * The content of the root element are replaced with a new paged content section\n     * each time this function is called.\n     *\n     * This function will be called each time the offset or limit values are changed to\n     * reload the event list region.\n     *\n     * @param {object} root The event list container element\n     * @param {int|array} pageLimit A single limit or list of limits as options for the paged content\n     * @param {object} preloadedPages An object of preloaded page data. Page number as key, data promise as value.\n     * @param {string} paginationAriaLabel String to set as the aria label for the pagination bar.\n     * @param {object} additionalConfig Additional config options to pass to pagedContentFactory\n     */\n    var init = function(root, pageLimit, preloadedPages, paginationAriaLabel, additionalConfig) {\n        root = $(root);\n\n        // Create a promise that will be resolved once the first set of page\n        // data has been loaded. This ensures that the loading placeholder isn't\n        // hidden until we have all of the data back to prevent the page elements\n        // jumping around.\n        var firstLoad = $.Deferred();\n        var eventListContent = root.find(SELECTORS.EVENT_LIST_CONTENT);\n        var loadingPlaceholder = root.find(SELECTORS.EVENT_LIST_LOADING_PLACEHOLDER);\n        var courseId = root.attr('data-course-id');\n        var daysOffset = parseInt(root.attr('data-days-offset'), 10);\n        var daysLimit = root.attr('data-days-limit');\n        var midnight = parseInt(root.attr('data-midnight'), 10);\n\n        // Make sure the content area and loading placeholder is visible.\n        // This is because the init function can be called to re-initialise\n        // an existing event list area.\n        emptyContent(root);\n        showContent(root);\n        loadingPlaceholder.removeClass('hidden');\n\n        // Days limit isn't mandatory.\n        if (daysLimit != undefined) {\n            daysLimit = parseInt(daysLimit, 10);\n        }\n\n        // Created the paged content element.\n        return createPagedContent(pageLimit, preloadedPages, midnight, firstLoad, courseId, daysOffset, daysLimit,\n                paginationAriaLabel, additionalConfig)\n            .then(function(html, js) {\n                html = $(html);\n                // Hide the content for now.\n                html.addClass('hidden');\n                // Replace existing elements with the newly created paged content.\n                // If we're reinitialising an existing event list this will replace\n                // the old event list (including removing any event handlers).\n                Templates.replaceNodeContents(eventListContent, html, js);\n\n                firstLoad.then(function(hasContent) {\n                    // Prevent changing page elements too much by only showing the content\n                    // once we've loaded some data for the first time. This allows our\n                    // fancy loading placeholder to shine.\n                    html.removeClass('hidden');\n                    loadingPlaceholder.addClass('hidden');\n\n                    if (!hasContent) {\n                        // If we didn't get any data then show the empty data message.\n                        hideContent(root);\n                    }\n\n                    return hasContent;\n                })\n                .catch(function() {\n                    return false;\n                });\n\n                return html;\n            })\n            .catch(Notification.exception);\n    };\n\n    return {\n        init: init,\n        rootSelector: SELECTORS.ROOT,\n    };\n});\n"],"file":"event_list.min.js"}