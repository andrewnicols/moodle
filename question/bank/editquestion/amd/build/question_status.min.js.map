{"version":3,"sources":["../src/question_status.js"],"names":["getFragment","args","contextId","Fragment","loadFragment","setQuestionStatus","questionId","formData","Ajax","call","methodname","questionid","formdata","save","modal","target","getBody","find","serialize","then","result","status","innerText","statusname","catch","Notification","exception","statusEvent","getStatusModal","show","root","getRoot","on","ModalEvents","e","preventDefault","stopPropagation","hide","ModalFactory","create","type","types","SAVE_CANCEL","title","Str","get_string","body","large","init","questionSelector","document","querySelector","getAttribute","addEventListener"],"mappings":"6mBAwBA,4CACA,iCACA,sDACA,oDACA,oDACA,oC,giCAUMA,CAAAA,WAAW,CAAG,SAACC,IAAD,CAAOC,SAAP,CAAqB,CACrC,MAAOC,mBAASC,YAAT,CAAsB,oBAAtB,CAA4C,iBAA5C,CAA+DF,SAA/D,CAA0ED,IAA1E,CACV,C,CASKI,iBAAiB,CAAG,SAACC,UAAD,CAAaC,QAAb,QAA0BC,eAAKC,IAAL,CAAU,CAAC,CAC3DC,UAAU,CAAE,+BAD+C,CAE3DT,IAAI,CAAE,CACFU,UAAU,CAAEL,UADV,CAEFM,QAAQ,CAAEL,QAFR,CAFqD,CAAD,CAAV,EAMhD,CANgD,CAA1B,C,CAgBpBM,IAAI,CAAG,SAACC,KAAD,CAAQR,UAAR,CAAoBS,MAApB,CAA+B,CACxC,GAAMR,CAAAA,QAAQ,CAAGO,KAAK,CAACE,OAAN,GAAgBC,IAAhB,CAAqB,MAArB,EAA6BC,SAA7B,EAAjB,CAEAb,iBAAiB,CAACC,UAAD,CAAaC,QAAb,CAAjB,CACKY,IADL,CACU,SAAAC,MAAM,CAAI,CACZ,GAAIA,MAAM,CAACC,MAAX,CAAmB,CACfN,MAAM,CAACO,SAAP,CAAmBF,MAAM,CAACG,UAC7B,CAEJ,CANL,EAOKC,KAPL,CAOWC,sBAAaC,SAPxB,CAQH,C,CAUKC,WAAW,CAAG,SAACrB,UAAD,CAAaJ,SAAb,CAAwBa,MAAxB,CAAmC,CAInDa,cAAc,CAHH,CACPjB,UAAU,CAAEL,UADL,CAGG,CAAOJ,SAAP,CAAd,CACKiB,IADL,CACU,SAACL,KAAD,CAAW,CACbA,KAAK,CAACe,IAAN,GACA,GAAIC,CAAAA,IAAI,CAAGhB,KAAK,CAACiB,OAAN,EAAX,CACAD,IAAI,CAACE,EAAL,CAAQC,sBAAYpB,IAApB,CAA0B,SAASqB,CAAT,CAAY,CAClCA,CAAC,CAACC,cAAF,GACAD,CAAC,CAACE,eAAF,GACAvB,IAAI,CAACC,KAAD,CAAQR,UAAR,CAAoBS,MAApB,CAAJ,CACAD,KAAK,CAACuB,IAAN,EACH,CALD,EAMA,MAAOvB,CAAAA,KACV,CAXL,EAYKU,KAZL,CAYWC,sBAAaC,SAZxB,CAaH,C,CASKE,cAAc,CAAG,SAAC3B,IAAD,CAAOC,SAAP,QAAqBoC,wBAAaC,MAAb,CAAoB,CAC5DC,IAAI,CAAEF,uBAAaG,KAAb,CAAmBC,WADmC,CAE5DC,KAAK,CAAEC,GAAG,CAACC,UAAJ,CAAe,sBAAf,CAAuC,oBAAvC,CAFqD,CAG5DC,IAAI,CAAE9C,WAAW,CAACC,IAAD,CAAOC,SAAP,CAH2C,CAI5D6C,KAAK,GAJuD,CAApB,CAArB,C,eAcH,QAAPC,CAAAA,IAAO,CAACC,gBAAD,CAAmB/C,SAAnB,CAAiC,IAC7Ca,CAAAA,MAAM,CAAGmC,QAAQ,CAACC,aAAT,CAAuBF,gBAAvB,CADoC,CAE7C3C,UAAU,CAAGS,MAAM,CAACqC,YAAP,CAAoB,iBAApB,CAFgC,CAGjDrC,MAAM,CAACsC,gBAAP,CAAwB,OAAxB,CAAiC,UAAM,CAEnC1B,WAAW,CAACrB,UAAD,CAAaJ,SAAb,CAAwBa,MAAxB,CACd,CAHD,CAIH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Status column selector js.\n *\n * @module     qbank_editquestion/question_status\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Safat Shahin <safatshahin@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from 'core/fragment';\nimport * as Str from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\nimport ModalEvents from 'core/modal_events';\nimport Ajax from 'core/ajax';\n\n/**\n * Get the fragment.\n *\n * @method getFragment\n * @param {{questioned: Number}} args\n * @param {Number} contextId\n * @return {String}\n */\nconst getFragment = (args, contextId) => {\n    return Fragment.loadFragment('qbank_editquestion', 'question_status', contextId, args);\n};\n\n/**\n * Set the question status.\n *\n * @param {Number} questionId The question id.\n * @param {String} formData The question tag form data in a URI encoded param string\n * @return {Array} The modified question status\n */\nconst setQuestionStatus = (questionId, formData) => Ajax.call([{\n    methodname: 'qbank_editquestion_set_status',\n    args: {\n        questionid: questionId,\n        formdata: formData\n    }\n}])[0];\n\n/**\n * Save the status.\n *\n * @method getFragment\n * @param {object} modal\n * @param {Number} questionId\n * @param {HTMLElement} target\n */\nconst save = (modal, questionId, target) => {\n    const formData = modal.getBody().find('form').serialize();\n\n    setQuestionStatus(questionId, formData)\n        .then(result => {\n            if (result.status) {\n                target.innerText = result.statusname;\n            }\n            return;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Event listeners for the module.\n *\n * @method clickEvent\n * @param {Number} questionId\n * @param {Number} contextId\n * @param {HTMLElement} target\n */\nconst statusEvent = (questionId, contextId, target) => {\n    let args = {\n        questionid: questionId\n    };\n    getStatusModal(args, contextId)\n        .then((modal) => {\n            modal.show();\n            let root = modal.getRoot();\n            root.on(ModalEvents.save, function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                save(modal, questionId, target);\n                modal.hide();\n            });\n            return modal;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Get the status modal to display.\n *\n * @param {{questionid: Number}} args\n * @param {Number} contextId\n * @return {HTMLElement}\n */\nconst getStatusModal = (args, contextId) => ModalFactory.create({\n    type: ModalFactory.types.SAVE_CANCEL,\n    title: Str.get_string('questionstatusheader', 'qbank_editquestion'),\n    body: getFragment(args, contextId),\n    large: false,\n});\n\n/**\n * Entrypoint of the js.\n *\n * @method init\n * @param {String} questionSelector the question status identifier.\n * @param {Number} contextId The context id of the question.\n */\nexport const init = (questionSelector, contextId) => {\n    let target = document.querySelector(questionSelector);\n    let questionId = target.getAttribute('data-questionid');\n    target.addEventListener('click', () => {\n        // Call for the event listener to listed for clicks in any usage count row.\n        statusEvent(questionId, contextId, target);\n    });\n};\n"],"file":"question_status.min.js"}