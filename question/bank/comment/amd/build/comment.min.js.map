{"version":3,"sources":["../src/comment.js"],"names":["commentEvent","questionId","courseID","contextId","commentFragment","Fragment","loadFragment","questionid","courseid","ModalFactory","create","type","types","SAVE_CANCEL","title","Str","get_string","body","large","then","modal","root","getRoot","on","ModalEvents","bodyRendered","submitlink","document","querySelectorAll","style","display","get_strings","key","component","strings","setButtonText","fail","Notification","exception","cancel","location","reload","hide","save","e","preventDefault","textarea","value","getAttribute","click","show","questionSelector","target","querySelector","addEventListener"],"mappings":"0SAwBA,4CACA,iCACA,oDACA,sDACA,oD,+hCAUMA,CAAAA,YAAY,CAAG,CAACC,UAAD,CAAaC,QAAb,CAAuBC,SAAvB,GAAqC,IAKlDC,CAAAA,eAAe,CAAGC,kBAASC,YAAT,CAAsB,eAAtB,CAAuC,kBAAvC,CAA2DH,SAA3D,CAJX,CACPI,UAAU,CAAEN,UADL,CAEPO,QAAQ,CAAEN,QAFH,CAIW,CALgC,CAMtDO,uBAAaC,MAAb,CAAoB,CAChBC,IAAI,CAAEF,uBAAaG,KAAb,CAAmBC,WADT,CAEhBC,KAAK,CAAEC,GAAG,CAACC,UAAJ,CAAe,eAAf,CAAgC,eAAhC,CAFS,CAGhBC,IAAI,CAAEb,eAHU,CAIhBc,KAAK,GAJW,CAApB,EAKGC,IALH,CAKSC,KAAD,EAAW,CACf,GAAIC,CAAAA,IAAI,CAAGD,KAAK,CAACE,OAAN,EAAX,CAGAD,IAAI,CAACE,EAAL,CAAQC,sBAAYC,YAApB,CAAkC,UAAW,CACzC,KAAMC,CAAAA,UAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,oBAA1B,EAAgD,CAAhD,CAAnB,CACAF,UAAU,CAACG,KAAX,CAAiBC,OAAjB,CAA2B,MAC9B,CAHD,EAMAf,GAAG,CAACgB,WAAJ,CAAgB,CACZ,CAACC,GAAG,CAAE,YAAN,CAAoBC,SAAS,CAAE,eAA/B,CADY,CAEZ,CAACD,GAAG,CAAE,OAAN,CAAeC,SAAS,CAAE,eAA1B,CAFY,CAAhB,EAGGd,IAHH,CAGSe,OAAD,EAAa,CACjBd,KAAK,CAACe,aAAN,CAAoB,MAApB,CAA4BD,OAAO,CAAC,CAAD,CAAnC,EACAd,KAAK,CAACe,aAAN,CAAoB,QAApB,CAA8BD,OAAO,CAAC,CAAD,CAArC,CAEH,CAPD,EAOGE,IAPH,CAOQC,sBAAaC,SAPrB,EASAjB,IAAI,CAACE,EAAL,CAAQC,sBAAYe,MAApB,CAA4B,UAAW,CACnCC,QAAQ,CAACC,MAAT,GACArB,KAAK,CAACsB,IAAN,EACH,CAHD,EAMArB,IAAI,CAACE,EAAL,CAAQC,sBAAYmB,IAApB,CAA0B,SAASC,CAAT,CAAY,CAClCA,CAAC,CAACC,cAAF,GADkC,KAE5BnB,CAAAA,UAAU,CAAGC,QAAQ,CAACC,gBAAT,CAA0B,oBAA1B,EAAgD,CAAhD,CAFe,CAG5BkB,QAAQ,CAAGnB,QAAQ,CAACC,gBAAT,CAA0B,2BAA1B,EAAuD,CAAvD,CAHiB,CAMlC,GAAIkB,QAAQ,CAACC,KAAT,EAAkBD,QAAQ,CAACE,YAAT,CAAsB,YAAtB,CAAlB,EAA2E,EAAlB,EAAAF,QAAQ,CAACC,KAAtE,CAAmF,CAC/ErB,UAAU,CAACuB,KAAX,EACH,CAEJ,CAVD,EAWA5B,IAAI,CAACE,EAAL,CAAQ,OAAR,CAAiB,8BAAjB,CAA+C,IAAM,CACjDiB,QAAQ,CAACC,MAAT,GACArB,KAAK,CAACsB,IAAN,EACH,CAHD,EAIAtB,KAAK,CAAC8B,IAAN,GACA,MAAO9B,CAAAA,KACV,CA/CD,EA+CGgB,IA/CH,CA+CQC,sBAAaC,SA/CrB,CAgDH,C,eAQoBa,gBAAD,EAAsB,IAClCC,CAAAA,MAAM,CAAGzB,QAAQ,CAAC0B,aAAT,CAAuBF,gBAAvB,CADyB,CAGlClD,UAAU,CAAGmD,MAAM,CAACJ,YAAP,CAAoB,iBAApB,CAHqB,CAIlC9C,QAAQ,CAAGkD,MAAM,CAACJ,YAAP,CAAoB,eAApB,CAJuB,CAKtCI,MAAM,CAACE,gBAAP,CAAwB,OAAxB,CAAiC,IAAM,CAEnCtD,YAAY,CAACC,UAAD,CAAaC,QAAb,CALA,CAKA,CACf,CAHD,CAIH,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Column selector js.\n *\n * @module    qbank_comment/comment\n * @copyright  2021 Catalyst IT Australia Pty Ltd\n * @author     Safat Shahin <safatshahin@catalyst-au.net>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from 'core/fragment';\nimport * as Str from 'core/str';\nimport ModalEvents from 'core/modal_events';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\n\n/**\n * Event listeners for the module.\n *\n * @method clickEvent\n * @param {Number} questionId\n * @param {Number} courseID\n * @param {Number} contextId\n */\nconst commentEvent = (questionId, courseID, contextId) => {\n    let args = {\n        questionid: questionId,\n        courseid: courseID\n    };\n    let commentFragment = Fragment.loadFragment('qbank_comment', 'question_comment', contextId, args);\n    ModalFactory.create({\n        type: ModalFactory.types.SAVE_CANCEL,\n        title: Str.get_string('commentheader', 'qbank_comment'),\n        body: commentFragment,\n        large: true,\n    }).then((modal) => {\n        let root = modal.getRoot();\n\n        // Don't display the default add comment link in the modal.\n        root.on(ModalEvents.bodyRendered, function() {\n            const submitlink = document.querySelectorAll(\"div.comment-area a\")[0];\n            submitlink.style.display = 'none';\n        });\n\n        // Get the required strings and updated the modal button text labels.\n        Str.get_strings([\n            {key: 'addcomment', component: 'qbank_comment'},\n            {key: 'close', component: 'qbank_comment'},\n        ]).then((strings) => {\n            modal.setButtonText('save', strings[0]);\n            modal.setButtonText('cancel', strings[1]);\n            return;\n        }).fail(Notification.exception);\n\n        root.on(ModalEvents.cancel, function() {\n            location.reload();\n            modal.hide();\n        });\n\n        // Handle adding the comment when the button in the modal is clicked.\n        root.on(ModalEvents.save, function(e) {\n            e.preventDefault();\n            const submitlink = document.querySelectorAll(\"div.comment-area a\")[0];\n            const textarea = document.querySelectorAll(\"div.comment-area textarea\")[0];\n\n            // Check there is a valid comment to add, and trigger adding if there is.\n            if (textarea.value != textarea.getAttribute('aria-label') && textarea.value != '') {\n                submitlink.click();\n            }\n\n        });\n        root.on('click', 'button[data-action=\"hide\"]', () => {\n            location.reload();\n            modal.hide();\n        });\n        modal.show();\n        return modal;\n    }).fail(Notification.exception);\n};\n\n/**\n * Entrypoint of the js.\n *\n * @method init\n * @param {string} questionSelector the question comment identifier.\n */\nexport const init = (questionSelector) => {\n    let target = document.querySelector(questionSelector);\n    let contextId = 1;\n    let questionId = target.getAttribute('data-questionid'),\n        courseID = target.getAttribute('data-courseid');\n    target.addEventListener('click', () => {\n        // Call for the event listener to listed for clicks in any comment count row.\n        commentEvent(questionId, courseID, contextId);\n    });\n};\n"],"file":"comment.min.js"}