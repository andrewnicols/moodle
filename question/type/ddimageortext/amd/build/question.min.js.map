{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/*\n * JavaScript to allow dragging options to slots (using mouse down or touch) or tab through slots using keyboard.\n *\n * @module     qtype_ddimageortext/question\n * @package    qtype_ddimageortext\n * @copyright  2018 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/dragdrop', 'core/key_codes'], function($, dragDrop, keys) {\n\n    \"use strict\";\n\n    /**\n     * Initialise one drag-drop onto image question.\n     *\n     * @param {String} containerId id of the outer div for this question.\n     * @param {boolean} readOnly whether the question is being displayed read-only.\n     * @param {Array} places Information about the drop places.\n     * @constructor\n     */\n    function DragDropOntoImageQuestion(containerId, readOnly, places) {\n        this.containerId = containerId;\n        M.util.js_pending('qtype_ddimageortext-init-' + this.containerId);\n        this.places = places;\n        this.allImagesLoaded = false;\n        this.imageLoadingTimeoutId = null;\n        this.isPrinting = false;\n        if (readOnly) {\n            this.getRoot().addClass('qtype_ddimageortext-readonly');\n        }\n\n        var thisQ = this;\n        this.getNotYetLoadedImages().one('load', function() {\n            thisQ.waitForAllImagesToBeLoaded();\n        });\n        this.waitForAllImagesToBeLoaded();\n    }\n\n    /**\n     * Waits until all images are loaded before calling setupQuestion().\n     *\n     * This function is called from the onLoad of each image, and also polls with\n     * a time-out, because image on-loads are allegedly unreliable.\n     */\n    DragDropOntoImageQuestion.prototype.waitForAllImagesToBeLoaded = function() {\n        var thisQ = this;\n\n        // This method may get called multiple times (via image on-loads or timeouts.\n        // If we are already done, don't do it again.\n        if (this.allImagesLoaded) {\n            return;\n        }\n\n        // Clear any current timeout, if set.\n        if (this.imageLoadingTimeoutId !== null) {\n            clearTimeout(this.imageLoadingTimeoutId);\n        }\n\n        // If we have not yet loaded all images, set a timeout to\n        // call ourselves again, since apparently images on-load\n        // events are flakey.\n        if (this.getNotYetLoadedImages().length > 0) {\n            this.imageLoadingTimeoutId = setTimeout(function() {\n                thisQ.waitForAllImagesToBeLoaded();\n            }, 100);\n            return;\n        }\n\n        // We now have all images. Carry on, but only after giving the layout a chance to settle down.\n        this.allImagesLoaded = true;\n        thisQ.setupQuestion();\n    };\n\n    /**\n     * Get any of the images in the drag-drop area that are not yet fully loaded.\n     *\n     * @returns {jQuery} those images.\n     */\n    DragDropOntoImageQuestion.prototype.getNotYetLoadedImages = function() {\n        var thisQ = this;\n        return this.getRoot().find('.ddarea img').not(function(i, imgNode) {\n            return thisQ.imageIsLoaded(imgNode);\n        });\n    };\n\n    /**\n     * Check if an image has loaded without errors.\n     *\n     * @param {HTMLImageElement} imgElement an image.\n     * @returns {boolean} true if this image has loaded without errors.\n     */\n    DragDropOntoImageQuestion.prototype.imageIsLoaded = function(imgElement) {\n        return imgElement.complete && imgElement.naturalHeight !== 0;\n    };\n\n    /**\n     * Set up the question, once all images have been loaded.\n     */\n    DragDropOntoImageQuestion.prototype.setupQuestion = function() {\n        this.resizeAllDragsAndDrops();\n        this.cloneDrags();\n        this.positionDragsAndDrops();\n        M.util.js_complete('qtype_ddimageortext-init-' + this.containerId);\n    };\n\n    /**\n     * In each group, resize all the items to be the same size.\n     */\n    DragDropOntoImageQuestion.prototype.resizeAllDragsAndDrops = function() {\n        var thisQ = this;\n        this.getRoot().find('.draghomes > div').each(function(i, node) {\n            thisQ.resizeAllDragsAndDropsInGroup(\n                    thisQ.getClassnameNumericSuffix($(node), 'dragitemgroup'));\n        });\n    };\n\n    /**\n     * In a given group, set all the drags and drops to be the same size.\n     *\n     * @param {int} group the group number.\n     */\n    DragDropOntoImageQuestion.prototype.resizeAllDragsAndDropsInGroup = function(group) {\n        var root = this.getRoot(),\n            dragHomes = root.find('.dragitemgroup' + group + ' .draghome'),\n            maxWidth = 0,\n            maxHeight = 0;\n\n        // Find the maximum size of any drag in this groups.\n        dragHomes.each(function(i, drag) {\n            maxWidth = Math.max(maxWidth, Math.ceil(drag.offsetWidth));\n            maxHeight = Math.max(maxHeight, Math.ceil(drag.offsetHeight));\n        });\n\n        // The size we will want to set is a bit bigger than this.\n        maxWidth += 10;\n        maxHeight += 10;\n\n        // Set each drag home to that size.\n        dragHomes.each(function(i, drag) {\n            var left = Math.round((maxWidth - drag.offsetWidth) / 2),\n                top = Math.floor((maxHeight - drag.offsetHeight) / 2);\n            // Set top and left padding so the item is centred.\n            $(drag).css({\n                'padding-left': left + 'px',\n                'padding-right': (maxWidth - drag.offsetWidth - left) + 'px',\n                'padding-top': top + 'px',\n                'padding-bottom': (maxHeight - drag.offsetHeight - top) + 'px'\n            });\n        });\n\n        // Create the drops and make them the right size.\n        for (var i in this.places) {\n            if (!this.places.hasOwnProperty((i))) {\n                continue;\n            }\n            var place = this.places[i],\n                label = place.text;\n            if (parseInt(place.group) !== group) {\n                continue;\n            }\n            if (label === '') {\n                label = M.util.get_string('blank', 'qtype_ddimageortext');\n            }\n            root.find('.dropzones').append('<div class=\"dropzone active group' + place.group +\n                            ' place' + i + '\" tabindex=\"0\">' +\n                    '<span class=\"accesshide\">' + label + '</span>&nbsp;</div>');\n            root.find('.dropzone.place' + i).width(maxWidth - 2).height(maxHeight - 2);\n        }\n    };\n\n    /**\n     * Invisible 'drag homes' are output by the renderer. These have the same properties\n     * as the drag items but are invisible. We clone these invisible elements to make the\n     * actual drag items.\n     */\n    DragDropOntoImageQuestion.prototype.cloneDrags = function() {\n        var thisQ = this;\n        thisQ.getRoot().find('.draghome').each(function(index, dragHome) {\n            var drag = $(dragHome);\n            var placeHolder = drag.clone();\n            placeHolder.removeClass();\n            placeHolder.addClass('draghome choice' +\n                thisQ.getChoice(drag) + ' group' +\n                thisQ.getGroup(drag) + ' dragplaceholder');\n            drag.before(placeHolder);\n        });\n    };\n\n    /**\n     * Clone drag item for one choice.\n     *\n     * @param {jQuery} dragHome the drag home to clone.\n     */\n    DragDropOntoImageQuestion.prototype.cloneDragsForOneChoice = function(dragHome) {\n        if (dragHome.hasClass('infinite')) {\n            var noOfDrags = this.noOfDropsInGroup(this.getGroup(dragHome));\n            for (var i = 0; i < noOfDrags; i++) {\n                this.cloneDrag(dragHome);\n            }\n        } else {\n            this.cloneDrag(dragHome);\n        }\n    };\n\n    /**\n     * Clone drag item.\n     *\n     * @param {jQuery} dragHome\n     */\n    DragDropOntoImageQuestion.prototype.cloneDrag = function(dragHome) {\n        var drag = dragHome.clone();\n        drag.removeClass('draghome')\n            .addClass('drag unplaced moodle-has-zindex')\n            .offset(dragHome.offset());\n        this.getRoot().find('.dragitems').append(drag);\n    };\n\n    /**\n     * Update the position of drags.\n     */\n    DragDropOntoImageQuestion.prototype.positionDragsAndDrops = function() {\n        var thisQ = this,\n            root = this.getRoot(),\n            bgRatio = this.bgRatio();\n\n        // Move the drops into position.\n        root.find('.ddarea .dropzone').each(function(i, dropNode) {\n            var drop = $(dropNode),\n                place = thisQ.places[thisQ.getPlace(drop)];\n            // The xy values come from PHP as strings, so we need parseInt to stop JS doing string concatenation.\n            drop.css('left', parseInt(place.xy[0]) * bgRatio)\n                .css('top', parseInt(place.xy[1]) * bgRatio);\n            drop.data('originX', parseInt(place.xy[0]))\n                .data('originY', parseInt(place.xy[1]));\n            thisQ.handleElementScale(drop, 'left top');\n        });\n\n        // First move all items back home.\n        root.find('.draghome').not('.dragplaceholder').each(function(i, dragNode) {\n            var drag = $(dragNode),\n                currentPlace = thisQ.getClassnameNumericSuffix(drag, 'inplace');\n            drag.addClass('unplaced')\n                .removeClass('placed');\n            drag.removeAttr('tabindex');\n            if (currentPlace !== null) {\n                drag.removeClass('inplace' + currentPlace);\n            }\n        });\n\n        // Then place the ones that should be placed.\n        root.find('input.placeinput').each(function(i, inputNode) {\n            var input = $(inputNode),\n                choice = input.val();\n            if (choice.length === 0 || (choice.length > 0 && choice === '0')) {\n                // No item in this place.\n                return;\n            }\n\n            var place = thisQ.getPlace(input);\n            // Get the unplaced drag.\n            var unplacedDrag = thisQ.getUnplacedChoice(thisQ.getGroup(input), choice);\n            // Get the clone of the drag.\n            var hiddenDrag = thisQ.getDragClone(unplacedDrag);\n            if (hiddenDrag.length) {\n                if (unplacedDrag.hasClass('infinite')) {\n                    var noOfDrags = thisQ.noOfDropsInGroup(thisQ.getGroup(unplacedDrag));\n                    var cloneDrags = thisQ.getInfiniteDragClones(unplacedDrag, false);\n                    if (cloneDrags.length < noOfDrags) {\n                        var cloneDrag = unplacedDrag.clone();\n                        cloneDrag.removeClass('beingdragged');\n                        cloneDrag.removeAttr('tabindex');\n                        hiddenDrag.after(cloneDrag);\n                    } else {\n                        hiddenDrag.addClass('active');\n                    }\n                } else {\n                    hiddenDrag.addClass('active');\n                }\n            }\n\n            // Send the drag to drop.\n            var drop = root.find('.dropzone.place' + place);\n            thisQ.sendDragToDrop(unplacedDrag, drop);\n        });\n    };\n\n    /**\n     * Handles the start of dragging an item.\n     *\n     * @param {Event} e the touch start or mouse down event.\n     */\n    DragDropOntoImageQuestion.prototype.handleDragStart = function(e) {\n        var thisQ = this,\n            drag = $(e.target).closest('.draghome'),\n            currentIndex = this.calculateZIndex(),\n            newIndex = currentIndex + 2;\n\n        var info = dragDrop.prepare(e);\n        if (!info.start) {\n            return;\n        }\n\n        drag.addClass('beingdragged').css('transform', '').css('z-index', newIndex);\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\n        if (currentPlace !== null) {\n            this.setInputValue(currentPlace, 0);\n            drag.removeClass('inplace' + currentPlace);\n            var hiddenDrop = thisQ.getDrop(drag, currentPlace);\n            if (hiddenDrop.length) {\n                hiddenDrop.addClass('active');\n                drag.offset(hiddenDrop.offset());\n            }\n        } else {\n            var hiddenDrag = thisQ.getDragClone(drag);\n            if (hiddenDrag.length) {\n                if (drag.hasClass('infinite')) {\n                    var noOfDrags = this.noOfDropsInGroup(thisQ.getGroup(drag));\n                    var cloneDrags = this.getInfiniteDragClones(drag, false);\n                    if (cloneDrags.length < noOfDrags) {\n                        var cloneDrag = drag.clone();\n                        cloneDrag.removeClass('beingdragged');\n                        cloneDrag.removeAttr('tabindex');\n                        hiddenDrag.after(cloneDrag);\n                        questionManager.addEventHandlersToDrag(cloneDrag);\n                        drag.offset(cloneDrag.offset());\n                    } else {\n                        hiddenDrag.addClass('active');\n                        drag.offset(hiddenDrag.offset());\n                    }\n                } else {\n                    hiddenDrag.addClass('active');\n                    drag.offset(hiddenDrag.offset());\n                }\n            }\n        }\n\n        dragDrop.start(e, drag, function(x, y, drag) {\n            thisQ.dragMove(x, y, drag);\n        }, function(x, y, drag) {\n            thisQ.dragEnd(x, y, drag);\n        });\n    };\n\n    /**\n     * Called whenever the currently dragged items moves.\n     *\n     * @param {Number} pageX the x position.\n     * @param {Number} pageY the y position.\n     * @param {jQuery} drag the item being moved.\n     */\n    DragDropOntoImageQuestion.prototype.dragMove = function(pageX, pageY, drag) {\n        var thisQ = this,\n            highlighted = false;\n        this.getRoot().find('.dropzone.group' + this.getGroup(drag)).each(function(i, dropNode) {\n            var drop = $(dropNode);\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !highlighted) {\n                highlighted = true;\n                drop.addClass('valid-drag-over-drop');\n            } else {\n                drop.removeClass('valid-drag-over-drop');\n            }\n        });\n        this.getRoot().find('.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\n            var drop = $(dropNode);\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !highlighted && !thisQ.isDragSameAsDrop(drag, drop)) {\n                highlighted = true;\n                drop.addClass('valid-drag-over-drop');\n            } else {\n                drop.removeClass('valid-drag-over-drop');\n            }\n        });\n    };\n\n    /**\n     * Called when user drops a drag item.\n     *\n     * @param {Number} pageX the x position.\n     * @param {Number} pageY the y position.\n     * @param {jQuery} drag the item being moved.\n     */\n    DragDropOntoImageQuestion.prototype.dragEnd = function(pageX, pageY, drag) {\n        var thisQ = this,\n            root = this.getRoot(),\n            placed = false;\n\n        // Looking for drag that was dropped on a dropzone.\n        root.find('.dropzone.group' + this.getGroup(drag)).each(function(i, dropNode) {\n            var drop = $(dropNode);\n            if (!thisQ.isPointInDrop(pageX, pageY, drop)) {\n                // Not this drop.\n                return true;\n            }\n\n            // Now put this drag into the drop.\n            drop.removeClass('valid-drag-over-drop');\n            thisQ.sendDragToDrop(drag, drop);\n            placed = true;\n            return false; // Stop the each() here.\n        });\n\n        if (!placed) {\n            // Looking for drag that was dropped on a placed drag.\n            root.find('.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, placedNode) {\n                var placedDrag = $(placedNode);\n                if (!thisQ.isPointInDrop(pageX, pageY, placedDrag) || thisQ.isDragSameAsDrop(drag, placedDrag)) {\n                    // Not this placed drag.\n                    return true;\n                }\n\n                // Now put this drag into the drop.\n                placedDrag.removeClass('valid-drag-over-drop');\n                var currentPlace = thisQ.getClassnameNumericSuffix(placedDrag, 'inplace');\n                var drop = thisQ.getDrop(drag, currentPlace);\n                thisQ.sendDragToDrop(drag, drop);\n                placed = true;\n                return false; // Stop the each() here.\n            });\n        }\n\n        if (!placed) {\n            this.sendDragHome(drag);\n        }\n    };\n\n    /**\n     * Animate a drag item into a given place (or back home).\n     *\n     * @param {jQuery|null} drag the item to place. If null, clear the place.\n     * @param {jQuery} drop the place to put it.\n     */\n    DragDropOntoImageQuestion.prototype.sendDragToDrop = function(drag, drop) {\n        // Is there already a drag in this drop? if so, evict it.\n        var oldDrag = this.getCurrentDragInPlace(this.getPlace(drop));\n        if (oldDrag.length !== 0) {\n            oldDrag.addClass('beingdragged');\n            oldDrag.offset(oldDrag.offset());\n            var currentPlace = this.getClassnameNumericSuffix(oldDrag, 'inplace');\n            var hiddenDrop = this.getDrop(oldDrag, currentPlace);\n            hiddenDrop.addClass('active');\n            this.sendDragHome(oldDrag);\n        }\n\n        if (drag.length === 0) {\n            this.setInputValue(this.getPlace(drop), 0);\n            if (drop.data('isfocus')) {\n                drop.focus();\n            }\n        } else {\n            this.setInputValue(this.getPlace(drop), this.getChoice(drag));\n            drag.removeClass('unplaced')\n                .addClass('placed inplace' + this.getPlace(drop));\n            drag.attr('tabindex', 0);\n            this.animateTo(drag, drop);\n        }\n    };\n\n    /**\n     * Animate a drag back to its home.\n     *\n     * @param {jQuery} drag the item being moved.\n     */\n    DragDropOntoImageQuestion.prototype.sendDragHome = function(drag) {\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\n        if (currentPlace !== null) {\n            drag.removeClass('inplace' + currentPlace);\n        }\n        drag.data('unplaced', true);\n\n        this.animateTo(drag, this.getDragHome(this.getGroup(drag), this.getChoice(drag)));\n    };\n\n    /**\n     * Handles keyboard events on drops.\n     *\n     * Drops are focusable. Once focused, right/down/space switches to the next choice, and\n     * left/up switches to the previous. Escape clear.\n     *\n     * @param {KeyboardEvent} e\n     */\n    DragDropOntoImageQuestion.prototype.handleKeyPress = function(e) {\n        var drop = $(e.target).closest('.dropzone');\n        if (drop.length === 0) {\n            var placedDrag = $(e.target);\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\n            if (currentPlace !== null) {\n                drop = this.getDrop(placedDrag, currentPlace);\n            }\n        }\n        var currentDrag = this.getCurrentDragInPlace(this.getPlace(drop)),\n            nextDrag = $();\n\n        switch (e.keyCode) {\n            case keys.space:\n            case keys.arrowRight:\n            case keys.arrowDown:\n                nextDrag = this.getNextDrag(this.getGroup(drop), currentDrag);\n                break;\n\n            case keys.arrowLeft:\n            case keys.arrowUp:\n                nextDrag = this.getPreviousDrag(this.getGroup(drop), currentDrag);\n                break;\n\n            case keys.escape:\n                questionManager.isKeyboardNavigation = false;\n                break;\n\n            default:\n                questionManager.isKeyboardNavigation = false;\n                return; // To avoid the preventDefault below.\n        }\n\n        if (nextDrag.length) {\n            nextDrag.data('isfocus', true);\n            nextDrag.addClass('beingdragged');\n            var hiddenDrag = this.getDragClone(nextDrag);\n            if (hiddenDrag.length) {\n                if (nextDrag.hasClass('infinite')) {\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(nextDrag));\n                    var cloneDrags = this.getInfiniteDragClones(nextDrag, false);\n                    if (cloneDrags.length < noOfDrags) {\n                        var cloneDrag = nextDrag.clone();\n                        cloneDrag.removeClass('beingdragged');\n                        cloneDrag.removeAttr('tabindex');\n                        hiddenDrag.after(cloneDrag);\n                        questionManager.addEventHandlersToDrag(cloneDrag);\n                        nextDrag.offset(cloneDrag.offset());\n                    } else {\n                        hiddenDrag.addClass('active');\n                        nextDrag.offset(hiddenDrag.offset());\n                    }\n                } else {\n                    hiddenDrag.addClass('active');\n                    nextDrag.offset(hiddenDrag.offset());\n                }\n            }\n        } else {\n            drop.data('isfocus', true);\n        }\n\n        e.preventDefault();\n        this.sendDragToDrop(nextDrag, drop);\n    };\n\n    /**\n     * Choose the next drag in a group.\n     *\n     * @param {int} group which group.\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\n     */\n    DragDropOntoImageQuestion.prototype.getNextDrag = function(group, drag) {\n        var choice,\n            numChoices = this.noOfChoicesInGroup(group);\n\n        if (drag.length === 0) {\n            choice = 1; // Was empty, so we want to select the first choice.\n        } else {\n            choice = this.getChoice(drag) + 1;\n        }\n\n        var next = this.getUnplacedChoice(group, choice);\n        while (next.length === 0 && choice < numChoices) {\n            choice++;\n            next = this.getUnplacedChoice(group, choice);\n        }\n\n        return next;\n    };\n\n    /**\n     * Choose the previous drag in a group.\n     *\n     * @param {int} group which group.\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\n     */\n    DragDropOntoImageQuestion.prototype.getPreviousDrag = function(group, drag) {\n        var choice;\n\n        if (drag.length === 0) {\n            choice = this.noOfChoicesInGroup(group);\n        } else {\n            choice = this.getChoice(drag) - 1;\n        }\n\n        var previous = this.getUnplacedChoice(group, choice);\n        while (previous.length === 0 && choice > 1) {\n            choice--;\n            previous = this.getUnplacedChoice(group, choice);\n        }\n\n        // Does this choice exist?\n        return previous;\n    };\n\n    /**\n     * Animate an object to the given destination.\n     *\n     * @param {jQuery} drag the element to be animated.\n     * @param {jQuery} target element marking the place to move it to.\n     */\n    DragDropOntoImageQuestion.prototype.animateTo = function(drag, target) {\n        var currentPos = drag.offset(),\n            targetPos = target.offset(),\n            thisQ = this;\n\n        M.util.js_pending('qtype_ddimageortext-animate-' + thisQ.containerId);\n        // Animate works in terms of CSS position, whereas locating an object\n        // on the page works best with jQuery offset() function. So, to get\n        // the right target position, we work out the required change in\n        // offset() and then add that to the current CSS position.\n        drag.animate(\n            {\n                left: parseInt(drag.css('left')) + targetPos.left - currentPos.left,\n                top: parseInt(drag.css('top')) + targetPos.top - currentPos.top\n            },\n            {\n                duration: 'fast',\n                done: function() {\n                    $('body').trigger('qtype_ddimageortext-dragmoved', [drag, target, thisQ]);\n                    M.util.js_complete('qtype_ddimageortext-animate-' + thisQ.containerId);\n                }\n            }\n        );\n    };\n\n    /**\n     * Detect if a point is inside a given DOM node.\n     *\n     * @param {Number} pageX the x position.\n     * @param {Number} pageY the y position.\n     * @param {jQuery} drop the node to check (typically a drop).\n     * @return {boolean} whether the point is inside the node.\n     */\n    DragDropOntoImageQuestion.prototype.isPointInDrop = function(pageX, pageY, drop) {\n        var position = drop.offset();\n        if (drop.hasClass('draghome')) {\n            return pageX >= position.left && pageX < position.left + drop.outerWidth()\n                && pageY >= position.top && pageY < position.top + drop.outerHeight();\n        }\n        return pageX >= position.left && pageX < position.left + drop.width()\n            && pageY >= position.top && pageY < position.top + drop.height();\n    };\n\n    /**\n     * Set the value of the hidden input for a place, to record what is currently there.\n     *\n     * @param {int} place which place to set the input value for.\n     * @param {int} choice the value to set.\n     */\n    DragDropOntoImageQuestion.prototype.setInputValue = function(place, choice) {\n        this.getRoot().find('input.placeinput.place' + place).val(choice);\n    };\n\n    /**\n     * Get the outer div for this question.\n     *\n     * @returns {jQuery} containing that div.\n     */\n    DragDropOntoImageQuestion.prototype.getRoot = function() {\n        return $(document.getElementById(this.containerId));\n    };\n\n    /**\n     * Get the img that is the background image.\n     * @returns {jQuery} containing that img.\n     */\n    DragDropOntoImageQuestion.prototype.bgImage = function() {\n        return this.getRoot().find('img.dropbackground');\n    };\n\n    /**\n     * Get drag home for a given choice.\n     *\n     * @param {int} group the group.\n     * @param {int} choice the choice number.\n     * @returns {jQuery} containing that div.\n     */\n    DragDropOntoImageQuestion.prototype.getDragHome = function(group, choice) {\n        if (!this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice).is(':visible')) {\n            return this.getRoot().find('.dragitemgroup' + group +\n                ' .draghome.infinite' +\n                '.choice' + choice +\n                '.group' + group);\n        }\n        return this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice);\n    };\n\n    /**\n     * Get an unplaced choice for a particular group.\n     *\n     * @param {int} group the group.\n     * @param {int} choice the choice number.\n     * @returns {jQuery} jQuery wrapping the unplaced choice. If there isn't one, the jQuery will be empty.\n     */\n    DragDropOntoImageQuestion.prototype.getUnplacedChoice = function(group, choice) {\n        return this.getRoot().find('.ddarea .draghome.group' + group + '.choice' + choice + '.unplaced').slice(0, 1);\n    };\n\n    /**\n     * Get the drag that is currently in a given place.\n     *\n     * @param {int} place the place number.\n     * @return {jQuery} the current drag (or an empty jQuery if none).\n     */\n    DragDropOntoImageQuestion.prototype.getCurrentDragInPlace = function(place) {\n        return this.getRoot().find('.ddarea .draghome.inplace' + place);\n    };\n\n    /**\n     * Return the number of blanks in a given group.\n     *\n     * @param {int} group the group number.\n     * @returns {int} the number of drops.\n     */\n    DragDropOntoImageQuestion.prototype.noOfDropsInGroup = function(group) {\n        return this.getRoot().find('.dropzone.group' + group).length;\n    };\n\n    /**\n     * Return the number of choices in a given group.\n     *\n     * @param {int} group the group number.\n     * @returns {int} the number of choices.\n     */\n    DragDropOntoImageQuestion.prototype.noOfChoicesInGroup = function(group) {\n        return this.getRoot().find('.dragitemgroup' + group + ' .draghome').length;\n    };\n\n    /**\n     * Return the number at the end of the CSS class name with the given prefix.\n     *\n     * @param {jQuery} node\n     * @param {String} prefix name prefix\n     * @returns {Number|null} the suffix if found, else null.\n     */\n    DragDropOntoImageQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\n        var classes = node.attr('class');\n        if (classes !== '') {\n            var classesArr = classes.split(' ');\n            for (var index = 0; index < classesArr.length; index++) {\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\n                if (patt1.test(classesArr[index])) {\n                    var patt2 = new RegExp('([0-9])+$');\n                    var match = patt2.exec(classesArr[index]);\n                    return Number(match[0]);\n                }\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Get the choice number of a drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @returns {Number} the choice number.\n     */\n    DragDropOntoImageQuestion.prototype.getChoice = function(drag) {\n        return this.getClassnameNumericSuffix(drag, 'choice');\n    };\n\n    /**\n     * Given a DOM node that is significant to this question\n     * (drag, drop, ...) get the group it belongs to.\n     *\n     * @param {jQuery} node a DOM node.\n     * @returns {Number} the group it belongs to.\n     */\n    DragDropOntoImageQuestion.prototype.getGroup = function(node) {\n        return this.getClassnameNumericSuffix(node, 'group');\n    };\n\n    /**\n     * Get the place number of a drop, or its corresponding hidden input.\n     *\n     * @param {jQuery} node the DOM node.\n     * @returns {Number} the place number.\n     */\n    DragDropOntoImageQuestion.prototype.getPlace = function(node) {\n        return this.getClassnameNumericSuffix(node, 'place');\n    };\n\n    /**\n     * Get drag clone for a given drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @returns {jQuery} the drag's clone.\n     */\n    DragDropOntoImageQuestion.prototype.getDragClone = function(drag) {\n        return this.getRoot().find('.dragitemgroup' +\n            this.getGroup(drag) +\n            ' .draghome' +\n            '.choice' + this.getChoice(drag) +\n            '.group' + this.getGroup(drag) +\n            '.dragplaceholder');\n    };\n\n    /**\n     * Get infinite drag clones for given drag.\n     *\n     * @param {jQuery} drag the drag.\n     * @param {Boolean} inHome in the home area or not.\n     * @returns {jQuery} the drag's clones.\n     */\n    DragDropOntoImageQuestion.prototype.getInfiniteDragClones = function(drag, inHome) {\n        if (inHome) {\n            return this.getRoot().find('.dragitemgroup' +\n                this.getGroup(drag) +\n                ' .draghome' +\n                '.choice' + this.getChoice(drag) +\n                '.group' + this.getGroup(drag) +\n                '.infinite').not('.dragplaceholder');\n        }\n        return this.getRoot().find('.draghome' +\n            '.choice' + this.getChoice(drag) +\n            '.group' + this.getGroup(drag) +\n            '.infinite').not('.dragplaceholder');\n    };\n\n    /**\n     * Get drop for a given drag and place.\n     *\n     * @param {jQuery} drag the drag.\n     * @param {Integer} currentPlace the current place of drag.\n     * @returns {jQuery} the drop's clone.\n     */\n    DragDropOntoImageQuestion.prototype.getDrop = function(drag, currentPlace) {\n        return this.getRoot().find('.dropzone.group' + this.getGroup(drag) + '.place' + currentPlace);\n    };\n\n    /**\n     * Handle when the window is resized.\n     */\n    DragDropOntoImageQuestion.prototype.handleResize = function() {\n        var thisQ = this,\n            bgRatio = this.bgRatio();\n        if (this.isPrinting) {\n            bgRatio = 1;\n        }\n\n        this.getRoot().find('.ddarea .dropzone').each(function(i, dropNode) {\n            $(dropNode)\n                .css('left', parseInt($(dropNode).data('originX')) * parseFloat(bgRatio))\n                .css('top', parseInt($(dropNode).data('originY')) * parseFloat(bgRatio));\n            thisQ.handleElementScale(dropNode, 'left top');\n        });\n\n        this.getRoot().find('div.droparea .draghome').not('.beingdragged').each(function(key, drag) {\n            $(drag)\n                .css('left', parseFloat($(drag).data('originX')) * parseFloat(bgRatio))\n                .css('top', parseFloat($(drag).data('originY')) * parseFloat(bgRatio));\n            thisQ.handleElementScale(drag, 'left top');\n        });\n    };\n\n    /**\n     * Return the background ratio.\n     *\n     * @returns {number} Background ratio.\n     */\n    DragDropOntoImageQuestion.prototype.bgRatio = function() {\n        var bgImg = this.bgImage();\n        var bgImgNaturalWidth = bgImg.get(0).naturalWidth;\n        var bgImgClientWidth = bgImg.width();\n\n        return bgImgClientWidth / bgImgNaturalWidth;\n    };\n\n    /**\n     * Scale the drag if needed.\n     *\n     * @param {jQuery} element the item to place.\n     * @param {String} type scaling type\n     */\n    DragDropOntoImageQuestion.prototype.handleElementScale = function(element, type) {\n        var bgRatio = parseFloat(this.bgRatio());\n        if (this.isPrinting) {\n            bgRatio = 1;\n        }\n        $(element).css({\n            '-webkit-transform': 'scale(' + bgRatio + ')',\n            '-moz-transform': 'scale(' + bgRatio + ')',\n            '-ms-transform': 'scale(' + bgRatio + ')',\n            '-o-transform': 'scale(' + bgRatio + ')',\n            'transform': 'scale(' + bgRatio + ')',\n            'transform-origin': type\n        });\n    };\n\n    /**\n     * Calculate z-index value.\n     *\n     * @returns {number} z-index value\n     */\n    DragDropOntoImageQuestion.prototype.calculateZIndex = function() {\n        var zIndex = 0;\n        this.getRoot().find('.ddarea .dropzone, div.droparea .draghome').each(function(i, dropNode) {\n            dropNode = $(dropNode);\n            // Note that webkit browsers won't return the z-index value from the CSS stylesheet\n            // if the element doesn't have a position specified. Instead it'll return \"auto\".\n            var itemZIndex = dropNode.css('z-index') ? parseInt(dropNode.css('z-index')) : 0;\n\n            if (itemZIndex > zIndex) {\n                zIndex = itemZIndex;\n            }\n        });\n\n        return zIndex;\n    };\n\n    /**\n     * Check that the drag is drop to it's clone.\n     *\n     * @param {jQuery} drag The drag.\n     * @param {jQuery} drop The drop.\n     * @returns {boolean}\n     */\n    DragDropOntoImageQuestion.prototype.isDragSameAsDrop = function(drag, drop) {\n        return this.getChoice(drag) === this.getChoice(drop) && this.getGroup(drag) === this.getGroup(drop);\n    };\n\n    /**\n     * Singleton object that handles all the DragDropOntoImageQuestions\n     * on the page, and deals with event dispatching.\n     * @type {Object}\n     */\n    var questionManager = {\n\n        /**\n         * {boolean} ensures that the event handlers are only initialised once per page.\n         */\n        eventHandlersInitialised: false,\n\n        /**\n         * {boolean} is printing or not.\n         */\n        isPrinting: false,\n\n        /**\n         * {boolean} is keyboard navigation or not.\n         */\n        isKeyboardNavigation: false,\n\n        /**\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\n         */\n        questions: {}, // An object containing all the information about each question on the page.\n\n        /**\n         * Initialise one question.\n         *\n         * @param {String} containerId the id of the div.que that contains this question.\n         * @param {boolean} readOnly whether the question is read-only.\n         * @param {Array} places data.\n         */\n        init: function(containerId, readOnly, places) {\n            questionManager.questions[containerId] =\n                new DragDropOntoImageQuestion(containerId, readOnly, places);\n            if (!questionManager.eventHandlersInitialised) {\n                questionManager.setupEventHandlers();\n                questionManager.eventHandlersInitialised = true;\n            }\n        },\n\n        /**\n         * Set up the event handlers that make this question type work. (Done once per page.)\n         */\n        setupEventHandlers: function() {\n            // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\n            questionManager.addEventHandlersToDrag($('.que.ddimageortext:not(.qtype_ddimageortext-readonly) .draghome'));\n            $('body')\n                .on('keydown',\n                    '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .dropzones .dropzone',\n                    questionManager.handleKeyPress)\n                .on('keydown',\n                    '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .draghome.placed:not(.beingdragged)',\n                    questionManager.handleKeyPress)\n                .on('qtype_ddimageortext-dragmoved', questionManager.handleDragMoved);\n            $(window).on('resize', function() {\n                questionManager.handleWindowResize(false);\n            });\n            window.addEventListener('beforeprint', function() {\n                questionManager.isPrinting = true;\n                questionManager.handleWindowResize(questionManager.isPrinting);\n            });\n            window.addEventListener('afterprint', function() {\n                questionManager.isPrinting = false;\n                questionManager.handleWindowResize(questionManager.isPrinting);\n            });\n            setTimeout(function() {\n                questionManager.fixLayoutIfThingsMoved();\n            }, 100);\n        },\n\n        /**\n         * Binding the drag/touch event again for newly created element.\n         *\n         * @param {jQuery} element Element to bind the event\n         */\n        addEventHandlersToDrag: function(element) {\n            // Unbind all the mousedown and touchstart events to prevent double binding.\n            element.unbind('mousedown touchstart');\n            element.on('mousedown touchstart', questionManager.handleDragStart);\n        },\n\n        /**\n         * Handle mouse down / touch start events on drags.\n         * @param {Event} e the DOM event.\n         */\n        handleDragStart: function(e) {\n            e.preventDefault();\n            var question = questionManager.getQuestionForEvent(e);\n            if (question) {\n                question.handleDragStart(e);\n            }\n        },\n\n        /**\n         * Handle key down / press events on drags.\n         * @param {KeyboardEvent} e\n         */\n        handleKeyPress: function(e) {\n            if (questionManager.isKeyboardNavigation) {\n                return;\n            }\n            questionManager.isKeyboardNavigation = true;\n            var question = questionManager.getQuestionForEvent(e);\n            if (question) {\n                question.handleKeyPress(e);\n            }\n        },\n\n        /**\n         * Handle when the window is resized.\n         * @param {boolean} isPrinting\n         */\n        handleWindowResize: function(isPrinting) {\n            for (var containerId in questionManager.questions) {\n                if (questionManager.questions.hasOwnProperty(containerId)) {\n                    questionManager.questions[containerId].isPrinting = isPrinting;\n                    questionManager.questions[containerId].handleResize();\n                }\n            }\n        },\n\n        /**\n         * Sometimes, despite our best efforts, things change in a way that cannot\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\n         * Therefore, we need to periodically check everything is in the right position.\n         */\n        fixLayoutIfThingsMoved: function() {\n            this.handleWindowResize(questionManager.isPrinting);\n            // We use setTimeout after finishing work, rather than setInterval,\n            // in case positioning things is slow. We want 100 ms gap\n            // between executions, not what setInterval does.\n            setTimeout(function() {\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\n            }, 100);\n        },\n\n        /**\n         * Handle when drag moved.\n         *\n         * @param {Event} e the event.\n         * @param {jQuery} drag the drag\n         * @param {jQuery} target the target\n         * @param {DragDropOntoImageQuestion} thisQ the question.\n         */\n        handleDragMoved: function(e, drag, target, thisQ) {\n            drag.removeClass('beingdragged').css('z-index', '');\n            drag.css('top', target.position().top).css('left', target.position().left);\n            target.after(drag);\n            target.removeClass('active');\n            if (typeof drag.data('unplaced') !== 'undefined' && drag.data('unplaced') === true) {\n                drag.removeClass('placed').addClass('unplaced');\n                drag.removeAttr('tabindex');\n                drag.removeData('unplaced');\n                drag.css('top', '')\n                    .css('left', '')\n                    .css('transform', '');\n                if (drag.hasClass('infinite') && thisQ.getInfiniteDragClones(drag, true).length > 1) {\n                    thisQ.getInfiniteDragClones(drag, true).first().remove();\n                }\n            } else {\n                drag.data('originX', target.data('originX')).data('originY', target.data('originY'));\n                thisQ.handleElementScale(drag, 'left top');\n            }\n            if (typeof drag.data('isfocus') !== 'undefined' && drag.data('isfocus') === true) {\n                drag.focus();\n                drag.removeData('isfocus');\n            }\n            if (typeof target.data('isfocus') !== 'undefined' && target.data('isfocus') === true) {\n                target.removeData('isfocus');\n            }\n            if (questionManager.isKeyboardNavigation) {\n                questionManager.isKeyboardNavigation = false;\n            }\n        },\n\n        /**\n         * Given an event, work out which question it effects.\n         * @param {Event} e the event.\n         * @returns {DragDropOntoImageQuestion|undefined} The question, or undefined.\n         */\n        getQuestionForEvent: function(e) {\n            var containerId = $(e.currentTarget).closest('.que.ddimageortext').attr('id');\n            return questionManager.questions[containerId];\n        }\n    };\n\n    /**\n     * @alias module:qtype_ddimageortext/question\n     */\n    return {\n        /**\n         * Initialise one drag-drop onto image question.\n         *\n         * @param {String} containerId id of the outer div for this question.\n         * @param {boolean} readOnly whether the question is being displayed read-only.\n         * @param {Array} Information about the drop places.\n         */\n        init: questionManager.init\n    };\n});\n"],"names":["define","$","dragDrop","keys","DragDropOntoImageQuestion","containerId","readOnly","places","this","M","util","js_pending","allImagesLoaded","imageLoadingTimeoutId","isPrinting","getRoot","addClass","thisQ","getNotYetLoadedImages","one","waitForAllImagesToBeLoaded","prototype","clearTimeout","length","setTimeout","setupQuestion","find","not","i","imgNode","imageIsLoaded","imgElement","complete","naturalHeight","resizeAllDragsAndDrops","cloneDrags","positionDragsAndDrops","js_complete","each","node","resizeAllDragsAndDropsInGroup","getClassnameNumericSuffix","group","root","dragHomes","maxWidth","maxHeight","drag","Math","max","ceil","offsetWidth","offsetHeight","left","round","top","floor","css","hasOwnProperty","place","label","text","parseInt","get_string","append","width","height","index","dragHome","placeHolder","clone","removeClass","getChoice","getGroup","before","cloneDragsForOneChoice","hasClass","noOfDrags","noOfDropsInGroup","cloneDrag","offset","bgRatio","dropNode","drop","getPlace","xy","data","handleElementScale","dragNode","currentPlace","removeAttr","inputNode","input","choice","val","unplacedDrag","getUnplacedChoice","hiddenDrag","getDragClone","getInfiniteDragClones","after","sendDragToDrop","handleDragStart","e","target","closest","newIndex","calculateZIndex","prepare","start","setInputValue","hiddenDrop","getDrop","questionManager","addEventHandlersToDrag","x","y","dragMove","dragEnd","pageX","pageY","highlighted","isPointInDrop","isDragSameAsDrop","placed","placedNode","placedDrag","sendDragHome","oldDrag","getCurrentDragInPlace","focus","attr","animateTo","getDragHome","handleKeyPress","currentDrag","nextDrag","keyCode","space","arrowRight","arrowDown","getNextDrag","arrowLeft","arrowUp","getPreviousDrag","escape","isKeyboardNavigation","preventDefault","numChoices","noOfChoicesInGroup","next","previous","currentPos","targetPos","animate","duration","done","trigger","position","outerWidth","outerHeight","document","getElementById","bgImage","is","slice","prefix","classes","classesArr","split","RegExp","test","match","exec","Number","inHome","handleResize","parseFloat","key","bgImg","bgImgNaturalWidth","get","naturalWidth","element","type","transform","zIndex","itemZIndex","eventHandlersInitialised","questions","init","setupEventHandlers","on","handleDragMoved","window","handleWindowResize","addEventListener","fixLayoutIfThingsMoved","unbind","question","getQuestionForEvent","removeData","first","remove","currentTarget"],"mappings":"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"}