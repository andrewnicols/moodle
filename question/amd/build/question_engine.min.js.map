{"version":3,"sources":["../src/question_engine.js"],"names":["questionFormAlreadySubmitted","initSubmitButton","button","formSubmit","init","buttonElement","document","getElementById","addEventListener","scrollManager","saveScrollPos","initForm","formSelector","form","querySelector","setAttribute","preventRepeatSubmission","event","keyCode","target","matches","preventDefault","questionFlagSaveButtons","querySelectorAll","Array","prototype","forEach","call","node","parentNode","removeChild","window","onload","scrollToSavedPos","setTimeout"],"mappings":"6gBAuBA,OACA,O,yiBAKIA,CAAAA,CAA4B,G,CAQnBC,CAAgB,CAAG,SAAAC,CAAM,CAAI,CACtCC,CAAU,CAACC,IAAX,CAAgBF,CAAhB,EACA,GAAMG,CAAAA,CAAa,CAAGC,QAAQ,CAACC,cAAT,CAAwBL,CAAxB,CAAtB,CACAG,CAAa,CAACG,gBAAd,CAA+B,OAA/B,CAAwC,UAAM,CAC1CC,CAAa,CAACC,aAAd,CAA4BR,CAA5B,CACH,CAFD,CAGH,C,iCAeuB,QAAXS,CAAAA,QAAW,CAAAC,CAAY,CAAI,CACpC,GAAMC,CAAAA,CAAI,CAAGP,QAAQ,CAACQ,aAAT,CAAuBF,CAAvB,CAAb,CACAC,CAAI,CAACE,YAAL,CAAkB,cAAlB,CAAkC,KAAlC,EAEAF,CAAI,CAACL,gBAAL,CAAsB,QAAtB,CAAgCQ,CAAhC,EAEAH,CAAI,CAACL,gBAAL,CAAsB,KAAtB,CAA6B,SAAAS,CAAK,CAAI,CAClC,GAAqB,EAAjB,EAAAA,CAAK,CAACC,OAAN,EAAuB,CAACD,CAAK,CAACE,MAAN,CAAaC,OAAb,CAAqB,GAArB,CAAxB,EAAqD,CAACH,CAAK,CAACE,MAAN,CAAaC,OAAb,CAAqB,oBAArB,CAAtD,EACA,CAACH,CAAK,CAACE,MAAN,CAAaC,OAAb,CAAqB,iBAArB,CADD,EAC4C,CAACH,CAAK,CAACE,MAAN,CAAaC,OAAb,CAAqB,UAArB,CAD7C,EAEA,CAACH,CAAK,CAACE,MAAN,CAAaC,OAAb,CAAqB,wBAArB,CAFL,CAEqD,CACjDH,CAAK,CAACI,cAAN,EACH,CACJ,CAND,EAQA,GAAMC,CAAAA,CAAuB,CAAGT,CAAI,CAACU,gBAAL,CAAsB,yBAAtB,CAAhC,CACAC,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BL,CAA7B,CAAsD,SAASM,CAAT,CAAe,CACjEA,CAAI,CAACC,UAAL,CAAgBC,WAAhB,CAA4BF,CAA5B,CACH,CAFD,EAIAG,MAAM,CAACC,MAAP,CAAgB,UAAM,CAClBvB,CAAa,CAACwB,gBAAd,EACH,CACJ,C,CAOM,GAAMjB,CAAAA,CAAuB,CAAG,SAACC,CAAD,CAAW,CAC9C,GAAIjB,CAAJ,CAAkC,CAC9BiB,CAAK,CAACI,cAAN,GACA,MACH,CAED,GAAMR,CAAAA,CAAI,CAAGI,CAAK,CAACE,MAAnB,CACAe,UAAU,CAAC,UAAM,CACbrB,CAAI,CAACC,aAAL,CAAmB,oBAAnB,EAAyCC,YAAzC,CAAsD,UAAtD,IACH,CAFS,CAEP,CAFO,CAAV,CAGAf,CAA4B,GAC/B,CAXM,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript required by the question engine.\n *\n * @module     core_question/question_engine\n * @copyright  2021 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport * as scrollManager from 'core/scroll_manager';\nimport * as formSubmit from 'core_form/submit';\n\n/**\n * Is question form already submitted?\n */\nlet questionFormAlreadySubmitted = false;\n\n/**\n * Initialise a question submit button. This saves the scroll position and\n * sets the fragment on the form submit URL so the page reloads in the right place.\n *\n * @param {string} button the id of the button in the HTML.\n */\nexport const initSubmitButton = button => {\n    formSubmit.init(button);\n    const buttonElement = document.getElementById(button);\n    buttonElement.addEventListener('click', () => {\n        scrollManager.saveScrollPos(button);\n    });\n};\n\n/**\n * Initialise a form that contains questions printed using print_question.\n * This has the effect of:\n * 1. Turning off browser autocomlete.\n * 2. Stopping enter from submitting the form (or toggling the next flag) unless\n *    keyboard focus is on the submit button or the flag.\n * 3. Removes any '.questionflagsavebutton's, since we have JavaScript to toggle\n *    the flags using ajax.\n * 4. Scroll to the position indicated by scrollpos= in the URL, if it is there.\n * 5. Prevent the user from repeatedly submitting the form.\n *\n * @param {string} formSelector Selector to identify the form.\n */\nexport const initForm = formSelector => {\n    const form = document.querySelector(formSelector);\n    form.setAttribute('autocomplete', 'off');\n\n    form.addEventListener('submit', preventRepeatSubmission);\n\n    form.addEventListener('key', event => {\n        if (event.keyCode == 13 && !event.target.matches('a') && !event.target.matches('input[type=submit]') &&\n            !event.target.matches('input[type=img]') && !event.target.matches('textarea') &&\n            !event.target.matches('[contenteditable=true]')) {\n            event.preventDefault();\n        }\n    });\n\n    const questionFlagSaveButtons = form.querySelectorAll('.questionflagsavebutton');\n    Array.prototype.forEach.call(questionFlagSaveButtons, function(node) {\n        node.parentNode.removeChild(node);\n    });\n\n    window.onload = () => {\n        scrollManager.scrollToSavedPos();\n    };\n};\n\n/**\n * Event handler to stop a question form being submitted more than once.\n *\n * @param {object} event the form submit event.\n */\nexport const preventRepeatSubmission = (event) => {\n    if (questionFormAlreadySubmitted) {\n        event.preventDefault();\n        return;\n    }\n\n    const form = event.target;\n    setTimeout(() => {\n        form.querySelector('input[type=submit]').setAttribute('disabled', true);\n    }, 0);\n    questionFormAlreadySubmitted = true;\n};\n"],"file":"question_engine.min.js"}