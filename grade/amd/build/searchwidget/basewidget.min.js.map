{"version":3,"file":"basewidget.min.js","sources":["../../src/searchwidget/basewidget.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * A widget to search users or grade items within the gradebook.\n *\n * @module    core_grades/searchwidget/basewidget\n * @copyright 2022 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {debounce} from 'core/utils';\nimport * as Templates from 'core/templates';\nimport * as Selectors from 'core_grades/searchwidget/selectors';\nimport Notification from 'core/notification';\n\n/**\n * Build the base searching widget.\n *\n * @method init\n * @param {HTMLElement} widgetContentContainer The selector for the widget container element.\n * @param {Promise} bodyPromise The promise from the callee of the contents to place in the widget container.\n * @param {Array} data An array of all the data generated by the callee.\n * @param {Function} searchFunc Partially applied function we need to manage search the passed dataset.\n * @param {string|null} unsearchableContent The content rendered in a non-searchable area.\n */\nexport const init = async(widgetContentContainer, bodyPromise, data, searchFunc, unsearchableContent = null) => {\n    bodyPromise.then(async(bodyContent) => {\n        // Render the body content.\n        widgetContentContainer.innerHTML = bodyContent;\n\n        // Render the unsearchable content if defined.\n        if (unsearchableContent) {\n            const unsearchableContentContainer = widgetContentContainer.querySelector(Selectors.regions.unsearchableContent);\n            unsearchableContentContainer.innerHTML += unsearchableContent;\n        }\n\n        const searchResultsContainer = widgetContentContainer.querySelector(Selectors.regions.searchResults);\n        // Display a loader until the search results are rendered.\n        await showLoader(searchResultsContainer);\n        // Render the search results.\n        await renderSearchResults(searchResultsContainer, data);\n\n        registerListenerEvents(widgetContentContainer, data, searchFunc);\n\n    }).catch(Notification.exception);\n};\n\n/**\n * Register the event listeners for the search widget.\n *\n * @method registerListenerEvents\n * @param {HTMLElement} widgetContentContainer The selector for the widget container element.\n * @param {Array} data An array of all the data generated by the callee.\n * @param {Function} searchFunc Partially applied function we need to manage search the passed dataset.\n */\nexport const registerListenerEvents = (widgetContentContainer, data, searchFunc) => {\n    const searchResultsContainer = widgetContentContainer.querySelector(Selectors.regions.searchResults);\n    const searchInput = widgetContentContainer.querySelector(Selectors.actions.search);\n    // We want to focus on the first known user interable element within the dropdown.\n    searchInput.focus();\n    const clearSearchButton = widgetContentContainer.querySelector(Selectors.actions.clearSearch);\n\n    // The search input is triggered.\n    searchInput.addEventListener('input', debounce(async() => {\n        // If search query is present display the 'clear search' button, otherwise hide it.\n        if (searchInput.value.length > 0) {\n            clearSearchButton.classList.remove('d-none');\n        } else {\n            clearSearchButton.classList.add('d-none');\n        }\n        // Display the search results.\n        await renderSearchResults(\n            searchResultsContainer,\n            debounceCallee(\n                searchInput.value,\n                data,\n                searchFunc()\n            )\n        );\n    }, 300));\n\n    // Clear search is triggered.\n    clearSearchButton.addEventListener('click', async(e) => {\n        e.stopPropagation();\n        // Clear the entered search query in the search bar.\n        searchInput.value = \"\";\n        searchInput.focus();\n        clearSearchButton.classList.add('d-none');\n\n        // Display all results.\n        await renderSearchResults(\n            searchResultsContainer,\n            debounceCallee(\n                searchInput.value,\n                data,\n                searchFunc()\n            )\n        );\n    });\n};\n\n/**\n * Renders the loading placeholder for the search widget.\n *\n * @method showLoader\n * @param {HTMLElement} container The DOM node where we'll render the loading placeholder.\n */\nexport const showLoader = async(container) => {\n    const {html, js} = await Templates.renderForPromise('core_grades/searchwidget/loading', {});\n    Templates.replaceNodeContents(container, html, js);\n};\n\n/**\n * We have a small helper that'll call the curried search function allowing callers to filter\n * the data set however we want rather than defining how data must be filtered.\n *\n * @method debounceCallee\n * @param {String} searchValue The input from the user that we'll search against.\n * @param {Array} data An array of all the data generated by the callee.\n * @param {Function} searchFunction Partially applied function we need to manage search the passed dataset.\n * @return {Array} The filtered subset of the provided data that we'll then render into the results.\n */\nconst debounceCallee = (searchValue, data, searchFunction) => {\n    if (searchValue.length > 0) { // Search query is present.\n        return searchFunction(data, searchValue);\n    }\n    return data;\n};\n\n/**\n * Given the output of the callers' search function, render out the results into the search results container.\n *\n * @method renderSearchResults\n * @param {HTMLElement} searchResultsContainer The DOM node of the widget where we'll render the provided results.\n * @param {Array} searchResultsData The filtered subset of the provided data that we'll then render into the results.\n */\nconst renderSearchResults = async(searchResultsContainer, searchResultsData) => {\n    const templateData = {\n        'searchresults': searchResultsData,\n    };\n    // Build up the html & js ready to place into the help section.\n    const {html, js} = await Templates.renderForPromise('core_grades/searchwidget/searchresults', templateData);\n    await Templates.replaceNodeContents(searchResultsContainer, html, js);\n};\n\n/**\n * We want to create the basic promises and hooks that the caller will implement, so we can build the search widget\n * ahead of time and allow the caller to resolve their promises once complete.\n *\n * @method promisesAndResolvers\n * @returns {{bodyPromise: Promise, bodyPromiseResolver}}\n */\nexport const promisesAndResolvers = () => {\n    // We want to show the widget instantly but loading whilst waiting for our data.\n    let bodyPromiseResolver;\n    const bodyPromise = new Promise(resolve => {\n        bodyPromiseResolver = resolve;\n    });\n\n    return {bodyPromiseResolver, bodyPromise};\n};\n"],"names":["Templates","_interopRequireWildcard","Selectors","_notification","async","widgetContentContainer","bodyPromise","data","searchFunc","unsearchableContent","then","innerHTML","bodyContent","querySelector","regions","searchResultsContainer","searchResults","showLoader","renderSearchResults","registerListenerEvents","catch","Notification","exception","searchInput","actions","search","focus","clearSearchButton","clearSearch","addEventListener","value","length","classList","remove","add","debounceCallee","e","stopPropagation","html","js","renderForPromise","replaceNodeContents","container","searchValue","searchFunction","searchResultsData","templateData","bodyPromiseResolver","Promise","resolve"],"mappings":";;;;;;;oKAuBAA,UAAAC,wBAAAD,WACAE,UAAAD,wBAAAC,WACAC,mBAAAA,+DAYoBC,eAAMC,uBAAwBC,YAAaC,KAAMC,YAAYC,IAAAA,2EAAsB,KACnGH,YAAYI,MAAKN,oBAKb,GAHAC,uBAAuBM,UAAYC,YAG/BH,oBAAqB,CACgBJ,uBAAuBQ,cAAcX,UAAUY,QAAQL,qBAC/DE,WAAaF,mBAC7C,CAEKM,MAAAA,uBAAyBV,uBAAuBQ,cAAcX,UAAUY,QAAQE,qBAEhFC,WAAWF,8BAEXG,oBAAoBH,uBAAwBR,MAElDY,uBAAuBd,uBAAwBE,KAAMC,WAArD,IAEDY,MAAMC,cAAAA,QAAaC,UACzB,EAUYH,MAAAA,uBAAyB,CAACd,uBAAwBE,KAAMC,cAC3DO,MAAAA,uBAAyBV,uBAAuBQ,cAAcX,UAAUY,QAAQE,eAChFO,YAAclB,uBAAuBQ,cAAcX,UAAUsB,QAAQC,QAE3EF,YAAYG,QACNC,MAAAA,kBAAoBtB,uBAAuBQ,cAAcX,UAAUsB,QAAQI,aAGjFL,YAAYM,iBAAiB,SAAS,oBAASzB,UAEvCmB,YAAYO,MAAMC,OAAS,EAC3BJ,kBAAkBK,UAAUC,OAAO,UAEnCN,kBAAkBK,UAAUE,IAAI,gBAG9BhB,oBACFH,uBACAoB,eACIZ,YAAYO,MACZvB,KACAC,cALR,GAQD,MAGHmB,kBAAkBE,iBAAiB,SAASzB,UACxCgC,EAAEC,kBAEFd,YAAYO,MAAQ,GACpBP,YAAYG,QACZC,kBAAkBK,UAAUE,IAAI,gBAG1BhB,oBACFH,uBACAoB,eACIZ,YAAYO,MACZvB,KACAC,cALR,GARJ,yDAyBG,MAAMS,WAAab,kBAChB,MAAAkC,KAACA,KAADC,GAAOA,UAAYvC,UAAUwC,iBAAiB,mCAAoC,CAA/D,GACzBxC,UAAUyC,oBAAoBC,UAAWJ,KAAMC,GAA/C,iCAaEJ,MAAAA,eAAiB,CAACQ,YAAapC,KAAMqC,iBACnCD,YAAYZ,OAAS,EACda,eAAerC,KAAMoC,aAEzBpC,KAULW,oBAAsBd,MAAMW,uBAAwB8B,qBACtD,MAAMC,aAAe,CACAD,cAAAA,oBAGfP,KAACA,KAADC,GAAOA,UAAYvC,UAAUwC,iBAAiB,yCAA0CM,oBACxF9C,UAAUyC,oBAAoB1B,uBAAwBuB,KAAMC,GAAlE,gCAUgC,KAEhC,IAAIQ,oBACJ,MAAMzC,YAAc,IAAI0C,SAAQC,UAC5BF,oBAAsBE,OAAtB,IAGG,MAAA,CAACF,wCAAqBzC,wBAA7B"}