{"version":3,"file":"search_class.min.js","sources":["../../src/search/search_class.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport $ from 'jquery';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport * as Templates from 'core/templates';\nimport {debounce} from 'core/utils';\nimport Url from 'core/url';\n\n/**\n * The class that manages the state of the user search.\n *\n * @module    gradereport_grader/search/search_class\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Define our standard lookups.\nconst selectors = {\n    component: '.user-search',\n    courseid: '[data-region=\"courseid\"]',\n    trigger: '.usersearchwidget',\n    input: '[data-action=\"search\"]',\n    clearSearch: '[data-action=\"clearsearch\"]',\n    dropdown: '.usersearchdropdown',\n    resultitems: '[role=\"option\"]',\n    viewall: '#select-all',\n};\n\n// DOM nodes that persist.\nconst component = document.querySelector(selectors.component);\nconst courseID = component.querySelector(selectors.courseid).dataset.courseid;\nconst searchInput = component.querySelector(selectors.input);\nconst searchDropdown = component.querySelector(selectors.dropdown);\nconst $searchButton = $(selectors.trigger);\nconst clearSearchButton = component.querySelector(selectors.clearSearch);\n\n// Reused variables for the class.\nconst UP = -1;\nconst DOWN = 1;\nconst events = [\n    'keydown',\n    CustomEvents.events.activate,\n    CustomEvents.events.keyboardActivate\n];\nlet dataset = [];\n\n/**\n * Set focus on a given node after parsed through the calling functions.\n *\n * @param {HTMLElement} node The node to set focus upon.\n */\nconst selectNode = (node) => {\n    node.focus({ preventScroll: true });\n    searchDropdown.scrollTop = node.offsetTop - (node.clientHeight / 2);\n};\n\n/**\n * Set the focus on the first node within the array.\n *\n * @param {Array} nodeArray The array of nodes that we want to specify a member to set focus upon.\n */\nconst moveToFirstNode = (nodeArray) => {\n    if (nodeArray.length > 0) {\n        selectNode(nodeArray[0]);\n    }\n};\n\n/**\n * Set the focus to the final node within the array.\n *\n * @param {Array} nodeArray The array of nodes that we want to specify a member to set focus upon.\n */\nconst moveToLastNode = (nodeArray) => {\n    if (nodeArray.length > 0) {\n        selectNode(nodeArray[nodeArray.length - 1]);\n    }\n};\n\n/**\n * Set focus on any given specified node within the node array.\n *\n * @param {Array} nodeArray The array of nodes that we want to specify a member to set focus upon.\n * @param {Number} index Which item within the array to set focus upon.\n */\nconst moveToNode = (nodeArray, index) => {\n    if (nodeArray.length > 0) {\n        selectNode(nodeArray[index]);\n    }\n};\n\n/**\n * Build up the view all link.\n *\n * @param {String} searchTerm The current users' search term.\n * @param {Null|Number} userID The potential ID of the user selected.\n * @returns {string|*}\n */\nconst selectAllResultsLink = (searchTerm, userID = null) => {\n    const params = {\n        id: courseID,\n        searchvalue: searchTerm\n    };\n    if (userID !== null) {\n        params.userid = userID;\n    }\n    return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n};\n\n/**\n * Build up the view all link that is dedicated to a particular result.\n *\n * @param {String} searchTerm The current users' search term.\n * @returns {Function|*}\n */\nconst selectOneLink = (searchTerm) => {\n    return (userID = null) => {\n        const params = {\n            id: courseID,\n            searchvalue: searchTerm\n        };\n        params.userid = userID;\n        return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n    };\n};\n\nexport default class GradebookSearchClass {\n    // The results from the called filter function.\n    matchedResults = [];\n\n    // What did the user search for?\n    searchTerm = '';\n\n    // The DOM nodes after the dropdown render.\n    resultNodes = [];\n\n    // Where does the user currently have focus?\n    currentNode = null;\n\n    // The current node for the view all link.\n    currentViewAll = null;\n\n    // The function defined by the caller that'll filter the dataset.\n    filterFunction = null;\n\n    // The function defined by the caller that mutates the results to indicate to the user what matched.\n    filterFunctionIndicator = null;\n\n    /**\n     *\n     * @param {Function} fetchFunc Call the passed function to populate the dataset.\n     * @param {Function} filterFunc Call the passed function to filter the dataset.\n     * @param {Function} filterMatchIndFunc Call the passed function to allow the caller to indicate how the dataset matched.\n     */\n    constructor(fetchFunc, filterFunc, filterMatchIndFunc) {\n        // Assign the appropriate filter and indicator functions for this search.\n        this.filterFunction = filterFunc;\n        this.filterFunctionIndicator = filterMatchIndFunc;\n        this.searchTerm = component.querySelector(selectors.input).value ?? '';\n\n        // Grab the dataset via the passed in function that dicates what we are filtering.\n        this.fetchDataset(fetchFunc);\n\n        // Begin handling the base search component.\n        this.registerClickHandlers();\n        this.registerKeyHandlers();\n        this.registerInputHandlers();\n    }\n\n    /**\n     * When called, close the dropdown and reset the input field attributes.\n     */\n    closeSearch() {\n        this.toggleDropdown();\n        // Hide the \"clear\" search button search bar.\n        clearSearchButton.classList.add('d-none');\n        // Clear the entered search query in the search bar and hide the search results container.\n        searchInput.value = \"\";\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.resultNodes = [...component.querySelectorAll(selectors.resultitems)];\n        this.currentNode = this.resultNodes.find(r => r.id === document.activeElement.id);\n        this.currentViewAll = component.querySelector(selectors.viewall);\n    }\n\n    /**\n     * Given we have been provided with a caller, grab the data ready to search.\n     *\n     * @param {Function} fetchFunc Call the curried function to populate the dataset.\n     * @returns {Promise<void>}\n     */\n    async fetchDataset(fetchFunc) {\n        dataset = await fetchFunc(courseID);\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Prevent the click triggering the dropdown.\n        $searchButton.on('click', () => {\n            this.toggleDropdown();\n        });\n\n        // Register click events.\n        component.addEventListener('click', this.clickHandler.bind(this));\n\n        // Since we are handling dropdowns manually, ensure we can close it when clicking off.\n        document.addEventListener('click', (e) => {\n            if (!e.target.closest(selectors.component) && searchDropdown.classList.contains('show')) {\n                this.toggleDropdown();\n            }\n        });\n    }\n\n    /**\n     * Register key event listeners.\n     */\n    registerKeyHandlers() {\n        CustomEvents.define(document, events);\n\n        // Register click events.\n        events.forEach((event) => {\n            component.addEventListener(event, this.keyHandler.bind(this));\n        });\n    }\n\n    /**\n     * Register input event listener for the text input area.\n     */\n    registerInputHandlers() {\n        // Register & handle the text input.\n        searchInput.addEventListener('input', debounce(async() => {\n            this.searchTerm = searchInput.value;\n            // We can also require a set amount of input before search.\n            if (this.searchTerm === '') {\n                this.toggleDropdown();\n                // Hide the \"clear\" search button in the search bar.\n                clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                clearSearchButton.classList.remove('d-none');\n                this.renderAndShow();\n            }\n        }, 300));\n    }\n\n    /**\n     * A combo method to take the matching fields and render out the results.\n     *\n     * @returns {Promise<void>}\n     */\n    async renderAndShow() {\n        // User has given something for us to filter against.\n        this.matchedResults = this.filterDataset();\n        // Replace the dropdown node contents and show the results.\n        await this.renderDropdown(\n            this.filterFunctionIndicator(\n                this.matchedResults.slice(0, 20),\n                selectOneLink(this.searchTerm),\n                this.searchTerm\n            )\n        );\n        // Set the dropdown to open.\n        this.toggleDropdown(true);\n    }\n\n    /**\n     * Filter the dataset to find if any of the fields include the string the user is searching for.\n     *\n     * @returns {Array} The results found for the given search term.\n     */\n    filterDataset() {\n        return this.filterFunction(dataset, this.searchTerm);\n    }\n\n    /**\n     * Build the content then replace the node.\n     *\n     * @param {Array} results The results of the dataset having its' matching indicators applied.\n     */\n    async renderDropdown(results) {\n        const {html, js} = await Templates.renderForPromise('gradereport_grader/search/resultset', {\n            users: results,\n            hasusers: results.length > 0,\n            total: dataset.length,\n            found: results.length,\n            searchterm: this.searchTerm,\n            selectall: selectAllResultsLink(this.searchTerm),\n        });\n        Templates.replaceNodeContents(searchDropdown, html, js);\n    }\n\n    /**\n     * When called, update the dropdown fields.\n     *\n     * @param {Boolean} on Flag to toggle hiding or showing values.\n     */\n    toggleDropdown(on = false) {\n        $(component).dropdown('toggle');\n        $searchButton.attr('aria-expanded', on);\n        if (on) {\n            searchDropdown.classList.add('show');\n            $(searchDropdown).show();\n        } else {\n            searchDropdown.classList.remove('show');\n            $(searchDropdown).hide();\n        }\n    }\n\n    /**\n     * Set the current focus either on the preceding or next result item.\n     *\n     * @param {Number} direction Is the user moving up or down the resultset?\n     * @param {Event} e The JS event from the event handler.\n     */\n    keyUpDown(direction, e) {\n        e.preventDefault();\n        // Stop Bootstrap from being clever.\n        e.stopPropagation();\n        // Current focus is on the input box so depending on direction, go to the top or the bottom of the displayed results.\n        if (document.activeElement === searchInput && this.resultNodes.length > 0) {\n            if (direction === UP) {\n                moveToLastNode(this.resultNodes);\n            } else {\n                moveToFirstNode(this.resultNodes);\n            }\n        }\n        const index = this.resultNodes.indexOf(this.currentNode);\n        if (this.currentNode) {\n            if (direction === UP) {\n                if (index === 0) {\n                    moveToLastNode(this.resultNodes);\n                } else {\n                    moveToNode(this.resultNodes, index - 1);\n                }\n            } else {\n                if (index + 1 >= this.resultNodes.length) {\n                    moveToFirstNode(this.resultNodes);\n                } else {\n                    moveToNode(this.resultNodes, index + 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        this.updateNodes();\n\n        // Prevent normal key presses activating this.\n        if (e.target.closest('.dropdown-item') && e.button === 0) {\n            window.location = e.target.closest('.dropdown-item').href;\n        }\n        if (e.target === this.currentViewAll && e.button === 0) {\n            window.location = selectAllResultsLink(this.searchTerm);\n        }\n        // The \"clear search\" button is triggered.\n        if (e.target.closest(selectors.clearSearch) && e.button === 0) {\n            this.closeSearch();\n            searchInput.focus({preventScroll: true});\n        }\n\n        // User may have accidentally clicked off the dropdown and wants to reopen it.\n        if (e.target.closest(selectors.input) && this.searchTerm !== '' && e.button === 0) {\n            this.renderAndShow();\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     */\n    keyHandler(e) {\n        this.updateNodes();\n\n        if (e.target === this.currentViewAll && (e.key === 'Enter' || e.key === 'Space')) {\n            window.location = selectAllResultsLink(this.searchTerm);\n        }\n\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'ArrowUp':\n                this.keyUpDown(UP, e);\n                break;\n            case 'ArrowDown':\n                this.keyUpDown(DOWN, e);\n                break;\n            case 'Home':\n                e.preventDefault();\n                moveToFirstNode(this.resultNodes);\n                break;\n            case 'End':\n                e.preventDefault();\n                moveToLastNode(this.resultNodes);\n                break;\n            case 'Escape':\n                this.toggleDropdown();\n                searchInput.focus({preventScroll: true});\n                break;\n            case 'Enter':\n            case ' ':\n                if (document.activeElement === searchInput) {\n                    if (e.key === ' ') {\n                        break;\n                    } else {\n                        window.location = selectAllResultsLink(this.searchTerm);\n                        break;\n                    }\n                }\n                if (document.activeElement === clearSearchButton) {\n                    this.closeSearch();\n                    break;\n                }\n                e.preventDefault();\n                window.location = e.target.closest('.dropdown-item').href;\n                break;\n            case 'Tab':\n                // If the current focus is on clear search, then check if viewall exists then around tab to it.\n                if (e.target.closest(selectors.clearSearch)) {\n                    if (this.currentViewAll) {\n                        e.preventDefault();\n                        this.currentViewAll.focus({preventScroll: true});\n                    } else {\n                        this.closeSearch();\n                    }\n                }\n                // If the current focus is on the view all link, then close the widget then set focus on the next tert nav item.\n                if (e.target.closest(selectors.viewall)) {\n                    this.closeSearch();\n                }\n                break;\n        }\n    }\n}\n"],"names":["selectors","component","document","querySelector","courseID","dataset","courseid","searchInput","searchDropdown","$searchButton","clearSearchButton","events","CustomEvents","activate","keyboardActivate","selectNode","node","focus","preventScroll","scrollTop","offsetTop","clientHeight","moveToFirstNode","nodeArray","length","moveToLastNode","moveToNode","index","selectAllResultsLink","searchTerm","userID","params","id","searchvalue","userid","Url","relativeUrl","constructor","fetchFunc","filterFunc","filterMatchIndFunc","filterFunction","filterFunctionIndicator","value","fetchDataset","registerClickHandlers","registerKeyHandlers","registerInputHandlers","closeSearch","toggleDropdown","classList","add","updateNodes","resultNodes","querySelectorAll","currentNode","this","find","r","activeElement","currentViewAll","on","addEventListener","clickHandler","bind","e","target","closest","contains","define","forEach","event","keyHandler","async","remove","renderAndShow","matchedResults","filterDataset","renderDropdown","slice","results","html","js","Templates","renderForPromise","users","hasusers","total","found","searchterm","selectall","replaceNodeContents","dropdown","attr","show","hide","keyUpDown","direction","preventDefault","stopPropagation","indexOf","button","window","location","href","key"],"mappings":"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"}