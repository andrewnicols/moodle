{"version":3,"file":"search_class.min.js","sources":["../../src/search/search_class.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport $ from 'jquery';\nimport CustomEvents from \"core/custom_interaction_events\";\nimport * as Templates from 'core/templates';\nimport {debounce} from 'core/utils';\nimport Url from 'core/url';\n\n/**\n * The class that manages the state of the user search.\n *\n * @module    gradereport_grader/search/search_class\n * @copyright 2023 Mathew May <mathew.solutions>\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// Define our standard lookups.\nconst selectors = {\n    component: '.user-search',\n    courseid: '[data-region=\"courseid\"]',\n    trigger: '.usersearchwidget',\n    input: '[data-action=\"search\"]',\n    clearSearch: '[data-action=\"clearsearch\"]',\n    dropdown: '.usersearchdropdown',\n    resultitems: '[role=\"option\"]',\n    viewall: '#select-all',\n};\n\n// DOM nodes that persist.\nconst component = document.querySelector(selectors.component);\nconst courseID = component.querySelector(selectors.courseid).dataset.courseid;\nconst searchInput = component.querySelector(selectors.input);\nconst searchDropdown = component.querySelector(selectors.dropdown);\nconst $searchButton = $(selectors.trigger);\nconst clearSearchButton = component.querySelector(selectors.clearSearch);\n\n// Reused variables for the class.\nconst UP = -1;\nconst DOWN = 1;\nconst events = [\n    'keydown',\n    CustomEvents.events.activate,\n    CustomEvents.events.keyboardActivate\n];\nlet dataset = [];\n\n/**\n * Set focus on a given node after parsed through the calling functions.\n *\n * @param {HTMLElement} node The node to set focus upon.\n */\nconst selectNode = (node) => {\n    node.focus({ preventScroll: true });\n    searchDropdown.scrollTop = node.offsetTop - (node.clientHeight / 2);\n};\n\n/**\n * Set the focus on the first node within the array.\n *\n * @param {Array} nodeArray The array of nodes that we want to specify a member to set focus upon.\n */\nconst moveToFirstNode = (nodeArray) => {\n    if (nodeArray.length > 0) {\n        selectNode(nodeArray[0]);\n    }\n};\n\n/**\n * Set the focus to the final node within the array.\n *\n * @param {Array} nodeArray The array of nodes that we want to specify a member to set focus upon.\n */\nconst moveToLastNode = (nodeArray) => {\n    if (nodeArray.length > 0) {\n        selectNode(nodeArray[nodeArray.length - 1]);\n    }\n};\n\n/**\n * Set focus on any given specified node within the node array.\n *\n * @param {Array} nodeArray The array of nodes that we want to specify a member to set focus upon.\n * @param {Number} index Which item within the array to set focus upon.\n */\nconst moveToNode = (nodeArray, index) => {\n    if (nodeArray.length > 0) {\n        selectNode(nodeArray[index]);\n    }\n};\n\n/**\n * Build up the view all link.\n *\n * @param {String} searchTerm The current users' search term.\n * @param {Null|Number} userID The potential ID of the user selected.\n * @returns {string|*}\n */\nconst selectAllResultsLink = (searchTerm, userID = null) => {\n    const params = {\n        id: courseID,\n        searchvalue: searchTerm\n    };\n    if (userID !== null) {\n        params.userid = userID;\n    }\n    return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n};\n\n/**\n * Build up the view all link that is dedicated to a particular result.\n *\n * @param {String} searchTerm The current users' search term.\n * @returns {Function|*}\n */\nconst selectOneLink = (searchTerm) => {\n    return (userID = null) => {\n        const params = {\n            id: courseID,\n            searchvalue: searchTerm\n        };\n        params.userid = userID;\n        return Url.relativeUrl('/grade/report/grader/index.php', params, false);\n    };\n};\n\nexport default class GradebookSearchClass {\n    // The results from the called filter function.\n    matchedResults = [];\n\n    // What did the user search for?\n    searchTerm = '';\n\n    // The DOM nodes after the dropdown render.\n    resultNodes = [];\n\n    // Where does the user currently have focus?\n    currentNode = null;\n\n    // The current node for the view all link.\n    currentViewAll = null;\n\n    // The function defined by the caller that'll filter the dataset.\n    filterFunction = null;\n\n    // The function defined by the caller that mutates the results to indicate to the user what matched.\n    filterFunctionIndicator = null;\n\n    /**\n     *\n     * @param {Function} fetchFunc Call the passed function to populate the dataset.\n     * @param {Function} filterFunc Call the passed function to filter the dataset.\n     * @param {Function} filterMatchIndFunc Call the passed function to allow the caller to indicate how the dataset matched.\n     */\n    constructor(fetchFunc, filterFunc, filterMatchIndFunc) {\n        // Assign the appropriate filter and indicator functions for this search.\n        this.filterFunction = filterFunc;\n        this.filterFunctionIndicator = filterMatchIndFunc;\n        this.searchTerm = component.querySelector(selectors.input).value ?? '';\n\n        // Grab the dataset via the passed in function that dicates what we are filtering.\n        this.fetchDataset(fetchFunc);\n\n        // Begin handling the base search component.\n        this.registerClickHandlers();\n        this.registerKeyHandlers();\n        this.registerInputHandlers();\n    }\n\n    /**\n     * When called, close the dropdown and reset the input field attributes.\n     */\n    closeSearch() {\n        this.toggleDropdown();\n        // Hide the \"clear\" search button search bar.\n        clearSearchButton.classList.add('d-none');\n        // Clear the entered search query in the search bar and hide the search results container.\n        searchInput.value = \"\";\n    }\n\n    /**\n     * These class members change when a new result set is rendered. So update for fresh data.\n     */\n    updateNodes() {\n        this.resultNodes = [...component.querySelectorAll(selectors.resultitems)];\n        this.currentNode = this.resultNodes.find(r => r.id === document.activeElement.id);\n        this.currentViewAll = component.querySelector(selectors.viewall);\n    }\n\n    /**\n     * Given we have been provided with a caller, grab the data ready to search.\n     *\n     * @param {Function} fetchFunc Call the curried function to populate the dataset.\n     * @returns {Promise<void>}\n     */\n    async fetchDataset(fetchFunc) {\n        dataset = await fetchFunc(courseID);\n    }\n\n    /**\n     * Register clickable event listeners.\n     */\n    registerClickHandlers() {\n        // Prevent the click triggering the dropdown.\n        $searchButton.on('click', () => {\n            this.toggleDropdown();\n        });\n\n        // Register click events.\n        component.addEventListener('click', this.clickHandler.bind(this));\n\n        // Since we are handling dropdowns manually, ensure we can close it when clicking off.\n        document.addEventListener('click', (e) => {\n            if (!e.target.closest(selectors.component) && searchDropdown.classList.contains('show')) {\n                this.toggleDropdown();\n            }\n        });\n    }\n\n    /**\n     * Register key event listeners.\n     */\n    registerKeyHandlers() {\n        CustomEvents.define(document, events);\n\n        // Register click events.\n        events.forEach((event) => {\n            component.addEventListener(event, this.keyHandler.bind(this));\n        });\n    }\n\n    /**\n     * Register input event listener for the text input area.\n     */\n    registerInputHandlers() {\n        // Register & handle the text input.\n        searchInput.addEventListener('input', debounce(async() => {\n            this.searchTerm = searchInput.value;\n            // We can also require a set amount of input before search.\n            if (this.searchTerm === '') {\n                this.toggleDropdown();\n                // Hide the \"clear\" search button in the search bar.\n                clearSearchButton.classList.add('d-none');\n            } else {\n                // Display the \"clear\" search button in the search bar.\n                clearSearchButton.classList.remove('d-none');\n                this.renderAndShow();\n            }\n        }, 300));\n    }\n\n    /**\n     * A combo method to take the matching fields and render out the results.\n     *\n     * @returns {Promise<void>}\n     */\n    async renderAndShow() {\n        // User has given something for us to filter against.\n        this.matchedResults = this.filterDataset();\n        // Replace the dropdown node contents and show the results.\n        await this.renderDropdown(\n            this.filterFunctionIndicator(\n                this.matchedResults.slice(0, 20),\n                selectOneLink(this.searchTerm),\n                this.searchTerm\n            )\n        );\n        // Set the dropdown to open.\n        this.toggleDropdown(true);\n    }\n\n    /**\n     * Filter the dataset to find if any of the fields include the string the user is searching for.\n     *\n     * @returns {Array} The results found for the given search term.\n     */\n    filterDataset() {\n        return this.filterFunction(dataset, this.searchTerm);\n    }\n\n    /**\n     * Build the content then replace the node.\n     *\n     * @param {Array} results The results of the dataset having its' matching indicators applied.\n     */\n    async renderDropdown(results) {\n        const {html, js} = await Templates.renderForPromise('gradereport_grader/search/resultset', {\n            users: results,\n            hasusers: results.length > 0,\n            total: dataset.length,\n            found: results.length,\n            searchterm: this.searchTerm,\n            selectall: selectAllResultsLink(this.searchTerm),\n        });\n        Templates.replaceNodeContents(searchDropdown, html, js);\n    }\n\n    /**\n     * When called, update the dropdown fields.\n     *\n     * @param {Boolean} on Flag to toggle hiding or showing values.\n     */\n    toggleDropdown(on = false) {\n        $(component).dropdown('toggle');\n        $searchButton.attr('aria-expanded', on);\n        if (on) {\n            searchDropdown.classList.add('show');\n            $(searchDropdown).show();\n        } else {\n            searchDropdown.classList.remove('show');\n            $(searchDropdown).hide();\n        }\n    }\n\n    /**\n     * Set the current focus either on the preceding or next result item.\n     *\n     * @param {Number} direction Is the user moving up or down the resultset?\n     * @param {Event} e The JS event from the event handler.\n     */\n    keyUpDown(direction, e) {\n        e.preventDefault();\n        // Stop Bootstrap from being clever.\n        e.stopPropagation();\n        // Current focus is on the input box so depending on direction, go to the top or the bottom of the displayed results.\n        if (document.activeElement === searchInput && this.resultNodes.length > 0) {\n            if (direction === UP) {\n                moveToLastNode(this.resultNodes);\n            } else {\n                moveToFirstNode(this.resultNodes);\n            }\n        }\n        const index = this.resultNodes.indexOf(this.currentNode);\n        if (this.currentNode) {\n            if (direction === UP) {\n                if (index === 0) {\n                    moveToLastNode(this.resultNodes);\n                } else {\n                    moveToNode(this.resultNodes, index - 1);\n                }\n            } else {\n                if (index + 1 >= this.resultNodes.length) {\n                    moveToFirstNode(this.resultNodes);\n                } else {\n                    moveToNode(this.resultNodes, index + 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * The handler for when a user interacts with the component.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     */\n    clickHandler(e) {\n        this.updateNodes();\n\n        // Prevent normal key presses activating this.\n        if (e.target.closest('.dropdown-item') && e.button === 0) {\n            window.location = e.target.closest('.dropdown-item').href;\n        }\n        if (e.target === this.currentViewAll && e.button === 0) {\n            window.location = selectAllResultsLink(this.searchTerm);\n        }\n        // The \"clear search\" button is triggered.\n        if (e.target.closest(selectors.clearSearch) && e.button === 0) {\n            this.closeSearch();\n            searchInput.focus({preventScroll: true});\n        }\n\n        // User may have accidentally clicked off the dropdown and wants to reopen it.\n        if (e.target.closest(selectors.input) && this.searchTerm !== '' && e.button === 0) {\n            this.renderAndShow();\n        }\n    }\n\n    /**\n     * The handler for when a user presses a key within the component.\n     *\n     * @param {Event} e The triggering event that we are working with.\n     */\n    keyHandler(e) {\n        this.updateNodes();\n\n        if (e.target === this.currentViewAll && (e.key === 'Enter' || e.key === 'Space')) {\n            window.location = selectAllResultsLink(this.searchTerm);\n        }\n\n        // Switch the key presses to handle keyboard nav.\n        switch (e.key) {\n            case 'ArrowUp':\n                this.keyUpDown(UP, e);\n                break;\n            case 'ArrowDown':\n                this.keyUpDown(DOWN, e);\n                break;\n            case 'Home':\n                e.preventDefault();\n                moveToFirstNode(this.resultNodes);\n                break;\n            case 'End':\n                e.preventDefault();\n                moveToLastNode(this.resultNodes);\n                break;\n            case 'Escape':\n                this.toggleDropdown();\n                searchInput.focus({preventScroll: true});\n                break;\n            case 'Enter':\n            case ' ':\n                if (document.activeElement === searchInput) {\n                    if (e.key === ' ') {\n                        break;\n                    } else {\n                        window.location = selectAllResultsLink(this.searchTerm);\n                        break;\n                    }\n                }\n                if (document.activeElement === clearSearchButton) {\n                    this.closeSearch();\n                    break;\n                }\n                e.preventDefault();\n                window.location = e.target.closest('.dropdown-item').href;\n                break;\n            case 'Tab':\n                // If the current focus is on clear search, then check if viewall exists then around tab to it.\n                if (e.target.closest(selectors.clearSearch)) {\n                    if (this.currentViewAll) {\n                        e.preventDefault();\n                        this.currentViewAll.focus({preventScroll: true});\n                    } else {\n                        this.closeSearch();\n                    }\n                }\n                // If the current focus is on the view all link, then close the widget then set focus on the next tert nav item.\n                if (e.target.closest(selectors.viewall)) {\n                    this.closeSearch();\n                }\n                break;\n        }\n    }\n}\n"],"names":["_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","_interopRequireDefault","obj","__esModule","default","_defineProperty","key","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_jquery","_custom_interaction_events","Templates","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","prototype","hasOwnProperty","desc","set","_interopRequireWildcard","_url","selectors","component","document","querySelector","courseID","dataset","courseid","searchInput","searchDropdown","$searchButton","$","clearSearchButton","events","CustomEvents","activate","keyboardActivate","selectNode","node","focus","preventScroll","scrollTop","offsetTop","clientHeight","moveToFirstNode","nodeArray","length","moveToLastNode","moveToNode","index","selectAllResultsLink","searchTerm","userID","arguments","params","id","searchvalue","userid","Url","relativeUrl","_exports","constructor","fetchFunc","filterFunc","filterMatchIndFunc","_component$querySelec","this","filterFunction","filterFunctionIndicator","fetchDataset","registerClickHandlers","registerKeyHandlers","registerInputHandlers","closeSearch","toggleDropdown","classList","add","updateNodes","resultNodes","querySelectorAll","currentNode","find","r","activeElement","currentViewAll","async","on","addEventListener","clickHandler","bind","e","target","closest","contains","define","forEach","event","keyHandler","debounce","remove","renderAndShow","matchedResults","filterDataset","renderDropdown","slice","results","html","js","renderForPromise","users","hasusers","total","found","searchterm","selectall","replaceNodeContents","dropdown","attr","show","hide","keyUpDown","direction","preventDefault","stopPropagation","indexOf","button","window","location","href"],"mappings":"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"}