{"version":3,"sources":["../../src/grades/grader.js"],"names":["templateNames","contentRegion","getContentForUserIdFunction","cmid","experimentalDisplayMode","userid","Repository","getDiscussionByUserID","then","context","discussions","map","discussionPostMapper","experimentaldisplaymode","Templates","render","catch","Notification","exception","getUsersForCmidFunction","groupID","CourseRepository","getUsersFromCourseModuleID","users","findGradableNode","node","closest","Selectors","gradableItem","discussion","parentMap","Map","posts","parentposts","forEach","post","set","id","userPosts","userposts","readonly","hasreplies","replies","parent","parentid","get","parentauthorname","author","fullname","launchWholeForumGrading","rootNode","focusOnClose","data","dataset","Grader","getGradingPanelFunctions","contextid","gradingComponent","gradingComponentSubtype","gradableItemtype","gradingPanelFunctions","group","launch","getter","setter","groupid","initialUserId","initialuserid","moduleName","name","courseName","courseUrl","courseId","sendStudentNotifications","launchViewGrading","view","registerLaunchListeners","document","addEventListener","e","target","matches","Error","gradableItems","wholeForum","preventDefault","viewGrade"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This module will tie together all of the different calls the gradable module will make.\n *\n * @module     mod_forum/grades/grader\n * @copyright  2019 Andrew Nicols <andrew@nicols.co.uk>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport * as Selectors from './grader/selectors';\nimport Repository from 'mod_forum/repository';\nimport Templates from 'core/templates';\nimport * as Grader from '../local/grades/grader';\nimport Notification from 'core/notification';\nimport CourseRepository from 'core_course/repository';\nimport {relativeUrl} from 'core/url';\n\nconst templateNames = {\n    contentRegion: 'mod_forum/grades/grader/discussion/posts',\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch a users content.\n *\n * @param {Number} cmid\n * @param {Bool} experimentalDisplayMode\n * @return {Function}\n */\nconst getContentForUserIdFunction = (cmid, experimentalDisplayMode) => (userid) => {\n    /**\n     * Given the parent function is called with the second param set execute the partially executed function.\n     *\n     * @param {Number} userid\n     */\n    return Repository.getDiscussionByUserID(userid, cmid)\n        .then(context => {\n            // Rebuild the returned data for the template.\n            context.discussions = context.discussions.map(discussionPostMapper);\n            context.experimentaldisplaymode = experimentalDisplayMode ? true : false;\n\n            return Templates.render(templateNames.contentRegion, context);\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Curried function with CMID set, this is then used in unified grader as a fetch users call.\n * The function curried fetches all users in a course for a given CMID.\n *\n * @param {Number} cmid\n * @param {Number} groupID\n * @return {Array} Array of users for a given context.\n */\nconst getUsersForCmidFunction = (cmid, groupID) => async() => {\n    const context = await CourseRepository.getUsersFromCourseModuleID(cmid, groupID);\n\n    return context.users;\n};\n\n\nconst findGradableNode = node => node.closest(Selectors.gradableItem);\n\n/**\n * For a discussion we need to manipulate it's posts to hide certain UI elements.\n *\n * @param {Object} discussion\n * @return {Array} name, id, posts\n */\nconst discussionPostMapper = (discussion) => {\n    // Map postid => post.\n    const parentMap = new Map();\n    discussion.posts.parentposts.forEach(post => parentMap.set(post.id, post));\n    const userPosts = discussion.posts.userposts.map(post => {\n        post.readonly = true;\n        post.hasreplies = false;\n        post.replies = [];\n\n        const parent = post.parentid ? parentMap.get(post.parentid) : null;\n        if (parent) {\n            parent.hasreplies = false;\n            parent.replies = [];\n            parent.readonly = true;\n            post.parentauthorname = parent.author.fullname;\n        }\n\n        return {\n            parent,\n            post\n        };\n    });\n\n    return {\n        ...discussion,\n        posts: userPosts,\n    };\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchWholeForumGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    const groupID = data.group ? data.group : 0;\n\n    await Grader.launch(\n        getUsersForCmidFunction(data.cmid, groupID),\n        getContentForUserIdFunction(data.cmid, data.experimentalDisplayMode == \"1\"),\n        gradingPanelFunctions.getter,\n        gradingPanelFunctions.setter,\n        {\n            groupid: data.groupid,\n            initialUserId: data.initialuserid,\n            moduleName: data.name,\n            courseName: data.courseName,\n            courseUrl: relativeUrl('/course/view.php', {id: data.courseId}),\n            sendStudentNotifications: data.sendStudentNotifications,\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Launch the Grader.\n *\n * @param {HTMLElement} rootNode the root HTML element describing what is to be graded\n * @param {object} param\n * @param {bool} [param.focusOnClose=null]\n */\nconst launchViewGrading = async(rootNode, {\n    focusOnClose = null,\n} = {}) => {\n    const data = rootNode.dataset;\n    const gradingPanelFunctions = await Grader.getGradingPanelFunctions(\n        'mod_forum',\n        data.contextid,\n        data.gradingComponent,\n        data.gradingComponentSubtype,\n        data.gradableItemtype\n    );\n\n    await Grader.view(\n        gradingPanelFunctions.getter,\n        data.userid,\n        data.name,\n        {\n            focusOnClose,\n        }\n    );\n};\n\n/**\n * Register listeners to launch the grading panel.\n */\nexport const registerLaunchListeners = () => {\n    document.addEventListener('click', async(e) => {\n        if (e.target.matches(Selectors.launch)) {\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchWholeForumGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n        if (e.target.matches(Selectors.viewGrade)) {\n            e.preventDefault();\n            const rootNode = findGradableNode(e.target);\n\n            if (!rootNode) {\n                throw Error('Unable to find a gradable item');\n            }\n\n            if (rootNode.matches(Selectors.gradableItems.wholeForum)) {\n                // Note: The preventDefault must be before any async function calls because the function becomes async\n                // at that point and the default action is implemented.\n                e.preventDefault();\n                try {\n                    await launchViewGrading(rootNode, {\n                        focusOnClose: e.target,\n                    });\n                } catch (error) {\n                    Notification.exception(error);\n                }\n            } else {\n                throw Error('Unable to find a valid gradable item');\n            }\n        }\n    });\n};\n"],"file":"grader.min.js"}