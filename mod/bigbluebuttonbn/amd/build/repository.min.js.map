{"version":3,"file":"repository.min.js","sources":["../src/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Repository to perform WS calls for mod_bigbluebuttonbn.\n *\n * @module      mod_bigbluebuttonbn/repository\n * @copyright   2021 Blindside Networks Inc\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {fetchOne} from 'core/fetch';\n\n/**\n * Fetch the list of recordings from the server.\n *\n * @param   {Number} bigbluebuttonbnid The instance ID\n * @param   {String} tools the set of tools to display\n * @param   {number} groupid\n * @returns {Promise}\n */\nexport const fetchRecordings = (bigbluebuttonbnid, tools, groupid) => {\n    const args = {\n        bigbluebuttonbnid,\n        tools,\n    };\n\n    if (groupid) {\n        args.groupid = groupid;\n    }\n\n    return fetchOne('mod_bigbluebuttonbn_get_recordings', args);\n};\n\n/**\n * Fetch the list of recordings from the server that can be imported.\n *\n * @param   {Number} destinationinstanceid The destination instance ID\n * @param   {Number} sourcebigbluebuttonbnid The original instance ID\n * @param   {Number} sourcecourseid The destination instance ID\n * @param   {String} tools the set of tools to display\n * @param   {number} groupid\n * @returns {Promise}\n */\nexport const fetchRecordingsToImport = (\n    destinationinstanceid,\n    sourcebigbluebuttonbnid,\n    sourcecourseid,\n    tools,\n    groupid\n) => {\n    const args = {\n        destinationinstanceid,\n        sourcebigbluebuttonbnid,\n        sourcecourseid,\n        tools,\n    };\n\n    if (groupid) {\n        args.groupid = groupid;\n    }\n\n    return fetchOne('mod_bigbluebuttonbn_get_recordings_to_import', args);\n};\n\n/**\n * Perform an update on a single recording.\n *\n * @param   {object} args The instance ID\n * @returns {Promise}\n */\nexport const updateRecording = (args) => fetchOne('mod_bigbluebuttonbn_update_recording', args);\n\n/**\n * End the Meeting\n *\n * @param {number} bigbluebuttonbnid\n * @param {number} groupid\n * @returns {Promise}\n */\nexport const endMeeting = (bigbluebuttonbnid, groupid) => fetchOne('mod_bigbluebuttonbn_end_meeting', {\n    bigbluebuttonbnid,\n    groupid\n});\n\n/**\n * Validate completion.\n *\n * @param {object} args\n * @returns {Promise}\n */\nexport const completionValidate = (args) => fetchOne('mod_bigbluebuttonbn_completion_validate', args);\n\n/**\n * Fetch meeting info for the specified meeting.\n *\n * @param {number} bigbluebuttonbnid\n * @param {number} groupid\n * @param {boolean} [updatecache=false]\n * @returns {Promise}\n */\nexport const getMeetingInfo = (bigbluebuttonbnid, groupid, updatecache = false) => fetchOne('mod_bigbluebuttonbn_meeting_info', {\n    bigbluebuttonbnid,\n    groupid,\n    updatecache,\n});\n"],"names":["_exports","fetchRecordings","bigbluebuttonbnid","tools","groupid","args","fetchOne","fetchRecordingsToImport","destinationinstanceid","sourcebigbluebuttonbnid","sourcecourseid","updateRecording","endMeeting","completionValidate","getMeetingInfo","updatecache","arguments","length","undefined"],"mappings":"sTA4CEA,SAAAC,gBAX6BA,CAACC,kBAAmBC,MAAOC,WACtD,MAAMC,KAAO,CACTH,oCACAC,aAOJ,OAJIC,UACAC,KAAKD,QAAUA,UAGZ,EAAAE,OAAQA,UAAC,qCAAsCD,KAAK,EAgC7DL,SAAAO,wBAnBqCA,CACnCC,sBACAC,wBACAC,eACAP,MACAC,WAEA,MAAMC,KAAO,CACTG,4CACAC,gDACAC,8BACAP,aAOJ,OAJIC,UACAC,KAAKD,QAAUA,UAGZ,EAAAE,OAAQA,UAAC,+CAAgDD,KAAK,EASuBL,SAAAW,gBAAhEN,OAAS,EAAAC,iBAAS,uCAAwCD,MAYvFL,SAAAY,WAHuBA,CAACV,kBAAmBE,WAAY,EAAAE,OAAAA,UAAS,kCAAmC,CAClGJ,oCACAE,kBASkGJ,SAAAa,mBAAnER,OAAS,EAAAC,iBAAS,0CAA2CD,MAc7FL,SAAAc,eAJ2B,SAACZ,kBAAmBE,SAAO,IAAEW,YAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAAQ,OAAK,EAAAV,OAAAA,UAAS,mCAAoC,CAC5HJ,oCACAE,gBACAW,yBACF,CAAC"}