{"version":3,"sources":["../src/repository.js"],"names":["bigbluebuttonbnid","tools","groupid","args","methodname","destinationinstanceid","sourcebigbluebuttonbnid","sourcecourseid","updatecache"],"mappings":"0VAiC+B,CAACA,iBAAD,CAAoBC,KAApB,CAA2BC,OAA3B,GAAuC,CAClE,KAAMC,CAAAA,IAAI,CAAG,CACTH,iBADS,CAETC,KAFS,CAAb,CAKA,GAAIC,OAAJ,CAAa,CACTC,IAAI,CAACD,OAAL,CAAeA,OAClB,CAED,MAAO,eAAU,CAAC,CAACE,UAAU,CAAE,oCAAb,CAAmDD,IAAnD,CAAD,CAAV,EAAsE,CAAtE,CACV,C,kCAYsC,CACnCE,qBADmC,CAEnCC,uBAFmC,CAGnCC,cAHmC,CAInCN,KAJmC,CAKnCC,OALmC,GAMlC,CACD,KAAMC,CAAAA,IAAI,CAAG,CACTE,qBADS,CAETC,uBAFS,CAGTC,cAHS,CAITN,KAJS,CAAb,CAOA,GAAIC,OAAJ,CAAa,CACTC,IAAI,CAACD,OAAL,CAAeA,OAClB,CAED,MAAO,eAAU,CAAC,CAACE,UAAU,CAAE,8CAAb,CAA6DD,IAA7D,CAAD,CAAV,EAAgF,CAAhF,CACV,C,0BAQ8BA,IAAI,EAAI,eAAU,CAC7C,CACIC,UAAU,CAAE,sCADhB,CAEID,IAFJ,CAD6C,CAAV,EAKpC,CALoC,C,qBAcb,CAACH,iBAAD,CAAoBE,OAApB,GAAgC,eAAU,CAChE,CACIE,UAAU,CAAE,iCADhB,CAEID,IAAI,CAAE,CACFH,iBADE,CAEFE,OAFE,CAFV,CADgE,CAAV,EAQvD,CARuD,C,6BAgBxBC,IAAI,EAAI,eAAU,CAChD,CACIC,UAAU,CAAE,yCADhB,CAEID,IAFJ,CADgD,CAAV,EAKvC,CALuC,C,yBAgBZ,SAACH,iBAAD,CAAoBE,OAApB,KAA6BM,CAAAA,WAA7B,iEAAqD,eAAU,CACzF,CACIJ,UAAU,CAAE,kCADhB,CAEID,IAAI,CAAE,CACFH,iBADE,CAEFE,OAFE,CAGFM,WAHE,CAFV,CADyF,CAAV,EAShF,CATgF,CAArD,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Repository to perform WS calls for mod_bigbluebuttonbn.\n *\n * @module      mod_bigbluebuttonbn/repository\n * @copyright   2021 Blindside Networks Inc\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\n\n/**\n * Fetch the list of recordings from the server.\n *\n * @param   {Number} bigbluebuttonbnid The instance ID\n * @param   {String} tools the set of tools to display\n * @param   {number} groupid\n * @returns {Promise}\n */\nexport const fetchRecordings = (bigbluebuttonbnid, tools, groupid) => {\n    const args = {\n        bigbluebuttonbnid,\n        tools,\n    };\n\n    if (groupid) {\n        args.groupid = groupid;\n    }\n\n    return fetchMany([{methodname: 'mod_bigbluebuttonbn_get_recordings', args}])[0];\n};\n\n/**\n * Fetch the list of recordings from the server that can be imported.\n *\n * @param   {Number} destinationinstanceid The destination instance ID\n * @param   {Number} sourcebigbluebuttonbnid The original instance ID\n * @param   {Number} sourcecourseid The destination instance ID\n * @param   {String} tools the set of tools to display\n * @param   {number} groupid\n * @returns {Promise}\n */\nexport const fetchRecordingsToImport = (\n    destinationinstanceid,\n    sourcebigbluebuttonbnid,\n    sourcecourseid,\n    tools,\n    groupid\n) => {\n    const args = {\n        destinationinstanceid,\n        sourcebigbluebuttonbnid,\n        sourcecourseid,\n        tools,\n    };\n\n    if (groupid) {\n        args.groupid = groupid;\n    }\n\n    return fetchMany([{methodname: 'mod_bigbluebuttonbn_get_recordings_to_import', args}])[0];\n};\n\n/**\n * Perform an update on a single recording.\n *\n * @param   {object} args The instance ID\n * @returns {Promise}\n */\nexport const updateRecording = args => fetchMany([\n    {\n        methodname: 'mod_bigbluebuttonbn_update_recording',\n        args,\n    }\n])[0];\n\n/**\n * End the Meeting\n *\n * @param {number} bigbluebuttonbnid\n * @param {number} groupid\n * @returns {Promise}\n */\nexport const endMeeting = (bigbluebuttonbnid, groupid) => fetchMany([\n    {\n        methodname: 'mod_bigbluebuttonbn_end_meeting',\n        args: {\n            bigbluebuttonbnid,\n            groupid\n        },\n    }\n])[0];\n\n/**\n * Validate completion.\n *\n * @param {object} args\n * @returns {Promise}\n */\nexport const completionValidate = args => fetchMany([\n    {\n        methodname: 'mod_bigbluebuttonbn_completion_validate',\n        args,\n    }\n])[0];\n\n\n/**\n * Fetch meeting info for the specified meeting.\n *\n * @param {number} bigbluebuttonbnid\n * @param {number} groupid\n * @param {boolean} [updatecache=false]\n * @returns {Promise}\n */\nexport const getMeetingInfo = (bigbluebuttonbnid, groupid, updatecache = false) => fetchMany([\n    {\n        methodname: 'mod_bigbluebuttonbn_meeting_info',\n        args: {\n            bigbluebuttonbnid,\n            groupid,\n            updatecache,\n        },\n    }\n])[0];\n"],"file":"repository.min.js"}