{"version":3,"sources":["../src/roomupdater.js"],"names":["timeout","updateCount","updateFactor","timerReference","timerRunning","resetValues","setTimeout","poll","stop","clearInterval","updateRoom","then","catch","updatecache","bbbRoomViewElement","document","getElementById","bbbId","dataset","groupId","data","haspresentations","presentations","length","Templates","renderForPromise","html","js","replaceNodeContents","displayException"],"mappings":"+RAuBA,mF,KAIMA,CAAAA,OAAO,CAAG,G,IAGZC,CAAAA,WAAW,CAAG,C,CACdC,YAAY,CAAG,C,CACfC,cAAc,CAAG,I,CACjBC,YAAY,G,MAEVC,CAAAA,WAAW,CAAG,IAAM,CACtBJ,WAAW,CAAG,CAAd,CACAC,YAAY,CAAG,CAClB,C,gBAKoB,IAAM,CACvBE,YAAY,GAAZ,CACAD,cAAc,CAAGG,UAAU,CAAC,IAAMC,IAAI,EAAX,CAAeP,OAAf,CAC9B,C,CAKM,KAAMQ,CAAAA,IAAI,CAAG,IAAM,CACtBJ,YAAY,GAAZ,CACA,GAAID,cAAJ,CAAoB,CAChBM,aAAa,CAACN,cAAD,CAAb,CACAA,cAAc,CAAG,IACpB,CAEDE,WAAW,EACd,CARM,C,wBAUDE,CAAAA,IAAI,CAAG,IAAM,CACf,GAAI,CAACH,YAAL,CAAmB,CAEf,MACH,CACD,GAAqC,CAAjC,EAACH,WAAW,CAAGC,YAAnB,CAAwC,CACpCQ,UAAU,IAAV,CACCC,IADD,CACM,IAAM,CACR,GAAIT,YAAY,EAzCV,EAyCN,CAA+B,CAC3BA,YAAY,CAAG,CAClB,CAFD,IAEO,CACHA,YAAY,EACf,CAIJ,CAVD,EAWCU,KAXD,GAYCD,IAZD,CAYM,IAAM,CACRR,cAAc,CAAGG,UAAU,CAAC,IAAMC,IAAI,EAAX,CAAeP,OAAf,CAE9B,CAfD,EAgBCY,KAhBD,EAiBH,CACJ,C,CAQYF,UAAU,CAAG,UAAyB,IAAxBG,CAAAA,WAAwB,gEACzCC,CAAAA,kBAAkB,CAAGC,QAAQ,CAACC,cAAT,CAAwB,eAAxB,CADoB,CAEzCC,KAAK,CAAGH,kBAAkB,CAACI,OAAnB,CAA2BD,KAFM,CAGzCE,OAAO,CAAGL,kBAAkB,CAACI,OAAnB,CAA2BC,OAHI,CAI/C,MAAO,+BAAeF,KAAf,CAAsBE,OAAtB,CAA+BN,WAA/B,EACFF,IADE,CACGS,IAAI,EAAI,CAEVA,IAAI,CAACC,gBAAL,IACA,GAAID,IAAI,CAACE,aAAL,EAAsBF,IAAI,CAACE,aAAL,CAAmBC,MAA7C,CAAqD,CACjDH,IAAI,CAACC,gBAAL,GACH,CACD,MAAOG,oBAAUC,gBAAV,CAA2B,+BAA3B,CAA4DL,IAA5D,CACV,CARE,EASFT,IATE,CASG,UAAC,CAACe,IAAD,CAAOC,EAAP,CAAD,YAAgBH,oBAAUI,mBAAV,CAA8Bd,kBAA9B,CAAkDY,IAAlD,CAAwDC,EAAxD,CAAhB,CATH,EAUFf,KAVE,CAUIiB,uBAVJ,CAWV,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JS room updater.\n *\n * @module      mod_bigbluebuttonbn/roomupdater\n * @copyright   2021 Blindside Networks Inc\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from \"core/templates\";\nimport {exception as displayException} from 'core/notification';\nimport {getMeetingInfo} from './repository';\n\nconst timeout = 1000;\nconst maxFactor = 10;\n\nlet updateCount = 0;\nlet updateFactor = 1;\nlet timerReference = null;\nlet timerRunning = false;\n\nconst resetValues = () => {\n    updateCount = 0;\n    updateFactor = 1;\n};\n\n/**\n * Start the information poller.\n */\nexport const start = () => {\n    timerRunning = true;\n    timerReference = setTimeout(() => poll(), timeout);\n};\n\n/**\n * Stop the room updater.\n */\nexport const stop = () => {\n    timerRunning = false;\n    if (timerReference) {\n        clearInterval(timerReference);\n        timerReference = null;\n    }\n\n    resetValues();\n};\n\nconst poll = () => {\n    if (!timerRunning) {\n        // The poller has been stopped.\n        return;\n    }\n    if ((updateCount % updateFactor) === 0) {\n        updateRoom(true)\n        .then(() => {\n            if (updateFactor >= maxFactor) {\n                updateFactor = 1;\n            } else {\n                updateFactor++;\n            }\n\n            return;\n\n        })\n        .catch()\n        .then(() => {\n            timerReference = setTimeout(() => poll(), timeout);\n            return;\n        })\n        .catch();\n    }\n};\n\n/**\n * Update the room information.\n *\n * @param {boolean} [updatecache=false]\n * @returns {Promise}\n */\nexport const updateRoom = (updatecache = false) => {\n    const bbbRoomViewElement = document.getElementById('bbb-room-view');\n    const bbbId = bbbRoomViewElement.dataset.bbbId;\n    const groupId = bbbRoomViewElement.dataset.groupId;\n    return getMeetingInfo(bbbId, groupId, updatecache)\n        .then(data => {\n            // Just make sure we have the right information for the template.\n            data.haspresentations = false;\n            if (data.presentations && data.presentations.length) {\n                data.haspresentations = true;\n            }\n            return Templates.renderForPromise('mod_bigbluebuttonbn/room_view', data);\n        })\n        .then(({html, js}) => Templates.replaceNodeContents(bbbRoomViewElement, html, js))\n        .catch(displayException);\n};\n"],"file":"roomupdater.min.js"}