{"version":3,"file":"drawers.min.js","sources":["../src/drawers.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Toggling the visibility of the secondary navigation on mobile.\n *\n * @module     theme_boost/drawers\n * @copyright  2021 Bas Brands\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport ModalBackdrop from 'core/modal_backdrop';\nimport Templates from 'core/templates';\nimport * as Aria from 'core/aria';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {debounce} from 'core/utils';\nimport Pending from 'core/pending';\n// The jQuery module is only used for interacting with Boostrap 4. It can we removed when MDL-71979 is integrated.\nimport jQuery from 'jquery';\n\nlet backdropPromise = null;\n\nconst drawerMap = new Map();\n\nconst SELECTORS = {\n    BUTTONS: '[data-toggler=\"drawers\"]',\n    CLOSEBTN: '[data-toggler=\"drawers\"][data-action=\"closedrawer\"]',\n    OPENBTN: '[data-toggler=\"drawers\"][data-action=\"opendrawer\"]',\n    TOGGLEBTN: '[data-toggler=\"drawers\"][data-action=\"toggle\"]',\n    DRAWERS: '[data-region=\"fixed-drawer\"]',\n    CONTAINER: '#page.drawers',\n    DRAWERCONTENT: '.drawercontent',\n};\n\nconst CLASSES = {\n    SCROLLED: 'scrolled',\n    SHOW: 'show',\n    NOTINITIALISED: 'not-initialized',\n};\n\n/**\n * Maximum sizes for breakpoints. This needs to correspond with Bootstrap\n * Breakpoints\n *\n * @private\n */\nconst sizes = {\n    medium: 991,\n    large: 1400\n};\n\n/**\n * Get the current body width.\n *\n * @returns {number} the current body width.\n * @private\n */\nconst getCurrentWidth = () => {\n    const DomRect = document.body.getBoundingClientRect();\n    return DomRect.x + DomRect.width;\n};\n\n/**\n * Check if the user uses a small size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.medium max size.\n * @private\n */\nconst isSmall = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth < sizes.medium;\n};\n\n/**\n * Check if the user uses a large size browser.\n *\n * @returns {boolean} true if the body is smaller than sizes.large max size.\n * @private\n */\nconst isLarge = () => {\n    const browserWidth = getCurrentWidth();\n    return browserWidth >= sizes.large;\n};\n\n/**\n * Add a backdrop to the page.\n *\n * @returns {Promise} rendering of modal backdrop.\n * @private\n */\nconst getBackdrop = () => {\n    if (!backdropPromise) {\n        backdropPromise = Templates.render('core/modal_backdrop', {})\n        .then(html => new ModalBackdrop(html))\n        .then(modalBackdrop => {\n            modalBackdrop.getAttachmentPoint().get(0).addEventListener('click', e => {\n                e.preventDefault();\n                Drawers.closeAllDrawers();\n            });\n            return modalBackdrop;\n        })\n        .catch();\n    }\n    return backdropPromise;\n};\n\n/**\n * Get the button element to open a specific drawer.\n *\n * @param {String} drawerId the drawer element Id\n * @return {HTMLElement|undefined} the open button element\n * @private\n */\nconst getDrawerOpenButton = (drawerId) => {\n    let openButton = document.querySelector(`${SELECTORS.OPENBTN}[data-target=\"${drawerId}\"]`);\n    if (!openButton) {\n        openButton = document.querySelector(`${SELECTORS.TOGGLEBTN}[data-target=\"${drawerId}\"]`);\n    }\n    return openButton;\n};\n\n/**\n * Disable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst disableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        disableButtonTooltip(button);\n    });\n};\n\n/**\n * Disable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @param {boolean} enableOnBlur if the tooltip must be re-enabled on blur.\n * @private\n */\nconst disableButtonTooltip = (button, enableOnBlur) => {\n    if (button.hasAttribute('data-original-title')) {\n        // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n        jQuery(button).tooltip('disable');\n        button.setAttribute('title', button.dataset.originalTitle);\n    } else {\n        button.dataset.disabledToggle = button.dataset.toggle;\n        button.removeAttribute('data-toggle');\n    }\n    if (enableOnBlur) {\n        button.dataset.restoreTooltipOnBlur = true;\n    }\n};\n\n/**\n * Enable drawer tooltips.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst enableDrawerTooltips = (drawerNode) => {\n    const buttons = [\n        drawerNode.querySelector(SELECTORS.CLOSEBTN),\n        getDrawerOpenButton(drawerNode.id),\n    ];\n    buttons.forEach(button => {\n        if (!button) {\n            return;\n        }\n        enableButtonTooltip(button);\n    });\n};\n\n/**\n * Enable the button tooltips.\n *\n * @param {HTMLElement} button the button element\n * @private\n */\nconst enableButtonTooltip = (button) => {\n    // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n    if (button.hasAttribute('data-original-title')) {\n        jQuery(button).tooltip('enable');\n        button.removeAttribute('title');\n    } else if (button.dataset.disabledToggle) {\n        button.dataset.toggle = button.dataset.disabledToggle;\n        jQuery(button).tooltip();\n    }\n    delete button.dataset.restoreTooltipOnBlur;\n};\n\n/**\n * Add scroll listeners to a drawer element.\n *\n * @param {HTMLElement} drawerNode the drawer main node\n * @private\n */\nconst addInnerScrollListener = (drawerNode) => {\n    const content = drawerNode.querySelector(SELECTORS.DRAWERCONTENT);\n    if (!content) {\n        return;\n    }\n    content.addEventListener(\"scroll\", () => {\n        drawerNode.classList.toggle(\n            CLASSES.SCROLLED,\n            content.scrollTop != 0\n        );\n    });\n};\n\n/**\n * The Drawers class is used to control on-screen drawer elements.\n *\n * It handles opening, and closing of drawer elements, as well as more detailed behaviours such as closing a drawer when\n * another drawer is opened, and supports closing a drawer when the screen is resized.\n *\n * Drawers are instantiated on page load, and can also be toggled lazily when toggling any drawer toggle, open button,\n * or close button.\n *\n * A range of show and hide events are also dispatched as detailed in the class\n * {@link module:theme_boost/drawers#eventTypes eventTypes} object.\n *\n * @example <caption>Standard usage</caption>\n *\n * // The module just needs to be included to add drawer support.\n * import 'theme_boost/drawers';\n *\n * @example <caption>Manually open or close any drawer</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * const myDrawer = Drawers.getDrawerInstanceForNode(document.querySelector('.myDrawerNode');\n * myDrawer.closeDrawer();\n *\n * @example <caption>Listen to the before show event and cancel it</caption>\n *\n * import Drawers from 'theme_boost/drawers';\n *\n * document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n *     // The drawer which will be shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n *\n *     // Prevent this drawer from being shown.\n *     e.preventDefault();\n * });\n *\n * @example <caption>Listen to the shown event</caption>\n *\n * document.addEventListener(Drawers.eventTypes.drawerShown, e => {\n *     // The drawer which was shown.\n *     window.console.log(e.target);\n *\n *     // The instance of the Drawers class for this drawer.\n *     window.console.log(e.detail.drawerInstance);\n * });\n */\nexport default class Drawers {\n    /**\n     * The underlying HTMLElement which is controlled.\n     */\n    drawerNode = null;\n\n    constructor(drawerNode) {\n        this.drawerNode = drawerNode;\n\n        if (isSmall()) {\n            this.closeDrawer({focusOnOpenButton: false, updatePreferences: false});\n        }\n\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n            this.openDrawer({focusOnCloseButton: false});\n        } else if (this.drawerNode.dataset.forceopen == 1) {\n            if (!isSmall()) {\n                this.openDrawer({focusOnCloseButton: false});\n            }\n        } else {\n            Aria.hide(this.drawerNode);\n        }\n\n        // Disable tooltips in small screens.\n        if (isSmall()) {\n            disableDrawerTooltips(this.drawerNode);\n        }\n\n        addInnerScrollListener(this.drawerNode);\n\n        drawerMap.set(drawerNode, this);\n\n        drawerNode.classList.remove(CLASSES.NOTINITIALISED);\n    }\n\n    /**\n     * Whether the drawer is open.\n     *\n     * @returns {boolean}\n     */\n    get isOpen() {\n        return this.drawerNode.classList.contains(CLASSES.SHOW);\n    }\n\n    /**\n     * Whether the drawer should close when the window is resized\n     *\n     * @returns {boolean}\n     */\n    get closeOnResize() {\n        return !!parseInt(this.drawerNode.dataset.closeOnResize);\n    }\n\n    /**\n     * The list of event types.\n     *\n     * @static\n     * @property {String} drawerShow See {@link event:theme_boost/drawers:show}\n     * @property {String} drawerShown See {@link event:theme_boost/drawers:shown}\n     * @property {String} drawerHide See {@link event:theme_boost/drawers:hide}\n     * @property {String} drawerHidden See {@link event:theme_boost/drawers:hidden}\n     */\n    static eventTypes = {\n        /**\n         * An event triggered before a drawer is shown.\n         *\n         * @event theme_boost/drawers:show\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be opened.\n         */\n        drawerShow: 'theme_boost/drawers:show',\n\n        /**\n         * An event triggered after a drawer is shown.\n         *\n         * @event theme_boost/drawers:shown\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be opened.\n         */\n        drawerShown: 'theme_boost/drawers:shown',\n\n        /**\n         * An event triggered before a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hide\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that will be hidden.\n         */\n        drawerHide: 'theme_boost/drawers:hide',\n\n        /**\n         * An event triggered after a drawer is hidden.\n         *\n         * @event theme_boost/drawers:hidden\n         * @type {CustomEvent}\n         * @property {HTMLElement} target The drawer that was be hidden.\n         */\n        drawerHidden: 'theme_boost/drawers:hidden',\n    };\n\n\n    /**\n     * Get the drawer instance for the specified node\n     *\n     * @param {HTMLElement} drawerNode\n     * @returns {module:theme_boost/drawers}\n     */\n    static getDrawerInstanceForNode(drawerNode) {\n        if (!drawerMap.has(drawerNode)) {\n            new Drawers(drawerNode);\n        }\n\n        return drawerMap.get(drawerNode);\n    }\n\n    /**\n     * Dispatch a drawer event.\n     *\n     * @param {string} eventname the event name\n     * @param {boolean} cancelable if the event is cancelable\n     * @returns {CustomEvent} the resulting custom event\n     */\n    dispatchEvent(eventname, cancelable = false) {\n        return dispatchEvent(\n            eventname,\n            {\n                drawerInstance: this,\n            },\n            this.drawerNode,\n            {\n                cancelable,\n            }\n        );\n    }\n\n    /**\n     * Open the drawer.\n     *\n     * By default, openDrawer sets the page focus to the close drawer button. However, when a drawer is open at page\n     * load, this represents an accessibility problem as the initial focus changes without any user interaction. The\n     * focusOnCloseButton parameter can be set to false to prevent this behaviour.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnCloseButton=true] Whether to alter page focus when opening the drawer\n     */\n    openDrawer({focusOnCloseButton = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:open');\n        const showEvent = this.dispatchEvent(Drawers.eventTypes.drawerShow, true);\n        if (showEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button while the drawer is showing to prevent glitchy effects.\n        this.drawerNode.querySelector(SELECTORS.CLOSEBTN)?.classList.toggle('hidden', true);\n\n        // Remove open tooltip if still visible.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton && openButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(openButton)?.tooltip('hide');\n        }\n\n        Aria.unhide(this.drawerNode);\n        this.drawerNode.classList.add(CLASSES.SHOW);\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && !isSmall() && (this.drawerNode.dataset.forceopen != 1)) {\n            M.util.set_user_preference(preference, true);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.add(state);\n        }\n\n        if (isSmall()) {\n            getBackdrop().then(backdrop => {\n                backdrop.show();\n\n                const pageWrapper = document.getElementById('page');\n                pageWrapper.style.overflow = 'hidden';\n                return backdrop;\n            })\n            .catch();\n        }\n\n        // Show close button once the drawer is fully opened.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        if (focusOnCloseButton && closeButton) {\n            disableButtonTooltip(closeButton, true);\n        }\n        setTimeout(() => {\n            closeButton.classList.toggle('hidden', false);\n            if (focusOnCloseButton) {\n                closeButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerShown);\n    }\n\n    /**\n     * Close the drawer.\n     *\n     * @param {object} args\n     * @param {boolean} [args.focusOnOpenButton=true] Whether to alter page focus when opening the drawer\n     * @param {boolean} [args.updatePreferences=true] Whether to update the user prewference\n     */\n    closeDrawer({focusOnOpenButton = true, updatePreferences = true} = {}) {\n\n        const pendingPromise = new Pending('theme_boost/drawers:close');\n\n        const hideEvent = this.dispatchEvent(Drawers.eventTypes.drawerHide, true);\n        if (hideEvent.defaultPrevented) {\n            return;\n        }\n\n        // Hide close button while the drawer is hiding to prevent glitchy effects.\n        const closeButton = this.drawerNode.querySelector(SELECTORS.CLOSEBTN);\n        closeButton?.classList.toggle('hidden', true);\n        // Remove the close button tooltip if visible.\n        if (closeButton.hasAttribute('data-original-title')) {\n            // The jQuery is still used in Boostrap 4. It can we removed when MDL-71979 is integrated.\n            jQuery(closeButton)?.tooltip('hide');\n        }\n\n        const preference = this.drawerNode.dataset.preference;\n        if (preference && updatePreferences && !isSmall()) {\n            M.util.set_user_preference(preference, false);\n        }\n\n        const state = this.drawerNode.dataset.state;\n        if (state) {\n            const page = document.getElementById('page');\n            page.classList.remove(state);\n        }\n\n        Aria.hide(this.drawerNode);\n        this.drawerNode.classList.remove(CLASSES.SHOW);\n\n        getBackdrop().then(backdrop => {\n            backdrop.hide();\n\n            if (isSmall()) {\n                const pageWrapper = document.getElementById('page');\n                pageWrapper.style.overflow = 'auto';\n            }\n            return backdrop;\n        })\n        .catch();\n\n        // Move focus to the open drawer (or toggler) button once the drawer is hidden.\n        let openButton = getDrawerOpenButton(this.drawerNode.id);\n        if (openButton) {\n            disableButtonTooltip(openButton, true);\n        }\n        setTimeout(() => {\n            if (openButton && focusOnOpenButton) {\n                openButton.focus();\n            }\n            pendingPromise.resolve();\n        }, 300);\n\n        this.dispatchEvent(Drawers.eventTypes.drawerHidden);\n    }\n\n    /**\n     * Toggle visibility of the drawer.\n     */\n    toggleVisibility() {\n        if (this.drawerNode.classList.contains(CLASSES.SHOW)) {\n            this.closeDrawer();\n        } else {\n            this.openDrawer();\n        }\n    }\n\n    /**\n     * Close all drawers.\n     */\n    static closeAllDrawers() {\n        drawerMap.forEach(drawerInstance => {\n            drawerInstance.closeDrawer();\n        });\n    }\n\n    /**\n     * Close all drawers except for the specified drawer.\n     *\n     * @param {module:theme_boost/drawers} comparisonInstance\n     */\n    static closeOtherDrawers(comparisonInstance) {\n        drawerMap.forEach(drawerInstance => {\n            if (drawerInstance === comparisonInstance) {\n                return;\n            }\n\n            drawerInstance.closeDrawer();\n        });\n    }\n}\n\n/**\n * Activate the scroller helper for the drawer layout.\n *\n * @private\n */\nconst scroller = () => {\n    const body = document.querySelector('body');\n    const drawerLayout = document.querySelector(SELECTORS.CONTAINER);\n    if (drawerLayout) {\n        drawerLayout.addEventListener(\"scroll\", () => {\n            if (drawerLayout.scrollTop >= window.innerHeight) {\n                body.classList.add(CLASSES.SCROLLED);\n            } else {\n                body.classList.remove(CLASSES.SCROLLED);\n            }\n        });\n    }\n};\n\n/**\n * Set the last used attribute for the last used toggle button for a drawer.\n *\n * @param {object} toggleButton The clicked button.\n */\nconst setLastUsedToggle = (toggleButton) => {\n    if (toggleButton.dataset.target) {\n        document.querySelectorAll(`${SELECTORS.BUTTONS}[data-target=\"${toggleButton.dataset.target}\"]`)\n        .forEach(btn => {\n            btn.dataset.lastused = false;\n        });\n        toggleButton.dataset.lastused = true;\n    }\n};\n\n/**\n * Set the focus to the last used button to open this drawer.\n * @param {string} target The drawer target.\n */\nconst focusLastUsedToggle = (target) => {\n    const lastUsedButton = document.querySelector(`${SELECTORS.BUTTONS}[data-target=\"${target}\"][data-lastused=\"true\"`);\n    if (lastUsedButton) {\n        lastUsedButton.focus();\n    }\n};\n\n/**\n * Register the event listeners for the drawer.\n *\n * @private\n */\nconst registerListeners = () => {\n    // Listen for show/hide events.\n    document.addEventListener('click', e => {\n        const toggleButton = e.target.closest(SELECTORS.TOGGLEBTN);\n        if (toggleButton && toggleButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(toggleButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.toggleVisibility();\n        }\n\n        const openDrawerButton = e.target.closest(SELECTORS.OPENBTN);\n        if (openDrawerButton && openDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(openDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n            setLastUsedToggle(toggleButton);\n\n            drawerInstance.openDrawer();\n        }\n\n        const closeDrawerButton = e.target.closest(SELECTORS.CLOSEBTN);\n        if (closeDrawerButton && closeDrawerButton.dataset.target) {\n            e.preventDefault();\n            const targetDrawer = document.getElementById(closeDrawerButton.dataset.target);\n            const drawerInstance = Drawers.getDrawerInstanceForNode(targetDrawer);\n\n            drawerInstance.closeDrawer();\n            focusLastUsedToggle(closeDrawerButton.dataset.target);\n        }\n    });\n\n    // Close drawer when another drawer opens.\n    document.addEventListener(Drawers.eventTypes.drawerShow, e => {\n        if (isLarge()) {\n            return;\n        }\n        Drawers.closeOtherDrawers(e.detail.drawerInstance);\n    });\n\n    // Tooglers and openers blur listeners.\n    const btnSelector = `${SELECTORS.TOGGLEBTN}, ${SELECTORS.OPENBTN}, ${SELECTORS.CLOSEBTN}`;\n    document.addEventListener('focusout', (e) => {\n        const button = e.target.closest(btnSelector);\n        if (button?.dataset.restoreTooltipOnBlur !== undefined) {\n            enableButtonTooltip(button);\n        }\n    });\n\n    const closeOnResizeListener = () => {\n        if (isSmall()) {\n            let anyOpen = false;\n            drawerMap.forEach(drawerInstance => {\n                disableDrawerTooltips(drawerInstance.drawerNode);\n                if (drawerInstance.isOpen) {\n                    if (drawerInstance.closeOnResize) {\n                        drawerInstance.closeDrawer();\n                    } else {\n                        anyOpen = true;\n                    }\n                }\n            });\n\n            if (anyOpen) {\n                getBackdrop().then(backdrop => backdrop.show()).catch();\n            }\n        } else {\n            drawerMap.forEach(drawerInstance => {\n                enableDrawerTooltips(drawerInstance.drawerNode);\n            });\n            getBackdrop().then(backdrop => backdrop.hide()).catch();\n        }\n    };\n\n    window.addEventListener('resize', debounce(closeOnResizeListener, 400));\n};\n\nscroller();\nregisterListeners();\n\nconst drawers = document.querySelectorAll(SELECTORS.DRAWERS);\ndrawers.forEach(drawerNode => Drawers.getDrawerInstanceForNode(drawerNode));\n"],"names":["_modal_backdrop","_interopRequireDefault","_templates","Aria","_interopRequireWildcard","_pending","_jquery","backdropPromise","drawerMap","Map","SELECTORS","CLASSES","sizes","getCurrentWidth","DomRect","document","body","getBoundingClientRect","x","width","isSmall","getBackdrop","Templates","render","then","html","ModalBackdrop","modalBackdrop","getAttachmentPoint","get","addEventListener","e","preventDefault","Drawers","closeAllDrawers","catch","getDrawerOpenButton","drawerId","openButton","querySelector","disableDrawerTooltips","drawerNode","id","forEach","button","disableButtonTooltip","enableOnBlur","hasAttribute","default","tooltip","setAttribute","dataset","originalTitle","disabledToggle","toggle","removeAttribute","restoreTooltipOnBlur","enableButtonTooltip","constructor","_defineProperty","this","closeDrawer","focusOnOpenButton","updatePreferences","classList","contains","openDrawer","focusOnCloseButton","forceopen","hide","content","scrollTop","addInnerScrollListener","set","remove","isOpen","closeOnResize","parseInt","getDrawerInstanceForNode","has","dispatchEvent","eventname","cancelable","_event_dispatcher","drawerInstance","_this$drawerNode$quer","pendingPromise","Pending","showEvent","eventTypes","drawerShow","defaultPrevented","_jQuery","unhide","add","preference","M","util","set_user_preference","state","getElementById","backdrop","show","style","overflow","closeButton","setTimeout","focus","resolve","drawerShown","hideEvent","drawerHide","_jQuery2","drawerHidden","toggleVisibility","static","closeOtherDrawers","comparisonInstance","scroller","setLastUsedToggle","toggleButton","target","querySelectorAll","concat","btn","lastused","drawerLayout","window","innerHeight","closest","targetDrawer","openDrawerButton","closeDrawerButton","lastUsedButton","focusLastUsedToggle","detail","btnSelector","undefined","closeOnResizeListener","anyOpen","registerListeners"],"mappings":"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"}